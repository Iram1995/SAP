
// Type: SAP2012.Calc2012




using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using SAP2012.My;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;

namespace SAP2012
{
  public class Calc2012
  {
    private List<Calc2012.RadiationValues> MonthlyRadiationValues;
    private bool _SEDBUKStorageCombi;
    private SAP_Module.Dwelling _House;
    public OccupancyAssessmentClasses OccupancyData;
    public bool OccupancyCalc;
    public bool StandardOccupancyCalc;
    public bool TemperatureCalc;
    public SAP_Module.Dwelling OriginalSAPDwelling;
    private object SEDBUKFound_OA;
    private object SEDBUKFound2_OA;
    private Box2012 _Calc;
    public bool CalcComplete;
    private object SEDBUKFound;
    private object SEDBUKFound2;
    private PCDF.Table4a_B SAPHeating;
    private PCDF.Table4a_B SAPHeating2;
    private PCDF.Table4aWater WaterHeating;
    private double HT;
    private double Responsive;
    private double HT2;
    private double Responsive2;
    private string _MainFuel;
    private string _SecFuel;
    private string _WaterFuel;
    private string _SecMainHeating;
    public AdditionalVariables2012 _Add_Variable;
    public bool DTER;
    public bool _TER;
    public bool IsFabricEfficiency;
    public bool IsHeatDemand;
    public bool DontRedimIt;
    public bool IsRHICalc;
    private double _Box373_LessZero;
    public bool _MissBox61;
    public bool CalcAssessmentLZCPlease;
    public bool ImproveJ;
    private string ErrorMessage;
    private PCDF.RegionalData RegionalURow;
    private PCDF.RegionalData RegionalURowCooling;
    public bool IsEneCalc;
    public bool ForFGHRSCalc;
    public bool IsForRhiCalc;

    public Calc2012()
    {
      this.MonthlyRadiationValues = new List<Calc2012.RadiationValues>();
      this.OccupancyCalc = false;
      this.StandardOccupancyCalc = false;
      this.TemperatureCalc = false;
      this.SEDBUKFound_OA = (object) null;
      this.SEDBUKFound2_OA = (object) null;
      this._Calc = new Box2012();
      this.SEDBUKFound = (object) null;
      this.SEDBUKFound2 = (object) null;
      this._Add_Variable = new AdditionalVariables2012();
    }

    public object SETPCDF(PCDF _pcdf)
    {
      SAP_Module.PCDFData = _pcdf;
      object obj;
      return obj;
    }

    public static PCDF.SEDBUK SEDBUK(string ID) => SAP_Module.PCDFData.Boilers.Where<PCDF.SEDBUK>((Func<PCDF.SEDBUK, bool>) (b => Operators.CompareString(b.ID, ID, false) == 0)).SingleOrDefault<PCDF.SEDBUK>() ?? SAP_Module.PCDFData.Boilers_Illustrative.Where<PCDF.SEDBUK>((Func<PCDF.SEDBUK, bool>) (b => Operators.CompareString(b.ID, ID, false) == 0)).SingleOrDefault<PCDF.SEDBUK>();

    private PCDF.SEDBUK_Solid SEDBUK_Solid(string ID) => SAP_Module.PCDFData.Solid_Boilers.Where<PCDF.SEDBUK_Solid>((Func<PCDF.SEDBUK_Solid, bool>) (b => Operators.CompareString(b.ID, ID, false) == 0)).SingleOrDefault<PCDF.SEDBUK_Solid>() ?? SAP_Module.PCDFData.Solid_Boilers_Illustrative.Where<PCDF.SEDBUK_Solid>((Func<PCDF.SEDBUK_Solid, bool>) (b => Operators.CompareString(b.ID, ID, false) == 0)).SingleOrDefault<PCDF.SEDBUK_Solid>();

    private PCDF.WarmAir SEDBUK_Warm(string ID) => SAP_Module.PCDFData.WarmAirs.Where<PCDF.WarmAir>((Func<PCDF.WarmAir, bool>) (b => Operators.CompareString(b.ID, ID, false) == 0)).SingleOrDefault<PCDF.WarmAir>();

    public static PCDF.CHP SEDBUK_CHP(string ID) => SAP_Module.PCDFData.CHPs.Where<PCDF.CHP>((Func<PCDF.CHP, bool>) (b => Operators.CompareString(b.ID, ID, false) == 0)).SingleOrDefault<PCDF.CHP>() ?? SAP_Module.PCDFData.CHPs_Illustrative.Where<PCDF.CHP>((Func<PCDF.CHP, bool>) (b => Operators.CompareString(b.ID, ID, false) == 0)).SingleOrDefault<PCDF.CHP>();

    public List<PCDF.CHP_Sub> SEDBUK_CHP_Sub(string ID)
    {
      List<PCDF.CHP_Sub> list = SAP_Module.PCDFData.CHPs_Sub.Where<PCDF.CHP_Sub>((Func<PCDF.CHP_Sub, bool>) (b => Operators.CompareString(b.ID, ID, false) == 0)).ToList<PCDF.CHP_Sub>();
      if (list.Count == 0)
        list = SAP_Module.PCDFData.CHPs_Sub_Illustrative.Where<PCDF.CHP_Sub>((Func<PCDF.CHP_Sub, bool>) (b => Operators.CompareString(b.ID, ID, false) == 0)).ToList<PCDF.CHP_Sub>();
      return list;
    }

    public static PCDF.HeatPump SEDBUK_HeatPump(string ID) => SAP_Module.PCDFData.HeatPumps.Where<PCDF.HeatPump>((Func<PCDF.HeatPump, bool>) (b => Operators.CompareString(b.ID, ID, false) == 0)).SingleOrDefault<PCDF.HeatPump>() ?? SAP_Module.PCDFData.HeatPumps_Illustrative.Where<PCDF.HeatPump>((Func<PCDF.HeatPump, bool>) (b => Operators.CompareString(b.ID, ID, false) == 0)).SingleOrDefault<PCDF.HeatPump>();

    public List<PCDF.HeatPump_Sub> SEDBUK_HeatPump_Sub(string ID)
    {
      List<PCDF.HeatPump_Sub> list = SAP_Module.PCDFData.HeatPumps_Sub.Where<PCDF.HeatPump_Sub>((Func<PCDF.HeatPump_Sub, bool>) (b => Operators.CompareString(b.ID, ID, false) == 0)).ToList<PCDF.HeatPump_Sub>();
      if (list.Count == 0)
        list = SAP_Module.PCDFData.HeatPumps_Sub_Illustrative.Where<PCDF.HeatPump_Sub>((Func<PCDF.HeatPump_Sub, bool>) (b => Operators.CompareString(b.ID, ID, false) == 0)).ToList<PCDF.HeatPump_Sub>();
      return list;
    }

    public PCDF.FGHRS FGHRS(string ID) => SAP_Module.PCDFData.FGHRSs.Where<PCDF.FGHRS>((Func<PCDF.FGHRS, bool>) (b => Operators.CompareString(b.ID, ID, false) == 0)).SingleOrDefault<PCDF.FGHRS>() ?? SAP_Module.PCDFData.FGHRSs_Illustrative.Where<PCDF.FGHRS>((Func<PCDF.FGHRS, bool>) (b => Operators.CompareString(b.ID, ID, false) == 0)).SingleOrDefault<PCDF.FGHRS>();

    public List<PCDF.FGHRS_Sub> FGHRS_Sub(string ID)
    {
      List<PCDF.FGHRS_Sub> list = SAP_Module.PCDFData.FGHRSs_Sub.Where<PCDF.FGHRS_Sub>((Func<PCDF.FGHRS_Sub, bool>) (b => Operators.CompareString(b.ID, ID, false) == 0)).ToList<PCDF.FGHRS_Sub>();
      if (list.Count == 0)
        list = SAP_Module.PCDFData.FGHRSs_Sub_Illustrative.Where<PCDF.FGHRS_Sub>((Func<PCDF.FGHRS_Sub, bool>) (b => Operators.CompareString(b.ID, ID, false) == 0)).ToList<PCDF.FGHRS_Sub>();
      return list;
    }

    public PCDF.WWHRS WWHRS(string ID) => SAP_Module.PCDFData.WWHRSs.Where<PCDF.WWHRS>((Func<PCDF.WWHRS, bool>) (b => Operators.CompareString(b.ID, ID, false) == 0)).SingleOrDefault<PCDF.WWHRS>() ?? SAP_Module.PCDFData.WWHRSs_Illustrative.Where<PCDF.WWHRS>((Func<PCDF.WWHRS, bool>) (b => Operators.CompareString(b.ID, ID, false) == 0)).SingleOrDefault<PCDF.WWHRS>();

    public PCDF.InUseMech InUseMech(string SystemType) => SAP_Module.PCDFData.InUseMechs.Where<PCDF.InUseMech>((Func<PCDF.InUseMech, bool>) (b => Operators.CompareString(b.SystemType, SystemType, false) == 0)).SingleOrDefault<PCDF.InUseMech>();

    public PCDF.Products321 Products321(string ID) => SAP_Module.PCDFData.Products321s.Where<PCDF.Products321>((Func<PCDF.Products321, bool>) (b => Operators.CompareString(b.ID, ID, false) == 0)).SingleOrDefault<PCDF.Products321>();

    public PCDF.Products321_Sub Products321Sub(string Ref, string AdditionalWetRoom) => SAP_Module.PCDFData.Products321s_Sub.Where<PCDF.Products321_Sub>((Func<PCDF.Products321_Sub, bool>) (b => Operators.CompareString(b.Ref, Ref, false) == 0 & Operators.CompareString(b.AdditionalWetRoom, AdditionalWetRoom, false) == 0)).SingleOrDefault<PCDF.Products321_Sub>();

    public PCDF.Table4a_B Table4a_b(string Code, string SecondGroup) => SAP_Module.PCDFData.Table4a_bs.Where<PCDF.Table4a_B>((Func<PCDF.Table4a_B, bool>) (b => Operators.CompareString(b.Code, Code, false) == 0 & Operators.CompareString(b.SecondGroup, SecondGroup, false) == 0)).SingleOrDefault<PCDF.Table4a_B>();

    public PCDF.Table4a_B Table4a_b(string Code) => SAP_Module.PCDFData.Table4a_bs.Where<PCDF.Table4a_B>((Func<PCDF.Table4a_B, bool>) (b => Operators.CompareString(b.Code, Code, false) == 0)).SingleOrDefault<PCDF.Table4a_B>();

    public static PCDF.Table4aWater Table4aWater(string Code) => SAP_Module.PCDFData.Table4aWaters.Where<PCDF.Table4aWater>((Func<PCDF.Table4aWater, bool>) (b => Operators.CompareString(b.Code, Code, false) == 0)).SingleOrDefault<PCDF.Table4aWater>();

    public static PCDF.Table4e Table4e(string Code) => SAP_Module.PCDFData.Table4es.Where<PCDF.Table4e>((Func<PCDF.Table4e, bool>) (b => Operators.CompareString(b.Code, Code, false) == 0)).SingleOrDefault<PCDF.Table4e>();

    public PCDF.Products322 Products322(string ID) => SAP_Module.PCDFData.Products322s.Where<PCDF.Products322>((Func<PCDF.Products322, bool>) (b => Operators.CompareString(b.ID, ID, false) == 0)).SingleOrDefault<PCDF.Products322>();

    public PCDF.Table12a Table12aSAP(string Fuel) => SAP_Module.PCDFData.Table12as.Where<PCDF.Table12a>((Func<PCDF.Table12a, bool>) (b => (double) b.Fuel == Conversions.ToDouble(Fuel))).SingleOrDefault<PCDF.Table12a>();

    public PCDF.Table12SEDBUK Table12a(string Fuel) => SAP_Module.PCDFData.Table12aSEDBUKs.Where<PCDF.Table12SEDBUK>((Func<PCDF.Table12SEDBUK, bool>) (b => (double) b.Fuel == Conversions.ToDouble(Fuel))).SingleOrDefault<PCDF.Table12SEDBUK>();

    public static string Table131(string Recommendation)
    {
      PCDF.Table131 table131 = SAP_Module.PCDFData.Table131s.Where<PCDF.Table131>((Func<PCDF.Table131, bool>) (b => Operators.CompareString(b.Ref, Recommendation, false) == 0)).SingleOrDefault<PCDF.Table131>();
      return Operators.CompareString(table131.Range1, "2", false) != 0 ? (Conversions.ToDouble(table131.Cost_Type) == 2.0 ? "£" + Microsoft.VisualBasic.Strings.Format((object) Conversion.Val(table131.B_low), "#,###") : "£" + Microsoft.VisualBasic.Strings.Format((object) Conversion.Val(table131.A_low), "#,###")) : ((uint) Operators.CompareString(table131.Cost_Type, "2", false) <= 0U ? "£" + Microsoft.VisualBasic.Strings.Format((object) Conversion.Val(table131.B_low), "#,###") + " - £" + Microsoft.VisualBasic.Strings.Format((object) Conversion.Val(table131.B_High), "#,###") : "£" + Microsoft.VisualBasic.Strings.Format((object) Conversion.Val(table131.A_low), "#,###") + " - £" + Microsoft.VisualBasic.Strings.Format((object) Conversion.Val(table131.A_High), "#,###"));
    }

    private void Dimensions()
    {
      if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0)
      {
        if (Operators.CompareString(this._House.MainHeating.SGroup, "Gas boilers and oil boilers", false) == 0)
          this.SEDBUKFound = (object) Calc2012.SEDBUK(this._House.MainHeating.SEDBUK);
        else if (Operators.CompareString(this._House.MainHeating.SGroup, "Micro-cogeneration (micro-CHP)", false) != 0)
          this.SEDBUKFound = Operators.CompareString(this._House.MainHeating.SGroup, "Solid fuel boilers", false) != 0 ? (!this._House.MainHeating.HGroup.Equals("Warm air systems (Not heat pump)") ? (object) Calc2012.SEDBUK_HeatPump(this._House.MainHeating.SEDBUK) : (object) this.SEDBUK_Warm(this._House.MainHeating.SEDBUK)) : (object) this.SEDBUK_Solid(this._House.MainHeating.SEDBUK);
      }
      if (this._House.IncludeMainHeating2 && Operators.CompareString(this._House.MainHeating2.InforSource, "Boiler Database", false) == 0)
        this.SEDBUKFound2 = Operators.CompareString(this._House.MainHeating2.SGroup, "Gas boilers and oil boilers", false) != 0 ? (Operators.CompareString(this._House.MainHeating2.SGroup, "Solid fuel boilers", false) != 0 ? (object) Calc2012.SEDBUK_HeatPump(this._House.MainHeating2.SEDBUK) : (object) this.SEDBUK_Solid(this._House.MainHeating2.SEDBUK)) : (object) Calc2012.SEDBUK(this._House.MainHeating2.SEDBUK);
      if (this.OccupancyCalc)
      {
        if (Operators.CompareString(this.OriginalSAPDwelling.MainHeating.InforSource, "Boiler Database", false) == 0)
        {
          if (Operators.CompareString(this.OriginalSAPDwelling.MainHeating.SGroup, "Gas boilers and oil boilers", false) == 0)
            this.SEDBUKFound_OA = (object) Calc2012.SEDBUK(this.OriginalSAPDwelling.MainHeating.SEDBUK);
          else if (Operators.CompareString(this.OriginalSAPDwelling.MainHeating.SGroup, "Micro-cogeneration (micro-CHP)", false) != 0 && Operators.CompareString(this.OriginalSAPDwelling.MainHeating.SGroup, "Solid fuel boilers", false) == 0)
            this.SEDBUKFound_OA = (object) this.SEDBUK_Solid(this.OriginalSAPDwelling.MainHeating.SEDBUK);
        }
        if (this.OriginalSAPDwelling.IncludeMainHeating2 && Operators.CompareString(this.OriginalSAPDwelling.MainHeating2.InforSource, "Boiler Database", false) == 0)
        {
          if (Operators.CompareString(this.OriginalSAPDwelling.MainHeating2.SGroup, "Gas boilers and oil boilers", false) == 0)
            this.SEDBUKFound2_OA = (object) Calc2012.SEDBUK(this.OriginalSAPDwelling.MainHeating2.SEDBUK);
          else if (Operators.CompareString(this.OriginalSAPDwelling.MainHeating2.SGroup, "Solid fuel boilers", false) == 0)
            this.SEDBUKFound2_OA = (object) this.SEDBUK_Solid(this.OriginalSAPDwelling.MainHeating2.SEDBUK);
        }
      }
      this._Calc.Dimensions.Floors = this._House.Storeys;
      int num1 = checked (this._House.Storeys - 1);
      int FloorNo = 0;
      while (FloorNo <= num1)
      {
        this._Calc.Dimensions.get_Dimensions(FloorNo).Area = (double) this._House.Dims[FloorNo].Area;
        this._Calc.Dimensions.get_Dimensions(FloorNo).Height = (double) this._House.Dims[FloorNo].Height;
        this._Calc.Dimensions.get_Dimensions(FloorNo).Volume = (double) this._House.Dims[FloorNo].Area * (double) this._House.Dims[FloorNo].Height;
        Dimensions2012 dimensions1;
        double num2 = (dimensions1 = this._Calc.Dimensions).Box4 + (double) this._House.Dims[FloorNo].Area;
        dimensions1.Box4 = num2;
        Dimensions2012 dimensions2;
        double num3 = (dimensions2 = this._Calc.Dimensions).Box5 + this._Calc.Dimensions.get_Dimensions(FloorNo).Volume;
        dimensions2.Box5 = num3;
        checked { ++FloorNo; }
      }
    }

    private void Emissions_Route()
    {
      if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 & (uint) Operators.CompareString(this._House.MainHeating.HGroup, "Community heating schemes", false) > 0U)
      {
        this.CO2Emissions_12a();
      }
      else
      {
        switch (this._House.MainHeating.SAPTableCode)
        {
          case 306:
          case 307:
          case 308:
          case 309:
          case 310:
            this.CO2Emissions_12b();
            break;
          default:
            this.CO2Emissions_12a();
            break;
        }
      }
    }

    private void CO2Emissions_12a()
    {
      bool flag1;
      if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) != 0)
      {
        switch (this._House.MainHeating.SAPTableCode)
        {
          case 306:
          case 309:
            flag1 = true;
            break;
        }
      }
      this._Calc.CO2_Emissions_12a.Box268E = this.FuelCost("standard tariff", 1, "Emissions");
      if (Functions.TER() == -1.0 & (uint) Operators.CompareString(this._House.Address.Country, "Scotland", false) > 0U)
        this._Calc.CO2_Emissions_12a.Box268E = 0.422;
      this._Calc.CO2_Emissions_12a.Box268 = this._Calc.Internal_gains.AppendixL.EL_Final * this._Calc.CO2_Emissions_12a.Box268E;
      this._Calc.Primary_Energy_13a.Box268 = this._Calc.Internal_gains.AppendixL.EL_Final * this.FuelCost("standard tariff", 1, "Energy");
      if (!flag1)
      {
        this._Calc.CO2_Emissions_12a.Box261E = this.FuelCost(this._MainFuel, 1, "Emissions");
        if (Functions.TER() == -1.0 & (uint) Operators.CompareString(this._House.Address.Country, "Scotland", false) > 0U)
          this._Calc.CO2_Emissions_12a.Box261E = 0.194;
        if (Operators.CompareString(this._House.Address.Country, "Scotland", false) == 0 & Functions.SpFuel)
          this._Calc.CO2_Emissions_12a.Box261E = Functions.SpFuelValue;
        this._Calc.CO2_Emissions_12a.Box261 = this._Calc.Energy_Requirements_9a.Box211 * this._Calc.CO2_Emissions_12a.Box261E;
        this._Calc.Primary_Energy_13a.Box261E = this.FuelCost(this._MainFuel, 1, "Energy");
        this._Calc.Primary_Energy_13a.Box261 = this._Calc.Energy_Requirements_9a.Box211 * this._Calc.Primary_Energy_13a.Box261E;
        if (this._House.IncludeMainHeating2)
        {
          this._Calc.CO2_Emissions_12a.Box262E = this.FuelCost(this._SecMainHeating, 1, "Emissions");
          this._Calc.CO2_Emissions_12a.Box262 = this._Calc.Energy_Requirements_9a.Box213 * this._Calc.CO2_Emissions_12a.Box262E;
          this._Calc.Primary_Energy_13a.Box262E = this.FuelCost(this._SecMainHeating, 1, "Energy");
          this._Calc.Primary_Energy_13a.Box262 = this._Calc.Energy_Requirements_9a.Box213 * this._Calc.Primary_Energy_13a.Box262E;
        }
        if (this._House.MainHeating.SAPTableCode == 192)
        {
          if ((uint) this._House.SecHeating.SAPTableCode > 0U)
          {
            if (Operators.CompareString(this._House.SecHeating.Fuel, "Electricity", false) == 0)
            {
              this._Calc.CO2_Emissions_12a.Box263E = this.FuelCost(this.GetElectricityType(0), 1, "Emissions");
              this._Calc.CO2_Emissions_12a.Box263 = this._Calc.Energy_Requirements_9a.Box215 * this._Calc.CO2_Emissions_12a.Box263E;
              this._Calc.Primary_Energy_13a.Box263E = this.FuelCost(this.GetElectricityType(0), 1, "Energy");
              this._Calc.Primary_Energy_13a.Box263 = this._Calc.Energy_Requirements_9a.Box215 * this._Calc.Primary_Energy_13a.Box263E;
            }
            else
            {
              this._Calc.CO2_Emissions_12a.Box263E = this.FuelCost(this._House.SecHeating.Fuel, 1, "Emissions");
              this._Calc.CO2_Emissions_12a.Box263 = this._Calc.Energy_Requirements_9a.Box215 * this._Calc.CO2_Emissions_12a.Box263E;
              this._Calc.Primary_Energy_13a.Box263E = this.FuelCost(this._House.SecHeating.Fuel, 1, "Energy");
              this._Calc.Primary_Energy_13a.Box263 = this._Calc.Energy_Requirements_9a.Box215 * this._Calc.Primary_Energy_13a.Box263E;
            }
          }
        }
        else if ((uint) Operators.CompareString(this._SecFuel, "", false) > 0U)
        {
          this._Calc.CO2_Emissions_12a.Box263E = this.FuelCost(this._SecFuel, 1, "Emissions");
          if (Functions.TER() == -1.0 & (uint) Operators.CompareString(this._House.Address.Country, "Scotland", false) > 0U)
            this._Calc.CO2_Emissions_12a.Box263E = 0.422;
          this._Calc.CO2_Emissions_12a.Box263 = this._Calc.Energy_Requirements_9a.Box215 * this._Calc.CO2_Emissions_12a.Box263E;
          this._Calc.Primary_Energy_13a.Box263E = this.FuelCost(this._SecFuel, 1, "Energy");
          this._Calc.Primary_Energy_13a.Box263 = this._Calc.Energy_Requirements_9a.Box215 * this._Calc.Primary_Energy_13a.Box263E;
        }
        else if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0)
        {
          if (Operators.CompareString(this._House.MainHeating.SGroup, "Micro-cogeneration (micro-CHP)", false) == 0 && this._Calc.HeatLoss.CHPCalc.SecFraction != 0.0)
          {
            this._Calc.CO2_Emissions_12a.Box263E = this.FuelCost(this.GetElectricityType(0), 1, "Emissions");
            this._Calc.CO2_Emissions_12a.Box263 = this._Calc.Energy_Requirements_9a.Box215 * this._Calc.CO2_Emissions_12a.Box263E;
            this._Calc.Primary_Energy_13a.Box263E = this.FuelCost(this.GetElectricityType(0), 1, "Energy");
            this._Calc.Primary_Energy_13a.Box263 = this._Calc.Energy_Requirements_9a.Box215 * this._Calc.Primary_Energy_13a.Box263E;
          }
          if (this._House.MainHeating.SGroup.Contains("heat pumps") && this._Calc.HeatLoss.HPCalc.SecFraction != 0.0)
          {
            this._Calc.CO2_Emissions_12a.Box263E = this.FuelCost(this.GetElectricityType(0), 1, "Emissions");
            this._Calc.CO2_Emissions_12a.Box263 = this._Calc.Energy_Requirements_9a.Box215 * this._Calc.CO2_Emissions_12a.Box263E;
            this._Calc.Primary_Energy_13a.Box263E = this.FuelCost(this.GetElectricityType(0), 1, "Energy");
            this._Calc.Primary_Energy_13a.Box263 = this._Calc.Energy_Requirements_9a.Box215 * this._Calc.Primary_Energy_13a.Box263E;
          }
        }
        int systemRef = this._House.Water.SystemRef;
        if (systemRef >= 950 && systemRef <= 952)
        {
          if (this._House.Water.SystemRef == 951)
          {
            this._Calc.CO2_Emissions_12b.Box361 = (double) this._House.Water.HWSComm.CHPPowerEff;
            this._Calc.Primary_Energy_13b.Box361 = (double) this._House.Water.HWSComm.CHPPowerEff;
            this._Calc.CO2_Emissions_12b.Box362 = (double) this._House.Water.HWSComm.Efficiency;
            this._Calc.Primary_Energy_13b.Box362 = (double) this._House.Water.HWSComm.Efficiency;
            this._Calc.CO2_Emissions_12b.Box365En = this._Calc.Energy_Requirements_9b.Box310a * 100.0 / this._Calc.CO2_Emissions_12b.Box362;
            this._Calc.CO2_Emissions_12b.Box365E = this.FuelCost(this._House.Water.Fuel, 1, "Emissions");
            this._Calc.CO2_Emissions_12b.Box365 = this._Calc.CO2_Emissions_12b.Box365En * this._Calc.CO2_Emissions_12b.Box365E;
            this._Calc.Primary_Energy_13b.Box365En = this._Calc.Energy_Requirements_9b.Box310a * 100.0 / this._Calc.CO2_Emissions_12b.Box362;
            this._Calc.Primary_Energy_13b.Box365E = this.FuelCost(this._House.Water.Fuel, 1, "Energy");
            this._Calc.Primary_Energy_13b.Box365 = this._Calc.Primary_Energy_13b.Box365En * this._Calc.Primary_Energy_13b.Box365E;
            this._Calc.CO2_Emissions_12b.Box366En = this._Calc.Energy_Requirements_9b.Box310a * this._Calc.CO2_Emissions_12b.Box361 / this._Calc.CO2_Emissions_12b.Box362;
            this._Calc.CO2_Emissions_12b.Box366E = 0.519;
            this._Calc.CO2_Emissions_12b.Box366 = -this._Calc.CO2_Emissions_12b.Box366En * this._Calc.CO2_Emissions_12b.Box366E;
            this._Calc.Primary_Energy_13b.Box366En = this._Calc.Energy_Requirements_9b.Box310a * this._Calc.CO2_Emissions_12b.Box361 / this._Calc.CO2_Emissions_12b.Box362;
            this._Calc.Primary_Energy_13b.Box366E = 2.92;
            this._Calc.Primary_Energy_13b.Box366 = -this._Calc.Primary_Energy_13b.Box366En * this._Calc.Primary_Energy_13b.Box366E;
          }
          else
          {
            this._Calc.CO2_Emissions_12b.Box367a = (double) this._House.Water.HWSComm.Efficiency;
            this._Calc.Primary_Energy_13b.Box367a = (double) this._House.Water.HWSComm.Efficiency;
            bool flag2 = false;
            if (this._House.Water.HWSComm.FromDatabase && this.HeatSourcesWater[0].CommunityFuel.Equals("99"))
            {
              flag2 = true;
              this._Calc.CO2_Emissions_12b.Box367_E = Conversions.ToDouble(this.HeatSourcesWater[0].CO2Factor);
              this._Calc.CO2_Emissions_12b.Box367 = (this._Calc.Energy_Requirements_9b.Box307a + this._Calc.Energy_Requirements_9b.Box310a) * 100.0 / this._Calc.CO2_Emissions_12b.Box367a * this._Calc.CO2_Emissions_12b.Box367_E;
              this._Calc.Primary_Energy_13b.Box367_E = Conversions.ToDouble(this.HeatSourcesWater[0].EnergyFactor);
              this._Calc.Primary_Energy_13b.Box367 = (this._Calc.Energy_Requirements_9b.Box307a + this._Calc.Energy_Requirements_9b.Box310a) * 100.0 / this._Calc.Primary_Energy_13b.Box367a * this._Calc.Primary_Energy_13b.Box367_E;
            }
            if (!flag2)
            {
              this._Calc.CO2_Emissions_12b.Box367_E = this.FuelCost(this._House.Water.Fuel, 1, "Emissions");
              this._Calc.CO2_Emissions_12b.Box367 = (this._Calc.Energy_Requirements_9b.Box307a + this._Calc.Energy_Requirements_9b.Box310a) * 100.0 / this._Calc.CO2_Emissions_12b.Box367a * this._Calc.CO2_Emissions_12b.Box367_E;
              this._Calc.Primary_Energy_13b.Box367_E = this.FuelCost(this._House.Water.Fuel, 1, "Energy");
              this._Calc.Primary_Energy_13b.Box367 = (this._Calc.Energy_Requirements_9b.Box307a + this._Calc.Energy_Requirements_9b.Box310a) * 100.0 / this._Calc.Primary_Energy_13b.Box367a * this._Calc.Primary_Energy_13b.Box367_E;
            }
          }
          if (this._House.Water.HWSComm.NoOfAdditionalHeatSources > 0)
          {
            this._Calc.CO2_Emissions_12b.Box367b = (double) this._House.Water.HWSComm.HeatSource1.Efficiency;
            this._Calc.Primary_Energy_13b.Box367b = (double) this._House.Water.HWSComm.HeatSource1.Efficiency;
            bool flag3 = false;
            if (this._House.Water.HWSComm.FromDatabase && this.HeatSourcesWater[1].CommunityFuel.Equals("99"))
            {
              flag3 = true;
              this._Calc.CO2_Emissions_12b.Box368E = Conversions.ToDouble(this.HeatSourcesWater[1].CO2Factor);
              this._Calc.CO2_Emissions_12b.Box368 = (this._Calc.Energy_Requirements_9b.Box307b + this._Calc.Energy_Requirements_9b.Box310b) * 100.0 / this._Calc.CO2_Emissions_12b.Box367b * this._Calc.CO2_Emissions_12b.Box368E;
              this._Calc.Primary_Energy_13b.Box368E = Conversions.ToDouble(this.HeatSourcesWater[1].EnergyFactor);
              this._Calc.Primary_Energy_13b.Box368 = (this._Calc.Energy_Requirements_9b.Box307b + this._Calc.Energy_Requirements_9b.Box310b) * 100.0 / this._Calc.Primary_Energy_13b.Box367b * this._Calc.Primary_Energy_13b.Box368E;
            }
            if (!flag3)
            {
              this._Calc.CO2_Emissions_12b.Box368E = this.FuelCost(this._House.Water.HWSComm.HeatSource1.Fuel, 1, "Emissions");
              this._Calc.CO2_Emissions_12b.Box368 = (this._Calc.Energy_Requirements_9b.Box307b + this._Calc.Energy_Requirements_9b.Box310b) * 100.0 / this._Calc.CO2_Emissions_12b.Box367b * this._Calc.CO2_Emissions_12b.Box368E;
              this._Calc.Primary_Energy_13b.Box368E = this.FuelCost(this._House.Water.HWSComm.HeatSource1.Fuel, 1, "Energy");
              this._Calc.Primary_Energy_13b.Box368 = (this._Calc.Energy_Requirements_9b.Box307b + this._Calc.Energy_Requirements_9b.Box310b) * 100.0 / this._Calc.Primary_Energy_13b.Box367b * this._Calc.Primary_Energy_13b.Box368E;
            }
          }
          if (this._House.Water.HWSComm.NoOfAdditionalHeatSources > 1)
          {
            this._Calc.CO2_Emissions_12b.Box367c = (double) this._House.Water.HWSComm.HeatSource2.Efficiency;
            this._Calc.Primary_Energy_13b.Box367c = (double) this._House.Water.HWSComm.HeatSource2.Efficiency;
            bool flag4 = false;
            if (this._House.Water.HWSComm.FromDatabase && this.HeatSourcesWater[2].CommunityFuel.Equals("99"))
            {
              flag4 = true;
              this._Calc.CO2_Emissions_12b.Box369E = Conversions.ToDouble(this.HeatSourcesWater[2].CO2Factor);
              this._Calc.CO2_Emissions_12b.Box369 = (this._Calc.Energy_Requirements_9b.Box307c + this._Calc.Energy_Requirements_9b.Box310c) * 100.0 / this._Calc.CO2_Emissions_12b.Box367c * this._Calc.CO2_Emissions_12b.Box369E;
              this._Calc.Primary_Energy_13b.Box369E = Conversions.ToDouble(this.HeatSourcesWater[2].EnergyFactor);
              this._Calc.Primary_Energy_13b.Box369 = (this._Calc.Energy_Requirements_9b.Box307c + this._Calc.Energy_Requirements_9b.Box310c) * 100.0 / this._Calc.Primary_Energy_13b.Box367c * this._Calc.Primary_Energy_13b.Box369E;
            }
            if (!flag4)
            {
              this._Calc.CO2_Emissions_12b.Box369E = this.FuelCost(this._House.Water.HWSComm.HeatSource2.Fuel, 1, "Emissions");
              this._Calc.CO2_Emissions_12b.Box369 = (this._Calc.Energy_Requirements_9b.Box307c + this._Calc.Energy_Requirements_9b.Box310c) * 100.0 / this._Calc.CO2_Emissions_12b.Box367c * this._Calc.CO2_Emissions_12b.Box369E;
              this._Calc.Primary_Energy_13b.Box369E = this.FuelCost(this._House.Water.HWSComm.HeatSource2.Fuel, 1, "Energy");
              this._Calc.Primary_Energy_13b.Box369 = (this._Calc.Energy_Requirements_9b.Box307c + this._Calc.Energy_Requirements_9b.Box310c) * 100.0 / this._Calc.Primary_Energy_13b.Box367c * this._Calc.Primary_Energy_13b.Box369E;
            }
          }
          if (this._House.Water.HWSComm.NoOfAdditionalHeatSources > 2)
          {
            this._Calc.CO2_Emissions_12b.Box367d = (double) this._House.Water.HWSComm.HeatSource3.Efficiency;
            this._Calc.Primary_Energy_13b.Box367d = (double) this._House.Water.HWSComm.HeatSource3.Efficiency;
            bool flag5 = false;
            if (this._House.Water.HWSComm.FromDatabase && this.HeatSourcesWater[3].CommunityFuel.Equals("99"))
            {
              flag5 = true;
              this._Calc.CO2_Emissions_12b.Box370E = Conversions.ToDouble(this.HeatSourcesWater[3].CO2Factor);
              this._Calc.CO2_Emissions_12b.Box370 = (this._Calc.Energy_Requirements_9b.Box307d + this._Calc.Energy_Requirements_9b.Box310d) * 100.0 / this._Calc.CO2_Emissions_12b.Box367d * this._Calc.CO2_Emissions_12b.Box370E;
              this._Calc.Primary_Energy_13b.Box370E = Conversions.ToDouble(this.HeatSourcesWater[3].EnergyFactor);
              this._Calc.Primary_Energy_13b.Box370 = (this._Calc.Energy_Requirements_9b.Box307d + this._Calc.Energy_Requirements_9b.Box310d) * 100.0 / this._Calc.Primary_Energy_13b.Box367d * this._Calc.Primary_Energy_13b.Box370E;
            }
            if (!flag5)
            {
              this._Calc.CO2_Emissions_12b.Box370E = this.FuelCost(this._House.Water.HWSComm.HeatSource3.Fuel, 1, "Emissions");
              this._Calc.CO2_Emissions_12b.Box370 = (this._Calc.Energy_Requirements_9b.Box307d + this._Calc.Energy_Requirements_9b.Box310d) * 100.0 / this._Calc.CO2_Emissions_12b.Box367d * this._Calc.CO2_Emissions_12b.Box370E;
              this._Calc.Primary_Energy_13b.Box370E = this.FuelCost(this._House.Water.HWSComm.HeatSource3.Fuel, 1, "Energy");
              this._Calc.Primary_Energy_13b.Box370 = (this._Calc.Energy_Requirements_9b.Box307d + this._Calc.Energy_Requirements_9b.Box310d) * 100.0 / this._Calc.Primary_Energy_13b.Box367d * this._Calc.Primary_Energy_13b.Box370E;
            }
          }
          if (this._House.Water.HWSComm.NoOfAdditionalHeatSources > 3)
          {
            this._Calc.CO2_Emissions_12b.Box367e = (double) this._House.Water.HWSComm.HeatSource4.Efficiency;
            this._Calc.Primary_Energy_13b.Box367e = (double) this._House.Water.HWSComm.HeatSource4.Efficiency;
            bool flag6 = false;
            if (this._House.Water.HWSComm.FromDatabase && this.HeatSourcesWater[4].CommunityFuel.Equals("99"))
            {
              flag6 = true;
              this._Calc.CO2_Emissions_12b.Box371E = Conversions.ToDouble(this.HeatSourcesWater[4].CO2Factor);
              this._Calc.CO2_Emissions_12b.Box371 = (this._Calc.Energy_Requirements_9b.Box307e + this._Calc.Energy_Requirements_9b.Box310e) * 100.0 / this._Calc.CO2_Emissions_12b.Box367e * this._Calc.CO2_Emissions_12b.Box371E;
              this._Calc.Primary_Energy_13b.Box371E = Conversions.ToDouble(this.HeatSourcesWater[4].EnergyFactor);
              this._Calc.Primary_Energy_13b.Box371 = (this._Calc.Energy_Requirements_9b.Box307e + this._Calc.Energy_Requirements_9b.Box310e) * 100.0 / this._Calc.Primary_Energy_13b.Box367e * this._Calc.Primary_Energy_13b.Box371E;
            }
            if (!flag6)
            {
              this._Calc.CO2_Emissions_12b.Box371E = this.FuelCost(this._House.Water.HWSComm.HeatSource4.Fuel, 1, "Emissions");
              this._Calc.CO2_Emissions_12b.Box371 = (this._Calc.Energy_Requirements_9b.Box307e + this._Calc.Energy_Requirements_9b.Box310e) * 100.0 / this._Calc.CO2_Emissions_12b.Box367e * this._Calc.CO2_Emissions_12b.Box371E;
              this._Calc.Primary_Energy_13b.Box371E = this.FuelCost(this._House.Water.HWSComm.HeatSource4.Fuel, 1, "Energy");
              this._Calc.Primary_Energy_13b.Box371 = (this._Calc.Energy_Requirements_9b.Box307e + this._Calc.Energy_Requirements_9b.Box310e) * 100.0 / this._Calc.Primary_Energy_13b.Box367e * this._Calc.Primary_Energy_13b.Box371E;
            }
          }
          this._Calc.CO2_Emissions_12b.Box372E = 0.519;
          this._Calc.CO2_Emissions_12b.Box372 = this._Calc.Energy_Requirements_9b.Box313 * 0.519;
          this._Calc.Primary_Energy_13b.Box372E = 2.92;
          this._Calc.Primary_Energy_13b.Box372 = this._Calc.Energy_Requirements_9b.Box313 * 2.92;
          this._Calc.CO2_Emissions_12b.Box373 = this._Calc.CO2_Emissions_12b.Box363 + this._Calc.CO2_Emissions_12b.Box364 + this._Calc.CO2_Emissions_12b.Box365 + this._Calc.CO2_Emissions_12b.Box366 + this._Calc.CO2_Emissions_12b.Box367 + this._Calc.CO2_Emissions_12b.Box368 + this._Calc.CO2_Emissions_12b.Box369 + this._Calc.CO2_Emissions_12b.Box370 + this._Calc.CO2_Emissions_12b.Box371 + this._Calc.CO2_Emissions_12b.Box372;
          if (this._Calc.CO2_Emissions_12b.Box373 < 0.0)
            this._Calc.CO2_Emissions_12b.Box373 = 0.0;
          this._Calc.Primary_Energy_13b.Box373 = this._Calc.Primary_Energy_13b.Box363 + this._Calc.Primary_Energy_13b.Box364 + this._Calc.Primary_Energy_13b.Box365 + this._Calc.Primary_Energy_13b.Box366 + this._Calc.Primary_Energy_13b.Box367 + this._Calc.Primary_Energy_13b.Box368 + this._Calc.Primary_Energy_13b.Box369 + this._Calc.Primary_Energy_13b.Box370 + this._Calc.Primary_Energy_13b.Box371 + this._Calc.Primary_Energy_13b.Box372;
          if (this._Calc.Primary_Energy_13b.Box373 < 0.0)
            this._Calc.Primary_Energy_13b.Box373 = 0.0;
        }
        else
        {
          this._Calc.CO2_Emissions_12a.Box264E = this.FuelCost(this._WaterFuel, 1, "Emissions");
          if (Functions.TER() == -1.0 & Operators.CompareString(this._House.Address.Country, "Scotland", false) == 0)
            this._Calc.CO2_Emissions_12a.Box264E = 0.194;
          if (Operators.CompareString(this._House.Address.Country, "Scotland", false) == 0 & Functions.SpFuel)
            this._Calc.CO2_Emissions_12a.Box264E = Functions.SpFuelValue;
          this._Calc.CO2_Emissions_12a.Box264 = this._Calc.Energy_Requirements_9a.Box219 * this._Calc.CO2_Emissions_12a.Box264E;
          this._Calc.Primary_Energy_13a.Box264E = this.FuelCost(this._WaterFuel, 1, "Energy");
          this._Calc.Primary_Energy_13a.Box264 = this._Calc.Energy_Requirements_9a.Box219 * this._Calc.Primary_Energy_13a.Box264E;
          this._Calc.CO2_Emissions_12a.Box265 = this._Calc.CO2_Emissions_12a.Box261 + this._Calc.CO2_Emissions_12a.Box262 + this._Calc.CO2_Emissions_12a.Box263 + this._Calc.CO2_Emissions_12a.Box264;
          this._Calc.Primary_Energy_13a.Box265 = this._Calc.Primary_Energy_13a.Box261 + this._Calc.Primary_Energy_13a.Box262 + this._Calc.Primary_Energy_13a.Box263 + this._Calc.Primary_Energy_13a.Box264;
        }
        this._Calc.CO2_Emissions_12a.Box267E = this.FuelCost("standard tariff", 1, "Emissions");
        if (Functions.TER() == -1.0 & (uint) Operators.CompareString(this._House.Address.Country, "Scotland", false) > 0U)
          this._Calc.CO2_Emissions_12a.Box267E = 0.422;
        this._Calc.CO2_Emissions_12a.Box267 = this._Calc.Energy_Requirements_9a.Box231 * this._Calc.CO2_Emissions_12a.Box267E;
        this._Calc.Primary_Energy_13a.Box267E = this.FuelCost("standard tariff", 1, "Energy");
        this._Calc.Primary_Energy_13a.Box267 = this._Calc.Energy_Requirements_9a.Box231 * this._Calc.Primary_Energy_13a.Box267E;
        if (this._Calc.Water_heating.Box64Imm != 0.0)
        {
          this._Calc.CO2_Emissions_12a.Box264EImm = this.FuelCost("standard tariff", 1, "Emissions");
          this._Calc.CO2_Emissions_12a.Box264Imm = this._Calc.Energy_Requirements_9a.Box219Imm * this._Calc.CO2_Emissions_12a.Box264EImm;
          this._Calc.Primary_Energy_13a.Box264EImm = this.FuelCost("standard tariff", 1, "Energy");
          this._Calc.Primary_Energy_13a.Box264Imm = this._Calc.Energy_Requirements_9a.Box219Imm * this._Calc.Primary_Energy_13a.Box264EImm;
        }
      }
      if (this._House.Cooling.Include)
      {
        this._Calc.CO2_Emissions_12a.Box266E = this.FuelCost("standard tariff", 1, "Emissions");
        this._Calc.CO2_Emissions_12a.Box266 = this._Calc.Energy_Requirements_9a.Box221 * this._Calc.CO2_Emissions_12a.Box266E;
        this._Calc.Primary_Energy_13a.Box266E = this.FuelCost("standard tariff", 1, "Energy");
        this._Calc.Primary_Energy_13a.Box266 = this._Calc.Energy_Requirements_9a.Box221 * this._Calc.Primary_Energy_13a.Box266E;
      }
      if (this._House.Renewable.Special.Include)
      {
        this._Calc.CO2_Emissions_12a.AppendixQ_Item_Count = this._House.Renewable.Special.Special.Length;
        this._Calc.Primary_Energy_13a.AppendixQ_Item_Count = this._House.Renewable.Special.Special.Length;
        int num = checked (this._House.Renewable.Special.Special.Length - 1);
        int Index = 0;
        while (Index <= num)
        {
          if (!this._House.Renewable.Special.Special[Index].MakeEmissionsOnly)
          {
            if (Operators.CompareString(this._House.Renewable.Special.Special[Index].FuelSaved, "Electricity", false) == 0)
            {
              this._Calc.CO2_Emissions_12a.get_AppendixQ_Item(Index).Energy_Saved_EF = this.FuelCost(this.GetElectricityType(0), 1, "Emissions");
              this._Calc.Primary_Energy_13a.get_AppendixQ_Item(Index).Energy_Saved_EF = this.FuelCost(this.GetElectricityType(0), 1, "Energy");
            }
            else
            {
              this._Calc.CO2_Emissions_12a.get_AppendixQ_Item(Index).Energy_Saved_EF = this.FuelCost(this._House.Renewable.Special.Special[Index].FuelSaved, 1, "Emissions");
              this._Calc.Primary_Energy_13a.get_AppendixQ_Item(Index).Energy_Saved_EF = this.FuelCost(this._House.Renewable.Special.Special[Index].FuelSaved, 1, "Energy");
            }
            this._Calc.CO2_Emissions_12a.get_AppendixQ_Item(Index).Energy_Saved_Emissions = this._Calc.Energy_Requirements_9a.get_AppendixQ_Item(Index).Energy_Saved * this._Calc.CO2_Emissions_12a.get_AppendixQ_Item(Index).Energy_Saved_EF;
            this._Calc.Primary_Energy_13a.get_AppendixQ_Item(Index).Energy_Saved_Energy = this._Calc.Energy_Requirements_9a.get_AppendixQ_Item(Index).Energy_Saved * this._Calc.Primary_Energy_13a.get_AppendixQ_Item(Index).Energy_Saved_EF;
            if (Operators.CompareString(this._House.Renewable.Special.Special[Index].FuelUsed, "Electricity", false) == 0)
            {
              this._Calc.CO2_Emissions_12a.get_AppendixQ_Item(Index).Energy_Used_EF = this.FuelCost(this.GetElectricityType(0), 1, "Emissions");
              this._Calc.Primary_Energy_13a.get_AppendixQ_Item(Index).Energy_Used_EF = this.FuelCost(this.GetElectricityType(0), 1, "Energy");
            }
            else
            {
              this._Calc.CO2_Emissions_12a.get_AppendixQ_Item(Index).Energy_Used_EF = this.FuelCost(this._House.Renewable.Special.Special[Index].FuelUsed, 1, "Emissions");
              this._Calc.Primary_Energy_13a.get_AppendixQ_Item(Index).Energy_Used_EF = this.FuelCost(this._House.Renewable.Special.Special[Index].FuelUsed, 1, "Energy");
            }
            this._Calc.CO2_Emissions_12a.get_AppendixQ_Item(Index).Energy_Used_Emissions = this._Calc.Energy_Requirements_9a.get_AppendixQ_Item(Index).Energy_Used * this._Calc.CO2_Emissions_12a.get_AppendixQ_Item(Index).Energy_Used_EF;
            this._Calc.Primary_Energy_13a.get_AppendixQ_Item(Index).Energy_Used_Energy = this._Calc.Energy_Requirements_9a.get_AppendixQ_Item(Index).Energy_Used * this._Calc.Primary_Energy_13a.get_AppendixQ_Item(Index).Energy_Used_EF;
          }
          else
          {
            this._Calc.CO2_Emissions_12a.get_AppendixQ_Item(Index).Energy_Saved_Emissions = -(double) this._House.Renewable.Special.Special[Index].EmissionsAmount;
            this._Calc.CO2_Emissions_12a.get_AppendixQ_Item(Index).Energy_Used_Emissions = (double) this._House.Renewable.Special.Special[Index].EmissionsAmountCreated;
          }
          checked { ++Index; }
        }
      }
      int systemRef1 = this._House.Water.SystemRef;
      if (systemRef1 >= 950 && systemRef1 <= 952)
      {
        this._Calc.CO2_Emissions_12a.Box272 = this._Calc.CO2_Emissions_12a.Box261 + this._Calc.CO2_Emissions_12a.Box262 + this._Calc.CO2_Emissions_12a.Box263 + this._Calc.CO2_Emissions_12a.Box266 + this._Calc.CO2_Emissions_12a.Box267 + this._Calc.CO2_Emissions_12a.Box268 + this._Calc.CO2_Emissions_12a.Box269 + this._Calc.CO2_Emissions_12a.Box271 + this._Calc.CO2_Emissions_12a.Box270 + this._Calc.CO2_Emissions_12b.Box373;
        this._Calc.Primary_Energy_13a.Box272 = this._Calc.Primary_Energy_13a.Box261 + this._Calc.Primary_Energy_13a.Box262 + this._Calc.Primary_Energy_13a.Box263 + this._Calc.Primary_Energy_13b.Box367 + this._Calc.Primary_Energy_13b.Box372 + this._Calc.Primary_Energy_13a.Box266 + this._Calc.Primary_Energy_13a.Box267 + this._Calc.Primary_Energy_13a.Box268 + this._Calc.Primary_Energy_13a.Box269 + this._Calc.Primary_Energy_13a.Box271 + this._Calc.Primary_Energy_13a.Box270;
      }
      else
      {
        this._Calc.CO2_Emissions_12a.Box272 = this._Calc.CO2_Emissions_12a.Box261 + this._Calc.CO2_Emissions_12a.Box262 + this._Calc.CO2_Emissions_12a.Box263 + this._Calc.CO2_Emissions_12a.Box264 + this._Calc.CO2_Emissions_12a.Box264Imm + this._Calc.CO2_Emissions_12a.Box266 + this._Calc.CO2_Emissions_12a.Box267 + this._Calc.CO2_Emissions_12a.Box268 + this._Calc.CO2_Emissions_12a.Box269 + this._Calc.CO2_Emissions_12a.Box271 + this._Calc.CO2_Emissions_12a.Box270;
        this._Calc.Primary_Energy_13a.Box272 = this._Calc.Primary_Energy_13a.Box261 + this._Calc.Primary_Energy_13a.Box262 + this._Calc.Primary_Energy_13a.Box263 + this._Calc.Primary_Energy_13a.Box264 + this._Calc.Primary_Energy_13a.Box264Imm + this._Calc.Primary_Energy_13a.Box266 + this._Calc.Primary_Energy_13a.Box267 + this._Calc.Primary_Energy_13a.Box268 + this._Calc.Primary_Energy_13a.Box269 + this._Calc.Primary_Energy_13a.Box271 + this._Calc.Primary_Energy_13a.Box270;
      }
      this._Calc.CO2_Emissions_12a.Box273 = this._Calc.CO2_Emissions_12a.Box272 / this._Calc.Dimensions.Box4;
      this._Calc.Primary_Energy_13a.Box273 = this._Calc.Primary_Energy_13a.Box272 / this._Calc.Dimensions.Box4;
      this._Calc.CO2_Emissions_12a.CF = this._Calc.CO2_Emissions_12a.Box272 / (this._Calc.Dimensions.Box4 + 45.0);
      this._Calc.CO2_Emissions_12a.EIValue = this._Calc.CO2_Emissions_12a.CF < 28.3 ? 100.0 - 1.34 * this._Calc.CO2_Emissions_12a.CF : 200.0 - 95.0 * Math.Log10(this._Calc.CO2_Emissions_12a.CF);
      this._Calc.CO2_Emissions_12a.Box274 = this._Calc.CO2_Emissions_12a.EIValue >= 0.0 ? (!SAP_Module.Admin ? Conversions.ToDouble(Microsoft.VisualBasic.Strings.Format((object) this._Calc.CO2_Emissions_12a.EIValue, "#0")) : Math.Round(this._Calc.CO2_Emissions_12a.EIValue, 2)) : 1.0;
      if (this._Calc.CO2_Emissions_12a.Box274 < 1.0)
        this._Calc.CO2_Emissions_12a.Box274 = 1.0;
      double box274 = this._Calc.CO2_Emissions_12a.Box274;
      if (box274 >= 1.0 && box274 <= 20.0)
        this._Calc.CO2_Emissions_12a.EIBand = "G";
      else if (box274 >= 21.0 && box274 <= 38.0)
        this._Calc.CO2_Emissions_12a.EIBand = "F";
      else if (box274 >= 39.0 && box274 <= 54.0)
        this._Calc.CO2_Emissions_12a.EIBand = "E";
      else if (box274 >= 55.0 && box274 <= 68.0)
        this._Calc.CO2_Emissions_12a.EIBand = "D";
      else if (box274 >= 69.0 && box274 <= 80.0)
        this._Calc.CO2_Emissions_12a.EIBand = "C";
      else if (box274 >= 81.0 && box274 <= 91.0)
        this._Calc.CO2_Emissions_12a.EIBand = "B";
      else if (box274 >= 92.0)
        this._Calc.CO2_Emissions_12a.EIBand = "A";
      Functions.SpFuel = false;
      Functions.SpFuelValue = 0.0;
    }

    private void CO2Emissions_12b()
    {
      if (this._House.MainHeating.SAPTableCode == 307)
      {
        this._Calc.CO2_Emissions_12b.Box361 = (double) this._House.MainHeating.CommunityH.HeatToPowerRatio;
        this._Calc.Primary_Energy_13b.Box361 = (double) this._House.MainHeating.CommunityH.HeatToPowerRatio;
        this._Calc.CO2_Emissions_12b.Box362 = (double) this._House.MainHeating.CommunityH.Boiler1Efficiency;
        this._Calc.Primary_Energy_13b.Box362 = (double) this._House.MainHeating.CommunityH.Boiler1Efficiency;
        this._Calc.CO2_Emissions_12b.Box363En = this._Calc.Energy_Requirements_9b.Box307a * 100.0 / this._Calc.CO2_Emissions_12b.Box362;
        this._Calc.CO2_Emissions_12b.Box363E = this.FuelCost(this._House.MainHeating.Fuel, 1, "Emissions");
        this._Calc.CO2_Emissions_12b.Box363 = this._Calc.CO2_Emissions_12b.Box363En * this._Calc.CO2_Emissions_12b.Box363E;
        this._Calc.Primary_Energy_13b.Box363En = this._Calc.Energy_Requirements_9b.Box307a * 100.0 / this._Calc.CO2_Emissions_12b.Box362;
        this._Calc.Primary_Energy_13b.Box363E = this.FuelCost(this._House.MainHeating.Fuel, 1, "Energy");
        this._Calc.Primary_Energy_13b.Box363 = this._Calc.Primary_Energy_13b.Box363En * this._Calc.Primary_Energy_13b.Box363E;
        this._Calc.CO2_Emissions_12b.Box364En = this._Calc.Energy_Requirements_9b.Box307a * this._Calc.CO2_Emissions_12b.Box361 / this._Calc.CO2_Emissions_12b.Box362;
        this._Calc.CO2_Emissions_12b.Box364E = 0.519;
        this._Calc.CO2_Emissions_12b.Box364 = -this._Calc.CO2_Emissions_12b.Box364En * this._Calc.CO2_Emissions_12b.Box364E;
        this._Calc.Primary_Energy_13b.Box364En = this._Calc.Energy_Requirements_9b.Box307a * this._Calc.CO2_Emissions_12b.Box361 / this._Calc.CO2_Emissions_12b.Box362;
        this._Calc.Primary_Energy_13b.Box364E = 3.07;
        this._Calc.Primary_Energy_13b.Box364 = -this._Calc.Primary_Energy_13b.Box364En * this._Calc.Primary_Energy_13b.Box364E;
        this._Calc.CO2_Emissions_12b.Box365En = this._Calc.Energy_Requirements_9b.Box310a * 100.0 / this._Calc.CO2_Emissions_12b.Box362;
        this._Calc.CO2_Emissions_12b.Box365E = this.FuelCost(this._House.MainHeating.Fuel, 1, "Emissions");
        this._Calc.CO2_Emissions_12b.Box365 = this._Calc.CO2_Emissions_12b.Box365En * this._Calc.CO2_Emissions_12b.Box365E;
        this._Calc.Primary_Energy_13b.Box365En = this._Calc.Energy_Requirements_9b.Box310a * 100.0 / this._Calc.CO2_Emissions_12b.Box362;
        this._Calc.Primary_Energy_13b.Box365E = this.FuelCost(this._House.MainHeating.Fuel, 1, "Energy");
        this._Calc.Primary_Energy_13b.Box365 = this._Calc.Primary_Energy_13b.Box365En * this._Calc.Primary_Energy_13b.Box365E;
        this._Calc.CO2_Emissions_12b.Box366En = this._Calc.Energy_Requirements_9b.Box310a * this._Calc.CO2_Emissions_12b.Box361 / this._Calc.CO2_Emissions_12b.Box362;
        this._Calc.CO2_Emissions_12b.Box366E = 0.519;
        this._Calc.CO2_Emissions_12b.Box366 = -this._Calc.CO2_Emissions_12b.Box366En * this._Calc.CO2_Emissions_12b.Box366E;
        this._Calc.Primary_Energy_13b.Box366En = this._Calc.Energy_Requirements_9b.Box310a * this._Calc.CO2_Emissions_12b.Box361 / this._Calc.CO2_Emissions_12b.Box362;
        this._Calc.Primary_Energy_13b.Box366E = 3.07;
        this._Calc.Primary_Energy_13b.Box366 = -this._Calc.Primary_Energy_13b.Box366En * this._Calc.Primary_Energy_13b.Box366E;
      }
      else
      {
        this._Calc.CO2_Emissions_12b.Box367a = (double) this._House.MainHeating.CommunityH.Boiler1Efficiency;
        this._Calc.Primary_Energy_13b.Box367a = (double) this._House.MainHeating.CommunityH.Boiler1Efficiency;
        bool flag = false;
        if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 && this.HeatSources[0].CommunityFuel.Equals("99"))
        {
          flag = true;
          this._Calc.CO2_Emissions_12b.Box367_E = Conversions.ToDouble(this.HeatSources[0].CO2Factor);
          this._Calc.CO2_Emissions_12b.Box367 = (this._Calc.Energy_Requirements_9b.Box307a + this._Calc.Energy_Requirements_9b.Box310a) * 100.0 / this._Calc.CO2_Emissions_12b.Box367a * this._Calc.CO2_Emissions_12b.Box367_E;
          this._Calc.Primary_Energy_13b.Box367_E = Conversions.ToDouble(this.HeatSources[0].EnergyFactor);
          this._Calc.Primary_Energy_13b.Box367 = (this._Calc.Energy_Requirements_9b.Box307a + this._Calc.Energy_Requirements_9b.Box310a) * 100.0 / this._Calc.Primary_Energy_13b.Box367a * this._Calc.Primary_Energy_13b.Box367_E;
        }
        if (!flag)
        {
          this._Calc.CO2_Emissions_12b.Box367_E = this.FuelCost(this._House.MainHeating.Fuel, 1, "Emissions");
          this._Calc.CO2_Emissions_12b.Box367 = (this._Calc.Energy_Requirements_9b.Box307a + this._Calc.Energy_Requirements_9b.Box310a) * 100.0 / this._Calc.CO2_Emissions_12b.Box367a * this._Calc.CO2_Emissions_12b.Box367_E;
          this._Calc.Primary_Energy_13b.Box367_E = this.FuelCost(this._House.MainHeating.Fuel, 1, "Energy");
          this._Calc.Primary_Energy_13b.Box367 = (this._Calc.Energy_Requirements_9b.Box307a + this._Calc.Energy_Requirements_9b.Box310a) * 100.0 / this._Calc.Primary_Energy_13b.Box367a * this._Calc.Primary_Energy_13b.Box367_E;
        }
      }
      if (this._House.MainHeating.CommunityH.NoOfAdditionalHeatSources > 0)
      {
        this._Calc.CO2_Emissions_12b.Box367b = (double) this._House.MainHeating.CommunityH.HeatSource1.Efficiency;
        this._Calc.Primary_Energy_13b.Box367b = (double) this._House.MainHeating.CommunityH.HeatSource1.Efficiency;
        bool flag = false;
        if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 && this.HeatSources[1].CommunityFuel.Equals("99"))
        {
          flag = true;
          this._Calc.CO2_Emissions_12b.Box368E = Conversions.ToDouble(this.HeatSources[1].CO2Factor);
          this._Calc.CO2_Emissions_12b.Box368 = (this._Calc.Energy_Requirements_9b.Box307b + this._Calc.Energy_Requirements_9b.Box310b) * 100.0 / this._Calc.CO2_Emissions_12b.Box367b * this._Calc.CO2_Emissions_12b.Box368E;
          this._Calc.Primary_Energy_13b.Box368E = Conversions.ToDouble(this.HeatSources[1].EnergyFactor);
          this._Calc.Primary_Energy_13b.Box368 = (this._Calc.Energy_Requirements_9b.Box307b + this._Calc.Energy_Requirements_9b.Box310b) * 100.0 / this._Calc.Primary_Energy_13b.Box367b * this._Calc.Primary_Energy_13b.Box368E;
        }
        if (!flag)
        {
          this._Calc.CO2_Emissions_12b.Box368E = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource1.Fuel, 1, "Emissions");
          this._Calc.CO2_Emissions_12b.Box368 = (this._Calc.Energy_Requirements_9b.Box307b + this._Calc.Energy_Requirements_9b.Box310b) * 100.0 / this._Calc.CO2_Emissions_12b.Box367b * this._Calc.CO2_Emissions_12b.Box368E;
          this._Calc.Primary_Energy_13b.Box368E = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource1.Fuel, 1, "Energy");
          this._Calc.Primary_Energy_13b.Box368 = (this._Calc.Energy_Requirements_9b.Box307b + this._Calc.Energy_Requirements_9b.Box310b) * 100.0 / this._Calc.Primary_Energy_13b.Box367b * this._Calc.Primary_Energy_13b.Box368E;
        }
      }
      if (this._House.MainHeating.CommunityH.NoOfAdditionalHeatSources > 1)
      {
        this._Calc.CO2_Emissions_12b.Box367c = (double) this._House.MainHeating.CommunityH.HeatSource2.Efficiency;
        this._Calc.Primary_Energy_13b.Box367c = (double) this._House.MainHeating.CommunityH.HeatSource2.Efficiency;
        bool flag = false;
        if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 && this.HeatSources[2].CommunityFuel.Equals("99"))
        {
          flag = true;
          this._Calc.CO2_Emissions_12b.Box369E = Conversions.ToDouble(this.HeatSources[2].CO2Factor);
          this._Calc.CO2_Emissions_12b.Box369 = (this._Calc.Energy_Requirements_9b.Box307c + this._Calc.Energy_Requirements_9b.Box310c) * 100.0 / this._Calc.CO2_Emissions_12b.Box367c * this._Calc.CO2_Emissions_12b.Box369E;
          this._Calc.Primary_Energy_13b.Box369E = Conversions.ToDouble(this.HeatSources[2].EnergyFactor);
          this._Calc.Primary_Energy_13b.Box369 = (this._Calc.Energy_Requirements_9b.Box307c + this._Calc.Energy_Requirements_9b.Box310c) * 100.0 / this._Calc.Primary_Energy_13b.Box367c * this._Calc.Primary_Energy_13b.Box369E;
        }
        if (!flag)
        {
          this._Calc.CO2_Emissions_12b.Box369E = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource2.Fuel, 1, "Emissions");
          this._Calc.CO2_Emissions_12b.Box369 = (this._Calc.Energy_Requirements_9b.Box307c + this._Calc.Energy_Requirements_9b.Box310c) * 100.0 / this._Calc.CO2_Emissions_12b.Box367c * this._Calc.CO2_Emissions_12b.Box369E;
          this._Calc.Primary_Energy_13b.Box369E = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource2.Fuel, 1, "Energy");
          this._Calc.Primary_Energy_13b.Box369 = (this._Calc.Energy_Requirements_9b.Box307c + this._Calc.Energy_Requirements_9b.Box310c) * 100.0 / this._Calc.Primary_Energy_13b.Box367c * this._Calc.Primary_Energy_13b.Box369E;
        }
      }
      if (this._House.MainHeating.CommunityH.NoOfAdditionalHeatSources > 2)
      {
        this._Calc.CO2_Emissions_12b.Box367d = (double) this._House.MainHeating.CommunityH.HeatSource3.Efficiency;
        this._Calc.Primary_Energy_13b.Box367d = (double) this._House.MainHeating.CommunityH.HeatSource3.Efficiency;
        bool flag = false;
        if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 && this.HeatSources[3].CommunityFuel.Equals("99"))
        {
          flag = true;
          this._Calc.CO2_Emissions_12b.Box370E = Conversions.ToDouble(this.HeatSources[3].CO2Factor);
          this._Calc.CO2_Emissions_12b.Box370 = (this._Calc.Energy_Requirements_9b.Box307d + this._Calc.Energy_Requirements_9b.Box310d) * 100.0 / this._Calc.CO2_Emissions_12b.Box367d * this._Calc.CO2_Emissions_12b.Box370E;
          this._Calc.Primary_Energy_13b.Box370E = Conversions.ToDouble(this.HeatSources[3].EnergyFactor);
          this._Calc.Primary_Energy_13b.Box370 = (this._Calc.Energy_Requirements_9b.Box307d + this._Calc.Energy_Requirements_9b.Box310d) * 100.0 / this._Calc.Primary_Energy_13b.Box367d * this._Calc.Primary_Energy_13b.Box370E;
        }
        if (!flag)
        {
          this._Calc.CO2_Emissions_12b.Box370E = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource3.Fuel, 1, "Emissions");
          this._Calc.CO2_Emissions_12b.Box370 = (this._Calc.Energy_Requirements_9b.Box307d + this._Calc.Energy_Requirements_9b.Box310d) * 100.0 / this._Calc.CO2_Emissions_12b.Box367d * this._Calc.CO2_Emissions_12b.Box370E;
          this._Calc.Primary_Energy_13b.Box370E = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource3.Fuel, 1, "Energy");
          this._Calc.Primary_Energy_13b.Box370 = (this._Calc.Energy_Requirements_9b.Box307d + this._Calc.Energy_Requirements_9b.Box310d) * 100.0 / this._Calc.Primary_Energy_13b.Box367d * this._Calc.Primary_Energy_13b.Box370E;
        }
      }
      if (this._House.MainHeating.CommunityH.NoOfAdditionalHeatSources > 3)
      {
        this._Calc.CO2_Emissions_12b.Box367e = (double) this._House.MainHeating.CommunityH.HeatSource4.Efficiency;
        this._Calc.Primary_Energy_13b.Box367e = (double) this._House.MainHeating.CommunityH.HeatSource4.Efficiency;
        bool flag = false;
        if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 && this.HeatSources[4].CommunityFuel.Equals("99"))
        {
          flag = true;
          this._Calc.CO2_Emissions_12b.Box371E = Conversions.ToDouble(this.HeatSources[4].CO2Factor);
          this._Calc.CO2_Emissions_12b.Box371 = (this._Calc.Energy_Requirements_9b.Box307e + this._Calc.Energy_Requirements_9b.Box310e) * 100.0 / this._Calc.CO2_Emissions_12b.Box367e * this._Calc.CO2_Emissions_12b.Box371E;
          this._Calc.Primary_Energy_13b.Box371E = Conversions.ToDouble(this.HeatSources[4].EnergyFactor);
          this._Calc.Primary_Energy_13b.Box371 = (this._Calc.Energy_Requirements_9b.Box307e + this._Calc.Energy_Requirements_9b.Box310e) * 100.0 / this._Calc.Primary_Energy_13b.Box367e * this._Calc.Primary_Energy_13b.Box371E;
        }
        if (!flag)
        {
          this._Calc.CO2_Emissions_12b.Box371E = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource4.Fuel, 1, "Emissions");
          this._Calc.CO2_Emissions_12b.Box371 = (this._Calc.Energy_Requirements_9b.Box307e + this._Calc.Energy_Requirements_9b.Box310e) * 100.0 / this._Calc.CO2_Emissions_12b.Box367e * this._Calc.CO2_Emissions_12b.Box371E;
          this._Calc.Primary_Energy_13b.Box371E = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource4.Fuel, 1, "Energy");
          this._Calc.Primary_Energy_13b.Box371 = (this._Calc.Energy_Requirements_9b.Box307e + this._Calc.Energy_Requirements_9b.Box310e) * 100.0 / this._Calc.Primary_Energy_13b.Box367e * this._Calc.Primary_Energy_13b.Box371E;
        }
      }
      this._Calc.CO2_Emissions_12b.Box372E = 0.519;
      this._Calc.CO2_Emissions_12b.Box372 = this._Calc.Energy_Requirements_9b.Box313 * 0.519;
      this._Calc.Primary_Energy_13b.Box372E = 3.07;
      this._Calc.Primary_Energy_13b.Box372 = this._Calc.Energy_Requirements_9b.Box313 * 3.07;
      this._Calc.CO2_Emissions_12b.Box373 = this._Calc.CO2_Emissions_12b.Box363 + this._Calc.CO2_Emissions_12b.Box364 + this._Calc.CO2_Emissions_12b.Box365 + this._Calc.CO2_Emissions_12b.Box366 + this._Calc.CO2_Emissions_12b.Box367 + this._Calc.CO2_Emissions_12b.Box368 + this._Calc.CO2_Emissions_12b.Box369 + this._Calc.CO2_Emissions_12b.Box370 + this._Calc.CO2_Emissions_12b.Box371 + this._Calc.CO2_Emissions_12b.Box372;
      this._Calc.Primary_Energy_13b.Box373 = this._Calc.Primary_Energy_13b.Box363 + this._Calc.Primary_Energy_13b.Box364 + this._Calc.Primary_Energy_13b.Box365 + this._Calc.Primary_Energy_13b.Box366 + this._Calc.Primary_Energy_13b.Box367 + this._Calc.Primary_Energy_13b.Box368 + this._Calc.Primary_Energy_13b.Box369 + this._Calc.Primary_Energy_13b.Box370 + this._Calc.Primary_Energy_13b.Box371 + this._Calc.Primary_Energy_13b.Box372;
      int systemRef = this._House.Water.SystemRef;
      if (systemRef >= 950 && systemRef <= 952)
      {
        if (this._House.Water.SystemRef == 951)
        {
          if ((double) this._House.Water.HWSComm.CHPRatio > 0.0)
          {
            this._House.Water.HWSComm.CHPPowerEff = this._House.Water.HWSComm.CHPRatio;
            this._House.Water.HWSComm.CHPRatio = 0.0f;
          }
          this._Calc.CO2_Emissions_12b.Box361W = (double) this._House.Water.HWSComm.CHPPowerEff;
          this._Calc.Primary_Energy_13b.Box361W = (double) this._House.Water.HWSComm.CHPPowerEff;
          this._Calc.CO2_Emissions_12b.Box362W = (double) this._House.Water.HWSComm.Efficiency;
          this._Calc.Primary_Energy_13b.Box362W = (double) this._House.Water.HWSComm.Efficiency;
          this._Calc.CO2_Emissions_12b.Box365EnW = this._Calc.Energy_Requirements_9b.Box310aW * 100.0 / this._Calc.CO2_Emissions_12b.Box362W;
          this._Calc.CO2_Emissions_12b.Box365EW = this.FuelCost(this._House.Water.Fuel, 1, "Emissions");
          this._Calc.CO2_Emissions_12b.Box365W = this._Calc.CO2_Emissions_12b.Box365EnW * this._Calc.CO2_Emissions_12b.Box365EW;
          this._Calc.Primary_Energy_13b.Box365EnW = this._Calc.Energy_Requirements_9b.Box310aW * 100.0 / this._Calc.CO2_Emissions_12b.Box362W;
          this._Calc.Primary_Energy_13b.Box365EW = this.FuelCost(this._House.Water.Fuel, 1, "Energy");
          this._Calc.Primary_Energy_13b.Box365W = this._Calc.Primary_Energy_13b.Box365EnW * this._Calc.Primary_Energy_13b.Box365EW;
          this._Calc.CO2_Emissions_12b.Box366EnW = this._Calc.Energy_Requirements_9b.Box310aW * this._Calc.CO2_Emissions_12b.Box361W / this._Calc.CO2_Emissions_12b.Box362W;
          this._Calc.CO2_Emissions_12b.Box366EW = 0.519;
          this._Calc.CO2_Emissions_12b.Box366W = -this._Calc.CO2_Emissions_12b.Box366EnW * this._Calc.CO2_Emissions_12b.Box366EW;
          this._Calc.Primary_Energy_13b.Box366EnW = this._Calc.Energy_Requirements_9b.Box310aW * this._Calc.CO2_Emissions_12b.Box361W / this._Calc.CO2_Emissions_12b.Box362W;
          this._Calc.Primary_Energy_13b.Box366EW = 3.07;
          this._Calc.Primary_Energy_13b.Box366W = -this._Calc.Primary_Energy_13b.Box366EnW * this._Calc.Primary_Energy_13b.Box366EW;
        }
        else
        {
          this._Calc.CO2_Emissions_12b.Box367aW = (double) this._House.Water.HWSComm.Efficiency;
          this._Calc.Primary_Energy_13b.Box367aW = (double) this._House.Water.HWSComm.Efficiency;
          bool flag = false;
          if (this._House.Water.HWSComm.FromDatabase && this.HeatSourcesWater[0].CommunityFuel.Equals("99"))
          {
            flag = true;
            this._Calc.CO2_Emissions_12b.Box367_EW = Conversions.ToDouble(this.HeatSourcesWater[0].CO2Factor);
            this._Calc.CO2_Emissions_12b.Box367W = this._Calc.Energy_Requirements_9b.Box310aW * 100.0 / this._Calc.CO2_Emissions_12b.Box367aW * this._Calc.CO2_Emissions_12b.Box367_EW;
            this._Calc.Primary_Energy_13b.Box367_EW = Conversions.ToDouble(this.HeatSourcesWater[0].EnergyFactor);
            this._Calc.Primary_Energy_13b.Box367W = this._Calc.Energy_Requirements_9b.Box310aW * 100.0 / this._Calc.Primary_Energy_13b.Box367aW * this._Calc.Primary_Energy_13b.Box367_EW;
          }
          if (!flag)
          {
            this._Calc.CO2_Emissions_12b.Box367_EW = this.FuelCost(this._House.Water.Fuel, 1, "Emissions");
            this._Calc.CO2_Emissions_12b.Box367W = this._Calc.Energy_Requirements_9b.Box310aW * 100.0 / this._Calc.CO2_Emissions_12b.Box367aW * this._Calc.CO2_Emissions_12b.Box367_EW;
            this._Calc.Primary_Energy_13b.Box367_EW = this.FuelCost(this._House.Water.Fuel, 1, "Energy");
            this._Calc.Primary_Energy_13b.Box367W = this._Calc.Energy_Requirements_9b.Box310aW * 100.0 / this._Calc.Primary_Energy_13b.Box367aW * this._Calc.Primary_Energy_13b.Box367_EW;
          }
        }
        if (this._House.Water.HWSComm.NoOfAdditionalHeatSources > 0)
        {
          this._Calc.CO2_Emissions_12b.Box367bW = (double) this._House.Water.HWSComm.HeatSource1.Efficiency;
          this._Calc.Primary_Energy_13b.Box367bW = (double) this._House.Water.HWSComm.HeatSource1.Efficiency;
          bool flag = false;
          if (this._House.Water.HWSComm.FromDatabase && this.HeatSourcesWater[1].CommunityFuel.Equals("99"))
          {
            flag = true;
            this._Calc.CO2_Emissions_12b.Box368EW = Conversions.ToDouble(this.HeatSourcesWater[1].CO2Factor);
            this._Calc.CO2_Emissions_12b.Box368W = this._Calc.Energy_Requirements_9b.Box310bW * 100.0 / this._Calc.CO2_Emissions_12b.Box367bW * this._Calc.CO2_Emissions_12b.Box368EW;
            this._Calc.Primary_Energy_13b.Box368EW = Conversions.ToDouble(this.HeatSourcesWater[1].EnergyFactor);
            this._Calc.Primary_Energy_13b.Box368W = this._Calc.Energy_Requirements_9b.Box310bW * 100.0 / this._Calc.Primary_Energy_13b.Box367bW * this._Calc.Primary_Energy_13b.Box368EW;
          }
          if (!flag)
          {
            this._Calc.CO2_Emissions_12b.Box368EW = this.FuelCost(this._House.Water.HWSComm.HeatSource1.Fuel, 1, "Emissions");
            this._Calc.CO2_Emissions_12b.Box368W = this._Calc.Energy_Requirements_9b.Box310bW * 100.0 / this._Calc.CO2_Emissions_12b.Box367bW * this._Calc.CO2_Emissions_12b.Box368EW;
            this._Calc.Primary_Energy_13b.Box368EW = this.FuelCost(this._House.Water.HWSComm.HeatSource1.Fuel, 1, "Energy");
            this._Calc.Primary_Energy_13b.Box368W = this._Calc.Energy_Requirements_9b.Box310bW * 100.0 / this._Calc.Primary_Energy_13b.Box367bW * this._Calc.Primary_Energy_13b.Box368EW;
          }
        }
        if (this._House.Water.HWSComm.NoOfAdditionalHeatSources > 1)
        {
          this._Calc.CO2_Emissions_12b.Box367cW = (double) this._House.Water.HWSComm.HeatSource2.Efficiency;
          this._Calc.Primary_Energy_13b.Box367cW = (double) this._House.Water.HWSComm.HeatSource2.Efficiency;
          bool flag = false;
          if (this._House.Water.HWSComm.FromDatabase && this.HeatSourcesWater[2].CommunityFuel.Equals("99"))
          {
            flag = true;
            this._Calc.CO2_Emissions_12b.Box369EW = Conversions.ToDouble(this.HeatSourcesWater[2].CO2Factor);
            this._Calc.CO2_Emissions_12b.Box369W = this._Calc.Energy_Requirements_9b.Box310cW * 100.0 / this._Calc.CO2_Emissions_12b.Box367cW * this._Calc.CO2_Emissions_12b.Box369EW;
            this._Calc.Primary_Energy_13b.Box369EW = Conversions.ToDouble(this.HeatSourcesWater[2].EnergyFactor);
            this._Calc.Primary_Energy_13b.Box369W = this._Calc.Energy_Requirements_9b.Box310cW * 100.0 / this._Calc.Primary_Energy_13b.Box367cW * this._Calc.Primary_Energy_13b.Box369EW;
          }
          if (!flag)
          {
            this._Calc.CO2_Emissions_12b.Box369EW = this.FuelCost(this._House.Water.HWSComm.HeatSource2.Fuel, 1, "Emissions");
            this._Calc.CO2_Emissions_12b.Box369W = this._Calc.Energy_Requirements_9b.Box310cW * 100.0 / this._Calc.CO2_Emissions_12b.Box367cW * this._Calc.CO2_Emissions_12b.Box369EW;
            this._Calc.Primary_Energy_13b.Box369EW = this.FuelCost(this._House.Water.HWSComm.HeatSource2.Fuel, 1, "Energy");
            this._Calc.Primary_Energy_13b.Box369W = this._Calc.Energy_Requirements_9b.Box310cW * 100.0 / this._Calc.Primary_Energy_13b.Box367cW * this._Calc.Primary_Energy_13b.Box369EW;
          }
        }
        if (this._House.Water.HWSComm.NoOfAdditionalHeatSources > 2)
        {
          this._Calc.CO2_Emissions_12b.Box367dW = (double) this._House.Water.HWSComm.HeatSource3.Efficiency;
          this._Calc.Primary_Energy_13b.Box367dW = (double) this._House.Water.HWSComm.HeatSource3.Efficiency;
          bool flag = false;
          if (this._House.Water.HWSComm.FromDatabase && this.HeatSourcesWater[3].CommunityFuel.Equals("99"))
          {
            flag = true;
            this._Calc.CO2_Emissions_12b.Box370EW = Conversions.ToDouble(this.HeatSourcesWater[3].CO2Factor);
            this._Calc.CO2_Emissions_12b.Box370W = this._Calc.Energy_Requirements_9b.Box310dW * 100.0 / this._Calc.CO2_Emissions_12b.Box367dW * this._Calc.CO2_Emissions_12b.Box370EW;
            this._Calc.Primary_Energy_13b.Box370EW = Conversions.ToDouble(this.HeatSourcesWater[3].EnergyFactor);
            this._Calc.Primary_Energy_13b.Box370W = this._Calc.Energy_Requirements_9b.Box310dW * 100.0 / this._Calc.Primary_Energy_13b.Box367dW * this._Calc.Primary_Energy_13b.Box370EW;
          }
          if (!flag)
          {
            this._Calc.CO2_Emissions_12b.Box370EW = this.FuelCost(this._House.Water.HWSComm.HeatSource3.Fuel, 1, "Emissions");
            this._Calc.CO2_Emissions_12b.Box370W = this._Calc.Energy_Requirements_9b.Box310dW * 100.0 / this._Calc.CO2_Emissions_12b.Box367dW * this._Calc.CO2_Emissions_12b.Box370EW;
            this._Calc.Primary_Energy_13b.Box370EW = this.FuelCost(this._House.Water.HWSComm.HeatSource3.Fuel, 1, "Energy");
            this._Calc.Primary_Energy_13b.Box370W = this._Calc.Energy_Requirements_9b.Box310dW * 100.0 / this._Calc.Primary_Energy_13b.Box367dW * this._Calc.Primary_Energy_13b.Box370EW;
          }
        }
        if (this._House.Water.HWSComm.NoOfAdditionalHeatSources > 3)
        {
          this._Calc.CO2_Emissions_12b.Box367eW = (double) this._House.Water.HWSComm.HeatSource4.Efficiency;
          this._Calc.Primary_Energy_13b.Box367eW = (double) this._House.Water.HWSComm.HeatSource4.Efficiency;
          bool flag = false;
          if (this._House.Water.HWSComm.FromDatabase && this.HeatSourcesWater[4].CommunityFuel.Equals("99"))
          {
            flag = true;
            this._Calc.CO2_Emissions_12b.Box371EW = Conversions.ToDouble(this.HeatSourcesWater[4].CO2Factor);
            this._Calc.CO2_Emissions_12b.Box371W = this._Calc.Energy_Requirements_9b.Box310eW * 100.0 / this._Calc.CO2_Emissions_12b.Box367eW * this._Calc.CO2_Emissions_12b.Box371EW;
            this._Calc.Primary_Energy_13b.Box371EW = Conversions.ToDouble(this.HeatSourcesWater[4].EnergyFactor);
            this._Calc.Primary_Energy_13b.Box371W = this._Calc.Energy_Requirements_9b.Box310eW * 100.0 / this._Calc.Primary_Energy_13b.Box367eW * this._Calc.Primary_Energy_13b.Box371EW;
          }
          if (!flag)
          {
            this._Calc.CO2_Emissions_12b.Box371EW = this.FuelCost(this._House.Water.HWSComm.HeatSource4.Fuel, 1, "Emissions");
            this._Calc.CO2_Emissions_12b.Box371W = this._Calc.Energy_Requirements_9b.Box310eW * 100.0 / this._Calc.CO2_Emissions_12b.Box367eW * this._Calc.CO2_Emissions_12b.Box371EW;
            this._Calc.Primary_Energy_13b.Box371EW = this.FuelCost(this._House.Water.HWSComm.HeatSource4.Fuel, 1, "Energy");
            this._Calc.Primary_Energy_13b.Box371W = this._Calc.Energy_Requirements_9b.Box310eW * 100.0 / this._Calc.Primary_Energy_13b.Box367eW * this._Calc.Primary_Energy_13b.Box371EW;
          }
        }
        this._Calc.CO2_Emissions_12b.Box372EW = 0.519;
        this._Calc.CO2_Emissions_12b.Box372W = this._Calc.Energy_Requirements_9b.Box313W * 0.519;
        this._Calc.Primary_Energy_13b.Box372EW = 3.07;
        this._Calc.Primary_Energy_13b.Box372W = this._Calc.Energy_Requirements_9b.Box313W * 3.07;
        CO2_Emissions_12b2012 co2Emissions12b;
        double num1 = (co2Emissions12b = this._Calc.CO2_Emissions_12b).Box373 + (this._Calc.CO2_Emissions_12b.Box363W + this._Calc.CO2_Emissions_12b.Box364W + this._Calc.CO2_Emissions_12b.Box365W + this._Calc.CO2_Emissions_12b.Box366W + this._Calc.CO2_Emissions_12b.Box367W + this._Calc.CO2_Emissions_12b.Box368W + this._Calc.CO2_Emissions_12b.Box369W + this._Calc.CO2_Emissions_12b.Box370W + this._Calc.CO2_Emissions_12b.Box371W + this._Calc.CO2_Emissions_12b.Box372W);
        co2Emissions12b.Box373 = num1;
        Primary_Energy_13b2012 primaryEnergy13b;
        double num2 = (primaryEnergy13b = this._Calc.Primary_Energy_13b).Box373 + (this._Calc.Primary_Energy_13b.Box363W + this._Calc.Primary_Energy_13b.Box364W + this._Calc.Primary_Energy_13b.Box365W + this._Calc.Primary_Energy_13b.Box366W + this._Calc.Primary_Energy_13b.Box367W + this._Calc.Primary_Energy_13b.Box368W + this._Calc.Primary_Energy_13b.Box369W + this._Calc.Primary_Energy_13b.Box370W + this._Calc.Primary_Energy_13b.Box371W + this._Calc.Primary_Energy_13b.Box372W);
        primaryEnergy13b.Box373 = num2;
      }
      if (this._Calc.CO2_Emissions_12b.Box373 < 0.0)
        this._Box373_LessZero = this._Calc.CO2_Emissions_12b.Box373;
      if ((uint) this._House.SecHeating.SAPTableCode > 0U)
      {
        if (Operators.CompareString(this._House.SecHeating.Fuel, "Electricity", false) == 0)
        {
          this._Calc.CO2_Emissions_12b.Box374E = this.FuelCost(this.GetElectricityType(0), 1, "Emissions");
          this._Calc.Primary_Energy_13b.Box374E = this.FuelCost(this.GetElectricityType(0), 1, "Energy");
        }
        else
        {
          this._Calc.CO2_Emissions_12b.Box374E = this.FuelCost(this._House.SecHeating.Fuel, 1, "Emissions");
          this._Calc.Primary_Energy_13b.Box374E = this.FuelCost(this._House.SecHeating.Fuel, 1, "Energy");
        }
        this._Calc.CO2_Emissions_12b.Box374 = this._Calc.CO2_Emissions_12b.Box374E * this._Calc.Energy_Requirements_9b.Box309;
        this._Calc.Primary_Energy_13b.Box374 = this._Calc.Primary_Energy_13b.Box374E * this._Calc.Energy_Requirements_9b.Box309;
      }
      switch (this._House.Water.SystemRef)
      {
        case 903:
        case 909:
        case 999:
          this._Calc.CO2_Emissions_12b.Box375E = 0.519;
          this._Calc.CO2_Emissions_12b.Box375 = this._Calc.Energy_Requirements_9b.Box312 * 0.519;
          this._Calc.Primary_Energy_13b.Box375E = 3.07;
          this._Calc.Primary_Energy_13b.Box375 = this._Calc.Energy_Requirements_9b.Box312 * 3.07;
          break;
        default:
          this._Calc.CO2_Emissions_12b.Box375E = this.FuelCost(this._House.Water.Fuel, 1, "Emissions");
          this._Calc.CO2_Emissions_12b.Box375 = this._Calc.Energy_Requirements_9b.Box312 * this._Calc.CO2_Emissions_12b.Box375E;
          this._Calc.Primary_Energy_13b.Box375E = this.FuelCost(this._House.Water.Fuel, 1, "Energy");
          this._Calc.Primary_Energy_13b.Box375 = this._Calc.Energy_Requirements_9b.Box312 * this._Calc.Primary_Energy_13b.Box375E;
          break;
      }
      this._Calc.CO2_Emissions_12b.Box376 = this._Calc.CO2_Emissions_12b.Box373 + this._Calc.CO2_Emissions_12b.Box374 + this._Calc.CO2_Emissions_12b.Box375;
      this._Calc.Primary_Energy_13b.Box376 = this._Calc.Primary_Energy_13b.Box373 + this._Calc.Primary_Energy_13b.Box374 + this._Calc.Primary_Energy_13b.Box375;
      this._Calc.CO2_Emissions_12b.Box377E = 0.519;
      this._Calc.CO2_Emissions_12b.Box377 = this._Calc.Energy_Requirements_9b.Box315 * 0.519;
      this._Calc.Primary_Energy_13b.Box377E = 3.07;
      this._Calc.Primary_Energy_13b.Box377 = this._Calc.Energy_Requirements_9b.Box315 * 3.07;
      this._Calc.CO2_Emissions_12b.Box378E = 0.519;
      this._Calc.CO2_Emissions_12b.Box378 = this._Calc.Energy_Requirements_9b.Box331 * 0.519;
      this._Calc.Primary_Energy_13b.Box378E = 3.07;
      this._Calc.Primary_Energy_13b.Box378 = this._Calc.Energy_Requirements_9b.Box331 * 3.07;
      this._Calc.CO2_Emissions_12b.Box379E = 0.519;
      this._Calc.CO2_Emissions_12b.Box379 = this._Calc.Energy_Requirements_9b.Box332 * 0.519;
      this._Calc.Primary_Energy_13b.Box379E = 3.07;
      this._Calc.Primary_Energy_13b.Box379 = this._Calc.Energy_Requirements_9b.Box332 * 3.07;
      if (this._House.Renewable.Special.Include)
      {
        this._Calc.CO2_Emissions_12b.AppendixQ_Item_Count = this._House.Renewable.Special.Special.Length;
        this._Calc.Primary_Energy_13b.AppendixQ_Item_Count = this._House.Renewable.Special.Special.Length;
        int num = checked (this._House.Renewable.Special.Special.Length - 1);
        int Index = 0;
        while (Index <= num)
        {
          if (!this._House.Renewable.Special.Special[Index].MakeEmissionsOnly)
          {
            if (Operators.CompareString(this._House.Renewable.Special.Special[Index].FuelSaved, "Electricity", false) == 0)
            {
              this._Calc.CO2_Emissions_12b.get_AppendixQ_Item(Index).Energy_Saved_EF = this.FuelCost(this.GetElectricityType(0), 1, "Emissions");
              this._Calc.Primary_Energy_13b.get_AppendixQ_Item(Index).Energy_Saved_EF = this.FuelCost(this.GetElectricityType(0), 1, "Energy");
            }
            else
            {
              this._Calc.CO2_Emissions_12b.get_AppendixQ_Item(Index).Energy_Saved_EF = this.FuelCost(this._House.Renewable.Special.FuelSaved, 1, "Emissions");
              this._Calc.Primary_Energy_13b.get_AppendixQ_Item(Index).Energy_Saved_EF = this.FuelCost(this._House.Renewable.Special.FuelSaved, 1, "Energy");
            }
            this._Calc.CO2_Emissions_12b.get_AppendixQ_Item(Index).Energy_Saved_Emissions = this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index).Energy_Saved * this._Calc.CO2_Emissions_12b.get_AppendixQ_Item(Index).Energy_Saved_EF;
            this._Calc.Primary_Energy_13b.get_AppendixQ_Item(Index).Energy_Saved_Energy = this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index).Energy_Saved * this._Calc.Primary_Energy_13b.get_AppendixQ_Item(Index).Energy_Saved_EF;
            if (Operators.CompareString(this._House.Renewable.Special.Special[Index].FuelUsed, "Electricity", false) == 0)
            {
              this._Calc.CO2_Emissions_12b.get_AppendixQ_Item(Index).Energy_Used_EF = this.FuelCost(this.GetElectricityType(0), 1, "Emissions");
              this._Calc.Primary_Energy_13b.get_AppendixQ_Item(Index).Energy_Used_EF = this.FuelCost(this.GetElectricityType(0), 1, "Energy");
            }
            else
            {
              this._Calc.CO2_Emissions_12b.get_AppendixQ_Item(Index).Energy_Used_EF = this.FuelCost(this._House.Renewable.Special.Special[Index].FuelUsed, 1, "Emissions");
              this._Calc.Primary_Energy_13b.get_AppendixQ_Item(Index).Energy_Used_EF = this.FuelCost(this._House.Renewable.Special.Special[Index].FuelUsed, 1, "Energy");
            }
            this._Calc.CO2_Emissions_12b.get_AppendixQ_Item(Index).Energy_Used_Emissions = this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index).Energy_Used * this._Calc.CO2_Emissions_12b.get_AppendixQ_Item(Index).Energy_Used_EF;
            this._Calc.Primary_Energy_13b.get_AppendixQ_Item(Index).Energy_Used_Energy = this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index).Energy_Used * this._Calc.Primary_Energy_13b.get_AppendixQ_Item(Index).Energy_Used_EF;
          }
          else
          {
            this._Calc.CO2_Emissions_12b.get_AppendixQ_Item(Index).Energy_Saved_Emissions = -(double) this._House.Renewable.Special.Special[Index].EmissionsAmount;
            this._Calc.CO2_Emissions_12b.get_AppendixQ_Item(Index).Energy_Used_Emissions = (double) this._House.Renewable.Special.Special[Index].EmissionsAmountCreated;
          }
          checked { ++Index; }
        }
      }
      this._Calc.CO2_Emissions_12b.Box383 = this._Calc.CO2_Emissions_12b.Box376 + this._Calc.CO2_Emissions_12b.Box377 + this._Calc.CO2_Emissions_12b.Box378 + this._Calc.CO2_Emissions_12b.Box379 + this._Calc.CO2_Emissions_12b.Box380 + this._Calc.CO2_Emissions_12b.Box381 + this._Calc.CO2_Emissions_12b.Box382;
      this._Calc.Primary_Energy_13b.Box383 = this._Calc.Primary_Energy_13b.Box376 + this._Calc.Primary_Energy_13b.Box377 + this._Calc.Primary_Energy_13b.Box378 + this._Calc.Primary_Energy_13b.Box379 + this._Calc.Primary_Energy_13b.Box380 + this._Calc.Primary_Energy_13b.Box381 + this._Calc.Primary_Energy_13b.Box382;
      if (this._House.Renewable.HydroGeneration.Inlcude | this._House.Renewable.AAEGeneration.Inlcude)
      {
        CO2_Emissions_12b2012 co2Emissions12b;
        int num3 = checked ((co2Emissions12b = this._Calc.CO2_Emissions_12b).Box380_Count + 1);
        co2Emissions12b.Box380_Count = num3;
        this._Calc.CO2_Emissions_12b.set_Box380_EFactors(checked (this._Calc.CO2_Emissions_12b.Box380_EFactors.Length - 1), this.FuelCost(this.GetElectricityType(0), 1, "Emissions"));
        this._Calc.CO2_Emissions_12b.Box380_Emissions[checked (this._Calc.CO2_Emissions_12b.Box380_Emissions.Length - 1)] = this._Calc.Energy_Requirements_9b.Box335a * this._Calc.CO2_Emissions_12b.get_Box380_EFactors(checked (this._Calc.CO2_Emissions_12b.Box380_EFactors.Length - 1));
        Primary_Energy_13b2012 primaryEnergy13b;
        int num4 = checked ((primaryEnergy13b = this._Calc.Primary_Energy_13b).Box380_Count + 1);
        primaryEnergy13b.Box380_Count = num4;
        this._Calc.Primary_Energy_13b.set_Box380_EFactors(checked (this._Calc.Primary_Energy_13b.Box380_EFactors.Length - 1), this.FuelCost(this.GetElectricityType(0), 1, "Energy"));
        this._Calc.Primary_Energy_13b.set_Box380_Energy(checked (this._Calc.Primary_Energy_13b.Box380_Energy.Length - 1), this._Calc.Energy_Requirements_9b.Box335a * this._Calc.Primary_Energy_13b.get_Box380_EFactors(checked (this._Calc.Primary_Energy_13b.Box380_EFactors.Length - 1)));
      }
      this._Calc.CO2_Emissions_12b.Box383 = this._Calc.CO2_Emissions_12b.Box376 + this._Calc.CO2_Emissions_12b.Box377 + this._Calc.CO2_Emissions_12b.Box378 + this._Calc.CO2_Emissions_12b.Box379 + this._Calc.CO2_Emissions_12b.Box380 + this._Calc.CO2_Emissions_12b.Box381 + this._Calc.CO2_Emissions_12b.Box382 + this._Calc.CO2_Emissions_12a.Box269;
      this._Calc.Primary_Energy_13b.Box383 = this._Calc.Primary_Energy_13b.Box376 + this._Calc.Primary_Energy_13b.Box377 + this._Calc.Primary_Energy_13b.Box378 + this._Calc.Primary_Energy_13b.Box379 + this._Calc.Primary_Energy_13b.Box380 + this._Calc.Primary_Energy_13b.Box381 + this._Calc.Primary_Energy_13b.Box382 + this._Calc.CO2_Emissions_12a.Box269;
      this._Calc.CO2_Emissions_12b.Box384 = this._Calc.CO2_Emissions_12b.Box383 / this._Calc.Dimensions.Box4;
      this._Calc.CO2_Emissions_12b.CF = this._Calc.CO2_Emissions_12b.Box383 / (this._Calc.Dimensions.Box4 + 45.0);
      this._Calc.CO2_Emissions_12b.Box385 = this._Calc.CO2_Emissions_12b.CF < 28.3 ? 100.0 - 1.34 * this._Calc.CO2_Emissions_12b.CF : 200.0 - 95.0 * Math.Log10(this._Calc.CO2_Emissions_12b.CF);
      this._Calc.CO2_Emissions_12b.EIRating = this._Calc.CO2_Emissions_12b.Box385 >= 0.0 ? (!SAP_Module.Admin ? Conversions.ToDouble(Microsoft.VisualBasic.Strings.Format((object) this._Calc.CO2_Emissions_12b.Box385, "#0")) : Math.Round(this._Calc.CO2_Emissions_12b.Box385, 2)) : 1.0;
      if (this._Calc.CO2_Emissions_12b.EIRating < 1.0)
        this._Calc.CO2_Emissions_12b.EIRating = 1.0;
      double eiRating = this._Calc.CO2_Emissions_12b.EIRating;
      if (eiRating >= 1.0 && eiRating <= 20.0)
        this._Calc.CO2_Emissions_12b.EIBand = "G";
      else if (eiRating >= 21.0 && eiRating <= 38.0)
        this._Calc.CO2_Emissions_12b.EIBand = "F";
      else if (eiRating >= 39.0 && eiRating <= 54.0)
        this._Calc.CO2_Emissions_12b.EIBand = "E";
      else if (eiRating >= 55.0 && eiRating <= 68.0)
        this._Calc.CO2_Emissions_12b.EIBand = "D";
      else if (eiRating >= 69.0 && eiRating <= 80.0)
        this._Calc.CO2_Emissions_12b.EIBand = "C";
      else if (eiRating >= 81.0 && eiRating <= 91.0)
      {
        this._Calc.CO2_Emissions_12b.EIBand = "B";
      }
      else
      {
        if (eiRating < 92.0)
          return;
        this._Calc.CO2_Emissions_12b.EIBand = "A";
      }
    }

    private void Energy_Route()
    {
      if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 & (uint) Operators.CompareString(this._House.MainHeating.HGroup, "Community heating schemes", false) > 0U)
      {
        this.Energy_Requirements_9a();
        this.Fuel_Costs_10a();
        this.SAP_rating_11a();
      }
      else
      {
        int sapTableCode = this._House.MainHeating.SAPTableCode;
        if (sapTableCode >= 306 && sapTableCode <= 310)
        {
          this.Energy_Requirements_9b();
          this.Fuel_Costs_10b();
          this.SAP_rating_11b();
        }
        else
        {
          this.Energy_Requirements_9a();
          this.Fuel_Costs_10a();
          this.SAP_rating_11a();
        }
      }
    }

    private void Energy_Requirements_9a()
    {
      SAP_Module.Dwelling dwelling1 = new SAP_Module.Dwelling();
      RuntimeHelpers.GetObjectValue(new object());
      RuntimeHelpers.GetObjectValue(new object());
      SAP_Module.Dwelling dwelling2;
      object objectValue1;
      object objectValue2;
      if (this.OccupancyCalc)
      {
        dwelling2 = this.OriginalSAPDwelling;
        objectValue1 = RuntimeHelpers.GetObjectValue(this.SEDBUKFound_OA);
        objectValue2 = RuntimeHelpers.GetObjectValue(this.SEDBUKFound2_OA);
      }
      else
      {
        dwelling2 = this._House;
        objectValue1 = RuntimeHelpers.GetObjectValue(this.SEDBUKFound);
        objectValue2 = RuntimeHelpers.GetObjectValue(this.SEDBUKFound2);
      }
      Energy_Requirements_9a2012 energyRequirements9a = this._Calc.Energy_Requirements_9a;
      if ((uint) this._House.SecHeating.SAPTableCode > 0U)
      {
        if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0)
        {
          if (Operators.CompareString(this._House.MainHeating.SGroup, "Gas boilers and oil boilers", false) == 0)
            energyRequirements9a.Box201 = 0.1;
          else if (Operators.CompareString(this._House.MainHeating.SGroup, "Micro-cogeneration (micro-CHP)", false) == 0)
            energyRequirements9a.Box201 = this._Calc.HeatLoss.CHPCalc.SecFraction;
          else if (Operators.CompareString(this._House.MainHeating.SGroup, "Solid fuel boilers", false) == 0)
            energyRequirements9a.Box201 = 0.1;
          else if (this._House.MainHeating.SGroup.Contains("heat pumps"))
            energyRequirements9a.Box201 = this._Calc.HeatLoss.HPCalc.SecFraction;
        }
        else
        {
          int sapTableCode = this._House.MainHeating.SAPTableCode;
          if (sapTableCode < 190 || sapTableCode == 191 || sapTableCode == 192 || sapTableCode >= 193 && sapTableCode <= 230)
            energyRequirements9a.Box201 = 0.1;
          else if (sapTableCode >= 301 && sapTableCode <= 305)
            energyRequirements9a.Box201 = 0.0;
          else if (sapTableCode >= 401 && sapTableCode <= 403 || sapTableCode == 405 || sapTableCode == 406)
            energyRequirements9a.Box201 = 0.15;
          else if (sapTableCode == 404 || sapTableCode == 407 || sapTableCode == 408)
            energyRequirements9a.Box201 = 0.1;
          else if (sapTableCode >= 421 && sapTableCode <= 425)
            energyRequirements9a.Box201 = 0.1;
          else if (sapTableCode >= 501 && sapTableCode <= 527)
            energyRequirements9a.Box201 = 0.1;
          else if (sapTableCode >= 601 && sapTableCode <= 636)
            energyRequirements9a.Box201 = 0.1;
          else if (sapTableCode >= 691 && sapTableCode <= 694)
            energyRequirements9a.Box201 = 0.2;
          else if (sapTableCode == 701)
            energyRequirements9a.Box201 = 0.1;
        }
      }
      else if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0)
      {
        if (Operators.CompareString(this._House.MainHeating.SGroup, "Micro-cogeneration (micro-CHP)", false) == 0)
          energyRequirements9a.Box201 = this._Calc.HeatLoss.CHPCalc.SecFraction;
        else if (this._House.MainHeating.SGroup.Contains("heat pumps"))
          energyRequirements9a.Box201 = this._Calc.HeatLoss.HPCalc.SecFraction;
      }
      if (this._House.MainHeating.SAPTableCode == 192)
        this.AppendixF();
      if (this.OccupancyCalc | this.StandardOccupancyCalc)
      {
        if (this._House.SecHeating.SAPTableCode == 693)
          energyRequirements9a.Box201 = 0.0;
        if (this.OccupancyData.SecondaryHeating == OccupancyClass.HeatingOveride.None)
          energyRequirements9a.Box201 = 0.0;
        if (this.OccupancyData.SecondaryHeatingFraction != 0.0)
          energyRequirements9a.Box201 = this.OccupancyData.SecondaryHeatingFraction;
      }
      if (this._House.SecHeating.SAPTableCode == 0)
        this._House.SecHeating.Fuel = "Electricity";
      energyRequirements9a.Box202 = 1.0 - energyRequirements9a.Box201;
      energyRequirements9a.Box203 = 0.0;
      if (this._House.IncludeMainHeating2)
        energyRequirements9a.Box203 = (double) this._House.HeatFractionSec;
      energyRequirements9a.Box204 = energyRequirements9a.Box202 * (1.0 - energyRequirements9a.Box203);
      energyRequirements9a.Box205 = energyRequirements9a.Box202 * energyRequirements9a.Box203;
      if (Operators.CompareString(this._House.SecHeating.Fuel, "", false) == 0)
        this._House.SecHeating.SAPTableCode = 0;
      if (this._House.SecHeating.SAPTableCode == 0 & this._House.MainHeating.SAPTableCode != 192 & this._Calc.HeatLoss.CHPCalc.SecFraction == 0.0 & this._Calc.HeatLoss.HPCalc.SecFraction == 0.0)
        energyRequirements9a.Box201 = 0.0;
      double box206;
      if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0)
      {
        if (Operators.CompareString(this._House.MainHeating.SGroup, "Gas boilers and oil boilers", false) == 0)
        {
          energyRequirements9a.Box206 = Conversions.ToDouble(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "WinterEff", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
          energyRequirements9a._Box206Uncorrected = energyRequirements9a.Box206;
          this.Efficiency_Adustments(1, 1);
        }
        else if (Operators.CompareString(this._House.MainHeating.SGroup, "Micro-cogeneration (micro-CHP)", false) == 0)
        {
          energyRequirements9a.Box206 = this._Calc.HeatLoss.CHPCalc.nspace;
          energyRequirements9a._Box206Uncorrected = energyRequirements9a.Box206;
        }
        else if (this._House.MainHeating.SGroup.Contains("heat pumps"))
        {
          energyRequirements9a.Box206 = this._Calc.HeatLoss.HPCalc.nspace;
          energyRequirements9a._Box206Uncorrected = energyRequirements9a.Box206;
        }
        else if (Operators.CompareString(this._House.MainHeating.SGroup, "Solid fuel boilers", false) == 0)
        {
          try
          {
            if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "SAPEff", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 0.0)
            {
              energyRequirements9a.Box206 = (double) this.CalcMissingEff(this._House.MainHeating.SEDBUK);
              energyRequirements9a._Box206Uncorrected = energyRequirements9a.Box206;
            }
            else
            {
              energyRequirements9a.Box206 = Conversions.ToDouble(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "SAPEff", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
              energyRequirements9a._Box206Uncorrected = energyRequirements9a.Box206;
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            energyRequirements9a.Box206 = (double) this.CalcMissingEff(this._House.MainHeating.SEDBUK);
            energyRequirements9a._Box206Uncorrected = energyRequirements9a.Box206;
            energyRequirements9a._Box206Uncorrected = energyRequirements9a.Box206;
            ProjectData.ClearProjectError();
          }
        }
        else if (this._House.MainHeating.HGroup.Equals("Warm air systems (Not heat pump)"))
        {
          energyRequirements9a.Box206Uncorrected = Conversion.Val(((PCDF.WarmAir) this.SEDBUKFound).Seasonal_heating_efficiency);
          energyRequirements9a.Box206 = energyRequirements9a.Box206Uncorrected;
        }
      }
      else
      {
        if (Operators.CompareString(this._House.MainHeating.InforSource, "SAP Tables", false) == 0)
        {
          int sapTableCode = this._House.MainHeating.SAPTableCode;
          if (sapTableCode < 142 || sapTableCode >= 211 && sapTableCode <= 230 || sapTableCode >= 521 && sapTableCode <= 527)
          {
            energyRequirements9a.Box206 = Conversion.Val(this.SAPHeating.EffA);
            energyRequirements9a._Box206Uncorrected = energyRequirements9a.Box206;
            if (this._House.MainHeating.MCSCert)
            {
              switch (this._House.MainHeating.SAPTableCode)
              {
                case 211:
                case 213:
                  Energy_Requirements_9a2012 requirements9a2012_1;
                  double num1 = (requirements9a2012_1 = energyRequirements9a).Box206 * 1.39;
                  requirements9a2012_1.Box206 = num1;
                  break;
                case 214:
                  Energy_Requirements_9a2012 requirements9a2012_2;
                  double num2 = (requirements9a2012_2 = energyRequirements9a).Box206 * 1.47;
                  requirements9a2012_2.Box206 = num2;
                  break;
                case 221:
                case 223:
                  Energy_Requirements_9a2012 requirements9a2012_3;
                  double num3 = (requirements9a2012_3 = energyRequirements9a).Box206 * 1.32;
                  requirements9a2012_3.Box206 = num3;
                  break;
                case 224:
                  Energy_Requirements_9a2012 requirements9a2012_4;
                  double num4 = (requirements9a2012_4 = energyRequirements9a).Box206 * 1.03;
                  requirements9a2012_4.Box206 = num4;
                  break;
              }
            }
            if (this._TER & (uint) Operators.CompareString(this._House.Address.Country, "Scotland", false) > 0U)
              energyRequirements9a.Box206 = 78.9;
          }
          else
          {
            energyRequirements9a.Box206 = (double) this._House.MainHeating.MainEff;
            energyRequirements9a._Box206Uncorrected = energyRequirements9a.Box206;
          }
        }
        else
        {
          energyRequirements9a.Box206 = (double) this._House.MainHeating.MainEff;
          energyRequirements9a._Box206Uncorrected = energyRequirements9a.Box206;
          if (this._House.MainHeating.SAPTableCode < 142 && Operators.CompareString(this._House.MainHeating.InforSource, "Manufacturer Declaration", false) == 0)
          {
            if (this._House.MainHeating.SEDBUK2005)
            {
              energyRequirements9a.Box206 = this.Convertto2009(energyRequirements9a.Box206, false);
              energyRequirements9a._Box206Uncorrected = energyRequirements9a.Box206;
            }
            else
            {
              energyRequirements9a.Box206 = this.Change2009(energyRequirements9a.Box206, false);
              energyRequirements9a._Box206Uncorrected = energyRequirements9a.Box206;
            }
            box206 = energyRequirements9a.Box206;
          }
        }
        int sapTableCode1 = this._House.MainHeating.SAPTableCode;
        if (sapTableCode1 < 150)
          this.Efficiency_Adustments(1, 1);
        else if (sapTableCode1 >= 301 && sapTableCode1 <= 305)
          this.Efficiency_Adustments(2, 1);
        else if (sapTableCode1 >= 201 && sapTableCode1 <= 230 || sapTableCode1 >= 521 && sapTableCode1 <= 527)
          this.Efficiency_Adustments(3, 1);
      }
      energyRequirements9a.Box207 = 0.0;
      if (this._House.IncludeMainHeating2)
      {
        if (Operators.CompareString(this._House.MainHeating2.InforSource, "Boiler Database", false) == 0)
        {
          if (Operators.CompareString(this._House.MainHeating2.SGroup, "Gas boilers and oil boilers", false) == 0)
          {
            if (this.SEDBUKFound2 != null)
              energyRequirements9a.Box207 = Conversions.ToDouble(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "WinterEff", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
            energyRequirements9a._Box207Uncorrected = energyRequirements9a.Box207;
            if ((double) this._House.HeatFractionSec > 0.0)
              this.Efficiency_Adustments2(1, 1);
          }
          else if (Operators.CompareString(this._House.MainHeating2.SGroup, "Solid fuel boilers", false) == 0)
          {
            if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "SAPEff", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 0.0)
            {
              energyRequirements9a.Box207 = (double) this.CalcMissingEff(this._House.MainHeating2.SEDBUK);
              energyRequirements9a._Box207Uncorrected = energyRequirements9a.Box207;
            }
            else
            {
              energyRequirements9a.Box207 = Conversions.ToDouble(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "SAPEff", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
              energyRequirements9a._Box207Uncorrected = energyRequirements9a.Box207;
            }
          }
        }
        else
        {
          if (Operators.CompareString(this._House.MainHeating2.InforSource, "SAP Tables", false) == 0)
          {
            if (this._House.MainHeating2.SAPTableCode < 142)
            {
              energyRequirements9a.Box207 = Conversion.Val(this.SAPHeating2.EffA);
              energyRequirements9a._Box207Uncorrected = energyRequirements9a.Box207;
            }
            else
            {
              energyRequirements9a.Box207 = (double) this._House.MainHeating2.MainEff;
              energyRequirements9a._Box207Uncorrected = energyRequirements9a.Box207;
            }
          }
          else
          {
            energyRequirements9a.Box207 = (double) this._House.MainHeating2.MainEff;
            energyRequirements9a._Box207Uncorrected = energyRequirements9a.Box207;
            if (this._House.MainHeating2.SAPTableCode < 142 && Operators.CompareString(this._House.MainHeating2.InforSource, "Manufacturer Declaration", false) == 0)
            {
              if (this._House.MainHeating2.SEDBUK2005)
              {
                energyRequirements9a.Box207 = this.Convertto2009_2(energyRequirements9a.Box207, false);
                energyRequirements9a._Box207Uncorrected = energyRequirements9a.Box207;
              }
              else
              {
                energyRequirements9a.Box207 = this.Change2009_2(energyRequirements9a.Box207, false);
                energyRequirements9a._Box207Uncorrected = energyRequirements9a.Box207;
              }
            }
          }
          int sapTableCode = this._House.MainHeating2.SAPTableCode;
          if (sapTableCode < 150)
            this.Efficiency_Adustments2(1, 1);
          else if (sapTableCode >= 301 && sapTableCode <= 305)
            this.Efficiency_Adustments2(2, 1);
          else if (sapTableCode >= 201 && sapTableCode <= 230 || sapTableCode >= 521 && sapTableCode <= 527)
            this.Efficiency_Adustments2(3, 1);
        }
      }
      if ((uint) this._House.SecHeating.SAPTableCode > 0U)
        energyRequirements9a.Box208 = (double) this._House.SecHeating.SecEff;
      if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0)
      {
        if (Operators.CompareString(this._House.MainHeating.SGroup, "Micro-cogeneration (micro-CHP)", false) == 0 && this._Calc.HeatLoss.CHPCalc.SecFraction != 0.0 & this._House.SecHeating.SAPTableCode == 0)
          energyRequirements9a.Box208 = 100.0;
        if (this._House.MainHeating.SGroup.Contains("heat pumps") && this._Calc.HeatLoss.HPCalc.SecFraction != 0.0 & this._House.SecHeating.SAPTableCode == 0)
          energyRequirements9a.Box208 = 100.0;
      }
      if (this._House.Cooling.Include)
      {
        float num;
        if (!this._House.Cooling.ERRMeasuredInclude)
        {
          string systemType = this._House.Cooling.SystemType;
          if (Operators.CompareString(systemType, "Split/multiple systems", false) != 0)
          {
            if (Operators.CompareString(systemType, "Packaged systems", false) == 0)
            {
              string energylabel = this._House.Cooling.Energylabel;
              // ISSUE: reference to a compiler-generated method
              switch (\u003CPrivateImplementationDetails\u003E.ComputeStringHash(energylabel))
              {
                case 3222007936:
                  if (Operators.CompareString(energylabel, "E", false) == 0)
                  {
                    num = 2.2f;
                    goto label_171;
                  }
                  else
                    goto label_171;
                case 3238785555:
                  if (Operators.CompareString(energylabel, "D", false) == 0)
                  {
                    num = 2.4f;
                    goto label_171;
                  }
                  else
                    goto label_171;
                case 3255563174:
                  if (Operators.CompareString(energylabel, "G", false) == 0)
                    break;
                  goto label_171;
                case 3272340793:
                  if (Operators.CompareString(energylabel, "F", false) == 0)
                  {
                    num = 2f;
                    goto label_171;
                  }
                  else
                    goto label_171;
                case 3289118412:
                  if (Operators.CompareString(energylabel, "A", false) == 0)
                  {
                    num = 3f;
                    goto label_171;
                  }
                  else
                    goto label_171;
                case 3322673650:
                  if (Operators.CompareString(energylabel, "C", false) == 0)
                  {
                    num = 2.6f;
                    goto label_171;
                  }
                  else
                    goto label_171;
                case 3339451269:
                  if (Operators.CompareString(energylabel, "B", false) == 0)
                  {
                    num = 2.8f;
                    goto label_171;
                  }
                  else
                    goto label_171;
                case 3424652889:
                  if (Operators.CompareString(energylabel, "Unknown", false) == 0)
                    break;
                  goto label_171;
                default:
                  goto label_171;
              }
              num = 1.8f;
            }
          }
          else
          {
            string energylabel = this._House.Cooling.Energylabel;
            // ISSUE: reference to a compiler-generated method
            switch (\u003CPrivateImplementationDetails\u003E.ComputeStringHash(energylabel))
            {
              case 3222007936:
                if (Operators.CompareString(energylabel, "E", false) == 0)
                {
                  num = 2.4f;
                  goto label_171;
                }
                else
                  goto label_171;
              case 3238785555:
                if (Operators.CompareString(energylabel, "D", false) == 0)
                {
                  num = 2.6f;
                  goto label_171;
                }
                else
                  goto label_171;
              case 3255563174:
                if (Operators.CompareString(energylabel, "G", false) == 0)
                  break;
                goto label_171;
              case 3272340793:
                if (Operators.CompareString(energylabel, "F", false) == 0)
                {
                  num = 2.2f;
                  goto label_171;
                }
                else
                  goto label_171;
              case 3289118412:
                if (Operators.CompareString(energylabel, "A", false) == 0)
                {
                  num = 3.2f;
                  goto label_171;
                }
                else
                  goto label_171;
              case 3322673650:
                if (Operators.CompareString(energylabel, "C", false) == 0)
                {
                  num = 2.8f;
                  goto label_171;
                }
                else
                  goto label_171;
              case 3339451269:
                if (Operators.CompareString(energylabel, "B", false) == 0)
                {
                  num = 3f;
                  goto label_171;
                }
                else
                  goto label_171;
              case 3424652889:
                if (Operators.CompareString(energylabel, "Unknown", false) == 0)
                  break;
                goto label_171;
              default:
                goto label_171;
            }
            num = 2f;
          }
        }
        else
          num = this._House.Cooling.ERR;
label_171:
        if (Operators.CompareString(this._House.Cooling.Compressorcontrol, "Systems with On/Off control", false) == 0)
          this._Calc.Energy_Requirements_9a.Box209 = 1.25 * (double) num;
        else if (Operators.CompareString(this._House.Cooling.Compressorcontrol, "Systems with variable speed compressors", false) == 0)
          this._Calc.Energy_Requirements_9a.Box209 = 1.35 * (double) num;
        this._Calc.Energy_Requirements_9a.Box221_m.M6 = this._Calc.Space_cooling_requirement.Box107_m.M6 / this._Calc.Energy_Requirements_9a.Box209;
        this._Calc.Energy_Requirements_9a.Box221_m.M7 = this._Calc.Space_cooling_requirement.Box107_m.M7 / this._Calc.Energy_Requirements_9a.Box209;
        this._Calc.Energy_Requirements_9a.Box221_m.M8 = this._Calc.Space_cooling_requirement.Box107_m.M8 / this._Calc.Energy_Requirements_9a.Box209;
        this._Calc.Energy_Requirements_9a.Box221 = this._Calc.Energy_Requirements_9a.Box221_m.M6 + this._Calc.Energy_Requirements_9a.Box221_m.M7 + this._Calc.Energy_Requirements_9a.Box221_m.M8;
      }
      energyRequirements9a.Box211_m.M1 = this._Calc.Space_heating_requirement.Box98_m.M1 * energyRequirements9a.Box204 * 100.0 / energyRequirements9a.Box206;
      energyRequirements9a.Box211_m.M2 = this._Calc.Space_heating_requirement.Box98_m.M2 * energyRequirements9a.Box204 * 100.0 / energyRequirements9a.Box206;
      energyRequirements9a.Box211_m.M3 = this._Calc.Space_heating_requirement.Box98_m.M3 * energyRequirements9a.Box204 * 100.0 / energyRequirements9a.Box206;
      energyRequirements9a.Box211_m.M4 = this._Calc.Space_heating_requirement.Box98_m.M4 * energyRequirements9a.Box204 * 100.0 / energyRequirements9a.Box206;
      energyRequirements9a.Box211_m.M5 = this._Calc.Space_heating_requirement.Box98_m.M5 * energyRequirements9a.Box204 * 100.0 / energyRequirements9a.Box206;
      energyRequirements9a.Box211_m.M6 = this._Calc.Space_heating_requirement.Box98_m.M6 * energyRequirements9a.Box204 * 100.0 / energyRequirements9a.Box206;
      energyRequirements9a.Box211_m.M7 = this._Calc.Space_heating_requirement.Box98_m.M7 * energyRequirements9a.Box204 * 100.0 / energyRequirements9a.Box206;
      energyRequirements9a.Box211_m.M8 = this._Calc.Space_heating_requirement.Box98_m.M8 * energyRequirements9a.Box204 * 100.0 / energyRequirements9a.Box206;
      energyRequirements9a.Box211_m.M9 = this._Calc.Space_heating_requirement.Box98_m.M9 * energyRequirements9a.Box204 * 100.0 / energyRequirements9a.Box206;
      energyRequirements9a.Box211_m.M10 = this._Calc.Space_heating_requirement.Box98_m.M10 * energyRequirements9a.Box204 * 100.0 / energyRequirements9a.Box206;
      energyRequirements9a.Box211_m.M11 = this._Calc.Space_heating_requirement.Box98_m.M11 * energyRequirements9a.Box204 * 100.0 / energyRequirements9a.Box206;
      energyRequirements9a.Box211_m.M12 = this._Calc.Space_heating_requirement.Box98_m.M12 * energyRequirements9a.Box204 * 100.0 / energyRequirements9a.Box206;
      energyRequirements9a.Box211 = energyRequirements9a.Box211_m.M1 + energyRequirements9a.Box211_m.M2 + energyRequirements9a.Box211_m.M3 + energyRequirements9a.Box211_m.M4 + energyRequirements9a.Box211_m.M5 + energyRequirements9a.Box211_m.M6 + energyRequirements9a.Box211_m.M7 + energyRequirements9a.Box211_m.M8 + energyRequirements9a.Box211_m.M9 + energyRequirements9a.Box211_m.M10 + energyRequirements9a.Box211_m.M11 + energyRequirements9a.Box211_m.M12;
      if (energyRequirements9a.Box207 != 0.0)
      {
        energyRequirements9a.Box213_m.M1 = this._Calc.Space_heating_requirement.Box98_m.M1 * energyRequirements9a.Box205 * 100.0 / energyRequirements9a.Box207;
        energyRequirements9a.Box213_m.M2 = this._Calc.Space_heating_requirement.Box98_m.M2 * energyRequirements9a.Box205 * 100.0 / energyRequirements9a.Box207;
        energyRequirements9a.Box213_m.M3 = this._Calc.Space_heating_requirement.Box98_m.M3 * energyRequirements9a.Box205 * 100.0 / energyRequirements9a.Box207;
        energyRequirements9a.Box213_m.M4 = this._Calc.Space_heating_requirement.Box98_m.M4 * energyRequirements9a.Box205 * 100.0 / energyRequirements9a.Box207;
        energyRequirements9a.Box213_m.M5 = this._Calc.Space_heating_requirement.Box98_m.M5 * energyRequirements9a.Box205 * 100.0 / energyRequirements9a.Box207;
        energyRequirements9a.Box213_m.M6 = this._Calc.Space_heating_requirement.Box98_m.M6 * energyRequirements9a.Box205 * 100.0 / energyRequirements9a.Box207;
        energyRequirements9a.Box213_m.M7 = this._Calc.Space_heating_requirement.Box98_m.M7 * energyRequirements9a.Box205 * 100.0 / energyRequirements9a.Box207;
        energyRequirements9a.Box213_m.M8 = this._Calc.Space_heating_requirement.Box98_m.M8 * energyRequirements9a.Box205 * 100.0 / energyRequirements9a.Box207;
        energyRequirements9a.Box213_m.M9 = this._Calc.Space_heating_requirement.Box98_m.M9 * energyRequirements9a.Box205 * 100.0 / energyRequirements9a.Box207;
        energyRequirements9a.Box213_m.M10 = this._Calc.Space_heating_requirement.Box98_m.M10 * energyRequirements9a.Box205 * 100.0 / energyRequirements9a.Box207;
        energyRequirements9a.Box213_m.M11 = this._Calc.Space_heating_requirement.Box98_m.M11 * energyRequirements9a.Box205 * 100.0 / energyRequirements9a.Box207;
        energyRequirements9a.Box213_m.M12 = this._Calc.Space_heating_requirement.Box98_m.M12 * energyRequirements9a.Box205 * 100.0 / energyRequirements9a.Box207;
        energyRequirements9a.Box213 = energyRequirements9a.Box213_m.M1 + energyRequirements9a.Box213_m.M2 + energyRequirements9a.Box213_m.M3 + energyRequirements9a.Box213_m.M4 + energyRequirements9a.Box213_m.M5 + energyRequirements9a.Box213_m.M6 + energyRequirements9a.Box213_m.M7 + energyRequirements9a.Box213_m.M8 + energyRequirements9a.Box213_m.M9 + energyRequirements9a.Box213_m.M10 + energyRequirements9a.Box213_m.M11 + energyRequirements9a.Box213_m.M12;
      }
      if (energyRequirements9a.Box208 != 0.0)
      {
        energyRequirements9a.Box215_m.M1 = this._Calc.Space_heating_requirement.Box98_m.M1 * energyRequirements9a.Box201 * 100.0 / energyRequirements9a.Box208;
        energyRequirements9a.Box215_m.M2 = this._Calc.Space_heating_requirement.Box98_m.M2 * energyRequirements9a.Box201 * 100.0 / energyRequirements9a.Box208;
        energyRequirements9a.Box215_m.M3 = this._Calc.Space_heating_requirement.Box98_m.M3 * energyRequirements9a.Box201 * 100.0 / energyRequirements9a.Box208;
        energyRequirements9a.Box215_m.M4 = this._Calc.Space_heating_requirement.Box98_m.M4 * energyRequirements9a.Box201 * 100.0 / energyRequirements9a.Box208;
        energyRequirements9a.Box215_m.M5 = this._Calc.Space_heating_requirement.Box98_m.M5 * energyRequirements9a.Box201 * 100.0 / energyRequirements9a.Box208;
        energyRequirements9a.Box215_m.M6 = this._Calc.Space_heating_requirement.Box98_m.M6 * energyRequirements9a.Box201 * 100.0 / energyRequirements9a.Box208;
        energyRequirements9a.Box215_m.M7 = this._Calc.Space_heating_requirement.Box98_m.M7 * energyRequirements9a.Box201 * 100.0 / energyRequirements9a.Box208;
        energyRequirements9a.Box215_m.M8 = this._Calc.Space_heating_requirement.Box98_m.M8 * energyRequirements9a.Box201 * 100.0 / energyRequirements9a.Box208;
        energyRequirements9a.Box215_m.M9 = this._Calc.Space_heating_requirement.Box98_m.M9 * energyRequirements9a.Box201 * 100.0 / energyRequirements9a.Box208;
        energyRequirements9a.Box215_m.M10 = this._Calc.Space_heating_requirement.Box98_m.M10 * energyRequirements9a.Box201 * 100.0 / energyRequirements9a.Box208;
        energyRequirements9a.Box215_m.M11 = this._Calc.Space_heating_requirement.Box98_m.M11 * energyRequirements9a.Box201 * 100.0 / energyRequirements9a.Box208;
        energyRequirements9a.Box215_m.M12 = this._Calc.Space_heating_requirement.Box98_m.M12 * energyRequirements9a.Box201 * 100.0 / energyRequirements9a.Box208;
        energyRequirements9a.Box215 = energyRequirements9a.Box215_m.M1 + energyRequirements9a.Box215_m.M2 + energyRequirements9a.Box215_m.M3 + energyRequirements9a.Box215_m.M4 + energyRequirements9a.Box215_m.M5 + energyRequirements9a.Box215_m.M6 + energyRequirements9a.Box215_m.M7 + energyRequirements9a.Box215_m.M8 + energyRequirements9a.Box215_m.M9 + energyRequirements9a.Box215_m.M10 + energyRequirements9a.Box215_m.M11 + energyRequirements9a.Box215_m.M12;
      }
      int systemRef = this._House.Water.SystemRef;
      switch (systemRef)
      {
        case 901:
          if (Operators.CompareString(dwelling2.MainHeating.InforSource, "Boiler Database", false) == 0)
          {
            if (Operators.CompareString(dwelling2.MainHeating.SGroup, "Gas boilers and oil boilers", false) == 0)
            {
              energyRequirements9a.Box216 = Conversions.ToDouble(NewLateBinding.LateGet(objectValue1, (System.Type) null, "SummerEff", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
              energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
              this.Efficiency_Adustments(1, 2);
              if (Operators.ConditionalCompareObjectNotEqual((object) energyRequirements9a.Box216, NewLateBinding.LateGet(objectValue1, (System.Type) null, "SummerEff", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), false))
                this.Equation8(energyRequirements9a.Box204, energyRequirements9a.Box206, energyRequirements9a.Box216);
              else
                this.Equation8(energyRequirements9a.Box204, Conversions.ToDouble(NewLateBinding.LateGet(objectValue1, (System.Type) null, "WinterEff", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), Conversions.ToDouble(NewLateBinding.LateGet(objectValue1, (System.Type) null, "SummerEff", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
              if (Information.IsDBNull(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue1, (System.Type) null, "KpHtFac", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))))
                NewLateBinding.LateSet(objectValue1, (System.Type) null, "KpHtFac", new object[1]
                {
                  (object) ""
                }, (string[]) null, (System.Type[]) null);
              if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue1, (System.Type) null, "KpHtFac", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 3.0 | Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue1, (System.Type) null, "KpHtFac", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 2.0)
              {
                if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue1, (System.Type) null, "KpHtElcHtr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 0.0)
                {
                  energyRequirements9a.Box219_m.M1 = (this._Calc.Water_heating.Box64_m.M1 - this._Calc.Water_heating.Box61_m.M1) * 100.0 / energyRequirements9a.Box217_m.M1;
                  energyRequirements9a.Box219_m.M2 = (this._Calc.Water_heating.Box64_m.M2 - this._Calc.Water_heating.Box61_m.M2) * 100.0 / energyRequirements9a.Box217_m.M2;
                  energyRequirements9a.Box219_m.M3 = (this._Calc.Water_heating.Box64_m.M3 - this._Calc.Water_heating.Box61_m.M3) * 100.0 / energyRequirements9a.Box217_m.M3;
                  energyRequirements9a.Box219_m.M4 = (this._Calc.Water_heating.Box64_m.M4 - this._Calc.Water_heating.Box61_m.M4) * 100.0 / energyRequirements9a.Box217_m.M4;
                  energyRequirements9a.Box219_m.M5 = (this._Calc.Water_heating.Box64_m.M5 - this._Calc.Water_heating.Box61_m.M5) * 100.0 / energyRequirements9a.Box217_m.M5;
                  if (energyRequirements9a.Box217_m.M6 != 0.0)
                    energyRequirements9a.Box219_m.M6 = (this._Calc.Water_heating.Box64_m.M6 - this._Calc.Water_heating.Box61_m.M6) * 100.0 / energyRequirements9a.Box217_m.M6;
                  if (energyRequirements9a.Box217_m.M7 != 0.0)
                    energyRequirements9a.Box219_m.M7 = (this._Calc.Water_heating.Box64_m.M7 - this._Calc.Water_heating.Box61_m.M7) * 100.0 / energyRequirements9a.Box217_m.M7;
                  if (energyRequirements9a.Box217_m.M8 != 0.0)
                    energyRequirements9a.Box219_m.M8 = (this._Calc.Water_heating.Box64_m.M8 - this._Calc.Water_heating.Box61_m.M8) * 100.0 / energyRequirements9a.Box217_m.M8;
                  if (energyRequirements9a.Box217_m.M9 != 0.0)
                    energyRequirements9a.Box219_m.M9 = (this._Calc.Water_heating.Box64_m.M9 - this._Calc.Water_heating.Box61_m.M9) * 100.0 / energyRequirements9a.Box217_m.M9;
                  energyRequirements9a.Box219_m.M10 = (this._Calc.Water_heating.Box64_m.M10 - this._Calc.Water_heating.Box61_m.M10) * 100.0 / energyRequirements9a.Box217_m.M10;
                  energyRequirements9a.Box219_m.M11 = (this._Calc.Water_heating.Box64_m.M11 - this._Calc.Water_heating.Box61_m.M11) * 100.0 / energyRequirements9a.Box217_m.M11;
                  energyRequirements9a.Box219_m.M12 = (this._Calc.Water_heating.Box64_m.M12 - this._Calc.Water_heating.Box61_m.M12) * 100.0 / energyRequirements9a.Box217_m.M12;
                }
                else
                {
                  energyRequirements9a.Box219_m.M1 = (this._Calc.Water_heating.Box64_m.M1 - 8.76 * Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue1, (System.Type) null, "KpHtElcHtr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M1 / 365.0) * 100.0 / energyRequirements9a.Box217_m.M1;
                  energyRequirements9a.Box219_m.M2 = (this._Calc.Water_heating.Box64_m.M2 - 8.76 * Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue1, (System.Type) null, "KpHtElcHtr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M2 / 365.0) * 100.0 / energyRequirements9a.Box217_m.M2;
                  energyRequirements9a.Box219_m.M3 = (this._Calc.Water_heating.Box64_m.M3 - 8.76 * Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue1, (System.Type) null, "KpHtElcHtr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M3 / 365.0) * 100.0 / energyRequirements9a.Box217_m.M3;
                  energyRequirements9a.Box219_m.M4 = (this._Calc.Water_heating.Box64_m.M4 - 8.76 * Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue1, (System.Type) null, "KpHtElcHtr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M4 / 365.0) * 100.0 / energyRequirements9a.Box217_m.M4;
                  energyRequirements9a.Box219_m.M5 = (this._Calc.Water_heating.Box64_m.M5 - 8.76 * Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue1, (System.Type) null, "KpHtElcHtr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M5 / 365.0) * 100.0 / energyRequirements9a.Box217_m.M5;
                  if (energyRequirements9a.Box217_m.M6 != 0.0)
                    energyRequirements9a.Box219_m.M6 = (this._Calc.Water_heating.Box64_m.M6 - 8.76 * Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue1, (System.Type) null, "KpHtElcHtr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M6 / 365.0) * 100.0 / energyRequirements9a.Box217_m.M6;
                  if (energyRequirements9a.Box217_m.M7 != 0.0)
                    energyRequirements9a.Box219_m.M7 = (this._Calc.Water_heating.Box64_m.M7 - 8.76 * Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue1, (System.Type) null, "KpHtElcHtr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M7 / 365.0) * 100.0 / energyRequirements9a.Box217_m.M7;
                  if (energyRequirements9a.Box217_m.M8 != 0.0)
                    energyRequirements9a.Box219_m.M8 = (this._Calc.Water_heating.Box64_m.M8 - 8.76 * Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue1, (System.Type) null, "KpHtElcHtr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M8 / 365.0) * 100.0 / energyRequirements9a.Box217_m.M8;
                  if (energyRequirements9a.Box217_m.M9 != 0.0)
                    energyRequirements9a.Box219_m.M9 = (this._Calc.Water_heating.Box64_m.M9 - 8.76 * Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue1, (System.Type) null, "KpHtElcHtr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M9 / 365.0) * 100.0 / energyRequirements9a.Box217_m.M9;
                  energyRequirements9a.Box219_m.M10 = (this._Calc.Water_heating.Box64_m.M10 - 8.76 * Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue1, (System.Type) null, "KpHtElcHtr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M10 / 365.0) * 100.0 / energyRequirements9a.Box217_m.M10;
                  energyRequirements9a.Box219_m.M11 = (this._Calc.Water_heating.Box64_m.M11 - 8.76 * Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue1, (System.Type) null, "KpHtElcHtr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M11 / 365.0) * 100.0 / energyRequirements9a.Box217_m.M11;
                  energyRequirements9a.Box219_m.M12 = (this._Calc.Water_heating.Box64_m.M12 - 8.76 * Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue1, (System.Type) null, "KpHtElcHtr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M12 / 365.0) * 100.0 / energyRequirements9a.Box217_m.M12;
                }
                break;
              }
              break;
            }
            if (Operators.CompareString(dwelling2.MainHeating.SGroup, "Micro-cogeneration (micro-CHP)", false) == 0)
            {
              energyRequirements9a.Box216 = this._Calc.HeatLoss.CHPCalc.nsummer;
              energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
              this.Equation8(energyRequirements9a.Box204, energyRequirements9a.Box206, energyRequirements9a.Box216);
              break;
            }
            if (dwelling2.MainHeating.SGroup.Contains("heat pumps"))
            {
              energyRequirements9a.Box216 = this._Calc.HeatLoss.HPCalc.nsummer;
              energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M1 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M2 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M3 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M4 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M5 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M6 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M7 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M8 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M9 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M10 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M11 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M12 = energyRequirements9a.Box216;
              break;
            }
            if (Operators.CompareString(dwelling2.MainHeating.SGroup, "Solid fuel boilers", false) == 0)
            {
              try
              {
                if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue1, (System.Type) null, "SAPEff", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 0.0)
                {
                  energyRequirements9a.Box216 = (double) this.CalcMissingEff(dwelling2.MainHeating.SEDBUK);
                  energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
                }
                else
                {
                  energyRequirements9a.Box216 = Conversions.ToDouble(NewLateBinding.LateGet(objectValue1, (System.Type) null, "SAPEff", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
                  energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
                }
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                energyRequirements9a.Box216 = (double) this.CalcMissingEff(dwelling2.MainHeating.SEDBUK);
                energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
                ProjectData.ClearProjectError();
              }
              energyRequirements9a.Box217_m.M1 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M2 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M3 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M4 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M5 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M6 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M7 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M8 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M9 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M10 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M11 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M12 = energyRequirements9a.Box216;
              break;
            }
            break;
          }
          if (Operators.CompareString(dwelling2.MainHeating.InforSource, "SAP Tables", false) == 0)
          {
            int sapTableCode = dwelling2.MainHeating.SAPTableCode;
            if (sapTableCode < 142 || sapTableCode >= 211 && sapTableCode <= 227 || sapTableCode >= 521 && sapTableCode <= 527)
            {
              energyRequirements9a.Box216 = Conversion.Val(this.SAPHeating.EffB);
              energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
              if (this._House.MainHeating.MCSCert)
              {
                switch (this._House.MainHeating.SAPTableCode)
                {
                  case 211:
                  case 213:
                    Energy_Requirements_9a2012 requirements9a2012_5;
                    double num5 = (requirements9a2012_5 = energyRequirements9a).Box216 * 1.32;
                    requirements9a2012_5.Box216 = num5;
                    break;
                  case 214:
                    Energy_Requirements_9a2012 requirements9a2012_6;
                    double num6 = (requirements9a2012_6 = energyRequirements9a).Box216 * 1.03;
                    requirements9a2012_6.Box216 = num6;
                    break;
                  case 221:
                  case 223:
                    Energy_Requirements_9a2012 requirements9a2012_7;
                    double num7 = (requirements9a2012_7 = energyRequirements9a).Box216 * 1.32;
                    requirements9a2012_7.Box216 = num7;
                    break;
                  case 224:
                    Energy_Requirements_9a2012 requirements9a2012_8;
                    double num8 = (requirements9a2012_8 = energyRequirements9a).Box216 * 1.03;
                    requirements9a2012_8.Box216 = num8;
                    break;
                }
              }
              if (this._TER & (uint) Operators.CompareString(dwelling2.Address.Country, "Scotland", false) > 0U)
                energyRequirements9a.Box216 = 68.8;
            }
            else if (sapTableCode == 520)
            {
              energyRequirements9a.Box216 = 74.0;
              energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
            }
            else
            {
              energyRequirements9a.Box216 = (double) dwelling2.MainHeating.MainEff;
              energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
            }
          }
          else
          {
            energyRequirements9a.Box216 = (double) dwelling2.MainHeating.MainEff;
            energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
            if (dwelling2.MainHeating.SAPTableCode < 142 && Operators.CompareString(dwelling2.MainHeating.InforSource, "Manufacturer Declaration", false) == 0)
            {
              if (dwelling2.MainHeating.SEDBUK2005)
              {
                energyRequirements9a.Box216 = this.Convertto2009(energyRequirements9a.Box216, true);
                energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
              }
              else
              {
                energyRequirements9a.Box216 = this.Change2009(energyRequirements9a.Box216, true);
                energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
              }
            }
          }
          int sapTableCode2 = dwelling2.MainHeating.SAPTableCode;
          if (sapTableCode2 < 150)
          {
            double box216 = energyRequirements9a.Box216;
            this.Efficiency_Adustments(1, 2);
            if (Operators.CompareString(dwelling2.MainHeating.InforSource, "SAP Tables", false) == 0)
            {
              if (box216 == energyRequirements9a.Box216)
                this.Equation8(energyRequirements9a.Box204, Conversion.Val(this.SAPHeating.EffA), Conversion.Val(this.SAPHeating.EffB));
              else
                this.Equation8(energyRequirements9a.Box204, energyRequirements9a.Box206, energyRequirements9a.Box216);
            }
            else if (dwelling2.MainHeating.SEDBUK2005)
            {
              if (this.Convertto2009((double) dwelling2.MainHeating.MainEff, false) == energyRequirements9a.Box206)
                this.Equation8(energyRequirements9a.Box204, this.Convertto2009((double) dwelling2.MainHeating.MainEff, false), energyRequirements9a.Box216);
              else
                this.Equation8(energyRequirements9a.Box204, energyRequirements9a.Box206, energyRequirements9a.Box216);
            }
            else if (box216 == energyRequirements9a.Box216)
              this.Equation8(energyRequirements9a.Box204, box206, energyRequirements9a.Box216);
            else
              this.Equation8(energyRequirements9a.Box204, box206, energyRequirements9a.Box216);
          }
          else if (sapTableCode2 >= 301 && sapTableCode2 <= 305)
            this.Efficiency_Adustments(2, 2);
          else if (sapTableCode2 >= 201 && sapTableCode2 <= 230 || sapTableCode2 >= 520 && sapTableCode2 <= 527)
          {
            this.Efficiency_Adustments(3, 2);
            energyRequirements9a.Box217_m.M1 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M2 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M3 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M4 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M5 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M6 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M7 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M8 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M9 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M10 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M11 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M12 = energyRequirements9a.Box216;
          }
          else if (sapTableCode2 == 501 || sapTableCode2 == 503 || sapTableCode2 == 506 || sapTableCode2 == 508)
          {
            energyRequirements9a.Box216 = 65.0;
            energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M1 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M2 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M3 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M4 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M5 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M6 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M7 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M8 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M9 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M10 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M11 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M12 = energyRequirements9a.Box216;
          }
          else if (sapTableCode2 == 502 || sapTableCode2 == 504 || sapTableCode2 == 507 || sapTableCode2 == 509 || sapTableCode2 == 510 || sapTableCode2 == 511)
          {
            energyRequirements9a.Box216 = 73.0;
            energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M1 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M2 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M3 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M4 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M5 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M6 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M7 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M8 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M9 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M10 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M11 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M12 = energyRequirements9a.Box216;
          }
          else if (sapTableCode2 >= 191 && sapTableCode2 <= 196 || sapTableCode2 >= 151 && sapTableCode2 <= 161)
          {
            energyRequirements9a.Box217_m.M1 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M2 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M3 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M4 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M5 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M6 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M7 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M8 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M9 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M10 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M11 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M12 = energyRequirements9a.Box216;
          }
          else if (sapTableCode2 == 636 || sapTableCode2 == 622 || sapTableCode2 == 624)
          {
            energyRequirements9a.Box217_m.M1 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M2 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M3 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M4 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M5 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M6 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M7 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M8 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M9 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M10 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M11 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M12 = energyRequirements9a.Box216;
          }
          else
          {
            int num;
            switch (sapTableCode2)
            {
              case 515:
                num = 1;
                break;
              case 604:
                energyRequirements9a.Box216 = !dwelling2.Water.Cylinder.Thermostat ? 60.0 : 65.0;
                energyRequirements9a._Box216Uncorrected = 65.0;
                energyRequirements9a.Box217_m.M1 = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M2 = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M3 = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M4 = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M5 = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M6 = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M7 = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M8 = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M9 = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M10 = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M11 = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M12 = energyRequirements9a.Box216;
                goto label_272;
              default:
                num = sapTableCode2 == 512 ? 1 : 0;
                break;
            }
            if (num != 0)
            {
              energyRequirements9a.Box217_m.M1 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M2 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M3 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M4 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M5 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M6 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M7 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M8 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M9 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M10 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M11 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M12 = energyRequirements9a.Box216;
            }
            else
            {
              energyRequirements9a.Box217_m.M1 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M2 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M3 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M4 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M5 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M6 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M7 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M8 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M9 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M10 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M11 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M12 = energyRequirements9a.Box216;
            }
          }
label_272:
          break;
        case 902:
          switch (dwelling2.SecHeating.SAPTableCode)
          {
            case 602:
            case 604:
            case 606:
              energyRequirements9a.Box216 = 65.0;
              energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M1 = 65.0;
              energyRequirements9a.Box217_m.M2 = 65.0;
              energyRequirements9a.Box217_m.M3 = 65.0;
              energyRequirements9a.Box217_m.M4 = 65.0;
              energyRequirements9a.Box217_m.M5 = 65.0;
              energyRequirements9a.Box217_m.M6 = 65.0;
              energyRequirements9a.Box217_m.M7 = 65.0;
              energyRequirements9a.Box217_m.M8 = 65.0;
              energyRequirements9a.Box217_m.M9 = 65.0;
              energyRequirements9a.Box217_m.M10 = 65.0;
              energyRequirements9a.Box217_m.M11 = 65.0;
              energyRequirements9a.Box217_m.M12 = 65.0;
              break;
            default:
              energyRequirements9a.Box216 = (double) dwelling2.SecHeating.SecEff;
              energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M1 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M2 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M3 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M4 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M5 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M6 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M7 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M8 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M9 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M10 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M11 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M12 = energyRequirements9a.Box216;
              break;
          }
          if (dwelling2.SecHeating.SAPTableCode == 0)
            throw new ArgumentException("Secondary Heating not Specified");
          break;
        case 914:
          if (Operators.CompareString(dwelling2.MainHeating2.InforSource, "Boiler Database", false) == 0)
          {
            if (Operators.CompareString(dwelling2.MainHeating2.SGroup, "Gas boilers and oil boilers", false) == 0)
            {
              energyRequirements9a.Box216 = Conversions.ToDouble(NewLateBinding.LateGet(objectValue2, (System.Type) null, "SummerEff", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
              energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
              if ((double) dwelling2.HeatFractionSec > 0.0)
                this.Efficiency_Adustments2(1, 2);
              if (Operators.ConditionalCompareObjectNotEqual((object) energyRequirements9a.Box216, NewLateBinding.LateGet(objectValue2, (System.Type) null, "SummerEff", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), false))
                this.Equation8(energyRequirements9a.Box205, energyRequirements9a.Box207, energyRequirements9a.Box216);
              else
                this.Equation8(energyRequirements9a.Box205, Conversions.ToDouble(NewLateBinding.LateGet(objectValue2, (System.Type) null, "WinterEff", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), Conversions.ToDouble(NewLateBinding.LateGet(objectValue2, (System.Type) null, "SummerEff", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
              if (Information.IsDBNull(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue2, (System.Type) null, "KpHtFac", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))))
                NewLateBinding.LateSet(objectValue2, (System.Type) null, "KpHtFac", new object[1]
                {
                  (object) ""
                }, (string[]) null, (System.Type[]) null);
              if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue2, (System.Type) null, "KpHtFac", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 2.0 | Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue2, (System.Type) null, "KpHtFac", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 3.0)
              {
                energyRequirements9a.Box219_m.M1 = (this._Calc.Water_heating.Box64_m.M1 - this._Calc.Water_heating.Box61_m.M1) * 100.0 / energyRequirements9a.Box217_m.M1;
                energyRequirements9a.Box219_m.M2 = (this._Calc.Water_heating.Box64_m.M2 - this._Calc.Water_heating.Box61_m.M2) * 100.0 / energyRequirements9a.Box217_m.M2;
                energyRequirements9a.Box219_m.M3 = (this._Calc.Water_heating.Box64_m.M3 - this._Calc.Water_heating.Box61_m.M3) * 100.0 / energyRequirements9a.Box217_m.M3;
                energyRequirements9a.Box219_m.M4 = (this._Calc.Water_heating.Box64_m.M4 - this._Calc.Water_heating.Box61_m.M4) * 100.0 / energyRequirements9a.Box217_m.M4;
                energyRequirements9a.Box219_m.M5 = (this._Calc.Water_heating.Box64_m.M5 - this._Calc.Water_heating.Box61_m.M5) * 100.0 / energyRequirements9a.Box217_m.M5;
                if (energyRequirements9a.Box217_m.M6 != 0.0)
                  energyRequirements9a.Box219_m.M6 = (this._Calc.Water_heating.Box64_m.M6 - this._Calc.Water_heating.Box61_m.M6) * 100.0 / energyRequirements9a.Box217_m.M6;
                if (energyRequirements9a.Box217_m.M7 != 0.0)
                  energyRequirements9a.Box219_m.M7 = (this._Calc.Water_heating.Box64_m.M7 - this._Calc.Water_heating.Box61_m.M7) * 100.0 / energyRequirements9a.Box217_m.M7;
                if (energyRequirements9a.Box217_m.M8 != 0.0)
                  energyRequirements9a.Box219_m.M8 = (this._Calc.Water_heating.Box64_m.M8 - this._Calc.Water_heating.Box61_m.M8) * 100.0 / energyRequirements9a.Box217_m.M8;
                if (energyRequirements9a.Box217_m.M9 != 0.0)
                  energyRequirements9a.Box219_m.M9 = (this._Calc.Water_heating.Box64_m.M9 - this._Calc.Water_heating.Box61_m.M9) * 100.0 / energyRequirements9a.Box217_m.M9;
                energyRequirements9a.Box219_m.M10 = (this._Calc.Water_heating.Box64_m.M10 - this._Calc.Water_heating.Box61_m.M10) * 100.0 / energyRequirements9a.Box217_m.M10;
                energyRequirements9a.Box219_m.M11 = (this._Calc.Water_heating.Box64_m.M11 - this._Calc.Water_heating.Box61_m.M11) * 100.0 / energyRequirements9a.Box217_m.M11;
                energyRequirements9a.Box219_m.M12 = (this._Calc.Water_heating.Box64_m.M12 - this._Calc.Water_heating.Box61_m.M12) * 100.0 / energyRequirements9a.Box217_m.M12;
                break;
              }
              break;
            }
            if (Operators.CompareString(dwelling2.MainHeating.SGroup, "Solid fuel boilers", false) == 0)
            {
              if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue2, (System.Type) null, "SAPEff", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 0.0)
              {
                energyRequirements9a.Box216 = (double) this.CalcMissingEff(dwelling2.MainHeating2.SEDBUK);
                energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
              }
              else
              {
                energyRequirements9a.Box216 = Conversions.ToDouble(NewLateBinding.LateGet(objectValue2, (System.Type) null, "SAPEff", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
                energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
              }
              energyRequirements9a.Box217_m.M1 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M2 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M3 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M4 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M5 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M6 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M7 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M8 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M9 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M10 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M11 = energyRequirements9a.Box216;
              energyRequirements9a.Box217_m.M12 = energyRequirements9a.Box216;
              break;
            }
            if (dwelling2.MainHeating2.SGroup.Contains("heat pumps"))
            {
              bool flag = false;
              if (dwelling2.WaterOnlyHeatPump && !dwelling2.MainHeating2.HPOnly.HotWaterHP_Integral && (double) dwelling2.MainHeating2.HPOnly.Vol < (double) dwelling2.Water.Cylinder.Volume && (double) dwelling2.MainHeating2.HPOnly.DeclaredValue <= (double) dwelling2.Water.Cylinder.DeclaredLoss)
                flag = true;
              if (flag)
              {
                this.Equationhp(energyRequirements9a.Box205, dwelling2.MainHeating2.HPOnly.WinterEff, dwelling2.MainHeating2.HPOnly.SummaerEff);
                energyRequirements9a.Box217_m.M1 *= 0.95;
                energyRequirements9a.Box217_m.M2 *= 0.95;
                energyRequirements9a.Box217_m.M3 *= 0.95;
                energyRequirements9a.Box217_m.M4 *= 0.95;
                energyRequirements9a.Box217_m.M5 *= 0.95;
                energyRequirements9a.Box217_m.M6 *= 0.95;
                energyRequirements9a.Box217_m.M7 *= 0.95;
                energyRequirements9a.Box217_m.M8 *= 0.95;
                energyRequirements9a.Box217_m.M9 *= 0.95;
                energyRequirements9a.Box217_m.M10 *= 0.95;
                energyRequirements9a.Box217_m.M11 *= 0.95;
                energyRequirements9a.Box217_m.M12 *= 0.95;
              }
              else
              {
                energyRequirements9a.Box216 = this._Calc.HeatLoss.HPCalc.nsummer;
                energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M1 = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M2 = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M3 = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M4 = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M5 = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M6 = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M7 = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M8 = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M9 = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M10 = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M11 = energyRequirements9a.Box216;
                energyRequirements9a.Box217_m.M12 = energyRequirements9a.Box216;
              }
              break;
            }
            break;
          }
          if (Operators.CompareString(dwelling2.MainHeating2.InforSource, "SAP Tables", false) == 0)
          {
            if (dwelling2.MainHeating2.SAPTableCode < 142)
            {
              energyRequirements9a.Box216 = Conversion.Val(this.SAPHeating2.EffB);
              energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
            }
            else
            {
              energyRequirements9a.Box216 = (double) dwelling2.MainHeating2.MainEff;
              energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
            }
          }
          else
          {
            energyRequirements9a.Box216 = (double) dwelling2.MainHeating2.MainEff;
            energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
            if (dwelling2.MainHeating2.SAPTableCode < 142 && Operators.CompareString(dwelling2.MainHeating2.InforSource, "Manufacturer Declaration", false) == 0)
            {
              if (dwelling2.MainHeating2.SEDBUK2005)
              {
                energyRequirements9a.Box216 = this.Convertto2009_2(energyRequirements9a.Box216, true);
                energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
              }
              else
              {
                energyRequirements9a.Box216 = this.Change2009_2(energyRequirements9a.Box216, true);
                energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
              }
            }
          }
          int sapTableCode3 = dwelling2.MainHeating2.SAPTableCode;
          if (sapTableCode3 < 150)
          {
            float box216 = (float) energyRequirements9a.Box216;
            this.Efficiency_Adustments2(1, 2);
            if (Operators.CompareString(dwelling2.MainHeating2.InforSource, "SAP Tables", false) == 0)
            {
              if ((double) box216 == energyRequirements9a.Box216)
                this.Equation8(energyRequirements9a.Box204, Conversion.Val(this.SAPHeating2.EffA), Conversion.Val(this.SAPHeating2.EffB));
              else
                this.Equation8(energyRequirements9a.Box204, energyRequirements9a.Box206, energyRequirements9a.Box216);
            }
            else if (dwelling2.MainHeating2.SEDBUK2005)
              this.Equation8(energyRequirements9a.Box204, this.Convertto2009_2((double) dwelling2.MainHeating2.MainEff, false), energyRequirements9a.Box216);
            else if ((double) box216 == energyRequirements9a.Box216)
              this.Equation8(energyRequirements9a.Box204, energyRequirements9a.Box206, energyRequirements9a.Box216);
            else
              this.Equation8(energyRequirements9a.Box204, energyRequirements9a.Box206, energyRequirements9a.Box216);
          }
          else if (sapTableCode3 >= 301 && sapTableCode3 <= 305)
            this.Efficiency_Adustments2(2, 2);
          else if (sapTableCode3 >= 201 && sapTableCode3 <= 230 || sapTableCode3 >= 521 && sapTableCode3 <= 527)
          {
            this.Efficiency_Adustments2(3, 2);
            energyRequirements9a.Box217_m.M1 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M2 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M3 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M4 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M5 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M6 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M7 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M8 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M9 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M10 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M11 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M12 = energyRequirements9a.Box216;
          }
          else if (sapTableCode3 == 501 || sapTableCode3 == 503 || sapTableCode3 == 506 || sapTableCode3 == 508)
          {
            energyRequirements9a.Box216 = 65.0;
            energyRequirements9a.Box217_m.M1 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M2 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M3 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M4 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M5 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M6 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M7 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M8 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M9 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M10 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M11 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M12 = energyRequirements9a.Box216;
          }
          else if (sapTableCode3 == 502 || sapTableCode3 == 504 || sapTableCode3 == 507 || sapTableCode3 == 509)
          {
            energyRequirements9a.Box216 = 73.0;
            energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M1 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M2 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M3 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M4 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M5 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M6 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M7 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M8 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M9 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M10 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M11 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M12 = energyRequirements9a.Box216;
          }
          else if (sapTableCode3 >= 191 && sapTableCode3 <= 196 || sapTableCode3 >= 151 && sapTableCode3 <= 161)
          {
            energyRequirements9a.Box217_m.M1 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M2 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M3 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M4 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M5 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M6 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M7 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M8 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M9 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M10 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M11 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M12 = energyRequirements9a.Box216;
          }
          else if (sapTableCode3 == 636 || sapTableCode3 == 622 || sapTableCode3 == 624 || sapTableCode3 == 632)
          {
            energyRequirements9a.Box217_m.M1 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M2 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M3 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M4 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M5 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M6 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M7 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M8 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M9 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M10 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M11 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M12 = energyRequirements9a.Box216;
          }
          else if (sapTableCode3 == 604)
          {
            energyRequirements9a.Box216 = !dwelling2.Water.Cylinder.Thermostat ? 60.0 : 65.0;
            energyRequirements9a._Box216Uncorrected = 65.0;
            energyRequirements9a.Box217_m.M1 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M2 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M3 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M4 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M5 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M6 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M7 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M8 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M9 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M10 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M11 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M12 = energyRequirements9a.Box216;
          }
          break;
        default:
          if (systemRef >= 950 && systemRef <= 952)
          {
            this._Calc.Energy_Requirements_9b.Box303a = (double) this._House.Water.HWSComm.Boiler1Fraction;
            if (this._House.Water.HWSComm.NoOfAdditionalHeatSources > 0)
              this._Calc.Energy_Requirements_9b.Box303b = (double) this._House.Water.HWSComm.HeatSource1.HeatFraction;
            if (this._House.Water.HWSComm.NoOfAdditionalHeatSources > 1)
              this._Calc.Energy_Requirements_9b.Box303c = (double) this._House.Water.HWSComm.HeatSource2.HeatFraction;
            if (this._House.Water.HWSComm.NoOfAdditionalHeatSources > 2)
              this._Calc.Energy_Requirements_9b.Box303d = (double) this._House.Water.HWSComm.HeatSource3.HeatFraction;
            if (this._House.Water.HWSComm.NoOfAdditionalHeatSources > 3)
              this._Calc.Energy_Requirements_9b.Box303e = (double) this._House.Water.HWSComm.HeatSource4.HeatFraction;
            string charging = this._House.Water.HWSComm.Charging;
            if (Operators.CompareString(charging, "Flat Rate Charging", false) != 0)
            {
              if (Operators.CompareString(charging, "Charged Link to Use", false) == 0)
                this._Calc.Energy_Requirements_9b.Box305a = 1.0;
            }
            else
              this._Calc.Energy_Requirements_9b.Box305a = 1.05;
            if (this._House.Water.HWSComm.FromDatabase)
            {
              if (this.NetworkWater == null)
                this.NetworkWater = SAP_Module.PCDFData.CommunitySchemes.Where<PCDF.CommunityScheme>((Func<PCDF.CommunityScheme, bool>) (b => b.ID.Equals(this._House.Water.HWSComm.SystemRef))).SingleOrDefault<PCDF.CommunityScheme>();
              if (this.NetworkWater != null)
                this._Calc.Energy_Requirements_9b.Box306 = Conversions.ToDouble(this.NetworkWater.DistributionLossFactor);
            }
            else
            {
              string hds = this._House.Water.HWSComm.HDS;
              if (Operators.CompareString(hds, "Piping<=1990, not pre-insulated, medium/high temp, full flow", false) != 0)
              {
                if (Operators.CompareString(hds, "Piping<=1990, pre-insulated, low temp, full flow", false) != 0)
                {
                  if (Operators.CompareString(hds, "Piping>=1991, pre-insulated, medium temp, variable flow", false) != 0)
                  {
                    if (Operators.CompareString(hds, "Piping>=1991, pre-insulated, low temp, variable flow", false) != 0)
                    {
                      if (Operators.CompareString(hds, "Unknown", false) == 0)
                        this._Calc.Energy_Requirements_9b.Box306 = 1.5;
                    }
                    else
                      this._Calc.Energy_Requirements_9b.Box306 = 1.05;
                  }
                  else
                    this._Calc.Energy_Requirements_9b.Box306 = 1.1;
                }
                else
                  this._Calc.Energy_Requirements_9b.Box306 = 1.1;
              }
              else
                this._Calc.Energy_Requirements_9b.Box306 = 1.2;
            }
            this._Calc.Energy_Requirements_9b.Box310a = this._Calc.Water_heating.Box64 * this._Calc.Energy_Requirements_9b.Box303a * this._Calc.Energy_Requirements_9b.Box305a * this._Calc.Energy_Requirements_9b.Box306;
            this._Calc.Energy_Requirements_9b.Box310b = this._Calc.Water_heating.Box64 * this._Calc.Energy_Requirements_9b.Box303b * this._Calc.Energy_Requirements_9b.Box305a * this._Calc.Energy_Requirements_9b.Box306;
            this._Calc.Energy_Requirements_9b.Box310c = this._Calc.Water_heating.Box64 * this._Calc.Energy_Requirements_9b.Box303c * this._Calc.Energy_Requirements_9b.Box305a * this._Calc.Energy_Requirements_9b.Box306;
            this._Calc.Energy_Requirements_9b.Box310d = this._Calc.Water_heating.Box64 * this._Calc.Energy_Requirements_9b.Box303d * this._Calc.Energy_Requirements_9b.Box305a * this._Calc.Energy_Requirements_9b.Box306;
            this._Calc.Energy_Requirements_9b.Box310e = this._Calc.Water_heating.Box64 * this._Calc.Energy_Requirements_9b.Box303e * this._Calc.Energy_Requirements_9b.Box305a * this._Calc.Energy_Requirements_9b.Box306;
            this._Calc.Energy_Requirements_9b.Box313 = !this._House.Water.HWSComm.FromDatabase ? 0.01 * (this._Calc.Energy_Requirements_9b.Box310a + this._Calc.Energy_Requirements_9b.Box310b + this._Calc.Energy_Requirements_9b.Box310c + this._Calc.Energy_Requirements_9b.Box310d + this._Calc.Energy_Requirements_9b.Box310e) : Conversions.ToDouble(this.NetworkWater.PumpElecEnergyPerDwelling);
            goto label_390;
          }
          else
          {
            this.WaterHeating = Calc2012.Table4aWater(Conversions.ToString(this._House.Water.SystemRef));
            energyRequirements9a.Box216 = Conversions.ToDouble(this.WaterHeating.Efficiency);
            energyRequirements9a._Box216Uncorrected = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M1 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M2 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M3 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M4 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M5 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M6 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M7 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M8 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M9 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M10 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M11 = energyRequirements9a.Box216;
            energyRequirements9a.Box217_m.M12 = energyRequirements9a.Box216;
            break;
          }
      }
      if (energyRequirements9a.Box219_m.M1 == 0.0)
      {
        energyRequirements9a.Box219_m.M1 = this._Calc.Water_heating.Box64_m.M1 * 100.0 / energyRequirements9a.Box217_m.M1;
        energyRequirements9a.Box219_m.M2 = this._Calc.Water_heating.Box64_m.M2 * 100.0 / energyRequirements9a.Box217_m.M2;
        energyRequirements9a.Box219_m.M3 = this._Calc.Water_heating.Box64_m.M3 * 100.0 / energyRequirements9a.Box217_m.M3;
        energyRequirements9a.Box219_m.M4 = this._Calc.Water_heating.Box64_m.M4 * 100.0 / energyRequirements9a.Box217_m.M4;
        energyRequirements9a.Box219_m.M5 = this._Calc.Water_heating.Box64_m.M5 * 100.0 / energyRequirements9a.Box217_m.M5;
        if (energyRequirements9a.Box217_m.M6 != 0.0)
          energyRequirements9a.Box219_m.M6 = this._Calc.Water_heating.Box64_m.M6 * 100.0 / energyRequirements9a.Box217_m.M6;
        if (energyRequirements9a.Box217_m.M7 != 0.0)
          energyRequirements9a.Box219_m.M7 = this._Calc.Water_heating.Box64_m.M7 * 100.0 / energyRequirements9a.Box217_m.M7;
        if (energyRequirements9a.Box217_m.M8 != 0.0)
          energyRequirements9a.Box219_m.M8 = this._Calc.Water_heating.Box64_m.M8 * 100.0 / energyRequirements9a.Box217_m.M8;
        if (energyRequirements9a.Box217_m.M9 != 0.0)
          energyRequirements9a.Box219_m.M9 = this._Calc.Water_heating.Box64_m.M9 * 100.0 / energyRequirements9a.Box217_m.M9;
        energyRequirements9a.Box219_m.M10 = this._Calc.Water_heating.Box64_m.M10 * 100.0 / energyRequirements9a.Box217_m.M10;
        energyRequirements9a.Box219_m.M11 = this._Calc.Water_heating.Box64_m.M11 * 100.0 / energyRequirements9a.Box217_m.M11;
        energyRequirements9a.Box219_m.M12 = this._Calc.Water_heating.Box64_m.M12 * 100.0 / energyRequirements9a.Box217_m.M12;
      }
      energyRequirements9a.Box219 = energyRequirements9a.Box219_m.M1 + energyRequirements9a.Box219_m.M2 + energyRequirements9a.Box219_m.M3 + energyRequirements9a.Box219_m.M4 + energyRequirements9a.Box219_m.M5 + energyRequirements9a.Box219_m.M6 + energyRequirements9a.Box219_m.M7 + energyRequirements9a.Box219_m.M8 + energyRequirements9a.Box219_m.M9 + energyRequirements9a.Box219_m.M10 + energyRequirements9a.Box219_m.M11 + energyRequirements9a.Box219_m.M12;
      if (this._Calc.Water_heating.Box64Imm != 0.0)
      {
        energyRequirements9a.Box217_mImm.M6 = 100.0;
        energyRequirements9a.Box217_mImm.M7 = 100.0;
        energyRequirements9a.Box217_mImm.M8 = 100.0;
        energyRequirements9a.Box217_mImm.M9 = 100.0;
        energyRequirements9a.Box219_mImm.M6 = this._Calc.Water_heating.Box64_mImm.M6;
        energyRequirements9a.Box219_mImm.M7 = this._Calc.Water_heating.Box64_mImm.M7;
        energyRequirements9a.Box219_mImm.M8 = this._Calc.Water_heating.Box64_mImm.M8;
        energyRequirements9a.Box219_mImm.M9 = this._Calc.Water_heating.Box64_mImm.M9;
        energyRequirements9a.Box219Imm = energyRequirements9a.Box219_mImm.M6 + energyRequirements9a.Box219_mImm.M7 + energyRequirements9a.Box219_mImm.M8 + energyRequirements9a.Box219_mImm.M9;
      }
label_390:
      bool flag1;
      bool flag2;
      if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0)
      {
        if (Operators.CompareString(this._House.MainHeating.SGroup, "Gas boilers and oil boilers", false) == 0 | Operators.CompareString(this._House.MainHeating.SGroup, "Solid fuel boilers", false) == 0)
        {
          Energy_Requirements_9a2012 requirements9a2012_9;
          double num9 = (requirements9a2012_9 = energyRequirements9a).Box230c + (this._House.MainHeating.Boiler.PumpType.Equals("2013 or later") ? 30.0 : 120.0);
          requirements9a2012_9.Box230c = num9;
          flag1 = true;
          if (Operators.CompareString(this._House.MainHeating.SGroup, "Gas boilers and oil boilers", false) == 0 && Conversions.ToBoolean(Operators.OrObject(Operators.OrObject(Operators.OrObject(Operators.OrObject(Operators.OrObject(Operators.OrObject(Operators.CompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "Fuel", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) "4", false), Operators.CompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "Fuel", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) "71", false)), Operators.CompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "Fuel", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) "72", false)), Operators.CompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "Fuel", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) "73", false)), Operators.CompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "Fuel", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) "74", false)), Operators.CompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "Fuel", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) "75", false)), Operators.CompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "Fuel", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) "76", false))))
          {
            Energy_Requirements_9a2012 requirements9a2012_10;
            double num10 = (requirements9a2012_10 = energyRequirements9a).Box230d + 100.0;
            requirements9a2012_10.Box230d = num10;
            flag2 = true;
          }
        }
        else if (Operators.CompareString(this._House.MainHeating.SGroup, "Micro-cogeneration (micro-CHP)", false) == 0 && Operators.CompareString(this._House.MainHeating.Boiler.PumpHP, "Yes", false) == 0)
        {
          Energy_Requirements_9a2012 requirements9a2012;
          double num = (requirements9a2012 = energyRequirements9a).Box230c + (this._House.MainHeating.Boiler.PumpType.Equals("2013 or later") ? 30.0 : 120.0);
          requirements9a2012.Box230c = num;
          flag1 = true;
        }
      }
      else
      {
        int sapTableCode4 = this._House.MainHeating.SAPTableCode;
        if (sapTableCode4 < 227 || sapTableCode4 == 602 || sapTableCode4 == 606)
        {
          Energy_Requirements_9a2012 requirements9a2012;
          double num = (requirements9a2012 = energyRequirements9a).Box230c + (this._House.MainHeating.Boiler.PumpType.Equals("2013 or later") ? 30.0 : 120.0);
          requirements9a2012.Box230c = num;
          flag1 = true;
        }
        else if (sapTableCode4 == 192)
        {
          energyRequirements9a.Box230c = this._House.MainHeating.Boiler.PumpType.Equals("2013 or later") ? 30.0 : 120.0;
          flag1 = true;
        }
        int sapTableCode5 = this._House.MainHeating.SAPTableCode;
        if (sapTableCode5 >= 124 && sapTableCode5 <= 132 || sapTableCode5 >= 139 && sapTableCode5 <= 141)
        {
          Energy_Requirements_9a2012 requirements9a2012;
          double num = (requirements9a2012 = energyRequirements9a).Box230d + 100.0;
          requirements9a2012.Box230d = num;
          flag2 = true;
        }
      }
      if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 && this._House.MainHeating.SGroup.Contains("heat pumps") && Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "Emitter_Type", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 4, false))
        energyRequirements9a.Box230b = 0.6 * this._Calc.Dimensions.Box5;
      if (Operators.CompareString(this._House.MainHeating.SGroup, "Micro-cogeneration (micro-CHP)", false) == 0)
      {
        if (energyRequirements9a.Box230c != 0.0)
        {
          switch (this._House.MainHeating.ControlCode)
          {
            case 2101:
            case 2102:
            case 2107:
            case 2111:
            case 2201:
            case 2202:
            case 2206:
              energyRequirements9a.Box230c = (this._House.MainHeating.Boiler.PumpType.Equals("2013 or later") ? 30.0 : 120.0) * 1.3;
              break;
          }
        }
      }
      else
      {
        switch (this._House.MainHeating.ControlCode)
        {
          case 2101:
          case 2102:
          case 2107:
          case 2111:
          case 2201:
          case 2202:
            energyRequirements9a.Box230c = (this._House.MainHeating.Boiler.PumpType.Equals("2013 or later") ? 30.0 : 120.0) * 1.3;
            Energy_Requirements_9a2012 requirements9a2012_11;
            double num11 = (requirements9a2012_11 = energyRequirements9a).Box230d * 1.3;
            requirements9a2012_11.Box230d = num11;
            break;
        }
      }
      if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 && this._House.MainHeating.SGroup.Contains("heat pumps"))
        energyRequirements9a.Box230c = 0.0;
      if (this._House.IncludeMainHeating2)
      {
        if (Operators.CompareString(this._House.MainHeating2.InforSource, "Boiler Database", false) == 0)
        {
          if (Operators.CompareString(this._House.MainHeating2.SGroup, "Gas boilers and oil boilers", false) == 0 | Operators.CompareString(this._House.MainHeating2.SGroup, "Solid fuel boilers", false) == 0)
          {
            if (!flag1 & (double) this._House.HeatFractionSec != 0.0)
            {
              Energy_Requirements_9a2012 requirements9a2012_12;
              double num12 = (requirements9a2012_12 = energyRequirements9a).Box230c + (this._House.MainHeating2.Boiler.PumpType.Equals("2013 or later") ? 30.0 : 120.0);
              requirements9a2012_12.Box230c = num12;
            }
            if (flag1 & (double) this._House.HeatFractionSec != 0.0 & this._House.MainHeating2.Boiler.PumpType.Equals("2013 or later"))
            {
              Energy_Requirements_9a2012 requirements9a2012_13;
              double num13 = (requirements9a2012_13 = energyRequirements9a).Box230c + 30.0;
              requirements9a2012_13.Box230c = num13;
            }
            if (Operators.CompareString(this._House.MainHeating2.SGroup, "Gas boilers and oil boilers", false) == 0 && Conversions.ToBoolean(Operators.OrObject(Operators.OrObject(Operators.OrObject(Operators.OrObject(Operators.OrObject(Operators.OrObject(Operators.CompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "Fuel", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 4, false), Operators.CompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "Fuel", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 71, false)), Operators.CompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "Fuel", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 72, false)), Operators.CompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "Fuel", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 73, false)), Operators.CompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "Fuel", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 74, false)), Operators.CompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "Fuel", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 75, false)), Operators.CompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "Fuel", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 76, false))))
            {
              switch (this._House.MainHeating2.ControlCode)
              {
                case 2101:
                case 2102:
                case 2107:
                case 2111:
                case 2201:
                case 2202:
                  Energy_Requirements_9a2012 requirements9a2012_14;
                  double num14 = (requirements9a2012_14 = energyRequirements9a).Box230d + (this._House.MainHeating.Boiler.PumpType.Equals("2013 or later") ? 30.0 : 120.0);
                  requirements9a2012_14.Box230d = num14;
                  break;
                default:
                  if ((double) this._House.HeatFractionSec != 0.0)
                  {
                    Energy_Requirements_9a2012 requirements9a2012_15;
                    double num15 = (requirements9a2012_15 = energyRequirements9a).Box230d + 100.0;
                    requirements9a2012_15.Box230d = num15;
                    break;
                  }
                  break;
              }
            }
          }
          else if (Operators.CompareString(this._House.MainHeating2.SGroup, "Micro-cogeneration (micro-CHP)", false) == 0 && Operators.CompareString(this._House.MainHeating2.Boiler.PumpHP, "Yes", false) == 0 && !flag1)
          {
            Energy_Requirements_9a2012 requirements9a2012_16;
            double num16 = (requirements9a2012_16 = energyRequirements9a).Box230c + 130.0;
            requirements9a2012_16.Box230c = num16;
          }
          switch (this._House.MainHeating2.ControlCode)
          {
            case 2101:
            case 2102:
            case 2107:
            case 2111:
            case 2201:
            case 2202:
              energyRequirements9a.Box230c = (this._House.MainHeating.Boiler.PumpType.Equals("2013 or later") ? 30.0 : 120.0) * 1.3;
              break;
          }
        }
        else
        {
          int sapTableCode6 = this._House.MainHeating2.SAPTableCode;
          if (sapTableCode6 < 208 || sapTableCode6 == 602 || sapTableCode6 == 606)
          {
            if (!flag1)
            {
              Energy_Requirements_9a2012 requirements9a2012_17;
              double num17 = (requirements9a2012_17 = energyRequirements9a).Box230c + (this._House.MainHeating.Boiler.PumpType.Equals("2013 or later") ? 30.0 : 120.0);
              requirements9a2012_17.Box230c = num17;
            }
          }
          else if (sapTableCode6 == 192 && !flag1)
            energyRequirements9a.Box230c = this._House.MainHeating.Boiler.PumpType.Equals("2013 or later") ? 30.0 : 120.0;
          int sapTableCode7 = this._House.MainHeating2.SAPTableCode;
          if ((sapTableCode7 >= 124 && sapTableCode7 <= 132 || sapTableCode7 >= 139 && sapTableCode7 <= 141) && !flag2)
          {
            Energy_Requirements_9a2012 requirements9a2012_18;
            double num18 = (requirements9a2012_18 = energyRequirements9a).Box230d + 100.0;
            requirements9a2012_18.Box230d = num18;
          }
        }
      }
      if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0)
      {
        if (Operators.CompareString(this._House.MainHeating.SGroup, "Gas boilers and oil boilers", false) == 0)
        {
          if (Conversions.ToBoolean(Operators.AndObject(Operators.CompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "FanAssist", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) "2", false), Operators.CompareObjectNotEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "Fuel", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) "4", false))))
          {
            Energy_Requirements_9a2012 requirements9a2012_19;
            double num19 = (requirements9a2012_19 = energyRequirements9a).Box230e + 45.0;
            requirements9a2012_19.Box230e = num19;
          }
        }
        else if (Operators.CompareString(this._House.MainHeating.SGroup, "Micro-cogeneration (micro-CHP)", false) != 0 && Operators.CompareString(this._House.MainHeating.SGroup, "Solid fuel boilers", false) != 0 && this._House.MainHeating.HGroup.Equals("Warm air systems (Not heat pump)") && ((PCDF.WarmAir) this.SEDBUKFound).Fan_assistance.Equals("2"))
        {
          Energy_Requirements_9a2012 requirements9a2012_20;
          double num20 = (requirements9a2012_20 = energyRequirements9a).Box230e + 45.0;
          requirements9a2012_20.Box230e = num20;
        }
      }
      else
      {
        int sapTableCode8 = this._House.MainHeating.SAPTableCode;
        if (sapTableCode8 < 150 || sapTableCode8 == 602 || sapTableCode8 == 604 || sapTableCode8 == 606 || sapTableCode8 >= 506 && sapTableCode8 <= 511 || sapTableCode8 >= 520 && sapTableCode8 <= 527 || sapTableCode8 >= 205 && sapTableCode8 <= 230)
        {
          if (Operators.CompareString(this._House.MainHeating.Fuel, "mains gas", false) == 0 | Operators.CompareString(this._House.MainHeating.Fuel, "bulk LPG", false) == 0 | Operators.CompareString(this._House.MainHeating.Fuel, "bottled LPG", false) == 0 && Operators.CompareString(this._House.MainHeating.Boiler.FanFlued, "Yes", false) == 0)
          {
            Energy_Requirements_9a2012 requirements9a2012_21;
            double num21 = (requirements9a2012_21 = energyRequirements9a).Box230e + 45.0;
            requirements9a2012_21.Box230e = num21;
          }
        }
        else if (sapTableCode8 >= 501 && sapTableCode8 <= 505)
        {
          Energy_Requirements_9a2012 requirements9a2012_22;
          double num22 = (requirements9a2012_22 = energyRequirements9a).Box230e + 45.0;
          requirements9a2012_22.Box230e = num22;
        }
      }
      if (this._House.IncludeMainHeating2)
      {
        if (Operators.CompareString(this._House.MainHeating2.InforSource, "Boiler Database", false) == 0)
        {
          if (Operators.CompareString(this._House.MainHeating2.SGroup, "Gas boilers and oil boilers", false) == 0)
          {
            if (Conversions.ToBoolean(Operators.AndObject(Operators.CompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "FanAssist", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 2, false), Operators.CompareObjectNotEqual(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "Fuel", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 4, false))))
            {
              Energy_Requirements_9a2012 requirements9a2012_23;
              double num23 = (requirements9a2012_23 = energyRequirements9a).Box230e + 45.0;
              requirements9a2012_23.Box230e = num23;
            }
          }
          else if (Operators.CompareString(this._House.MainHeating2.SGroup, "Micro-cogeneration (micro-CHP)", false) == 0 || Operators.CompareString(this._House.MainHeating2.SGroup, "Solid fuel boilers", false) != 0)
            ;
        }
        else
        {
          int sapTableCode9 = this._House.MainHeating2.SAPTableCode;
          if (sapTableCode9 < 150 || sapTableCode9 == 602 || sapTableCode9 == 604 || sapTableCode9 == 606 || sapTableCode9 >= 506 && sapTableCode9 <= 511 || sapTableCode9 >= 521 && sapTableCode9 <= 527 || sapTableCode9 >= 205 && sapTableCode9 <= 230)
          {
            if (Operators.CompareString(this._House.MainHeating2.Fuel, "mains gas", false) == 0 | Operators.CompareString(this._House.MainHeating2.Fuel, "bulk LPG", false) == 0 | Operators.CompareString(this._House.MainHeating2.Fuel, "bottled LPG", false) == 0 && Operators.CompareString(this._House.MainHeating2.Boiler.FanFlued, "Yes", false) == 0)
            {
              Energy_Requirements_9a2012 requirements9a2012_24;
              double num24 = (requirements9a2012_24 = energyRequirements9a).Box230e + 45.0;
              requirements9a2012_24.Box230e = num24;
            }
          }
          else if (sapTableCode9 >= 501 && sapTableCode9 <= 505)
          {
            Energy_Requirements_9a2012 requirements9a2012_25;
            double num25 = (requirements9a2012_25 = energyRequirements9a).Box230e + 45.0;
            requirements9a2012_25.Box230e = num25;
          }
        }
      }
      if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0)
      {
        if (Operators.CompareString(this._House.MainHeating.HGroup, "Warm air systems (Not heat pump)", false) == 0 && (uint) Operators.CompareString(this._House.Ventilation.MechVent, "Balanced without heat recovery", false) > 0U & (uint) Operators.CompareString(this._House.Ventilation.MechVent, "Balanced with heat recovery", false) > 0U)
        {
          Energy_Requirements_9a2012 requirements9a2012_26;
          double num26 = (requirements9a2012_26 = energyRequirements9a).Box230b + 0.6 * this._Calc.Dimensions.Box5;
          requirements9a2012_26.Box230b = num26;
        }
      }
      else
      {
        int sapTableCode10 = this._House.MainHeating.SAPTableCode;
        if (sapTableCode10 >= 501 && sapTableCode10 <= 527 && (uint) Operators.CompareString(this._House.Ventilation.MechVent, "Balanced without heat recovery", false) > 0U & (uint) Operators.CompareString(this._House.Ventilation.MechVent, "Balanced with heat recovery", false) > 0U)
        {
          Energy_Requirements_9a2012 requirements9a2012_27;
          double num27 = (requirements9a2012_27 = energyRequirements9a).Box230b + 0.6 * this._Calc.Dimensions.Box5;
          requirements9a2012_27.Box230b = num27;
        }
      }
      energyRequirements9a.Box230a = this.GetMechVentElecAmount();
      if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0)
      {
        if (Operators.CompareString(this._House.MainHeating.SGroup, "Gas boilers and oil boilers", false) == 0)
        {
          if (Information.IsDBNull(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "KpHtFac", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))))
            NewLateBinding.LateSet(this.SEDBUKFound, (System.Type) null, "KpHtFac", new object[1]
            {
              (object) ""
            }, (string[]) null, (System.Type[]) null);
          if (Information.IsDBNull(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "KpHtElcHtr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))))
            NewLateBinding.LateSet(this.SEDBUKFound, (System.Type) null, "KpHtElcHtr", new object[1]
            {
              (object) ""
            }, (string[]) null, (System.Type[]) null);
          if (Information.IsDBNull(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "KpHtTmr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))))
            NewLateBinding.LateSet(this.SEDBUKFound, (System.Type) null, "KpHtTmr", new object[1]
            {
              (object) ""
            }, (string[]) null, (System.Type[]) null);
          if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "KpHtFac", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) != 1.0)
          {
            if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "KpHtFac", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 2.0)
            {
              if (this._House.Water.SystemRef == 901)
              {
                Energy_Requirements_9a2012 requirements9a2012_28;
                double num28 = (requirements9a2012_28 = energyRequirements9a).Box230f + 8.76 * Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "KpHtElcHtr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
                requirements9a2012_28.Box230f = num28;
                if (energyRequirements9a.Box230f == 0.0)
                {
                  if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "KpHtTmr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 1.0)
                    energyRequirements9a.Box230f = 600.0;
                  else if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "KpHtTmr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 0.0)
                    energyRequirements9a.Box230f = 900.0;
                }
              }
            }
            else if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "KpHtFac", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 3.0 && this._House.Water.SystemRef == 901)
            {
              Energy_Requirements_9a2012 requirements9a2012_29;
              double num29 = (requirements9a2012_29 = energyRequirements9a).Box230f + 8.76 * Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "KpHtElcHtr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
              requirements9a2012_29.Box230f = num29;
              if (energyRequirements9a.Box230f == 0.0)
              {
                if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "KpHtTmr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 1.0)
                  energyRequirements9a.Box230f = 600.0;
                else if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "KpHtTmr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 0.0)
                  energyRequirements9a.Box230f = 900.0;
              }
            }
          }
        }
      }
      else if (this._House.MainHeating.Boiler.IncludeKeepHot && (uint) Operators.CompareString(this._House.MainHeating.Boiler.KeepHotFuel, "Main Fuel", false) > 0U)
        energyRequirements9a.Box230f = !this._House.MainHeating.Boiler.KeepHotTimed ? 900.0 : 600.0;
      if (this._House.Water.Solar.Inlcude && !this._House.Water.Solar.Pumped)
        energyRequirements9a.Box230g = 50.0;
      if (!this._House.Water.Solar.Inlcude && this._House.Water.WWHRS.Include)
      {
        if (!string.IsNullOrEmpty(this._House.Water.WWHRS.Systems[0].SystemsRef))
        {
          PCDF.WWHRS wwhrs = SAP_Module.PCDFData.WWHRSs.Where<PCDF.WWHRS>((Func<PCDF.WWHRS, bool>) (b => b.ID.Equals(this._House.Water.WWHRS.Systems[0].SystemsRef))).SingleOrDefault<PCDF.WWHRS>();
          if (wwhrs != null)
          {
            Energy_Requirements_9a2012 requirements9a2012_30;
            double num30 = (requirements9a2012_30 = energyRequirements9a).Box230h + 365.0 * Conversion.Val(wwhrs.ElectricyConsumption);
            requirements9a2012_30.Box230h = num30;
          }
        }
        if (!string.IsNullOrEmpty(this._House.Water.WWHRS.Systems[0].SystemsRef))
        {
          PCDF.WWHRS wwhrs = SAP_Module.PCDFData.WWHRSs.Where<PCDF.WWHRS>((Func<PCDF.WWHRS, bool>) (b => b.ID.Equals(this._House.Water.WWHRS.Systems[1].SystemsRef))).SingleOrDefault<PCDF.WWHRS>();
          if (wwhrs != null)
          {
            Energy_Requirements_9a2012 requirements9a2012_31;
            double num31 = (requirements9a2012_31 = energyRequirements9a).Box230h + 365.0 * Conversion.Val(wwhrs.ElectricyConsumption);
            requirements9a2012_31.Box230h = num31;
          }
        }
      }
      energyRequirements9a.Box231 = energyRequirements9a.Box230a + energyRequirements9a.Box230b + energyRequirements9a.Box230c + energyRequirements9a.Box230d + energyRequirements9a.Box230e + energyRequirements9a.Box230f + energyRequirements9a.Box230g + energyRequirements9a.Box230h;
      energyRequirements9a.Box232 = this._Calc.Internal_gains.AppendixL.EL_Final;
      if (this._House.Renewable.WindTurbine.Inlcude)
        this.WindTurbine();
      if (this._House.Renewable.Photovoltaic.Inlcude)
        this.Photocoltaic();
      if (this._House.Renewable.AAEGeneration.Inlcude)
        energyRequirements9a.Box235a = -this._Calc.Dimensions.Box4 * (double) this._House.Renewable.AAEGeneration.EGenerated / Conversions.ToDouble(this._House.Renewable.AAEGeneration.TotalArea);
      if (this._House.Renewable.HydroGeneration.Inlcude)
        energyRequirements9a.Box235a = -this._Calc.Dimensions.Box4 * (double) this._House.Renewable.HydroGeneration.HydroGenerated / Conversions.ToDouble(this._House.Renewable.HydroGeneration.TotalArea);
      if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 && Operators.CompareString(this._House.MainHeating.SGroup, "Micro-cogeneration (micro-CHP)", false) == 0)
      {
        double num32 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "ServiceProvision", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
        if (num32 == 1.0)
          this._Calc.HeatLoss.CHPCalc.E = this._Calc.Space_heating_requirement.Box98 * this._Calc.Energy_Requirements_9a.Box204 * this._Calc.HeatLoss.CHPCalc.espace + this._Calc.Water_heating.Box64 * this._Calc.HeatLoss.CHPCalc.esummer;
        else if (num32 == 2.0)
        {
          double num33;
          if (this._Calc.Space_heating_requirement.Box98_m.M1 > 0.0)
          {
            double num34;
            num33 = num34 + this._Calc.Water_heating.Box64_m.M1;
          }
          if (this._Calc.Space_heating_requirement.Box98_m.M2 > 0.0)
            num33 += this._Calc.Water_heating.Box64_m.M2;
          if (this._Calc.Space_heating_requirement.Box98_m.M3 > 0.0)
            num33 += this._Calc.Water_heating.Box64_m.M3;
          if (this._Calc.Space_heating_requirement.Box98_m.M4 > 0.0)
            num33 += this._Calc.Water_heating.Box64_m.M4;
          if (this._Calc.Space_heating_requirement.Box98_m.M5 > 0.0)
            num33 += this._Calc.Water_heating.Box64_m.M5;
          if (this._Calc.Space_heating_requirement.Box98_m.M6 > 0.0)
            num33 += this._Calc.Water_heating.Box64_m.M6;
          if (this._Calc.Space_heating_requirement.Box98_m.M7 > 0.0)
            num33 += this._Calc.Water_heating.Box64_m.M7;
          if (this._Calc.Space_heating_requirement.Box98_m.M8 > 0.0)
            num33 += this._Calc.Water_heating.Box64_m.M8;
          if (this._Calc.Space_heating_requirement.Box98_m.M9 > 0.0)
            num33 += this._Calc.Water_heating.Box64_m.M9;
          if (this._Calc.Space_heating_requirement.Box98_m.M10 > 0.0)
            num33 += this._Calc.Water_heating.Box64_m.M10;
          if (this._Calc.Space_heating_requirement.Box98_m.M11 > 0.0)
            num33 += this._Calc.Water_heating.Box64_m.M11;
          if (this._Calc.Space_heating_requirement.Box98_m.M12 > 0.0)
            num33 += this._Calc.Water_heating.Box64_m.M12;
          this._Calc.HeatLoss.CHPCalc.E = this._Calc.Space_heating_requirement.Box98 * this._Calc.Energy_Requirements_9a.Box204 * this._Calc.HeatLoss.CHPCalc.espace + num33 * this._Calc.HeatLoss.CHPCalc.esummer;
        }
        else if (num32 == 3.0)
          this._Calc.HeatLoss.CHPCalc.E = this._Calc.Space_heating_requirement.Box98 * this._Calc.Energy_Requirements_9a.Box204 * this._Calc.HeatLoss.CHPCalc.espace;
        else if (num32 == 4.0)
          this._Calc.HeatLoss.CHPCalc.E = this._Calc.Water_heating.Box64 * this._Calc.HeatLoss.CHPCalc.esummer;
        energyRequirements9a.Box235 = this._Calc.HeatLoss.CHPCalc.E;
      }
      if (this._House.Renewable.Special.Include)
      {
        this._Calc.Energy_Requirements_9a.AppendixQ_Item_Count = this._House.Renewable.Special.Special.Length;
        int num35 = checked (this._House.Renewable.Special.Special.Length - 1);
        int Index1 = 0;
        while (Index1 <= num35)
        {
          this._Calc.Energy_Requirements_9a.get_AppendixQ_Item(Index1).Description = this._House.Renewable.Special.Special[Index1].Description;
          this._Calc.Energy_Requirements_9a.get_AppendixQ_Item(Index1).Energy_Saved = -(double) this._House.Renewable.Special.Special[Index1].EnergySaved;
          this._Calc.Energy_Requirements_9a.get_AppendixQ_Item(Index1).Energy_Used = (double) this._House.Renewable.Special.Special[Index1].EnergyUsed;
          this._Calc.Energy_Requirements_9a.get_AppendixQ_Item(Index1).Fuel_Saved = this._House.Renewable.Special.Special[Index1].FuelSaved;
          this._Calc.Energy_Requirements_9a.get_AppendixQ_Item(Index1).Fuel_Used = this._House.Renewable.Special.Special[Index1].FuelUsed;
          checked { ++Index1; }
        }
        this._Calc.Energy_Requirements_9b.AppendixQ_Item_Count = this._House.Renewable.Special.Special.Length;
        int num36 = checked (this._House.Renewable.Special.Special.Length - 1);
        int Index2 = 0;
        while (Index2 <= num36)
        {
          this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index2).Description = this._House.Renewable.Special.Special[Index2].Description;
          this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index2).Energy_Saved = -(double) this._House.Renewable.Special.Special[Index2].EnergySaved;
          this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index2).Energy_Used = (double) this._House.Renewable.Special.Special[Index2].EnergyUsed;
          this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index2).Fuel_Saved = this._House.Renewable.Special.Special[Index2].FuelSaved;
          this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index2).Fuel_Used = this._House.Renewable.Special.Special[Index2].FuelUsed;
          checked { ++Index2; }
        }
      }
      if (this.OccupancyCalc | this.StandardOccupancyCalc)
      {
        energyRequirements9a.Box232a = this.OccupancyData.Ea;
        energyRequirements9a.Box232b = this.OccupancyData.Ec;
        energyRequirements9a.Box232c = this.OccupancyData.Ec2;
        if (this.OccupancyData.CookerType == OccupancyClass.CookerType.Range_All_Year | this.OccupancyData.CookerType == OccupancyClass.CookerType.Range_Winter)
        {
          Energy_Requirements_9a2012 requirements9a2012_32;
          double num37 = (requirements9a2012_32 = energyRequirements9a).Box232b + this.OccupancyData.Er_m.M1;
          requirements9a2012_32.Box232b = num37;
          Energy_Requirements_9a2012 requirements9a2012_33;
          double num38 = (requirements9a2012_33 = energyRequirements9a).Box232b + this.OccupancyData.Er_m.M2;
          requirements9a2012_33.Box232b = num38;
          Energy_Requirements_9a2012 requirements9a2012_34;
          double num39 = (requirements9a2012_34 = energyRequirements9a).Box232b + this.OccupancyData.Er_m.M3;
          requirements9a2012_34.Box232b = num39;
          Energy_Requirements_9a2012 requirements9a2012_35;
          double num40 = (requirements9a2012_35 = energyRequirements9a).Box232b + this.OccupancyData.Er_m.M4;
          requirements9a2012_35.Box232b = num40;
          Energy_Requirements_9a2012 requirements9a2012_36;
          double num41 = (requirements9a2012_36 = energyRequirements9a).Box232b + this.OccupancyData.Er_m.M5;
          requirements9a2012_36.Box232b = num41;
          Energy_Requirements_9a2012 requirements9a2012_37;
          double num42 = (requirements9a2012_37 = energyRequirements9a).Box232b + this.OccupancyData.Er_m.M6;
          requirements9a2012_37.Box232b = num42;
          Energy_Requirements_9a2012 requirements9a2012_38;
          double num43 = (requirements9a2012_38 = energyRequirements9a).Box232b + this.OccupancyData.Er_m.M7;
          requirements9a2012_38.Box232b = num43;
          Energy_Requirements_9a2012 requirements9a2012_39;
          double num44 = (requirements9a2012_39 = energyRequirements9a).Box232b + this.OccupancyData.Er_m.M8;
          requirements9a2012_39.Box232b = num44;
          Energy_Requirements_9a2012 requirements9a2012_40;
          double num45 = (requirements9a2012_40 = energyRequirements9a).Box232b + this.OccupancyData.Er_m.M9;
          requirements9a2012_40.Box232b = num45;
          Energy_Requirements_9a2012 requirements9a2012_41;
          double num46 = (requirements9a2012_41 = energyRequirements9a).Box232b + this.OccupancyData.Er_m.M10;
          requirements9a2012_41.Box232b = num46;
          Energy_Requirements_9a2012 requirements9a2012_42;
          double num47 = (requirements9a2012_42 = energyRequirements9a).Box232b + this.OccupancyData.Er_m.M11;
          requirements9a2012_42.Box232b = num47;
          Energy_Requirements_9a2012 requirements9a2012_43;
          double num48 = (requirements9a2012_43 = energyRequirements9a).Box232b + this.OccupancyData.Er_m.M12;
          requirements9a2012_43.Box232b = num48;
        }
        energyRequirements9a.Box219a = this.OccupancyData.Eshower_m.M1;
        Energy_Requirements_9a2012 requirements9a2012_44;
        double num49 = (requirements9a2012_44 = energyRequirements9a).Box219a + this.OccupancyData.Eshower_m.M2;
        requirements9a2012_44.Box219a = num49;
        Energy_Requirements_9a2012 requirements9a2012_45;
        double num50 = (requirements9a2012_45 = energyRequirements9a).Box219a + this.OccupancyData.Eshower_m.M3;
        requirements9a2012_45.Box219a = num50;
        Energy_Requirements_9a2012 requirements9a2012_46;
        double num51 = (requirements9a2012_46 = energyRequirements9a).Box219a + this.OccupancyData.Eshower_m.M4;
        requirements9a2012_46.Box219a = num51;
        Energy_Requirements_9a2012 requirements9a2012_47;
        double num52 = (requirements9a2012_47 = energyRequirements9a).Box219a + this.OccupancyData.Eshower_m.M5;
        requirements9a2012_47.Box219a = num52;
        Energy_Requirements_9a2012 requirements9a2012_48;
        double num53 = (requirements9a2012_48 = energyRequirements9a).Box219a + this.OccupancyData.Eshower_m.M6;
        requirements9a2012_48.Box219a = num53;
        Energy_Requirements_9a2012 requirements9a2012_49;
        double num54 = (requirements9a2012_49 = energyRequirements9a).Box219a + this.OccupancyData.Eshower_m.M7;
        requirements9a2012_49.Box219a = num54;
        Energy_Requirements_9a2012 requirements9a2012_50;
        double num55 = (requirements9a2012_50 = energyRequirements9a).Box219a + this.OccupancyData.Eshower_m.M8;
        requirements9a2012_50.Box219a = num55;
        Energy_Requirements_9a2012 requirements9a2012_51;
        double num56 = (requirements9a2012_51 = energyRequirements9a).Box219a + this.OccupancyData.Eshower_m.M9;
        requirements9a2012_51.Box219a = num56;
        Energy_Requirements_9a2012 requirements9a2012_52;
        double num57 = (requirements9a2012_52 = energyRequirements9a).Box219a + this.OccupancyData.Eshower_m.M10;
        requirements9a2012_52.Box219a = num57;
        Energy_Requirements_9a2012 requirements9a2012_53;
        double num58 = (requirements9a2012_53 = energyRequirements9a).Box219a + this.OccupancyData.Eshower_m.M11;
        requirements9a2012_53.Box219a = num58;
        Energy_Requirements_9a2012 requirements9a2012_54;
        double num59 = (requirements9a2012_54 = energyRequirements9a).Box219a + this.OccupancyData.Eshower_m.M12;
        requirements9a2012_54.Box219a = num59;
        float num60;
        float num61;
        if (Microsoft.VisualBasic.Strings.LCase(this._House.MainHeating.Fuel).Contains("electricity"))
        {
          double highTariff = this.Get_High_Tariff(this._House.MainHeating.SAPTableCode);
          num60 = (float) (energyRequirements9a.Box211 * highTariff);
          num61 = (float) energyRequirements9a.Box211 - num60;
        }
        float num62;
        float num63;
        if (this._House.MainHeating2.Fuel != null && Microsoft.VisualBasic.Strings.LCase(this._House.MainHeating2.Fuel).Contains("electricity"))
        {
          double highTariff = this.Get_High_Tariff(this._House.MainHeating2.SAPTableCode);
          num62 = (float) (energyRequirements9a.Box213 * highTariff);
          num63 = (float) energyRequirements9a.Box213 - num62;
        }
        float num64;
        float num65;
        if (this._House.SecHeating.Fuel != null && Microsoft.VisualBasic.Strings.LCase(this._House.SecHeating.Fuel).Contains("electricity"))
        {
          double highTariff = this.Get_High_Tariff(this._House.SecHeating.SAPTableCode);
          num64 = (float) (energyRequirements9a.Box215 * highTariff);
          num65 = (float) energyRequirements9a.Box215 - num64;
        }
        float num66;
        float num67;
        float num68;
        float num69;
        if (this.OriginalSAPDwelling.Water.Fuel != null)
        {
          if (Microsoft.VisualBasic.Strings.LCase(this.OriginalSAPDwelling.Water.Fuel).Contains("electricity"))
          {
            double summerLow = this.Get_Summer_Low();
            num66 = (float) (energyRequirements9a.Box219 * summerLow);
            num67 = (float) energyRequirements9a.Box219 - num66;
          }
          if (energyRequirements9a.Box219Imm != 0.0)
          {
            double summerLow = this.Get_Summer_Low();
            num68 = (float) (energyRequirements9a.Box219Imm * summerLow);
            num69 = (float) energyRequirements9a.Box219Imm - num68;
          }
        }
        float num70;
        float num71;
        if (energyRequirements9a.Box219a != 0.0)
        {
          double num72 = Operators.CompareString(this._House.MainHeating.ElectricityTariff, "10-hour tariff", false) != 0 ? 0.9 : 0.8;
          num70 = (float) (energyRequirements9a.Box219a * num72);
          num71 = (float) energyRequirements9a.Box219a - num70;
        }
        float num73;
        float num74;
        if (energyRequirements9a.Box231 != 0.0)
        {
          double num75 = Operators.CompareString(this._House.MainHeating.ElectricityTariff, "10-hour tariff", false) != 0 ? 0.9 : 0.8;
          num73 = (float) (energyRequirements9a.Box231 * num75);
          num74 = (float) energyRequirements9a.Box231 - num73;
        }
        float num76;
        float num77;
        if (energyRequirements9a.Box232 != 0.0)
        {
          double num78 = Operators.CompareString(this._House.MainHeating.ElectricityTariff, "10-hour tariff", false) != 0 ? 0.9 : 0.8;
          num76 = (float) (energyRequirements9a.Box232 * num78);
          num77 = (float) energyRequirements9a.Box232 - num76;
        }
        float num79;
        float num80;
        if (energyRequirements9a.Box232a != 0.0)
        {
          double num81 = Operators.CompareString(this._House.MainHeating.ElectricityTariff, "10-hour tariff", false) != 0 ? 0.9 : 0.8;
          num79 = (float) (energyRequirements9a.Box232a * num81);
          num80 = (float) energyRequirements9a.Box232a - num79;
        }
        float num82;
        float num83;
        if (energyRequirements9a.Box232b != 0.0)
        {
          double num84;
          if (this.OccupancyData.CookerType == OccupancyClass.CookerType.Range_All_Year | this.OccupancyData.CookerType == OccupancyClass.CookerType.Range_Winter)
          {
            string electricityTariff = this._House.MainHeating.ElectricityTariff;
            if (Operators.CompareString(electricityTariff, "standard tariff", false) != 0)
            {
              if (Operators.CompareString(electricityTariff, "7-hour tariff", false) != 0)
              {
                if (Operators.CompareString(electricityTariff, "10-hour tariff", false) != 0)
                {
                  if (Operators.CompareString(electricityTariff, "24-hour tariff", false) == 0)
                    num84 = 0.0;
                }
                else
                  num84 = 0.76;
              }
              else
                num84 = 0.71;
            }
            else
              num84 = 0.0;
          }
          else
            num84 = Operators.CompareString(this._House.MainHeating.ElectricityTariff, "10-hour tariff", false) != 0 ? 0.9 : 0.8;
          if (this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Electric | this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Always_Electric | this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Gas_Electric)
          {
            num82 = (float) (energyRequirements9a.Box232b * num84);
            num83 = (float) energyRequirements9a.Box232b - num82;
          }
        }
        float current_value1 = num60 + num62 + num64 + num66 + num68 + num70 + num76 + num79 + num82 + num73;
        float current_value2 = num61 + num63 + num65 + num67 + num69 + num71 + num77 + num80 + num83 + num74;
        if ((uint) this.OccupancyData.Electricity_High.FuelBillInfo > 0U)
        {
          double num85 = !(this.OccupancyData.Electricity_High.Unusual_Energy | this.OccupancyData.Electricity_High.FuelBillInfo == OccupancyClass.Fuel.FuelBillInformation.NotAvailable) ? this.Correction_Factor(this.OccupancyData.Electricity_High.EnergyUsed, OccupancyClass.PeriodLength(this.OccupancyData.Electricity_High.Period), (double) current_value1, "High") : this.Correction_Factor(0.0, 12.0, (double) current_value1, "High");
          if (this.OccupancyData.Scaling_Factors_Set)
            num85 = (double) this.OccupancyData.Box219a_High_factor;
          energyRequirements9a.Box211_High_corrected = (double) num60 * num85;
          energyRequirements9a.Box213_High_corrected = (double) num62 * num85;
          energyRequirements9a.Box215_High_corrected = (double) num64 * num85;
          energyRequirements9a.Box219_High_corrected = (double) num66 * num85;
          energyRequirements9a.Box219Imm_High_corrected = (double) num68 * num85;
          energyRequirements9a.Box219a_High_corrected = (double) num70 * num85;
          energyRequirements9a.Box231_High_corrected = (double) num73 * num85;
          energyRequirements9a.Box232_High_corrected = (double) num76 * num85;
          energyRequirements9a.Box232a_High_corrected = (double) num79 * num85;
          energyRequirements9a.Box232b_High_corrected = (double) num82 * num85;
          energyRequirements9a.Box211_High_factor = num85;
          energyRequirements9a.Box213_High_factor = num85;
          energyRequirements9a.Box215_High_factor = num85;
          energyRequirements9a.Box219_High_factor = num85;
          energyRequirements9a.Box219Imm_High_factor = num85;
          energyRequirements9a.Box219a_High_factor = num85;
          energyRequirements9a.Box231_High_factor = num85;
          energyRequirements9a.Box232_High_factor = num85;
          energyRequirements9a.Box232a_High_factor = num85;
          energyRequirements9a.Box232b_High_factor = num85;
          double num86 = !(this.OccupancyData.Electricity_Low.Unusual_Energy | this.OccupancyData.Electricity_Low.FuelBillInfo == OccupancyClass.Fuel.FuelBillInformation.NotAvailable) ? this.Correction_Factor(this.OccupancyData.Electricity_Low.EnergyUsed, OccupancyClass.PeriodLength(this.OccupancyData.Electricity_Low.Period), (double) current_value2, "Low") : this.Correction_Factor(0.0, 12.0, (double) current_value2, "Low");
          if (this.OccupancyData.Scaling_Factors_Set)
            num86 = (double) this.OccupancyData.Box219a_factor;
          energyRequirements9a.Box211_corrected = (double) num61 * num86;
          energyRequirements9a.Box213_corrected = (double) num63 * num86;
          energyRequirements9a.Box215_corrected = (double) num65 * num86;
          energyRequirements9a.Box219_corrected = (double) num67 * num86;
          energyRequirements9a.Box219Imm_corrected = (double) num69 * num86;
          energyRequirements9a.Box219a_corrected = (double) num71 * num86;
          energyRequirements9a.Box231_corrected = (double) num74 * num86;
          energyRequirements9a.Box232_corrected = (double) num77 * num86;
          energyRequirements9a.Box232a_corrected = (double) num80 * num86;
          energyRequirements9a.Box232b_corrected = (double) num83 * num86;
          energyRequirements9a.Box211_factor = num86;
          energyRequirements9a.Box213_factor = num86;
          energyRequirements9a.Box215_factor = num86;
          energyRequirements9a.Box219_factor = num86;
          energyRequirements9a.Box219Imm_factor = num86;
          energyRequirements9a.Box219a_factor = num86;
          energyRequirements9a.Box231_factor = num86;
          energyRequirements9a.Box232_factor = num86;
          energyRequirements9a.Box232a_factor = num86;
          energyRequirements9a.Box232b_factor = num86;
        }
        else
        {
          float current_value3 = current_value2 + current_value1 - (num66 + num67);
          double num87 = !(this.OccupancyData.Electricity.Unusual_Energy | this.OccupancyData.Electricity.FuelBillInfo == OccupancyClass.Fuel.FuelBillInformation.NotAvailable) ? this.Correction_Factor(this.OccupancyData.Electricity.EnergyUsed, OccupancyClass.PeriodLength(this.OccupancyData.Electricity.Period), (double) current_value3, "electricity") : this.Correction_Factor(0.0, OccupancyClass.PeriodLength(this.OccupancyData.Electricity.Period), (double) current_value3, "electricity");
          if (this.OccupancyData.Scaling_Factors_Set)
            num87 = (double) this.OccupancyData.Box219a_factor;
          energyRequirements9a.Box219a_corrected = energyRequirements9a.Box219a * num87;
          energyRequirements9a.Box219a_factor = num87;
          energyRequirements9a.Box219Imm_corrected = energyRequirements9a.Box219Imm * num87;
          energyRequirements9a.Box219Imm_factor = num87;
          energyRequirements9a.Box231_corrected = energyRequirements9a.Box231 * num87;
          energyRequirements9a.Box231_factor = num87;
          energyRequirements9a.Box232_corrected = energyRequirements9a.Box232 * num87;
          energyRequirements9a.Box232_factor = num87;
          energyRequirements9a.Box232a_corrected = energyRequirements9a.Box232a * num87;
          energyRequirements9a.Box232a_factor = num87;
          if (this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Electric | this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Always_Electric | this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Gas_Electric)
          {
            energyRequirements9a.Box232b_corrected = energyRequirements9a.Box232b * num87;
            energyRequirements9a.Box232b_factor = num87;
          }
        }
        double num88 = 0.0;
        if (this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Always_Gas | this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Gas)
          num88 += energyRequirements9a.Box232b;
        double current_value4 = num88 + energyRequirements9a.Box232c;
        double num89 = !(this.OccupancyData.Gas.Unusual_Energy | this.OccupancyData.Gas.FuelBillInfo == OccupancyClass.Fuel.FuelBillInformation.NotAvailable) ? this.Correction_Factor(this.OccupancyData.Gas.EnergyUsed, OccupancyClass.PeriodLength(this.OccupancyData.Gas.Period), current_value4, "mains gas") : this.Correction_Factor(0.0, 12.0, current_value4, "mains gas");
        if (current_value4 != 0.0)
        {
          if (this.OccupancyData.Scaling_Factors_Set)
            num89 = (double) this.OccupancyData.Box232c_factor;
          energyRequirements9a.Box232c_corrected = current_value4 * num89;
          energyRequirements9a.Box232c_factor = num89;
        }
        else
        {
          energyRequirements9a.Box232c_corrected = energyRequirements9a.Box232c * num89;
          energyRequirements9a.Box232c_factor = num89;
        }
        if (this.OccupancyData.CommunityHeating.Unusual_Energy | this.OccupancyData.CommunityHeating.FuelBillInfo == OccupancyClass.Community.FuelBillInformation.NotAvailable)
          this.Correction_Factor(0.0, 12.0, 0.0, "heat from boilers");
        else
          this.Correction_Factor(this.OccupancyData.CommunityHeating.EnergyUsed, OccupancyClass.PeriodLength(this.OccupancyData.CommunityHeating.Period), 0.0, "heat from boilers");
        try
        {
          foreach (OccupancyClass.OtherFuel otherFuel in (Collection<OccupancyClass.OtherFuel>) this.OccupancyData.OtherFuels)
          {
            double EnergyUsed = this.Units_To_kWh(otherFuel.Fuel, otherFuel.UnitType, (double) otherFuel.UnitsPurchased);
            if (otherFuel.Unusual_Energy)
              EnergyUsed = 0.0;
            switch (otherFuel.Fuel)
            {
              case OccupancyClass.OtherFuel.FuelType.Bottled_LPG:
              case OccupancyClass.OtherFuel.FuelType.Bulk_LPG:
              case OccupancyClass.OtherFuel.FuelType.LPG_Special_Condition_18:
                double current_value5 = 0.0;
                if (this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Gas | this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Always_Gas | this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Gas_Electric && this.OccupancyData.Gas.FuelBillInfo == OccupancyClass.Fuel.FuelBillInformation.NotPresent)
                {
                  if (energyRequirements9a.Box232c != 0.0)
                    current_value5 += energyRequirements9a.Box232c;
                  else
                    current_value5 += energyRequirements9a.Box232b;
                }
                double num90 = !(otherFuel.Unusual_Energy | otherFuel.FuelBillInfo == OccupancyClass.OtherFuel.FuelBillInformation.NotAvailable) ? this.Correction_Factor(EnergyUsed, OccupancyClass.PeriodLength(otherFuel.Period), current_value5, "lpg") : this.Correction_Factor(0.0, 12.0, 0.0, "lpg");
                if (current_value5 != 0.0)
                {
                  if (energyRequirements9a.Box232c != 0.0)
                  {
                    if (this.OccupancyData.Scaling_Factors_Set)
                      num90 = (double) this.OccupancyData.Box232c_factor;
                    energyRequirements9a.Box232c_corrected = energyRequirements9a.Box232c * num90;
                    energyRequirements9a.Box232c_factor = num90;
                  }
                  else
                  {
                    if (this.OccupancyData.Scaling_Factors_Set)
                      num90 = (double) this.OccupancyData.Box232b_factor;
                    energyRequirements9a.Box232b_corrected = energyRequirements9a.Box232b * num90;
                    energyRequirements9a.Box232b_factor = num90;
                  }
                  break;
                }
                break;
              case OccupancyClass.OtherFuel.FuelType.Heating_Oil:
                double current_value6 = 0.0;
                if (this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Always_Oil)
                {
                  if (energyRequirements9a.Box232c != 0.0)
                    current_value6 += energyRequirements9a.Box232c;
                  else
                    current_value6 += energyRequirements9a.Box232b;
                }
                double num91 = !(otherFuel.Unusual_Energy | otherFuel.FuelBillInfo == OccupancyClass.OtherFuel.FuelBillInformation.NotAvailable) ? this.Correction_Factor(EnergyUsed, OccupancyClass.PeriodLength(otherFuel.Period), current_value6, "heating oil") : this.Correction_Factor(0.0, 12.0, 0.0, "heating oil");
                if (current_value6 != 0.0)
                {
                  if (energyRequirements9a.Box232c != 0.0)
                  {
                    if (this.OccupancyData.Scaling_Factors_Set)
                      num91 = (double) this.OccupancyData.Box232c_factor;
                    energyRequirements9a.Box232c_corrected = energyRequirements9a.Box232c * num91;
                    energyRequirements9a.Box232c_factor = num91;
                  }
                  else
                  {
                    if (this.OccupancyData.Scaling_Factors_Set)
                      num91 = (double) this.OccupancyData.Box232b_factor;
                    energyRequirements9a.Box232b_corrected = energyRequirements9a.Box232b * num91;
                    energyRequirements9a.Box232b_factor = num91;
                  }
                  break;
                }
                break;
              case OccupancyClass.OtherFuel.FuelType.Coal:
                double current_value7 = 0.0;
                if (this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Always_Solid)
                {
                  if (energyRequirements9a.Box232c != 0.0)
                    current_value7 += energyRequirements9a.Box232c;
                  else
                    current_value7 += energyRequirements9a.Box232b;
                }
                double num92 = !(otherFuel.Unusual_Energy | otherFuel.FuelBillInfo == OccupancyClass.OtherFuel.FuelBillInformation.NotAvailable) ? this.Correction_Factor(EnergyUsed, OccupancyClass.PeriodLength(otherFuel.Period), current_value7, "coal") : this.Correction_Factor(0.0, 12.0, 0.0, "coal");
                if (current_value7 != 0.0)
                {
                  if (energyRequirements9a.Box232c != 0.0)
                  {
                    if (this.OccupancyData.Scaling_Factors_Set)
                      num92 = (double) this.OccupancyData.Box232c_factor;
                    energyRequirements9a.Box232c_corrected = energyRequirements9a.Box232c * num92;
                    energyRequirements9a.Box232c_factor = num92;
                  }
                  else
                  {
                    if (this.OccupancyData.Scaling_Factors_Set)
                      num92 = (double) this.OccupancyData.Box232b_factor;
                    energyRequirements9a.Box232b_corrected = energyRequirements9a.Box232b * num92;
                    energyRequirements9a.Box232b_factor = num92;
                  }
                  break;
                }
                break;
              case OccupancyClass.OtherFuel.FuelType.Anthracite:
                if (otherFuel.Unusual_Energy | otherFuel.FuelBillInfo == OccupancyClass.OtherFuel.FuelBillInformation.NotAvailable)
                {
                  this.Correction_Factor(0.0, 12.0, 0.0, "anthracite");
                  break;
                }
                this.Correction_Factor(EnergyUsed, OccupancyClass.PeriodLength(otherFuel.Period), 0.0, "anthracite");
                break;
              case OccupancyClass.OtherFuel.FuelType.Smokeless_Fuel:
                if (otherFuel.Unusual_Energy | otherFuel.FuelBillInfo == OccupancyClass.OtherFuel.FuelBillInformation.NotAvailable)
                {
                  this.Correction_Factor(0.0, 12.0, 0.0, "smokeless");
                  break;
                }
                this.Correction_Factor(EnergyUsed, OccupancyClass.PeriodLength(otherFuel.Period), 0.0, "smokeless");
                break;
              case OccupancyClass.OtherFuel.FuelType.Wood_Logs:
              case OccupancyClass.OtherFuel.FuelType.Wood_Chips:
              case OccupancyClass.OtherFuel.FuelType.Wood_Pellets:
                if (otherFuel.Unusual_Energy | otherFuel.FuelBillInfo == OccupancyClass.OtherFuel.FuelBillInformation.NotAvailable)
                {
                  this.Correction_Factor(0.0, 12.0, 0.0, "wood");
                  break;
                }
                this.Correction_Factor(EnergyUsed, OccupancyClass.PeriodLength(otherFuel.Period), 0.0, "wood");
                break;
              case OccupancyClass.OtherFuel.FuelType.Bioethanol:
                if (otherFuel.Unusual_Energy | otherFuel.FuelBillInfo == OccupancyClass.OtherFuel.FuelBillInformation.NotAvailable)
                {
                  this.Correction_Factor(0.0, 12.0, 0.0, "bioethanol");
                  break;
                }
                this.Correction_Factor(EnergyUsed, OccupancyClass.PeriodLength(otherFuel.Period), 0.0, "bioethanol");
                break;
              case OccupancyClass.OtherFuel.FuelType.Rapeseed_Oil:
                if (otherFuel.Unusual_Energy | otherFuel.FuelBillInfo == OccupancyClass.OtherFuel.FuelBillInformation.NotAvailable)
                {
                  this.Correction_Factor(0.0, 12.0, 0.0, "rapeseed oil");
                  break;
                }
                this.Correction_Factor(EnergyUsed, OccupancyClass.PeriodLength(otherFuel.Period), 0.0, "rapeseed oil");
                break;
              case OccupancyClass.OtherFuel.FuelType.B30K:
                if (otherFuel.Unusual_Energy | otherFuel.FuelBillInfo == OccupancyClass.OtherFuel.FuelBillInformation.NotAvailable)
                {
                  this.Correction_Factor(0.0, 12.0, 0.0, "b30k");
                  break;
                }
                this.Correction_Factor(EnergyUsed, OccupancyClass.PeriodLength(otherFuel.Period), 0.0, "b30k");
                break;
            }
          }
        }
        finally
        {
          IEnumerator<OccupancyClass.OtherFuel> enumerator;
          enumerator?.Dispose();
        }
        if (energyRequirements9a.Box211_corrected == 0.0)
          energyRequirements9a.Box211_corrected = energyRequirements9a.Box211;
        if (energyRequirements9a.Box213_corrected == 0.0)
          energyRequirements9a.Box213_corrected = energyRequirements9a.Box213;
        if (energyRequirements9a.Box215_corrected == 0.0)
          energyRequirements9a.Box215_corrected = energyRequirements9a.Box215;
        if (energyRequirements9a.Box219_corrected == 0.0)
          energyRequirements9a.Box219_corrected = energyRequirements9a.Box219;
        if (energyRequirements9a.Box219a_corrected == 0.0)
          energyRequirements9a.Box219a_corrected = energyRequirements9a.Box219a;
      }
    }

    private double Units_To_kWh(
      OccupancyClass.OtherFuel.FuelType fuel,
      OccupancyClass.OtherFuel.UnitMeasure unit_type,
      double units)
    {
      if (unit_type == OccupancyClass.OtherFuel.UnitMeasure.kWh)
        return units;
      switch (fuel)
      {
        case OccupancyClass.OtherFuel.FuelType.Bottled_LPG:
          return units * 13.89;
        case OccupancyClass.OtherFuel.FuelType.Bulk_LPG:
          return units * 7.11;
        case OccupancyClass.OtherFuel.FuelType.LPG_Special_Condition_18:
          return unit_type == OccupancyClass.OtherFuel.UnitMeasure.kg ? units * 13.89 : units * 7.11;
        case OccupancyClass.OtherFuel.FuelType.Heating_Oil:
        case OccupancyClass.OtherFuel.FuelType.Biodiesel_From_Biomass:
        case OccupancyClass.OtherFuel.FuelType.Biodiesel_From_Cooking_Oil:
        case OccupancyClass.OtherFuel.FuelType.Rapeseed_Oil:
        case OccupancyClass.OtherFuel.FuelType.Mineral_Oil_Or_Liquid_Biofuel:
        case OccupancyClass.OtherFuel.FuelType.B30K:
          return units * 10.35;
        case OccupancyClass.OtherFuel.FuelType.Coal:
          return units * 8.34;
        case OccupancyClass.OtherFuel.FuelType.Anthracite:
          return units * 9.66;
        case OccupancyClass.OtherFuel.FuelType.Smokeless_Fuel:
          return units * 8.9;
        case OccupancyClass.OtherFuel.FuelType.Wood_Logs:
          return unit_type == OccupancyClass.OtherFuel.UnitMeasure.cubic_meters ? units * 1400.0 : units * 4.1;
        case OccupancyClass.OtherFuel.FuelType.Wood_Chips:
          return units * 3.5;
        case OccupancyClass.OtherFuel.FuelType.Wood_Pellets:
          return units * 4.7;
        case OccupancyClass.OtherFuel.FuelType.Bioethanol:
          return units * 5.9;
        default:
          return units;
      }
    }

    private double Correction_Factor(
      double EnergyUsed,
      double Period,
      double current_value,
      string fuel)
    {
      if (Microsoft.VisualBasic.Strings.LCase(this._House.MainHeating.Fuel).Contains(fuel) & !Microsoft.VisualBasic.Strings.LCase(this._House.MainHeating.Fuel).Contains("dual fuel") & !Microsoft.VisualBasic.Strings.LCase(this._House.MainHeating.Fuel).Contains("electricity"))
      {
        current_value += this._Calc.Energy_Requirements_9a.Box211;
        current_value += this._Calc.Energy_Requirements_9b.Box307a;
        current_value += this._Calc.Energy_Requirements_9b.Box307b;
        current_value += this._Calc.Energy_Requirements_9b.Box307c;
        current_value += this._Calc.Energy_Requirements_9b.Box307d;
        current_value += this._Calc.Energy_Requirements_9b.Box307e;
      }
      else if (Microsoft.VisualBasic.Strings.LCase(this._House.MainHeating.Fuel).Contains("dual fuel") && Operators.CompareString(fuel, "coal", false) == 0 | Operators.CompareString(fuel, "wood", false) == 0)
        current_value += this._Calc.Energy_Requirements_9a.Box211 / 2.0;
      if (this._House.MainHeating2.Fuel != null)
      {
        if (Microsoft.VisualBasic.Strings.LCase(this._House.MainHeating2.Fuel).Contains(fuel) & !Microsoft.VisualBasic.Strings.LCase(this._House.MainHeating2.Fuel).Contains("dual fuel") & !Microsoft.VisualBasic.Strings.LCase(this._House.MainHeating2.Fuel).Contains("electricity"))
          current_value += this._Calc.Energy_Requirements_9a.Box213;
        else if (Microsoft.VisualBasic.Strings.LCase(this._House.MainHeating2.Fuel).Contains("dual fuel") && Operators.CompareString(fuel, "coal", false) == 0 | Operators.CompareString(fuel, "wood", false) == 0)
          current_value += this._Calc.Energy_Requirements_9a.Box213 / 2.0;
      }
      if (this._House.SecHeating.Fuel != null)
      {
        if (Microsoft.VisualBasic.Strings.LCase(this._House.SecHeating.Fuel).Contains(fuel) & !Microsoft.VisualBasic.Strings.LCase(this._House.SecHeating.Fuel).Contains("dual fuel") & !Microsoft.VisualBasic.Strings.LCase(this._House.SecHeating.Fuel).Contains("electricity"))
        {
          current_value += this._Calc.Energy_Requirements_9a.Box215;
          current_value += this._Calc.Energy_Requirements_9b.Box309;
        }
        else if (Microsoft.VisualBasic.Strings.LCase(this._House.SecHeating.Fuel).Contains("dual fuel") && Operators.CompareString(fuel, "coal", false) == 0 | Operators.CompareString(fuel, "wood", false) == 0)
          current_value += this._Calc.Energy_Requirements_9a.Box215 / 2.0;
      }
      if (this.OriginalSAPDwelling.Water.Fuel != null)
      {
        if (Microsoft.VisualBasic.Strings.LCase(this.OriginalSAPDwelling.Water.Fuel).Contains(fuel) & !Microsoft.VisualBasic.Strings.LCase(this.OriginalSAPDwelling.Water.Fuel).Contains("dual fuel"))
        {
          if (Operators.CompareString(fuel, "electricity", false) == 0 & Operators.CompareString(this.OriginalSAPDwelling.Water.Fuel, this._House.Water.Fuel, false) == 0 | (uint) Operators.CompareString(fuel, "electricity", false) > 0U)
          {
            current_value += this._Calc.Energy_Requirements_9a.Box219;
            current_value += this._Calc.Energy_Requirements_9b.Box310a;
            current_value += this._Calc.Energy_Requirements_9b.Box310b;
            current_value += this._Calc.Energy_Requirements_9b.Box310c;
            current_value += this._Calc.Energy_Requirements_9b.Box310d;
            current_value += this._Calc.Energy_Requirements_9b.Box310e;
          }
        }
        else if (Microsoft.VisualBasic.Strings.LCase(this.OriginalSAPDwelling.Water.Fuel).Contains("dual fuel") && Operators.CompareString(fuel, "coal", false) == 0 | Operators.CompareString(fuel, "wood", false) == 0)
          current_value += this._Calc.Energy_Requirements_9a.Box219 / 2.0;
      }
      double num1;
      double num2;
      double num3;
      if (Operators.CompareString(Microsoft.VisualBasic.Strings.LCase(fuel), "electricity", false) == 0 | Operators.CompareString(Microsoft.VisualBasic.Strings.LCase(fuel), "low", false) == 0 | Operators.CompareString(Microsoft.VisualBasic.Strings.LCase(fuel), "high", false) == 0)
      {
        if (Period == 0.0)
          Period = 12.0;
        double num4 = 0.0;
        double num5;
        if (this.OccupancyData.Electricity.PVkWhSupplied != 0.0 & !this.StandardOccupancyCalc)
        {
          num4 = this.OccupancyData.Electricity.PVkWhSupplied;
          num5 = Period;
        }
        else
        {
          num5 = 12.0;
          if (this._Calc.Energy_Requirements_9a.Box233 != 0.0)
            num4 = Math.Abs(this._Calc.Energy_Requirements_9a.Box233);
          else if (this._Calc.Energy_Requirements_9b.Box333 != 0.0)
            num4 = Math.Abs(this._Calc.Energy_Requirements_9b.Box333);
        }
        if (num4 != 0.0)
        {
          this._Calc.Energy_Requirements_9a.Box233_OA = 0.0 - num4 / num5 * 12.0;
          this._Calc.Energy_Requirements_9b.Box333_OA = 0.0 - num4 / num5 * 12.0;
          if (Operators.CompareString(Microsoft.VisualBasic.Strings.LCase(fuel), "low", false) == 0)
            num1 = num4 * 0.1;
          else if (Operators.CompareString(Microsoft.VisualBasic.Strings.LCase(fuel), "high", false) == 0)
            num1 = num4 * 0.9;
          else if (Operators.CompareString(Microsoft.VisualBasic.Strings.LCase(fuel), "electricity", false) == 0)
            num1 = num4 * 1.0;
        }
        double num6 = 0.0;
        double num7;
        if (this.OccupancyData.Electricity.WindkWhSupplied != 0.0 & !this.StandardOccupancyCalc)
        {
          num6 = this.OccupancyData.Electricity.WindkWhSupplied;
          num7 = Period;
        }
        else
        {
          num7 = 12.0;
          if (this._Calc.Energy_Requirements_9a.Box234 != 0.0)
            num6 = Math.Abs(this._Calc.Energy_Requirements_9a.Box234);
          else if (this._Calc.Energy_Requirements_9b.Box334 != 0.0)
            num6 = Math.Abs(this._Calc.Energy_Requirements_9a.Box234);
        }
        if (num6 != 0.0)
        {
          this._Calc.Energy_Requirements_9a.Box234_OA = 0.0 - num6 / num7 * 12.0;
          this._Calc.Energy_Requirements_9b.Box334_OA = 0.0 - num6 / num7 * 12.0;
          if (Operators.CompareString(Microsoft.VisualBasic.Strings.LCase(fuel), "low", false) == 0)
            num2 = num6 * 0.1;
          else if (Operators.CompareString(Microsoft.VisualBasic.Strings.LCase(fuel), "high", false) == 0)
            num2 = num6 * 0.9;
          else if (Operators.CompareString(Microsoft.VisualBasic.Strings.LCase(fuel), "electricity", false) == 0)
            num2 = num6 * 1.0;
        }
        double num8 = 0.0;
        double num9;
        if (this.OccupancyData.Electricity.MicroCHPkWhSupplied != 0.0 & !this.StandardOccupancyCalc)
        {
          num8 = this.OccupancyData.Electricity.MicroCHPkWhSupplied;
          num9 = Period;
        }
        else
        {
          num9 = 12.0;
          if (this._Calc.Energy_Requirements_9a.Box235 != 0.0)
            num8 = Math.Abs(this._Calc.Energy_Requirements_9a.Box235);
        }
        if (num8 != 0.0)
        {
          this._Calc.Energy_Requirements_9a.Box235_OA = 0.0 - num8 / num9 * 12.0;
          if (Operators.CompareString(Microsoft.VisualBasic.Strings.LCase(fuel), "low", false) == 0)
            num3 = num8 * 0.1;
          else if (Operators.CompareString(Microsoft.VisualBasic.Strings.LCase(fuel), "high", false) == 0)
            num3 = num8 * 0.9;
          else if (Operators.CompareString(Microsoft.VisualBasic.Strings.LCase(fuel), "electricity", false) == 0)
            num3 = num8 * 1.0;
        }
      }
      double num10 = (EnergyUsed + num1 + num3 + num2) / Period * 12.0 / current_value;
      if (current_value == 0.0)
        return 1.0;
      if (EnergyUsed == 0.0)
        num10 = 1.0;
      if (num10 == 0.0)
        num10 = 1.0;
      if (this.StandardOccupancyCalc)
        num10 = 1.0;
      if (Microsoft.VisualBasic.Strings.LCase(this._House.MainHeating.Fuel).Contains(fuel) & !Microsoft.VisualBasic.Strings.LCase(this._House.MainHeating.Fuel).Contains("dual fuel"))
      {
        if (this.OccupancyData.Scaling_Factors_Set)
          num10 = (double) this.OccupancyData.Box211_factor;
        this._Calc.Energy_Requirements_9a.Box211_corrected = this._Calc.Energy_Requirements_9a.Box211 * num10;
        this._Calc.Energy_Requirements_9a.Box211_factor = num10;
        if (this.OccupancyData.Scaling_Factors_Set)
          num10 = (double) this.OccupancyData.Box307_factor;
        this._Calc.Energy_Requirements_9b.Box307a *= num10;
        this._Calc.Energy_Requirements_9b.Box307b *= num10;
        this._Calc.Energy_Requirements_9b.Box307c *= num10;
        this._Calc.Energy_Requirements_9b.Box307d *= num10;
        this._Calc.Energy_Requirements_9b.Box307e *= num10;
        this._Calc.Energy_Requirements_9b.Box307a_factor = num10;
      }
      else if (Microsoft.VisualBasic.Strings.LCase(this._House.MainHeating.Fuel).Contains("dual fuel"))
      {
        if (Operators.CompareString(fuel, "coal", false) == 0)
        {
          if (this.OccupancyData.Scaling_Factors_Set)
            num10 = (double) this.OccupancyData.Box211_factor;
          this._Calc.Energy_Requirements_9a.Box211_corrected = this._Calc.Energy_Requirements_9a.Box211 / 2.0 * num10;
          this._Calc.Energy_Requirements_9a.Box211_factor = num10;
        }
        else if (Operators.CompareString(fuel, "wood", false) == 0)
        {
          if (this.OccupancyData.Scaling_Factors_Set)
            num10 = (double) this.OccupancyData.Box211_Dual_factor;
          this._Calc.Energy_Requirements_9a.Box211_Dual_corrected = this._Calc.Energy_Requirements_9a.Box211 / 2.0 * num10;
          this._Calc.Energy_Requirements_9a.Box211_Dual_factor = num10;
        }
      }
      if (this._House.MainHeating2.Fuel != null)
      {
        if (Microsoft.VisualBasic.Strings.LCase(this._House.MainHeating2.Fuel).Contains(fuel) & !Microsoft.VisualBasic.Strings.LCase(this._House.MainHeating2.Fuel).Contains("dual fuel"))
        {
          if (this.OccupancyData.Scaling_Factors_Set)
            num10 = (double) this.OccupancyData.Box213_factor;
          this._Calc.Energy_Requirements_9a.Box213_corrected = this._Calc.Energy_Requirements_9a.Box213 * num10;
          this._Calc.Energy_Requirements_9a.Box213_factor = num10;
        }
        else if (Microsoft.VisualBasic.Strings.LCase(this._House.MainHeating2.Fuel).Contains("dual fuel"))
        {
          if (Operators.CompareString(fuel, "coal", false) == 0)
          {
            if (this.OccupancyData.Scaling_Factors_Set)
              num10 = (double) this.OccupancyData.Box213_factor;
            this._Calc.Energy_Requirements_9a.Box213_corrected = this._Calc.Energy_Requirements_9a.Box213 / 2.0 * num10;
            this._Calc.Energy_Requirements_9a.Box213_factor = num10;
          }
          else if (Operators.CompareString(fuel, "wood", false) == 0)
          {
            if (this.OccupancyData.Scaling_Factors_Set)
              num10 = (double) this.OccupancyData.Box213_Dual_factor;
            this._Calc.Energy_Requirements_9a.Box213_Dual_corrected = this._Calc.Energy_Requirements_9a.Box213 / 2.0 * num10;
            this._Calc.Energy_Requirements_9a.Box213_Dual_factor = num10;
          }
        }
      }
      if (this._House.SecHeating.Fuel != null)
      {
        if (Microsoft.VisualBasic.Strings.LCase(this._House.SecHeating.Fuel).Contains(fuel) & !Microsoft.VisualBasic.Strings.LCase(this._House.SecHeating.Fuel).Contains("dual fuel"))
        {
          if (this.OccupancyData.Scaling_Factors_Set)
            num10 = (double) this.OccupancyData.Box215_factor;
          this._Calc.Energy_Requirements_9a.Box215_corrected = this._Calc.Energy_Requirements_9a.Box215 * num10;
          this._Calc.Energy_Requirements_9a.Box215_factor = num10;
          if (this.OccupancyData.Scaling_Factors_Set)
            num10 = (double) this.OccupancyData.Box309_factor;
          this._Calc.Energy_Requirements_9b.Box309_corrected = this._Calc.Energy_Requirements_9b.Box309 * num10;
          this._Calc.Energy_Requirements_9b.Box309_factor = num10;
        }
        else if (Microsoft.VisualBasic.Strings.LCase(this._House.SecHeating.Fuel).Contains("dual fuel"))
        {
          if (Operators.CompareString(fuel, "coal", false) == 0)
          {
            if (this.OccupancyData.Scaling_Factors_Set)
              num10 = (double) this.OccupancyData.Box215_factor;
            this._Calc.Energy_Requirements_9a.Box215_corrected = this._Calc.Energy_Requirements_9a.Box215 / 2.0 * num10;
            this._Calc.Energy_Requirements_9a.Box215_factor = num10;
            if (this.OccupancyData.Scaling_Factors_Set)
              num10 = (double) this.OccupancyData.Box309_factor;
            this._Calc.Energy_Requirements_9b.Box309_corrected = this._Calc.Energy_Requirements_9b.Box309 / 2.0 * num10;
            this._Calc.Energy_Requirements_9b.Box309_factor = num10;
          }
          else if (Operators.CompareString(fuel, "wood", false) == 0)
          {
            if (this.OccupancyData.Scaling_Factors_Set)
              num10 = (double) this.OccupancyData.Box215_Dual_factor;
            this._Calc.Energy_Requirements_9a.Box215_Dual_corrected = this._Calc.Energy_Requirements_9a.Box215 / 2.0 * num10;
            this._Calc.Energy_Requirements_9a.Box215_Dual_factor = num10;
            if (this.OccupancyData.Scaling_Factors_Set)
              num10 = (double) this.OccupancyData.Box309_factor;
            this._Calc.Energy_Requirements_9b.Box309_Dual_corrected = this._Calc.Energy_Requirements_9b.Box309 / 2.0 * num10;
            this._Calc.Energy_Requirements_9b.Box309_Dual_factor = num10;
          }
        }
      }
      else if (this._Calc.Energy_Requirements_9a.Box215 != 0.0)
      {
        if (this.OccupancyData.Scaling_Factors_Set)
          num10 = (double) this.OccupancyData.Box215_factor;
        this._Calc.Energy_Requirements_9a.Box215_corrected = this._Calc.Energy_Requirements_9a.Box215 * num10;
        this._Calc.Energy_Requirements_9a.Box215_factor = num10;
      }
      if (this.OriginalSAPDwelling.Water.Fuel != null)
      {
        if (Microsoft.VisualBasic.Strings.LCase(this.OriginalSAPDwelling.Water.Fuel).Contains(fuel) & !Microsoft.VisualBasic.Strings.LCase(this.OriginalSAPDwelling.Water.Fuel).Contains("dual fuel"))
        {
          if (this.OccupancyData.Scaling_Factors_Set)
            num10 = (double) this.OccupancyData.Box219_factor;
          this._Calc.Energy_Requirements_9a.Box219_corrected = this._Calc.Energy_Requirements_9a.Box219 * num10;
          this._Calc.Energy_Requirements_9a.Box219_factor = num10;
          if (this.OccupancyData.Scaling_Factors_Set)
            num10 = (double) this.OccupancyData.Box310a_factor;
          this._Calc.Energy_Requirements_9b.Box310a *= num10;
          this._Calc.Energy_Requirements_9b.Box310b *= num10;
          this._Calc.Energy_Requirements_9b.Box310c *= num10;
          this._Calc.Energy_Requirements_9b.Box310d *= num10;
          this._Calc.Energy_Requirements_9b.Box310e *= num10;
          this._Calc.Energy_Requirements_9b.Box310a_factor = num10;
        }
        else if (Microsoft.VisualBasic.Strings.LCase(this.OriginalSAPDwelling.Water.Fuel).Contains("dual fuel"))
        {
          if (Operators.CompareString(fuel, "coal", false) == 0)
          {
            if (this.OccupancyData.Scaling_Factors_Set)
              num10 = (double) this.OccupancyData.Box219_factor;
            this._Calc.Energy_Requirements_9a.Box219_corrected = this._Calc.Energy_Requirements_9a.Box219 / 2.0 * num10;
            this._Calc.Energy_Requirements_9a.Box219_factor = num10;
          }
          else if (Operators.CompareString(fuel, "wood", false) == 0)
          {
            if (this.OccupancyData.Scaling_Factors_Set)
              num10 = (double) this.OccupancyData.Box219_Dual_factor;
            this._Calc.Energy_Requirements_9a.Box219_Dual_corrected = this._Calc.Energy_Requirements_9a.Box219 / 2.0 * num10;
            this._Calc.Energy_Requirements_9a.Box219_Dual_factor = num10;
          }
        }
      }
      return num10;
    }

    private PCDF.CommunityScheme Network { get; set; }

    private List<PCDF.CommunityScheme_Sub> HeatSources { get; set; }

    private PCDF.CommunityScheme NetworkWater { get; set; }

    private List<PCDF.CommunityScheme_Sub> HeatSourcesWater { get; set; }

    private void Energy_Requirements_9b()
    {
      SAP_Module.Dwelling dwelling1 = new SAP_Module.Dwelling();
      object objectValue1 = RuntimeHelpers.GetObjectValue(new object());
      object objectValue2 = RuntimeHelpers.GetObjectValue(new object());
      SAP_Module.Dwelling dwelling2;
      if (this.OccupancyCalc)
      {
        dwelling2 = this.OriginalSAPDwelling;
        objectValue1 = RuntimeHelpers.GetObjectValue(this.SEDBUKFound_OA);
        objectValue2 = RuntimeHelpers.GetObjectValue(this.SEDBUKFound2_OA);
      }
      else
      {
        dwelling2 = this._House;
        objectValue1 = RuntimeHelpers.GetObjectValue(this.SEDBUKFound);
        objectValue2 = RuntimeHelpers.GetObjectValue(this.SEDBUKFound2);
      }
      Energy_Requirements_9b2012 energyRequirements9b = this._Calc.Energy_Requirements_9b;
      energyRequirements9b.Box301 = (uint) this._House.SecHeating.SAPTableCode <= 0U ? 0.0 : 0.1;
      if (this.OccupancyCalc)
      {
        if (this._House.SecHeating.SAPTableCode == 693)
          energyRequirements9b.Box301 = 0.0;
        if (this.OccupancyData.SecondaryHeating == OccupancyClass.HeatingOveride.None)
          energyRequirements9b.Box301 = 0.0;
        if (this.OccupancyData.SecondaryHeatingFraction != 0.0)
          energyRequirements9b.Box301 = this.OccupancyData.SecondaryHeatingFraction;
      }
      energyRequirements9b.Box302 = 1.0 - energyRequirements9b.Box301;
      energyRequirements9b.Box303a = (double) this._House.MainHeating.CommunityH.Boiler1HeatFraction;
      if (this._House.MainHeating.CommunityH.NoOfAdditionalHeatSources > 0)
        energyRequirements9b.Box303b = (double) this._House.MainHeating.CommunityH.HeatSource1.HeatFraction;
      if (this._House.MainHeating.CommunityH.NoOfAdditionalHeatSources > 1)
        energyRequirements9b.Box303c = (double) this._House.MainHeating.CommunityH.HeatSource2.HeatFraction;
      if (this._House.MainHeating.CommunityH.NoOfAdditionalHeatSources > 2)
        energyRequirements9b.Box303d = (double) this._House.MainHeating.CommunityH.HeatSource3.HeatFraction;
      if (this._House.MainHeating.CommunityH.NoOfAdditionalHeatSources > 3)
        energyRequirements9b.Box303e = (double) this._House.MainHeating.CommunityH.HeatSource4.HeatFraction;
      energyRequirements9b.Box304a = energyRequirements9b.Box302 * energyRequirements9b.Box303a;
      energyRequirements9b.Box304b = energyRequirements9b.Box302 * energyRequirements9b.Box303b;
      energyRequirements9b.Box304c = energyRequirements9b.Box302 * energyRequirements9b.Box303c;
      energyRequirements9b.Box304d = energyRequirements9b.Box302 * energyRequirements9b.Box303d;
      energyRequirements9b.Box304e = energyRequirements9b.Box302 * energyRequirements9b.Box303e;
      switch (this._House.MainHeating.ControlCode)
      {
        case 2301:
        case 2302:
          energyRequirements9b.Box305 = 1.1;
          energyRequirements9b.Box305a = 1.05;
          break;
        case 2303:
        case 2304:
        case 2305:
        case 2307:
        case 2311:
          energyRequirements9b.Box305 = 1.05;
          energyRequirements9b.Box305a = 1.05;
          break;
        case 2306:
        case 2310:
        case 2312:
          energyRequirements9b.Box305 = 1.0;
          energyRequirements9b.Box305a = 1.0;
          break;
        case 2308:
        case 2309:
          energyRequirements9b.Box305 = 1.05;
          energyRequirements9b.Box305a = 1.0;
          break;
      }
      if (this._House.MainHeating.InforSource.Equals("Boiler Database"))
      {
        this.Network = SAP_Module.PCDFData.CommunitySchemes.Where<PCDF.CommunityScheme>((Func<PCDF.CommunityScheme, bool>) (b => b.ID.Equals(this._House.MainHeating.SEDBUK))).SingleOrDefault<PCDF.CommunityScheme>();
        this.HeatSources = SAP_Module.PCDFData.CommunitySchemes_Sub.Where<PCDF.CommunityScheme_Sub>((Func<PCDF.CommunityScheme_Sub, bool>) (b => b.ID.Equals(this._House.MainHeating.SEDBUK))).ToList<PCDF.CommunityScheme_Sub>();
        energyRequirements9b.Box306 = Conversion.Val(this.Network.DistributionLossFactor);
      }
      else
      {
        string heatDsystem = this._House.MainHeating.CommunityH.HeatDSystem;
        if (Operators.CompareString(heatDsystem, "Piping<=1990, not pre-insulated, medium/high temp, full flow", false) != 0)
        {
          if (Operators.CompareString(heatDsystem, "Piping<=1990, pre-insulated, low temp, full flow", false) != 0)
          {
            if (Operators.CompareString(heatDsystem, "Piping>=1991, pre-insulated, medium temp, variable flow", false) != 0)
            {
              if (Operators.CompareString(heatDsystem, "Piping>=1991, pre-insulated, low temp, variable flow", false) != 0)
              {
                if (Operators.CompareString(heatDsystem, "Unknown", false) == 0)
                  energyRequirements9b.Box306 = 1.5;
              }
              else
                energyRequirements9b.Box306 = 1.05;
            }
            else
              energyRequirements9b.Box306 = 1.1;
          }
          else
            energyRequirements9b.Box306 = 1.1;
        }
        else
          energyRequirements9b.Box306 = 1.2;
      }
      if (this._House.MainHeating.CommunityH.KnownLoss)
        energyRequirements9b.Box306 = (double) this._House.MainHeating.CommunityH.KnownLossValue;
      int systemRef1 = this._House.Water.SystemRef;
      if (systemRef1 >= 950 && systemRef1 <= 952)
      {
        energyRequirements9b.Box303aW = (double) dwelling2.Water.HWSComm.Boiler1Fraction;
        if (dwelling2.Water.HWSComm.NoOfAdditionalHeatSources > 0)
          energyRequirements9b.Box303bW = (double) dwelling2.Water.HWSComm.HeatSource1.HeatFraction;
        if (dwelling2.Water.HWSComm.NoOfAdditionalHeatSources > 1)
          energyRequirements9b.Box303cW = (double) dwelling2.Water.HWSComm.HeatSource2.HeatFraction;
        if (dwelling2.Water.HWSComm.NoOfAdditionalHeatSources > 2)
          energyRequirements9b.Box303dW = (double) dwelling2.Water.HWSComm.HeatSource3.HeatFraction;
        if (dwelling2.Water.HWSComm.NoOfAdditionalHeatSources > 3)
          energyRequirements9b.Box303eW = (double) dwelling2.Water.HWSComm.HeatSource4.HeatFraction;
        string charging = dwelling2.Water.HWSComm.Charging;
        if (Operators.CompareString(charging, "Flat Rate Charging", false) != 0)
        {
          if (Operators.CompareString(charging, "Charged Link to Use", false) == 0)
            this._Calc.Energy_Requirements_9b.Box305a = 1.0;
        }
        else
          this._Calc.Energy_Requirements_9b.Box305a = 1.05;
        if (this._House.Water.HWSComm.FromDatabase)
        {
          this.NetworkWater = SAP_Module.PCDFData.CommunitySchemes.Where<PCDF.CommunityScheme>((Func<PCDF.CommunityScheme, bool>) (b => b.ID.Equals(this._House.Water.HWSComm.SystemRef))).SingleOrDefault<PCDF.CommunityScheme>();
          this.HeatSourcesWater = SAP_Module.PCDFData.CommunitySchemes_Sub.Where<PCDF.CommunityScheme_Sub>((Func<PCDF.CommunityScheme_Sub, bool>) (b => b.ID.Equals(this._House.Water.HWSComm.SystemRef))).ToList<PCDF.CommunityScheme_Sub>();
          energyRequirements9b.Box306W = Conversions.ToDouble(this.NetworkWater.DistributionLossFactor);
        }
        else if (this._House.Water.HWSComm.KnownLossFactor)
        {
          energyRequirements9b.Box306W = (double) this._House.Water.HWSComm.LossFactor;
        }
        else
        {
          string hds = dwelling2.Water.HWSComm.HDS;
          if (Operators.CompareString(hds, "Piping<=1990, not pre-insulated, medium/high temp, full flow", false) != 0)
          {
            if (Operators.CompareString(hds, "Piping<=1990, pre-insulated, low temp, full flow", false) != 0)
            {
              if (Operators.CompareString(hds, "Piping>=1991, pre-insulated, medium temp, variable flow", false) != 0)
              {
                if (Operators.CompareString(hds, "Piping>=1991, pre-insulated, low temp, variable flow", false) != 0)
                {
                  if (Operators.CompareString(hds, "Unknown", false) == 0)
                    energyRequirements9b.Box306W = 1.5;
                }
                else
                  energyRequirements9b.Box306W = 1.05;
              }
              else
                energyRequirements9b.Box306W = 1.1;
            }
            else
              energyRequirements9b.Box306W = 1.1;
          }
          else
            energyRequirements9b.Box306W = 1.2;
        }
      }
      energyRequirements9b.Box307a = this._Calc.Space_heating_requirement.Box98 * energyRequirements9b.Box304a * energyRequirements9b.Box305 * energyRequirements9b.Box306;
      energyRequirements9b.Box307b = this._Calc.Space_heating_requirement.Box98 * energyRequirements9b.Box304b * energyRequirements9b.Box305 * energyRequirements9b.Box306;
      energyRequirements9b.Box307c = this._Calc.Space_heating_requirement.Box98 * energyRequirements9b.Box304c * energyRequirements9b.Box305 * energyRequirements9b.Box306;
      energyRequirements9b.Box307d = this._Calc.Space_heating_requirement.Box98 * energyRequirements9b.Box304d * energyRequirements9b.Box305 * energyRequirements9b.Box306;
      energyRequirements9b.Box307e = this._Calc.Space_heating_requirement.Box98 * energyRequirements9b.Box304e * energyRequirements9b.Box305 * energyRequirements9b.Box306;
      if ((uint) this._House.SecHeating.SAPTableCode > 0U)
      {
        energyRequirements9b.Box308 = (double) this._House.SecHeating.SecEff;
        energyRequirements9b.Box309 = this._Calc.Space_heating_requirement.Box98 * energyRequirements9b.Box301 * 100.0 / energyRequirements9b.Box308;
      }
      int systemRef2 = this._House.Water.SystemRef;
      if (systemRef2 >= 950 && systemRef2 <= 952)
      {
        energyRequirements9b.Box310aW = this._Calc.Water_heating.Box64 * energyRequirements9b.Box303aW * energyRequirements9b.Box305a * energyRequirements9b.Box306W;
        energyRequirements9b.Box310bW = this._Calc.Water_heating.Box64 * energyRequirements9b.Box303bW * energyRequirements9b.Box305a * energyRequirements9b.Box306W;
        energyRequirements9b.Box310cW = this._Calc.Water_heating.Box64 * energyRequirements9b.Box303cW * energyRequirements9b.Box305a * energyRequirements9b.Box306W;
        energyRequirements9b.Box310dW = this._Calc.Water_heating.Box64 * energyRequirements9b.Box303dW * energyRequirements9b.Box305a * energyRequirements9b.Box306W;
        energyRequirements9b.Box310eW = this._Calc.Water_heating.Box64 * energyRequirements9b.Box303eW * energyRequirements9b.Box305a * energyRequirements9b.Box306W;
      }
      else if (systemRef2 == 901)
      {
        energyRequirements9b.Box310a = this._Calc.Water_heating.Box64 * energyRequirements9b.Box303a * energyRequirements9b.Box305a * energyRequirements9b.Box306;
        energyRequirements9b.Box310b = this._Calc.Water_heating.Box64 * energyRequirements9b.Box303b * energyRequirements9b.Box305a * energyRequirements9b.Box306;
        energyRequirements9b.Box310c = this._Calc.Water_heating.Box64 * energyRequirements9b.Box303c * energyRequirements9b.Box305a * energyRequirements9b.Box306;
        energyRequirements9b.Box310d = this._Calc.Water_heating.Box64 * energyRequirements9b.Box303d * energyRequirements9b.Box305a * energyRequirements9b.Box306;
        energyRequirements9b.Box310e = this._Calc.Water_heating.Box64 * energyRequirements9b.Box303e * energyRequirements9b.Box305a * energyRequirements9b.Box306;
      }
      switch (this._House.Water.SystemRef)
      {
        case 903:
        case 909:
        case 999:
          energyRequirements9b.Box311 = 100.0;
          break;
        case 907:
          energyRequirements9b.Box311 = 70.0;
          break;
        case 908:
          energyRequirements9b.Box311 = 65.0;
          break;
      }
      if (energyRequirements9b.Box311 != 0.0)
        energyRequirements9b.Box312 = this._Calc.Water_heating.Box64 * 100.0 / energyRequirements9b.Box311;
      energyRequirements9b.Box313 = !this._House.MainHeating.InforSource.Equals("Boiler Database") ? 0.01 * (energyRequirements9b.Box307a + energyRequirements9b.Box307b + energyRequirements9b.Box307c + energyRequirements9b.Box307d + energyRequirements9b.Box307e + energyRequirements9b.Box310a + energyRequirements9b.Box310b + energyRequirements9b.Box310c + energyRequirements9b.Box310d + energyRequirements9b.Box310e) : Conversions.ToDouble(this.Network.PumpElecEnergyPerDwelling);
      energyRequirements9b.Box313W = !this._House.Water.HWSComm.FromDatabase ? 0.01 * (energyRequirements9b.Box310aW + energyRequirements9b.Box310bW + energyRequirements9b.Box310cW + energyRequirements9b.Box310dW + energyRequirements9b.Box310eW) : Conversions.ToDouble(this.NetworkWater.PumpElecEnergyPerDwelling);
      if (this._House.Cooling.Include)
      {
        float num;
        if (!this._House.Cooling.ERRMeasuredInclude)
        {
          string systemType = this._House.Cooling.SystemType;
          if (Operators.CompareString(systemType, "Split/multiple systems", false) != 0)
          {
            if (Operators.CompareString(systemType, "Packaged systems", false) == 0)
            {
              string energylabel = this._House.Cooling.Energylabel;
              // ISSUE: reference to a compiler-generated method
              switch (\u003CPrivateImplementationDetails\u003E.ComputeStringHash(energylabel))
              {
                case 3222007936:
                  if (Operators.CompareString(energylabel, "E", false) == 0)
                  {
                    num = 2.2f;
                    goto label_117;
                  }
                  else
                    goto label_117;
                case 3238785555:
                  if (Operators.CompareString(energylabel, "D", false) == 0)
                  {
                    num = 2.4f;
                    goto label_117;
                  }
                  else
                    goto label_117;
                case 3255563174:
                  if (Operators.CompareString(energylabel, "G", false) == 0)
                    break;
                  goto label_117;
                case 3272340793:
                  if (Operators.CompareString(energylabel, "F", false) == 0)
                  {
                    num = 2f;
                    goto label_117;
                  }
                  else
                    goto label_117;
                case 3289118412:
                  if (Operators.CompareString(energylabel, "A", false) == 0)
                  {
                    num = 3f;
                    goto label_117;
                  }
                  else
                    goto label_117;
                case 3322673650:
                  if (Operators.CompareString(energylabel, "C", false) == 0)
                  {
                    num = 2.6f;
                    goto label_117;
                  }
                  else
                    goto label_117;
                case 3339451269:
                  if (Operators.CompareString(energylabel, "B", false) == 0)
                  {
                    num = 2.8f;
                    goto label_117;
                  }
                  else
                    goto label_117;
                case 3424652889:
                  if (Operators.CompareString(energylabel, "Unknown", false) == 0)
                    break;
                  goto label_117;
                default:
                  goto label_117;
              }
              num = 1.8f;
            }
          }
          else
          {
            string energylabel = this._House.Cooling.Energylabel;
            // ISSUE: reference to a compiler-generated method
            switch (\u003CPrivateImplementationDetails\u003E.ComputeStringHash(energylabel))
            {
              case 3222007936:
                if (Operators.CompareString(energylabel, "E", false) == 0)
                {
                  num = 2.4f;
                  goto label_117;
                }
                else
                  goto label_117;
              case 3238785555:
                if (Operators.CompareString(energylabel, "D", false) == 0)
                {
                  num = 2.6f;
                  goto label_117;
                }
                else
                  goto label_117;
              case 3255563174:
                if (Operators.CompareString(energylabel, "G", false) == 0)
                  break;
                goto label_117;
              case 3272340793:
                if (Operators.CompareString(energylabel, "F", false) == 0)
                {
                  num = 2.2f;
                  goto label_117;
                }
                else
                  goto label_117;
              case 3289118412:
                if (Operators.CompareString(energylabel, "A", false) == 0)
                {
                  num = 3.2f;
                  goto label_117;
                }
                else
                  goto label_117;
              case 3322673650:
                if (Operators.CompareString(energylabel, "C", false) == 0)
                {
                  num = 2.8f;
                  goto label_117;
                }
                else
                  goto label_117;
              case 3339451269:
                if (Operators.CompareString(energylabel, "B", false) == 0)
                {
                  num = 3f;
                  goto label_117;
                }
                else
                  goto label_117;
              case 3424652889:
                if (Operators.CompareString(energylabel, "Unknown", false) == 0)
                  break;
                goto label_117;
              default:
                goto label_117;
            }
            num = 2f;
          }
        }
        else
          num = this._House.Cooling.ERR;
label_117:
        if (Operators.CompareString(this._House.Cooling.Compressorcontrol, "Systems with On/Off control", false) == 0)
          energyRequirements9b.Box314 = 1.25 * (double) num;
        else if (Operators.CompareString(this._House.Cooling.Compressorcontrol, "Systems with variable speed compressors", false) == 0)
          energyRequirements9b.Box314 = 1.35 * (double) num;
        energyRequirements9b.Box315 = this._Calc.Space_cooling_requirement.Box107 / energyRequirements9b.Box314;
      }
      energyRequirements9b.Box330a = this.GetMechVentElecAmount();
      if (this._House.Water.Solar.Inlcude && !this._House.Water.Solar.Pumped)
        energyRequirements9b.Box330g = 75.0;
      energyRequirements9b.Box331 = energyRequirements9b.Box330a + energyRequirements9b.Box330b + energyRequirements9b.Box330g;
      energyRequirements9b.Box332 = this._Calc.Internal_gains.AppendixL.EL_Final;
      if (this._House.Renewable.Photovoltaic.Inlcude)
        this.Photocoltaic();
      if (this._House.Renewable.WindTurbine.Inlcude)
        this.WindTurbine();
      if (this._House.Renewable.Special.Include)
      {
        this._Calc.Energy_Requirements_9b.AppendixQ_Item_Count = this._House.Renewable.Special.Special.Length;
        int num1 = checked (this._House.Renewable.Special.Special.Length - 1);
        int Index1 = 0;
        while (Index1 <= num1)
        {
          this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index1).Description = this._House.Renewable.Special.Special[Index1].Description;
          this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index1).Energy_Saved = -(double) this._House.Renewable.Special.Special[Index1].EnergySaved;
          this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index1).Energy_Used = (double) this._House.Renewable.Special.Special[Index1].EnergyUsed;
          this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index1).Fuel_Saved = this._House.Renewable.Special.Special[Index1].FuelSaved;
          this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index1).Fuel_Used = this._House.Renewable.Special.Special[Index1].FuelUsed;
          checked { ++Index1; }
        }
        this._Calc.Energy_Requirements_9b.AppendixQ_Item_Count = this._House.Renewable.Special.Special.Length;
        int num2 = checked (this._House.Renewable.Special.Special.Length - 1);
        int Index2 = 0;
        while (Index2 <= num2)
        {
          this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index2).Description = this._House.Renewable.Special.Special[Index2].Description;
          this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index2).Energy_Saved = -(double) this._House.Renewable.Special.Special[Index2].EnergySaved;
          this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index2).Energy_Used = (double) this._House.Renewable.Special.Special[Index2].EnergyUsed;
          this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index2).Fuel_Saved = this._House.Renewable.Special.Special[Index2].FuelSaved;
          this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index2).Fuel_Used = this._House.Renewable.Special.Special[Index2].FuelUsed;
          checked { ++Index2; }
        }
      }
      if (this._House.Renewable.AAEGeneration.Inlcude)
        energyRequirements9b.Box335a = -this._Calc.Dimensions.Box4 * (double) this._House.Renewable.AAEGeneration.EGenerated / Conversions.ToDouble(this._House.Renewable.AAEGeneration.TotalArea);
      if (this._House.Renewable.HydroGeneration.Inlcude)
        energyRequirements9b.Box335a = -this._Calc.Dimensions.Box4 * (double) this._House.Renewable.HydroGeneration.HydroGenerated / Conversions.ToDouble(this._House.Renewable.HydroGeneration.TotalArea);
      if (this.OccupancyCalc | this.StandardOccupancyCalc)
      {
        energyRequirements9b.Box332a = this.OccupancyData.Ea;
        energyRequirements9b.Box332b = this.OccupancyData.Ec;
        energyRequirements9b.Box332c = this.OccupancyData.Ec2;
        if (this.OccupancyData.CookerType == OccupancyClass.CookerType.Range_All_Year | this.OccupancyData.CookerType == OccupancyClass.CookerType.Range_Winter)
        {
          Energy_Requirements_9b2012 requirements9b2012_1;
          double num3 = (requirements9b2012_1 = energyRequirements9b).Box332b + this.OccupancyData.Er_m.M1;
          requirements9b2012_1.Box332b = num3;
          Energy_Requirements_9b2012 requirements9b2012_2;
          double num4 = (requirements9b2012_2 = energyRequirements9b).Box332b + this.OccupancyData.Er_m.M2;
          requirements9b2012_2.Box332b = num4;
          Energy_Requirements_9b2012 requirements9b2012_3;
          double num5 = (requirements9b2012_3 = energyRequirements9b).Box332b + this.OccupancyData.Er_m.M3;
          requirements9b2012_3.Box332b = num5;
          Energy_Requirements_9b2012 requirements9b2012_4;
          double num6 = (requirements9b2012_4 = energyRequirements9b).Box332b + this.OccupancyData.Er_m.M4;
          requirements9b2012_4.Box332b = num6;
          Energy_Requirements_9b2012 requirements9b2012_5;
          double num7 = (requirements9b2012_5 = energyRequirements9b).Box332b + this.OccupancyData.Er_m.M5;
          requirements9b2012_5.Box332b = num7;
          Energy_Requirements_9b2012 requirements9b2012_6;
          double num8 = (requirements9b2012_6 = energyRequirements9b).Box332b + this.OccupancyData.Er_m.M6;
          requirements9b2012_6.Box332b = num8;
          Energy_Requirements_9b2012 requirements9b2012_7;
          double num9 = (requirements9b2012_7 = energyRequirements9b).Box332b + this.OccupancyData.Er_m.M7;
          requirements9b2012_7.Box332b = num9;
          Energy_Requirements_9b2012 requirements9b2012_8;
          double num10 = (requirements9b2012_8 = energyRequirements9b).Box332b + this.OccupancyData.Er_m.M8;
          requirements9b2012_8.Box332b = num10;
          Energy_Requirements_9b2012 requirements9b2012_9;
          double num11 = (requirements9b2012_9 = energyRequirements9b).Box332b + this.OccupancyData.Er_m.M9;
          requirements9b2012_9.Box332b = num11;
          Energy_Requirements_9b2012 requirements9b2012_10;
          double num12 = (requirements9b2012_10 = energyRequirements9b).Box332b + this.OccupancyData.Er_m.M10;
          requirements9b2012_10.Box332b = num12;
          Energy_Requirements_9b2012 requirements9b2012_11;
          double num13 = (requirements9b2012_11 = energyRequirements9b).Box332b + this.OccupancyData.Er_m.M11;
          requirements9b2012_11.Box332b = num13;
          Energy_Requirements_9b2012 requirements9b2012_12;
          double num14 = (requirements9b2012_12 = energyRequirements9b).Box332b + this.OccupancyData.Er_m.M12;
          requirements9b2012_12.Box332b = num14;
        }
        energyRequirements9b.Box312a = this.OccupancyData.Eshower_m.M1;
        Energy_Requirements_9b2012 requirements9b2012_13;
        double num15 = (requirements9b2012_13 = energyRequirements9b).Box312a + this.OccupancyData.Eshower_m.M2;
        requirements9b2012_13.Box312a = num15;
        Energy_Requirements_9b2012 requirements9b2012_14;
        double num16 = (requirements9b2012_14 = energyRequirements9b).Box312a + this.OccupancyData.Eshower_m.M3;
        requirements9b2012_14.Box312a = num16;
        Energy_Requirements_9b2012 requirements9b2012_15;
        double num17 = (requirements9b2012_15 = energyRequirements9b).Box312a + this.OccupancyData.Eshower_m.M4;
        requirements9b2012_15.Box312a = num17;
        Energy_Requirements_9b2012 requirements9b2012_16;
        double num18 = (requirements9b2012_16 = energyRequirements9b).Box312a + this.OccupancyData.Eshower_m.M5;
        requirements9b2012_16.Box312a = num18;
        Energy_Requirements_9b2012 requirements9b2012_17;
        double num19 = (requirements9b2012_17 = energyRequirements9b).Box312a + this.OccupancyData.Eshower_m.M6;
        requirements9b2012_17.Box312a = num19;
        Energy_Requirements_9b2012 requirements9b2012_18;
        double num20 = (requirements9b2012_18 = energyRequirements9b).Box312a + this.OccupancyData.Eshower_m.M7;
        requirements9b2012_18.Box312a = num20;
        Energy_Requirements_9b2012 requirements9b2012_19;
        double num21 = (requirements9b2012_19 = energyRequirements9b).Box312a + this.OccupancyData.Eshower_m.M8;
        requirements9b2012_19.Box312a = num21;
        Energy_Requirements_9b2012 requirements9b2012_20;
        double num22 = (requirements9b2012_20 = energyRequirements9b).Box312a + this.OccupancyData.Eshower_m.M9;
        requirements9b2012_20.Box312a = num22;
        Energy_Requirements_9b2012 requirements9b2012_21;
        double num23 = (requirements9b2012_21 = energyRequirements9b).Box312a + this.OccupancyData.Eshower_m.M10;
        requirements9b2012_21.Box312a = num23;
        Energy_Requirements_9b2012 requirements9b2012_22;
        double num24 = (requirements9b2012_22 = energyRequirements9b).Box312a + this.OccupancyData.Eshower_m.M11;
        requirements9b2012_22.Box312a = num24;
        Energy_Requirements_9b2012 requirements9b2012_23;
        double num25 = (requirements9b2012_23 = energyRequirements9b).Box312a + this.OccupancyData.Eshower_m.M12;
        requirements9b2012_23.Box312a = num25;
        float num26;
        if (this._House.SecHeating.Fuel != null && Microsoft.VisualBasic.Strings.LCase(this._House.SecHeating.Fuel).Contains("electricity"))
        {
          double highTariff = this.Get_High_Tariff(this._House.SecHeating.SAPTableCode);
          num26 = (float) (energyRequirements9b.Box309 * highTariff);
          double num27 = energyRequirements9b.Box309 - (double) num26;
        }
        float num28;
        float num29;
        if (this.OriginalSAPDwelling.Water.Fuel != null && Microsoft.VisualBasic.Strings.LCase(this.OriginalSAPDwelling.Water.Fuel).Contains("electricity"))
        {
          double summerLow = this.Get_Summer_Low();
          num28 = (float) (energyRequirements9b.Box312 * summerLow);
          num29 = (float) energyRequirements9b.Box312 - num28;
        }
        float num30;
        float num31;
        if (energyRequirements9b.Box312a != 0.0)
        {
          double num32 = Operators.CompareString(this._House.MainHeating.ElectricityTariff, "10-hour tariff", false) != 0 ? 0.9 : 0.8;
          num30 = (float) (energyRequirements9b.Box312a * num32);
          num31 = (float) energyRequirements9b.Box312a - num30;
        }
        float num33;
        float num34;
        if (energyRequirements9b.Box331 != 0.0)
        {
          double num35 = Operators.CompareString(this._House.MainHeating.ElectricityTariff, "10-hour tariff", false) != 0 ? 0.9 : 0.8;
          num33 = (float) (energyRequirements9b.Box331 * num35);
          num34 = (float) energyRequirements9b.Box331 - num33;
        }
        float num36;
        float num37;
        if (energyRequirements9b.Box332 != 0.0)
        {
          double num38 = Operators.CompareString(this._House.MainHeating.ElectricityTariff, "10-hour tariff", false) != 0 ? 0.9 : 0.8;
          num36 = (float) (energyRequirements9b.Box332 * num38);
          num37 = (float) energyRequirements9b.Box332 - num36;
        }
        float num39;
        float num40;
        if (energyRequirements9b.Box332a != 0.0)
        {
          double num41 = Operators.CompareString(this._House.MainHeating.ElectricityTariff, "10-hour tariff", false) != 0 ? 0.9 : 0.8;
          num39 = (float) (energyRequirements9b.Box332a * num41);
          num40 = (float) energyRequirements9b.Box332a - num39;
        }
        float num42;
        float num43;
        if (energyRequirements9b.Box332b != 0.0)
        {
          double num44;
          if (this.OccupancyData.CookerType == OccupancyClass.CookerType.Range_All_Year | this.OccupancyData.CookerType == OccupancyClass.CookerType.Range_Winter)
          {
            string electricityTariff = this._House.MainHeating.ElectricityTariff;
            if (Operators.CompareString(electricityTariff, "standard tariff", false) != 0)
            {
              if (Operators.CompareString(electricityTariff, "7-hour tariff", false) != 0)
              {
                if (Operators.CompareString(electricityTariff, "10-hour tariff", false) != 0)
                {
                  if (Operators.CompareString(electricityTariff, "24-hour tariff", false) == 0)
                    num44 = 0.0;
                }
                else
                  num44 = 0.76;
              }
              else
                num44 = 0.71;
            }
            else
              num44 = 0.0;
          }
          else
            num44 = 0.9;
          if (this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Electric | this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Always_Electric | this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Gas_Electric)
          {
            num42 = (float) (energyRequirements9b.Box332b * num44);
            num43 = (float) energyRequirements9b.Box332b - num42;
          }
        }
        float current_value1 = num26 + num28 + num30 + num33 + num36 + num39 + num42;
        float num45;
        float current_value2 = num45 + num29 + num31 + num34 + num37 + num40 + num43;
        if ((uint) this.OccupancyData.Electricity_High.FuelBillInfo > 0U)
        {
          double num46 = !(this.OccupancyData.Electricity_High.Unusual_Energy | this.OccupancyData.Electricity_High.FuelBillInfo == OccupancyClass.Fuel.FuelBillInformation.NotAvailable) ? this.Correction_Factor(this.OccupancyData.Electricity_High.EnergyUsed, OccupancyClass.PeriodLength(this.OccupancyData.Electricity_High.Period), (double) current_value1, "High") : this.Correction_Factor(0.0, 12.0, (double) current_value1, "High");
          if (this.OccupancyData.Scaling_Factors_Set)
            num46 = (double) this.OccupancyData.Box312a_High_factor;
          energyRequirements9b.Box309_High_corrected = (double) num26 * num46;
          energyRequirements9b.Box312_High_corrected = (double) num28 * num46;
          energyRequirements9b.Box312a_High_corrected = (double) num30 * num46;
          energyRequirements9b.Box331_High_corrected = (double) num33 * num46;
          energyRequirements9b.Box332_High_corrected = (double) num36 * num46;
          energyRequirements9b.Box332a_High_corrected = (double) num39 * num46;
          energyRequirements9b.Box332b_High_corrected = (double) num42 * num46;
          energyRequirements9b.Box309_High_factor = num46;
          energyRequirements9b.Box312_High_factor = num46;
          energyRequirements9b.Box312a_High_factor = num46;
          energyRequirements9b.Box331_High_factor = num46;
          energyRequirements9b.Box332_High_factor = num46;
          energyRequirements9b.Box332a_High_factor = num46;
          energyRequirements9b.Box332b_High_factor = num46;
          double num47 = !(this.OccupancyData.Electricity_Low.Unusual_Energy | this.OccupancyData.Electricity_Low.FuelBillInfo == OccupancyClass.Fuel.FuelBillInformation.NotAvailable) ? this.Correction_Factor(this.OccupancyData.Electricity_Low.EnergyUsed, OccupancyClass.PeriodLength(this.OccupancyData.Electricity_Low.Period), (double) current_value2, "Low") : this.Correction_Factor(0.0, 12.0, (double) current_value2, "Low");
          if (this.OccupancyData.Scaling_Factors_Set)
            num47 = (double) this.OccupancyData.Box312a_factor;
          energyRequirements9b.Box309_corrected = (double) num45 * num47;
          energyRequirements9b.Box312_corrected = (double) num29 * num47;
          energyRequirements9b.Box312a_corrected = (double) num31 * num47;
          energyRequirements9b.Box331_corrected = (double) num34 * num47;
          energyRequirements9b.Box332_corrected = (double) num37 * num47;
          energyRequirements9b.Box332a_corrected = (double) num40 * num47;
          energyRequirements9b.Box332b_corrected = (double) num43 * num47;
          energyRequirements9b.Box309_factor = num47;
          energyRequirements9b.Box312_factor = num47;
          energyRequirements9b.Box312a_factor = num47;
          energyRequirements9b.Box331_factor = num47;
          energyRequirements9b.Box332_factor = num47;
          energyRequirements9b.Box332a_factor = num47;
          energyRequirements9b.Box332b_factor = num47;
        }
        else
        {
          float current_value3 = current_value2 + current_value1 - (num28 + num29);
          double num48 = !(this.OccupancyData.Electricity.Unusual_Energy | this.OccupancyData.Electricity.FuelBillInfo == OccupancyClass.Fuel.FuelBillInformation.NotAvailable) ? this.Correction_Factor(this.OccupancyData.Electricity.EnergyUsed, OccupancyClass.PeriodLength(this.OccupancyData.Electricity.Period), (double) current_value3, "electricity") : this.Correction_Factor(0.0, OccupancyClass.PeriodLength(this.OccupancyData.Electricity.Period), (double) current_value3, "electricity");
          if (this.OccupancyData.Scaling_Factors_Set)
            num48 = (double) this.OccupancyData.Box312a_factor;
          energyRequirements9b.Box312a_corrected = energyRequirements9b.Box312a * num48;
          energyRequirements9b.Box312a_factor = num48;
          energyRequirements9b.Box331_corrected = energyRequirements9b.Box331 * num48;
          energyRequirements9b.Box331_factor = num48;
          energyRequirements9b.Box332_corrected = energyRequirements9b.Box332 * num48;
          energyRequirements9b.Box332_factor = num48;
          energyRequirements9b.Box332a_corrected = energyRequirements9b.Box332a * num48;
          energyRequirements9b.Box332a_factor = num48;
          if (this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Electric | this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Always_Electric | this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Gas_Electric)
          {
            energyRequirements9b.Box332b_corrected = energyRequirements9b.Box332b * num48;
            energyRequirements9b.Box332b_factor = num48;
          }
        }
        double num49 = 0.0;
        if (this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Always_Gas | this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Gas)
          num49 += energyRequirements9b.Box332b;
        double current_value4 = num49 + energyRequirements9b.Box332c;
        double num50 = !(this.OccupancyData.Gas.Unusual_Energy | this.OccupancyData.Gas.FuelBillInfo == OccupancyClass.Fuel.FuelBillInformation.NotAvailable) ? this.Correction_Factor(this.OccupancyData.Gas.EnergyUsed, OccupancyClass.PeriodLength(this.OccupancyData.Gas.Period), current_value4, "mains gas") : this.Correction_Factor(0.0, 12.0, current_value4, "mains gas");
        if (current_value4 != 0.0)
        {
          if (this.OccupancyData.Scaling_Factors_Set)
            num50 = (double) this.OccupancyData.Box332c_factor;
          energyRequirements9b.Box332c_corrected = current_value4 * num50;
          energyRequirements9b.Box332c_factor = num50;
        }
        else
        {
          energyRequirements9b.Box332c_corrected = energyRequirements9b.Box332c * num50;
          energyRequirements9b.Box332c_factor = num50;
        }
        if (this.OccupancyData.CommunityHeating.Unusual_Energy | this.OccupancyData.CommunityHeating.FuelBillInfo == OccupancyClass.Community.FuelBillInformation.NotAvailable)
          this.Correction_Factor(0.0, 12.0, 0.0, "heat from boilers");
        else
          this.Correction_Factor(this.OccupancyData.CommunityHeating.EnergyUsed, OccupancyClass.PeriodLength(this.OccupancyData.CommunityHeating.Period), 0.0, "heat from boilers");
        try
        {
          foreach (OccupancyClass.OtherFuel otherFuel in (Collection<OccupancyClass.OtherFuel>) this.OccupancyData.OtherFuels)
          {
            double EnergyUsed = this.Units_To_kWh(otherFuel.Fuel, otherFuel.UnitType, (double) otherFuel.UnitsPurchased);
            if (otherFuel.Unusual_Energy)
              EnergyUsed = 0.0;
            switch (otherFuel.Fuel)
            {
              case OccupancyClass.OtherFuel.FuelType.Bottled_LPG:
              case OccupancyClass.OtherFuel.FuelType.Bulk_LPG:
              case OccupancyClass.OtherFuel.FuelType.LPG_Special_Condition_18:
                double current_value5 = 0.0;
                if (this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Gas | this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Always_Gas | this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Gas_Electric && this.OccupancyData.Gas.FuelBillInfo == OccupancyClass.Fuel.FuelBillInformation.NotPresent)
                {
                  if (energyRequirements9b.Box332c != 0.0)
                    current_value5 += energyRequirements9b.Box332c;
                  else
                    current_value5 += energyRequirements9b.Box332b;
                }
                double num51 = !(otherFuel.Unusual_Energy | otherFuel.FuelBillInfo == OccupancyClass.OtherFuel.FuelBillInformation.NotAvailable) ? this.Correction_Factor(EnergyUsed, OccupancyClass.PeriodLength(otherFuel.Period), current_value5, "lpg") : this.Correction_Factor(0.0, 12.0, 0.0, "lpg");
                if (current_value5 != 0.0)
                {
                  if (energyRequirements9b.Box332c != 0.0)
                  {
                    if (this.OccupancyData.Scaling_Factors_Set)
                      num51 = (double) this.OccupancyData.Box332c_factor;
                    energyRequirements9b.Box332c_corrected = energyRequirements9b.Box332c * num51;
                    energyRequirements9b.Box332c_factor = num51;
                  }
                  else
                  {
                    if (this.OccupancyData.Scaling_Factors_Set)
                      num51 = (double) this.OccupancyData.Box332b_factor;
                    energyRequirements9b.Box332b_corrected = energyRequirements9b.Box332b * num51;
                    energyRequirements9b.Box332b_factor = num51;
                  }
                  break;
                }
                break;
              case OccupancyClass.OtherFuel.FuelType.Heating_Oil:
                double current_value6 = 0.0;
                if (this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Always_Oil)
                {
                  if (energyRequirements9b.Box332c != 0.0)
                    current_value6 += energyRequirements9b.Box332c;
                  else
                    current_value6 += energyRequirements9b.Box332b;
                }
                double num52 = !(otherFuel.Unusual_Energy | otherFuel.FuelBillInfo == OccupancyClass.OtherFuel.FuelBillInformation.NotAvailable) ? this.Correction_Factor(EnergyUsed, OccupancyClass.PeriodLength(otherFuel.Period), current_value6, "heating oil") : this.Correction_Factor(0.0, 12.0, 0.0, "heating oil");
                if (current_value6 != 0.0)
                {
                  if (energyRequirements9b.Box332c != 0.0)
                  {
                    if (this.OccupancyData.Scaling_Factors_Set)
                      num52 = (double) this.OccupancyData.Box332c_factor;
                    energyRequirements9b.Box332c_corrected = energyRequirements9b.Box332c * num52;
                    energyRequirements9b.Box332c_factor = num52;
                  }
                  else
                  {
                    if (this.OccupancyData.Scaling_Factors_Set)
                      num52 = (double) this.OccupancyData.Box332b_factor;
                    energyRequirements9b.Box332b_corrected = energyRequirements9b.Box332b * num52;
                    energyRequirements9b.Box332b_factor = num52;
                  }
                  break;
                }
                break;
              case OccupancyClass.OtherFuel.FuelType.Coal:
                double current_value7 = 0.0;
                if (this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Always_Solid)
                {
                  if (energyRequirements9b.Box332c != 0.0)
                    current_value7 += energyRequirements9b.Box332c;
                  else
                    current_value7 += energyRequirements9b.Box332b;
                }
                double num53 = !(otherFuel.Unusual_Energy | otherFuel.FuelBillInfo == OccupancyClass.OtherFuel.FuelBillInformation.NotAvailable) ? this.Correction_Factor(EnergyUsed, OccupancyClass.PeriodLength(otherFuel.Period), current_value7, "coal") : this.Correction_Factor(0.0, 12.0, 0.0, "coal");
                if (current_value7 != 0.0)
                {
                  if (energyRequirements9b.Box332c != 0.0)
                  {
                    if (this.OccupancyData.Scaling_Factors_Set)
                      num53 = (double) this.OccupancyData.Box332c_factor;
                    energyRequirements9b.Box332c_corrected = energyRequirements9b.Box332c * num53;
                    energyRequirements9b.Box332c_factor = num53;
                  }
                  else
                  {
                    if (this.OccupancyData.Scaling_Factors_Set)
                      num53 = (double) this.OccupancyData.Box332b_factor;
                    energyRequirements9b.Box332b_corrected = energyRequirements9b.Box332b * num53;
                    energyRequirements9b.Box332b_factor = num53;
                  }
                  break;
                }
                break;
              case OccupancyClass.OtherFuel.FuelType.Anthracite:
                if (otherFuel.Unusual_Energy | otherFuel.FuelBillInfo == OccupancyClass.OtherFuel.FuelBillInformation.NotAvailable)
                {
                  this.Correction_Factor(0.0, 12.0, 0.0, "anthracite");
                  break;
                }
                this.Correction_Factor(EnergyUsed, OccupancyClass.PeriodLength(otherFuel.Period), 0.0, "anthracite");
                break;
              case OccupancyClass.OtherFuel.FuelType.Smokeless_Fuel:
                if (otherFuel.Unusual_Energy | otherFuel.FuelBillInfo == OccupancyClass.OtherFuel.FuelBillInformation.NotAvailable)
                {
                  this.Correction_Factor(0.0, 12.0, 0.0, "smokeless");
                  break;
                }
                this.Correction_Factor(EnergyUsed, OccupancyClass.PeriodLength(otherFuel.Period), 0.0, "smokeless");
                break;
              case OccupancyClass.OtherFuel.FuelType.Wood_Logs:
              case OccupancyClass.OtherFuel.FuelType.Wood_Chips:
              case OccupancyClass.OtherFuel.FuelType.Wood_Pellets:
                if (otherFuel.Unusual_Energy | otherFuel.FuelBillInfo == OccupancyClass.OtherFuel.FuelBillInformation.NotAvailable)
                {
                  this.Correction_Factor(0.0, 12.0, 0.0, "wood");
                  break;
                }
                this.Correction_Factor(EnergyUsed, OccupancyClass.PeriodLength(otherFuel.Period), 0.0, "wood");
                break;
              case OccupancyClass.OtherFuel.FuelType.Bioethanol:
                if (otherFuel.Unusual_Energy | otherFuel.FuelBillInfo == OccupancyClass.OtherFuel.FuelBillInformation.NotAvailable)
                {
                  this.Correction_Factor(0.0, 12.0, 0.0, "bioethanol");
                  break;
                }
                this.Correction_Factor(EnergyUsed, OccupancyClass.PeriodLength(otherFuel.Period), 0.0, "bioethanol");
                break;
              case OccupancyClass.OtherFuel.FuelType.Rapeseed_Oil:
                if (otherFuel.Unusual_Energy | otherFuel.FuelBillInfo == OccupancyClass.OtherFuel.FuelBillInformation.NotAvailable)
                {
                  this.Correction_Factor(0.0, 12.0, 0.0, "rapeseed oil");
                  break;
                }
                this.Correction_Factor(EnergyUsed, OccupancyClass.PeriodLength(otherFuel.Period), 0.0, "rapeseed oil");
                break;
              case OccupancyClass.OtherFuel.FuelType.B30K:
                if (otherFuel.Unusual_Energy | otherFuel.FuelBillInfo == OccupancyClass.OtherFuel.FuelBillInformation.NotAvailable)
                {
                  this.Correction_Factor(0.0, 12.0, 0.0, "b30k");
                  break;
                }
                this.Correction_Factor(EnergyUsed, OccupancyClass.PeriodLength(otherFuel.Period), 0.0, "b30k");
                break;
            }
          }
        }
        finally
        {
          IEnumerator<OccupancyClass.OtherFuel> enumerator;
          enumerator?.Dispose();
        }
        if (energyRequirements9b.Box309_corrected == 0.0)
          energyRequirements9b.Box309_corrected = energyRequirements9b.Box309;
        if (energyRequirements9b.Box312_corrected == 0.0)
          energyRequirements9b.Box312_corrected = energyRequirements9b.Box312;
        if (energyRequirements9b.Box312a_corrected == 0.0)
          energyRequirements9b.Box312a_corrected = energyRequirements9b.Box312a;
      }
    }

    private void Fuel_Costs_10a()
    {
      if (this.StandardOccupancyCalc)
        this.OccupancyCalc = true;
      Fuel_costs_10a2012 fuelCosts10a = this._Calc.Fuel_costs_10a;
      string str1 = "";
      float num1;
      float num2;
      if (Operators.CompareString(this._House.MainHeating.Fuel, "Electricity", false) == 0)
      {
        string electricityType = this.GetElectricityType(1);
        int sapTableCode1 = this._House.MainHeating.SAPTableCode;
        int num3;
        switch (sapTableCode1)
        {
          case 191:
            if (Operators.CompareString(electricityType, "7-hour tariff (off-peak)", false) != 0)
            {
              if (Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) != 0)
              {
                if (Operators.CompareString(electricityType, "standard tariff", false) == 0)
                {
                  num1 = (float) this.FuelCost("standard tariff", 1, "Price");
                  num2 = (float) this.FuelCost("standard tariff", 0, "Price");
                  goto label_60;
                }
                else
                  goto label_60;
              }
              else
              {
                num1 = (float) (0.5 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
                num2 = (float) (0.5 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
                goto label_60;
              }
            }
            else
            {
              num1 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
              num2 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
              goto label_60;
            }
          case 201:
            if (Operators.CompareString(electricityType, "7-hour tariff (off-peak)", false) != 0)
            {
              if (Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) == 0)
              {
                num1 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
                num2 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
                goto label_60;
              }
              else
                goto label_60;
            }
            else
            {
              num1 = (float) (0.7 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.3 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
              num2 = (float) (0.7 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.3 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
              goto label_60;
            }
          case 202:
            if (Operators.CompareString(electricityType, "7-hour tariff (off-peak)", false) != 0)
            {
              if (Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) == 0)
              {
                num1 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
                num2 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
                goto label_60;
              }
              else
                goto label_60;
            }
            else
            {
              num1 = (float) (0.8 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
              num2 = (float) (0.8 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
              goto label_60;
            }
          case 203:
            if (Operators.CompareString(electricityType, "7-hour tariff (off-peak)", false) != 0)
            {
              if (Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) == 0)
              {
                num1 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
                num2 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
                goto label_60;
              }
              else
                goto label_60;
            }
            else
            {
              num1 = (float) (0.7 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.3 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
              num2 = (float) (0.7 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.3 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
              goto label_60;
            }
          case 204:
            if (Operators.CompareString(electricityType, "7-hour tariff (off-peak)", false) != 0)
            {
              if (Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) == 0)
              {
                num1 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
                num2 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
                goto label_60;
              }
              else
                goto label_60;
            }
            else
            {
              num1 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
              num2 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
              goto label_60;
            }
          case 408:
          case 422:
            num3 = 1;
            break;
          case 423:
            if (Operators.CompareString(electricityType, "7-hour tariff (off-peak)", false) != 0)
            {
              if (Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) == 0)
              {
                num1 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
                num2 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
                goto label_60;
              }
              else
                goto label_60;
            }
            else
            {
              num1 = (float) (0.2 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.8 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
              num2 = (float) (0.2 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.8 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
              goto label_60;
            }
          default:
            num3 = sapTableCode1 == 423 ? 1 : 0;
            break;
        }
        if (num3 != 0)
        {
          if (Operators.CompareString(electricityType, "7-hour tariff (off-peak)", false) == 0)
          {
            num1 = (float) (0.2 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.8 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
            num2 = (float) (0.2 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.8 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
          }
        }
        else
        {
          switch (sapTableCode1)
          {
            case 424:
              if (Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) != 0)
              {
                if (Operators.CompareString(electricityType, "7-hour tariff (off-peak)", false) == 0)
                {
                  num1 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
                  num2 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
                  break;
                }
                num1 = (float) this.FuelCost(electricityType, 1, "Price");
                num2 = (float) this.FuelCost(electricityType, 0, "Price");
                break;
              }
              num1 = (float) (0.5 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
              num2 = (float) (0.5 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
              break;
            case 694:
              if (Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) == 0)
              {
                num1 = (float) (0.5 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
                num2 = (float) (0.5 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
                break;
              }
              num1 = (float) this.FuelCost(electricityType, 1, "Price");
              num2 = (float) this.FuelCost(electricityType, 0, "Price");
              break;
            case 701:
              if (Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) == 0)
              {
                num1 = (float) (0.5 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
                num2 = (float) (0.5 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
                break;
              }
              num1 = (float) this.FuelCost(electricityType, 1, "Price");
              num2 = (float) this.FuelCost(electricityType, 0, "Price");
              break;
            default:
              if (sapTableCode1 >= 521 && sapTableCode1 <= 524)
              {
                if (Operators.CompareString(electricityType, "7-hour tariff (off-peak)", false) != 0)
                {
                  if (Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) == 0)
                  {
                    num1 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
                    num2 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
                    break;
                  }
                  break;
                }
                num1 = (float) (0.7 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.3 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
                num2 = (float) (0.7 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.3 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
                break;
              }
              int sapTableCode2 = this._House.MainHeating.SAPTableCode;
              if (sapTableCode2 >= 691 && sapTableCode2 <= 693 || sapTableCode2 == 699)
              {
                if (Operators.CompareString(electricityType, "7-hour tariff (off-peak)", false) != 0)
                {
                  if (Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) == 0)
                  {
                    num1 = (float) (0.5 * this.FuelCost(electricityType, 1, "Price") + 0.5 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price"));
                    num2 = (float) (0.5 * this.FuelCost(electricityType, 0, "Price") + 0.5 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price"));
                  }
                  else
                  {
                    num1 = (float) this.FuelCost(electricityType, 1, "Price");
                    num2 = (float) this.FuelCost(electricityType, 0, "Price");
                  }
                }
                else
                {
                  num1 = (float) this.FuelCost("7-hour tariff (on-peak)", 1, "Price");
                  num2 = (float) this.FuelCost("7-hour tariff (on-peak)", 0, "Price");
                }
              }
              else
              {
                num1 = (float) this.FuelCost(electricityType, 1, "Price");
                num2 = (float) this.FuelCost(electricityType, 0, "Price");
              }
              break;
          }
        }
label_60:
        if ((double) num1 == 0.0 & Operators.CompareString(electricityType, "standard tariff", false) == 0)
        {
          num1 = (float) this.FuelCost(electricityType, 1, "Price");
          num2 = (float) this.FuelCost(electricityType, 0, "Price");
        }
        if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 && this._House.MainHeating.SGroup.Contains("heat pumps") && Operators.CompareString(this._House.MainHeating.Fuel, "Electricity", false) == 0)
        {
          if (Operators.CompareString(electricityType, "7-hour tariff (off-peak)", false) != 0)
          {
            if (Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) != 0)
            {
              if (Operators.CompareString(electricityType, "standard tariff", false) == 0)
              {
                num1 = (float) this.FuelCost("standard tariff", 1, "Price");
                num2 = (float) this.FuelCost("standard tariff", 0, "Price");
              }
            }
            else
            {
              num1 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
              num2 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
            }
          }
          else
          {
            num1 = (float) (0.8 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
            num2 = (float) (0.8 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
          }
        }
        fuelCosts10a.Box240P = (double) num1;
        this._Calc.Actual_costs_10a.Box240P = (double) num2;
        fuelCosts10a.Box240 = this._Calc.Energy_Requirements_9a.Box211 * (double) num1 * 0.01;
        this._Calc.Actual_costs_10a.Box240 = this._Calc.Energy_Requirements_9a.Box211 * (double) num2 * 0.01;
      }
      else
      {
        string fuel = this._House.MainHeating.Fuel;
        fuelCosts10a.Box240 = this._Calc.Energy_Requirements_9a.Box211 * this.FuelCost(fuel, 1, "Price") * 0.01;
        fuelCosts10a.Box240P = this.FuelCost(fuel, 1, "Price");
        this._Calc.Actual_costs_10a.Box240 = this._Calc.Energy_Requirements_9a.Box211 * this.FuelCost(fuel, 0, "Price") * 0.01;
        this._Calc.Actual_costs_10a.Box240P = this.FuelCost(fuel, 0, "Price");
      }
      if (this._House.MainHeating.ElectricityTariff.Contains("10") && this._House.MainHeating.SAPTableCode == 192)
      {
        double num4 = this._Calc.Energy_Requirements_9a.Box211_m.M1 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M1 + this._Calc.Energy_Requirements_9a.Box211_m.M2 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M2 + this._Calc.Energy_Requirements_9a.Box211_m.M3 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M3 + this._Calc.Energy_Requirements_9a.Box211_m.M4 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M4 + this._Calc.Energy_Requirements_9a.Box211_m.M5 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M5 + this._Calc.Energy_Requirements_9a.Box211_m.M10 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M10 + this._Calc.Energy_Requirements_9a.Box211_m.M11 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M11 + this._Calc.Energy_Requirements_9a.Box211_m.M12 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M12;
        double num5 = this._Calc.Energy_Requirements_9a.Box211_m.M1 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M1 + this._Calc.Energy_Requirements_9a.Box211_m.M2 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M2 + this._Calc.Energy_Requirements_9a.Box211_m.M3 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M3 + this._Calc.Energy_Requirements_9a.Box211_m.M4 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M4 + this._Calc.Energy_Requirements_9a.Box211_m.M5 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M5 + this._Calc.Energy_Requirements_9a.Box211_m.M10 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M10 + this._Calc.Energy_Requirements_9a.Box211_m.M11 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M11 + this._Calc.Energy_Requirements_9a.Box211_m.M12 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M12;
        fuelCosts10a.Box240 = (num4 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + num5 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price")) * 0.01;
        this._Calc.Actual_costs_10a.Box240 = (num4 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + num5 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price")) * 0.01;
      }
      if (this.OccupancyCalc && this._House.MainHeating.Fuel != null)
      {
        if (Microsoft.VisualBasic.Strings.LCase(this._House.MainHeating.Fuel).Contains("dual fuel"))
        {
          float fuelCost = (float) this.Get_FuelCost("house coal");
          if ((double) fuelCost != 0.0)
          {
            fuelCosts10a.Box240P = (double) fuelCost;
            fuelCosts10a.Box240 = this._Calc.Energy_Requirements_9a.Box211_corrected * fuelCosts10a.Box240P * 0.01;
          }
          num1 = (float) this.Get_FuelCost("wood logs");
          if ((double) num1 != 0.0)
          {
            fuelCosts10a.Box240P = (double) num1;
            Fuel_costs_10a2012 fuelCosts10a2012;
            double num6 = (fuelCosts10a2012 = fuelCosts10a).Box240 + this._Calc.Energy_Requirements_9a.Box211_Dual_corrected * fuelCosts10a.Box240P * 0.01;
            fuelCosts10a2012.Box240 = num6;
          }
          this._Calc.Actual_costs_10a.Box240P = (double) num1;
          this._Calc.Actual_costs_10a.Box240 = fuelCosts10a.Box240;
        }
        else
        {
          float num7 = 0.0f;
          if (Microsoft.VisualBasic.Strings.LCase(this._House.MainHeating.Fuel).Contains("electricity"))
            num7 = (float) this.Get_FuelCost("low");
          if ((double) num7 != 0.0)
          {
            fuelCosts10a.Box240 = this._Calc.Energy_Requirements_9a.Box211_corrected * (double) num7 * 0.01;
            this._Calc.Actual_costs_10a.Box240 = fuelCosts10a.Box240;
            num1 = (float) this.Get_FuelCost("high");
            if ((double) num1 != 0.0)
            {
              Fuel_costs_10a2012 fuelCosts10a2012;
              double num8 = (fuelCosts10a2012 = fuelCosts10a).Box240 + this._Calc.Energy_Requirements_9a.Box211_High_corrected * (double) num1 * 0.01;
              fuelCosts10a2012.Box240 = num8;
              this._Calc.Actual_costs_10a.Box240 = fuelCosts10a.Box240;
            }
          }
          else
          {
            num1 = (float) this.Get_FuelCost(this._House.MainHeating.Fuel);
            if ((double) num1 != 0.0)
            {
              fuelCosts10a.Box240P = (double) num1;
              fuelCosts10a.Box240 = this._Calc.Energy_Requirements_9a.Box211_corrected * fuelCosts10a.Box240P * 0.01;
              this._Calc.Actual_costs_10a.Box240 = fuelCosts10a.Box240;
              this._Calc.Actual_costs_10a.Box240P = (double) num1;
            }
          }
        }
      }
      if (this._House.IncludeMainHeating2)
      {
        str1 = "";
        if (Operators.CompareString(this._House.MainHeating2.Fuel, "Electricity", false) == 0)
        {
          string electricityType2 = this.GetElectricityType2(1);
          int sapTableCode3 = this._House.MainHeating2.SAPTableCode;
          int num9;
          switch (sapTableCode3)
          {
            case 191:
              if (Operators.CompareString(electricityType2, "7-hour tariff (off-peak)", false) != 0)
              {
                if (Operators.CompareString(electricityType2, "10-hour tariff (off-peak)", false) != 0)
                {
                  if (Operators.CompareString(electricityType2, "standard tariff", false) == 0)
                  {
                    num1 = (float) this.FuelCost("standard tariff", 1, "Price");
                    num2 = (float) this.FuelCost("standard tariff", 0, "Price");
                    goto label_150;
                  }
                  else
                    goto label_150;
                }
                else
                {
                  num1 = (float) (0.5 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
                  num2 = (float) (0.5 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
                  goto label_150;
                }
              }
              else
              {
                num1 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
                num2 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
                goto label_150;
              }
            case 201:
              if (Operators.CompareString(electricityType2, "7-hour tariff (off-peak)", false) != 0)
              {
                if (Operators.CompareString(electricityType2, "10-hour tariff (off-peak)", false) == 0)
                {
                  num1 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
                  num2 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
                  goto label_150;
                }
                else
                  goto label_150;
              }
              else
              {
                num1 = (float) (0.7 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.3 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
                num2 = (float) (0.7 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.3 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
                goto label_150;
              }
            case 202:
              if (Operators.CompareString(electricityType2, "7-hour tariff (off-peak)", false) != 0)
              {
                if (Operators.CompareString(electricityType2, "10-hour tariff (off-peak)", false) == 0)
                {
                  num1 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
                  num2 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
                  goto label_150;
                }
                else
                  goto label_150;
              }
              else
              {
                num1 = (float) (0.8 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
                num2 = (float) (0.8 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
                goto label_150;
              }
            case 203:
              if (Operators.CompareString(electricityType2, "7-hour tariff (off-peak)", false) != 0)
              {
                if (Operators.CompareString(electricityType2, "10-hour tariff (off-peak)", false) == 0)
                {
                  num1 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
                  num2 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
                  goto label_150;
                }
                else
                  goto label_150;
              }
              else
              {
                num1 = (float) (0.7 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.3 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
                num2 = (float) (0.7 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.3 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
                goto label_150;
              }
            case 204:
              if (Operators.CompareString(electricityType2, "7-hour tariff (off-peak)", false) != 0)
              {
                if (Operators.CompareString(electricityType2, "10-hour tariff (off-peak)", false) == 0)
                {
                  num1 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
                  num2 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
                  goto label_150;
                }
                else
                  goto label_150;
              }
              else
              {
                num1 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
                num2 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
                goto label_150;
              }
            case 408:
            case 422:
              num9 = 1;
              break;
            case 423:
              if (Operators.CompareString(electricityType2, "7-hour tariff (off-peak)", false) != 0)
              {
                if (Operators.CompareString(electricityType2, "10-hour tariff (off-peak)", false) == 0)
                {
                  num1 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
                  num2 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
                  goto label_150;
                }
                else
                  goto label_150;
              }
              else
              {
                num1 = (float) (0.2 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.8 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
                num2 = (float) (0.2 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.8 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
                goto label_150;
              }
            default:
              num9 = sapTableCode3 == 423 ? 1 : 0;
              break;
          }
          if (num9 != 0)
          {
            if (Operators.CompareString(electricityType2, "7-hour tariff (off-peak)", false) == 0)
            {
              num1 = (float) (0.2 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.8 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
              num2 = (float) (0.2 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.8 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
            }
          }
          else
          {
            switch (sapTableCode3)
            {
              case 424:
                if (Operators.CompareString(electricityType2, "7-hour tariff (off-peak)", false) != 0)
                {
                  if (Operators.CompareString(electricityType2, "10-hour tariff (off-peak)", false) == 0)
                  {
                    num1 = (float) (0.5 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
                    num2 = (float) (0.5 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
                    break;
                  }
                  num1 = (float) this.FuelCost(electricityType2, 1, "Price");
                  num2 = (float) this.FuelCost(electricityType2, 0, "Price");
                  break;
                }
                num1 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
                num2 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
                break;
              case 694:
                if (Operators.CompareString(electricityType2, "10-hour tariff (off-peak)", false) == 0)
                {
                  num1 = (float) (0.5 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
                  num2 = (float) (0.5 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
                  break;
                }
                num1 = (float) this.FuelCost(electricityType2, 1, "Price");
                num2 = (float) this.FuelCost(electricityType2, 0, "Price");
                break;
              case 701:
                if (Operators.CompareString(electricityType2, "10-hour tariff (off-peak)", false) == 0)
                {
                  num1 = (float) (0.5 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
                  num2 = (float) (0.5 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
                  break;
                }
                num1 = (float) this.FuelCost(electricityType2, 1, "Price");
                num2 = (float) this.FuelCost(electricityType2, 0, "Price");
                break;
              default:
                if (sapTableCode3 >= 521 && sapTableCode3 <= 524)
                {
                  if (Operators.CompareString(electricityType2, "7-hour tariff (off-peak)", false) != 0)
                  {
                    if (Operators.CompareString(electricityType2, "10-hour tariff (off-peak)", false) == 0)
                    {
                      num1 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
                      num2 = (float) (0.6 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.4 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
                      break;
                    }
                    break;
                  }
                  num1 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
                  num2 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
                  break;
                }
                int sapTableCode4 = this._House.MainHeating2.SAPTableCode;
                if (sapTableCode4 >= 691 && sapTableCode4 <= 693)
                {
                  if (Operators.CompareString(electricityType2, "7-hour tariff (off-peak)", false) != 0)
                  {
                    if (Operators.CompareString(electricityType2, "10-hour tariff (off-peak)", false) == 0)
                    {
                      num1 = (float) (0.5 * this.FuelCost(electricityType2, 1, "Price") + 0.5 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price"));
                      num2 = (float) (0.5 * this.FuelCost(electricityType2, 0, "Price") + 0.5 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price"));
                    }
                    else
                    {
                      num1 = (float) this.FuelCost(electricityType2, 1, "Price");
                      num2 = (float) this.FuelCost(electricityType2, 0, "Price");
                    }
                  }
                  else
                  {
                    num1 = (float) this.FuelCost("7-hour tariff (on-peak)", 1, "Price");
                    num2 = (float) this.FuelCost("7-hour tariff (on-peak)", 0, "Price");
                  }
                }
                else
                {
                  num1 = (float) this.FuelCost(electricityType2, 1, "Price");
                  num2 = (float) this.FuelCost(electricityType2, 0, "Price");
                }
                break;
            }
          }
label_150:
          if ((double) num1 == 0.0 & Operators.CompareString(electricityType2, "standard tariff", false) == 0)
          {
            num1 = (float) this.FuelCost(electricityType2, 1, "Price");
            num2 = (float) this.FuelCost(electricityType2, 0, "Price");
          }
          if (Operators.CompareString(this._House.MainHeating2.InforSource, "Boiler Database", false) == 0 && this._House.MainHeating2.SGroup.Contains("heat pumps") && Operators.CompareString(this._House.MainHeating2.Fuel, "Electricity", false) == 0)
          {
            if (Operators.CompareString(electricityType2, "7-hour tariff (off-peak)", false) != 0)
            {
              if (Operators.CompareString(electricityType2, "10-hour tariff (off-peak)", false) != 0)
              {
                if (Operators.CompareString(electricityType2, "standard tariff", false) == 0)
                {
                  num1 = (float) this.FuelCost("standard tariff", 1, "Price");
                  num2 = (float) this.FuelCost("standard tariff", 0, "Price");
                }
              }
              else
              {
                num1 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
                num2 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
              }
            }
            else
            {
              num1 = (float) (0.8 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
              num2 = (float) (0.8 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
            }
          }
          fuelCosts10a.Box241P = (double) num1;
          this._Calc.Actual_costs_10a.Box241P = (double) num2;
          fuelCosts10a.Box241 = this._Calc.Energy_Requirements_9a.Box213 * (double) num1 * 0.01;
          this._Calc.Actual_costs_10a.Box241 = this._Calc.Energy_Requirements_9a.Box213 * (double) num2 * 0.01;
        }
        else
        {
          string fuel = this._House.MainHeating2.Fuel;
          fuelCosts10a.Box241 = this._Calc.Energy_Requirements_9a.Box213 * this.FuelCost(fuel, 1, "Price") * 0.01;
          fuelCosts10a.Box241P = this.FuelCost(fuel, 1, "Price");
          this._Calc.Actual_costs_10a.Box241 = this._Calc.Energy_Requirements_9a.Box213 * this.FuelCost(fuel, 0, "Price") * 0.01;
          this._Calc.Actual_costs_10a.Box241P = this.FuelCost(fuel, 0, "Price");
        }
        if (this._House.MainHeating2.SAPTableCode == 192)
        {
          double num10 = this._Calc.Energy_Requirements_9a.Box213_m.M1 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M1 + this._Calc.Energy_Requirements_9a.Box213_m.M2 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M2 + this._Calc.Energy_Requirements_9a.Box213_m.M3 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M3 + this._Calc.Energy_Requirements_9a.Box213_m.M4 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M4 + this._Calc.Energy_Requirements_9a.Box213_m.M5 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M5 + this._Calc.Energy_Requirements_9a.Box213_m.M10 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M10 + this._Calc.Energy_Requirements_9a.Box213_m.M11 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M11 + this._Calc.Energy_Requirements_9a.Box213_m.M12 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M12;
          double num11 = this._Calc.Energy_Requirements_9a.Box213_m.M1 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M1 + this._Calc.Energy_Requirements_9a.Box213_m.M2 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M2 + this._Calc.Energy_Requirements_9a.Box213_m.M3 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M3 + this._Calc.Energy_Requirements_9a.Box213_m.M4 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M4 + this._Calc.Energy_Requirements_9a.Box213_m.M5 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M5 + this._Calc.Energy_Requirements_9a.Box213_m.M10 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M10 + this._Calc.Energy_Requirements_9a.Box213_m.M11 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M11 + this._Calc.Energy_Requirements_9a.Box213_m.M12 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M12;
          fuelCosts10a.Box241 = (num10 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + num11 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price")) * 0.01;
          this._Calc.Actual_costs_10a.Box241 = (num10 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + num11 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price")) * 0.01;
        }
      }
      if (this.OccupancyCalc && this._House.MainHeating2.Fuel != null)
      {
        if (Microsoft.VisualBasic.Strings.LCase(this._House.MainHeating2.Fuel).Contains("dual fuel"))
        {
          float fuelCost1 = (float) this.Get_FuelCost("house coal");
          if ((double) fuelCost1 != 0.0)
          {
            fuelCosts10a.Box241P = (double) fuelCost1;
            fuelCosts10a.Box241 = this._Calc.Energy_Requirements_9a.Box213_corrected * fuelCosts10a.Box241P * 0.01;
          }
          float fuelCost2 = (float) this.Get_FuelCost("wood logs");
          if ((double) fuelCost2 != 0.0)
          {
            fuelCosts10a.Box241P = (double) fuelCost2;
            Fuel_costs_10a2012 fuelCosts10a2012;
            double num12 = (fuelCosts10a2012 = fuelCosts10a).Box241 + this._Calc.Energy_Requirements_9a.Box213_Dual_corrected * fuelCosts10a.Box241P * 0.01;
            fuelCosts10a2012.Box241 = num12;
          }
          this._Calc.Actual_costs_10a.Box241P = (double) fuelCost2;
          this._Calc.Actual_costs_10a.Box241 = fuelCosts10a.Box241;
        }
        else
        {
          float fuelCost3 = (float) this.Get_FuelCost("low");
          if ((double) fuelCost3 != 0.0)
          {
            fuelCosts10a.Box241 = this._Calc.Energy_Requirements_9a.Box213_corrected * (double) fuelCost3 * 0.01;
            this._Calc.Actual_costs_10a.Box241 = fuelCosts10a.Box241;
            this._Calc.Actual_costs_10a.Box241P = (double) fuelCost3;
            float fuelCost4 = (float) this.Get_FuelCost("low");
            if ((double) fuelCost4 != 0.0)
            {
              fuelCosts10a.Box241 = this._Calc.Energy_Requirements_9a.Box213_corrected * (double) fuelCost4 * 0.01;
              this._Calc.Actual_costs_10a.Box241 = fuelCosts10a.Box241;
              this._Calc.Actual_costs_10a.Box241P = (double) fuelCost4;
            }
            float fuelCost5 = (float) this.Get_FuelCost("high");
            if ((double) fuelCost5 != 0.0)
            {
              Fuel_costs_10a2012 fuelCosts10a2012;
              double num13 = (fuelCosts10a2012 = fuelCosts10a).Box241 + this._Calc.Energy_Requirements_9a.Box213_High_corrected * (double) fuelCost5 * 0.01;
              fuelCosts10a2012.Box241 = num13;
              this._Calc.Actual_costs_10a.Box241 = fuelCosts10a.Box241;
              this._Calc.Actual_costs_10a.Box241P = (double) fuelCost5;
            }
          }
          else
          {
            float fuelCost6 = (float) this.Get_FuelCost(this._House.MainHeating2.Fuel);
            if ((double) fuelCost6 != 0.0)
            {
              fuelCosts10a.Box241P = (double) fuelCost6;
              fuelCosts10a.Box241 = this._Calc.Energy_Requirements_9a.Box213_corrected * fuelCosts10a.Box241P * 0.01;
              this._Calc.Actual_costs_10a.Box241 = fuelCosts10a.Box241;
              this._Calc.Actual_costs_10a.Box241P = (double) fuelCost6;
            }
          }
        }
      }
      str1 = "";
      string str2;
      if (Operators.CompareString(this._House.SecHeating.Fuel, "Electricity", false) == 0)
      {
        str2 = this.GetElectricityType(0);
        if (Operators.CompareString(str2, "10-hour tariff (on-peak)", false) == 0)
        {
          fuelCosts10a.Box242P = 0.5 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price");
          fuelCosts10a.Box242 = this._Calc.Energy_Requirements_9a.Box215 * fuelCosts10a.Box242P * 0.01;
          this._Calc.Actual_costs_10a.Box242 = this._Calc.Energy_Requirements_9a.Box215 * (0.5 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price")) * 0.01;
          this._Calc.Actual_costs_10a.Box242P = 0.5 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price");
          goto label_226;
        }
      }
      else
        str2 = this._House.SecHeating.Fuel;
      if (Operators.CompareString(str2, "", false) == 0 && Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0)
      {
        if (Operators.CompareString(this._House.MainHeating.SGroup, "Micro-cogeneration (micro-CHP)", false) == 0 && this._Calc.HeatLoss.CHPCalc.SecFraction != 0.0 & this._House.SecHeating.SAPTableCode == 0)
        {
          str2 = this.GetElectricityType(0);
          if (Operators.CompareString(str2, "10-hour tariff (on-peak)", false) == 0)
          {
            fuelCosts10a.Box242P = 0.5 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price");
            fuelCosts10a.Box242 = this._Calc.Energy_Requirements_9a.Box215 * fuelCosts10a.Box242P * 0.01;
            this._Calc.Actual_costs_10a.Box242 = this._Calc.Energy_Requirements_9a.Box215 * (0.5 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price")) * 0.01;
            this._Calc.Actual_costs_10a.Box242P = 0.5 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price");
            goto label_226;
          }
        }
        if (this._House.MainHeating.SGroup.Contains("heat pumps") && this._Calc.HeatLoss.HPCalc.SecFraction != 0.0 & this._House.SecHeating.SAPTableCode == 0)
        {
          str2 = this.GetElectricityType(0);
          if (Operators.CompareString(str2, "10-hour tariff (on-peak)", false) == 0)
          {
            fuelCosts10a.Box242P = 0.5 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price");
            this._Calc.Actual_costs_10a.Box242P = 0.5 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price");
            fuelCosts10a.Box242 = this._Calc.Energy_Requirements_9a.Box215 * fuelCosts10a.Box242P * 0.01;
            this._Calc.Actual_costs_10a.Box242 = this._Calc.Energy_Requirements_9a.Box215 * (0.5 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price")) * 0.01;
            goto label_226;
          }
          else if (Operators.CompareString(str2, "standard tariff", false) == 0)
          {
            fuelCosts10a.Box242P = this.FuelCost(str2, 1, "Price");
            this._Calc.Actual_costs_10a.Box242P = this.FuelCost(str2, 0, "Price");
            fuelCosts10a.Box242 = this._Calc.Energy_Requirements_9a.Box215 * fuelCosts10a.Box242P * 0.01;
            this._Calc.Actual_costs_10a.Box242 = this._Calc.Energy_Requirements_9a.Box215 * this.FuelCost(str2, 0, "Price") * 0.01;
            goto label_226;
          }
        }
      }
      if ((uint) Operators.CompareString(str2, "", false) > 0U)
      {
        fuelCosts10a.Box242P = this.FuelCost(str2, 1, "Price");
        this._Calc.Actual_costs_10a.Box242P = this.FuelCost(str2, 0, "Price");
        fuelCosts10a.Box242 = this._Calc.Energy_Requirements_9a.Box215 * fuelCosts10a.Box242P * 0.01;
        this._Calc.Actual_costs_10a.Box242 = this._Calc.Energy_Requirements_9a.Box215 * this.FuelCost(str2, 0, "Price") * 0.01;
      }
      if (this.OccupancyCalc)
      {
        if (this._House.SecHeating.Fuel != null)
        {
          if (Microsoft.VisualBasic.Strings.LCase(this._House.SecHeating.Fuel).Contains("dual fuel"))
          {
            float fuelCost7 = (float) this.Get_FuelCost("house coal");
            if ((double) fuelCost7 != 0.0)
            {
              fuelCosts10a.Box242P = (double) fuelCost7;
              fuelCosts10a.Box242 = this._Calc.Energy_Requirements_9a.Box215_corrected * fuelCosts10a.Box242P * 0.01;
            }
            float fuelCost8 = (float) this.Get_FuelCost("wood logs");
            if ((double) fuelCost8 != 0.0)
            {
              fuelCosts10a.Box242P = (double) fuelCost8;
              Fuel_costs_10a2012 fuelCosts10a2012;
              double num14 = (fuelCosts10a2012 = fuelCosts10a).Box242 + this._Calc.Energy_Requirements_9a.Box215_Dual_corrected * fuelCosts10a.Box242P * 0.01;
              fuelCosts10a2012.Box242 = num14;
            }
            this._Calc.Actual_costs_10a.Box242 = fuelCosts10a.Box242;
            this._Calc.Actual_costs_10a.Box242P = fuelCosts10a.Box242P;
          }
          else
          {
            float fuelCost9 = (float) this.Get_FuelCost(this._House.SecHeating.Fuel);
            if ((double) fuelCost9 != 0.0)
            {
              fuelCosts10a.Box242P = (double) fuelCost9;
              fuelCosts10a.Box242 = this._Calc.Energy_Requirements_9a.Box215_corrected * fuelCosts10a.Box242P * 0.01;
              this._Calc.Actual_costs_10a.Box242 = fuelCosts10a.Box242;
              this._Calc.Actual_costs_10a.Box242P = fuelCosts10a.Box242P;
            }
            else
            {
              float fuelCost10 = (float) this.Get_FuelCost("low");
              if ((double) fuelCost10 != 0.0)
              {
                fuelCosts10a.Box242 = this._Calc.Energy_Requirements_9a.Box215_corrected * (double) fuelCost10 * 0.01;
                this._Calc.Actual_costs_10a.Box242 = fuelCosts10a.Box242;
                this._Calc.Actual_costs_10a.Box242P = (double) fuelCost10;
              }
              float fuelCost11 = (float) this.Get_FuelCost("high");
              if ((double) fuelCost11 != 0.0)
              {
                Fuel_costs_10a2012 fuelCosts10a2012;
                double num15 = (fuelCosts10a2012 = fuelCosts10a).Box242 + this._Calc.Energy_Requirements_9a.Box215_High_corrected * (double) fuelCost11 * 0.01;
                fuelCosts10a2012.Box242 = num15;
                this._Calc.Actual_costs_10a.Box242 = fuelCosts10a.Box242;
                this._Calc.Actual_costs_10a.Box242P = (double) fuelCost11;
              }
            }
          }
        }
        else if (this._Calc.Energy_Requirements_9a.Box215_corrected != 0.0)
        {
          float fuelCost12 = (float) this.Get_FuelCost("electricity");
          if ((double) fuelCost12 != 0.0)
          {
            fuelCosts10a.Box242P = (double) fuelCost12;
            this._Calc.Actual_costs_10a.Box242P = fuelCosts10a.Box242P;
            fuelCosts10a.Box242 = this._Calc.Energy_Requirements_9a.Box215_corrected * fuelCosts10a.Box242P * 0.01;
            this._Calc.Actual_costs_10a.Box242 = fuelCosts10a.Box242;
          }
          else
          {
            float fuelCost13 = (float) this.Get_FuelCost("low");
            if ((double) fuelCost13 != 0.0)
            {
              fuelCosts10a.Box242 = this._Calc.Energy_Requirements_9a.Box215_corrected * (double) fuelCost13 * 0.01;
              this._Calc.Actual_costs_10a.Box242 = fuelCosts10a.Box242;
              this._Calc.Actual_costs_10a.Box242P = (double) fuelCost13;
            }
            float fuelCost14 = (float) this.Get_FuelCost("high");
            if ((double) fuelCost14 != 0.0)
            {
              Fuel_costs_10a2012 fuelCosts10a2012;
              double num16 = (fuelCosts10a2012 = fuelCosts10a).Box242 + this._Calc.Energy_Requirements_9a.Box215_High_corrected * (double) fuelCost14 * 0.01;
              fuelCosts10a2012.Box242 = num16;
              this._Calc.Actual_costs_10a.Box242 = fuelCosts10a.Box242;
              this._Calc.Actual_costs_10a.Box242P = (double) fuelCost14;
            }
          }
        }
      }
label_226:
      SAP_Module.Dwelling dwelling1 = new SAP_Module.Dwelling();
      SAP_Module.Dwelling dwelling2 = !this.OccupancyCalc ? this._House : this.OriginalSAPDwelling;
      int num17 = !(dwelling2.Water.Solar.Inlcude & !dwelling2.Water.Solar.SolarSeperate) ? 0 : checked ((int) Math.Round((double) dwelling2.Water.Solar.SolarVolume));
      int systemRef1 = dwelling2.Water.SystemRef;
      int num18;
      switch (systemRef1)
      {
        case 901:
          if (Operators.CompareString(dwelling2.MainHeating.Fuel, "Electricity", false) == 0)
          {
            if ((uint) Operators.CompareString(dwelling2.MainHeating.ElectricityTariff, "standard tariff", false) > 0U)
            {
              int sapTableCode = dwelling2.MainHeating.SAPTableCode;
              if (sapTableCode == 192)
              {
                if (str2.Contains("18"))
                {
                  fuelCosts10a.Box247P = this.FuelCost(this.GetElectricityType(1), 1, "Price");
                  fuelCosts10a.Box247 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box247P * 0.01;
                  this._Calc.Actual_costs_10a.Box247 = this._Calc.Energy_Requirements_9a.Box219 * this.FuelCost(this.GetElectricityType(1), 0, "Price") * 0.01;
                  this._Calc.Actual_costs_10a.Box247P = this.FuelCost(this.GetElectricityType(1), 0, "Price");
                }
                else
                {
                  double num19 = this._Calc.Energy_Requirements_9a.Box219_m.M1 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M1 + this._Calc.Energy_Requirements_9a.Box219_m.M2 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M2 + this._Calc.Energy_Requirements_9a.Box219_m.M3 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M3 + this._Calc.Energy_Requirements_9a.Box219_m.M4 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M4 + this._Calc.Energy_Requirements_9a.Box219_m.M5 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M5 + this._Calc.Energy_Requirements_9a.Box219_m.M10 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M10 + this._Calc.Energy_Requirements_9a.Box219_m.M11 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M11 + this._Calc.Energy_Requirements_9a.Box219_m.M12 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M12;
                  fuelCosts10a.Box245 = num19 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") * 0.01;
                  this._Calc.Actual_costs_10a.Box245 = num19 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") * 0.01;
                  double num20 = this._Calc.Energy_Requirements_9a.Box219_m.M1 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M1 + this._Calc.Energy_Requirements_9a.Box219_m.M2 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M2 + this._Calc.Energy_Requirements_9a.Box219_m.M3 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M3 + this._Calc.Energy_Requirements_9a.Box219_m.M4 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M4 + this._Calc.Energy_Requirements_9a.Box219_m.M5 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M5 + this._Calc.Energy_Requirements_9a.Box219_m.M6 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M6 + this._Calc.Energy_Requirements_9a.Box219_m.M7 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M7 + this._Calc.Energy_Requirements_9a.Box219_m.M8 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M8 + this._Calc.Energy_Requirements_9a.Box219_m.M9 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M9 + this._Calc.Energy_Requirements_9a.Box219_m.M10 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M10 + this._Calc.Energy_Requirements_9a.Box219_m.M11 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M11 + this._Calc.Energy_Requirements_9a.Box219_m.M12 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M12 + this._Calc.Energy_Requirements_9a.Box219_m.M6 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M6 + this._Calc.Energy_Requirements_9a.Box219_m.M7 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M7 + this._Calc.Energy_Requirements_9a.Box219_m.M8 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M8 + this._Calc.Energy_Requirements_9a.Box219_m.M9 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M9;
                  fuelCosts10a.Box246 = num20 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price") * 0.01;
                  this._Calc.Actual_costs_10a.Box246 = num20 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price") * 0.01;
                }
              }
              else if (sapTableCode >= 201 && sapTableCode <= 204)
              {
                if (dwelling2.MainHeating.SAPTableCode >= 201 & dwelling2.MainHeating.SAPTableCode <= 204)
                {
                  fuelCosts10a.Box243 = 0.17;
                  this._Calc.Actual_costs_10a.Box243 = 0.17;
                }
                else
                {
                  fuelCosts10a.Box243 = 0.7;
                  this._Calc.Actual_costs_10a.Box243 = 0.7;
                }
              }
              else if (sapTableCode >= 521 && sapTableCode <= 524)
              {
                fuelCosts10a.Box243 = 0.17;
                this._Calc.Actual_costs_10a.Box243 = 0.17;
              }
              else
              {
                string electricityTariff = dwelling2.MainHeating.ElectricityTariff;
                if (Operators.CompareString(electricityTariff, "standard tariff", false) != 0)
                {
                  if (Operators.CompareString(electricityTariff, "10-hour tariff", false) != 0)
                  {
                    if (Operators.CompareString(electricityTariff, "7-hour tariff", false) != 0)
                    {
                      if (Operators.CompareString(electricityTariff, "24-hour tariff", false) == 0)
                      {
                        fuelCosts10a.Box243 = 1.0;
                        this._Calc.Actual_costs_10a.Box243 = fuelCosts10a.Box243;
                      }
                    }
                    else
                    {
                      if (Operators.CompareString(dwelling2.Water.Cylinder.Immersion, "Dual", false) == 0)
                      {
                        fuelCosts10a.Box243 = ((6.8 - 0.024 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) * this._Calc.Water_heating.Box42 + 14.0 - 0.07 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) / 100.0;
                        this._Calc.Actual_costs_10a.Box243 = fuelCosts10a.Box243;
                      }
                      else
                      {
                        fuelCosts10a.Box243 = ((14530.0 - 762.0 * this._Calc.Water_heating.Box42) / ((double) dwelling2.Water.Cylinder.Volume - (double) num17) - 80.0 + 10.0 * this._Calc.Water_heating.Box42) / 100.0;
                        this._Calc.Actual_costs_10a.Box243 = fuelCosts10a.Box243;
                      }
                      if (Operators.CompareString(dwelling2.MainHeating.InforSource, "Boiler Database", false) == 0 && dwelling2.MainHeating.SGroup.Contains("heat pumps"))
                      {
                        fuelCosts10a.Box243 = 0.7;
                        this._Calc.Actual_costs_10a.Box243 = fuelCosts10a.Box243;
                      }
                    }
                  }
                  else
                  {
                    if (Operators.CompareString(dwelling2.Water.Cylinder.Immersion, "Dual", false) == 0)
                    {
                      fuelCosts10a.Box243 = ((6.8 - 0.036 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) * this._Calc.Water_heating.Box42 + 14.0 - 0.105 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) / 100.0;
                      this._Calc.Actual_costs_10a.Box243 = fuelCosts10a.Box243;
                    }
                    else
                    {
                      fuelCosts10a.Box243 = ((14530.0 - 762.0 * this._Calc.Water_heating.Box42) / (1.5 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) - 80.0 + 10.0 * this._Calc.Water_heating.Box42) / 100.0;
                      this._Calc.Actual_costs_10a.Box243 = fuelCosts10a.Box243;
                    }
                    if (Operators.CompareString(dwelling2.MainHeating.InforSource, "Boiler Database", false) == 0 && dwelling2.MainHeating.SGroup.Contains("heat pumps"))
                    {
                      fuelCosts10a.Box243 = 0.7;
                      this._Calc.Actual_costs_10a.Box243 = fuelCosts10a.Box243;
                    }
                  }
                }
                else
                {
                  fuelCosts10a.Box243 = 1.0;
                  this._Calc.Actual_costs_10a.Box243 = 1.0;
                }
              }
              if (dwelling2.MainHeating.SAPTableCode != 192)
              {
                if (fuelCosts10a.Box243 < 0.0)
                  fuelCosts10a.Box243 = 0.0;
                if (fuelCosts10a.Box243 > 1.0)
                  fuelCosts10a.Box243 = 1.0;
                if (this._Calc.Actual_costs_10a.Box243 < 0.0)
                  this._Calc.Actual_costs_10a.Box243 = 0.0;
                if (this._Calc.Actual_costs_10a.Box243 > 1.0)
                  this._Calc.Actual_costs_10a.Box243 = 1.0;
                fuelCosts10a.Box244 = 1.0 - fuelCosts10a.Box243;
                this._Calc.Actual_costs_10a.Box244 = 1.0 - fuelCosts10a.Box243;
                fuelCosts10a.Box245P = this.FuelCost(this.GetElectricityType(0), 1, "Price");
                this._Calc.Actual_costs_10a.Box245P = this.FuelCost(this.GetElectricityType(0), 0, "Price");
                fuelCosts10a.Box245 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box243 * fuelCosts10a.Box245P * 0.01;
                this._Calc.Actual_costs_10a.Box245 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box243 * this.FuelCost(this.GetElectricityType(0), 0, "Price") * 0.01;
                fuelCosts10a.Box246P = this.FuelCost(this.GetElectricityType(1), 1, "Price");
                this._Calc.Actual_costs_10a.Box246P = this.FuelCost(this.GetElectricityType(1), 0, "Price");
                fuelCosts10a.Box246 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box244 * fuelCosts10a.Box246P * 0.01;
                this._Calc.Actual_costs_10a.Box246 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box244 * this.FuelCost(this.GetElectricityType(1), 0, "Price") * 0.01;
              }
            }
            else
            {
              fuelCosts10a.Box247P = this.FuelCost(dwelling2.MainHeating.ElectricityTariff, 1, "Price");
              fuelCosts10a.Box247 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box247P * 0.01;
              this._Calc.Actual_costs_10a.Box247 = this._Calc.Energy_Requirements_9a.Box219 * this.FuelCost(dwelling2.MainHeating.ElectricityTariff, 0, "Price") * 0.01;
              this._Calc.Actual_costs_10a.Box247P = this.FuelCost(dwelling2.MainHeating.ElectricityTariff, 0, "Price");
            }
          }
          else
          {
            fuelCosts10a.Box247P = this.FuelCost(dwelling2.MainHeating.Fuel, 1, "Price");
            fuelCosts10a.Box247 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box247P * 0.01;
            this._Calc.Actual_costs_10a.Box247 = this._Calc.Energy_Requirements_9a.Box219 * this.FuelCost(dwelling2.MainHeating.Fuel, 0, "Price") * 0.01;
            this._Calc.Actual_costs_10a.Box247P = this.FuelCost(dwelling2.MainHeating.Fuel, 0, "Price");
          }
          if (this._Calc.Water_heating.Box64Imm != 0.0)
          {
            string electricityTariff = dwelling2.MainHeating.ElectricityTariff;
            float num21;
            if (Operators.CompareString(electricityTariff, "standard tariff", false) != 0)
            {
              if (Operators.CompareString(electricityTariff, "10-hour tariff", false) != 0)
              {
                if (Operators.CompareString(electricityTariff, "7-hour tariff", false) != 0)
                {
                  if (Operators.CompareString(electricityTariff, "24-hour tariff", false) == 0)
                    num21 = 1f;
                }
                else
                  num21 = Operators.CompareString(dwelling2.Water.Cylinder.Immersion, "Dual", false) != 0 ? (float) (((14530.0 - 762.0 * this._Calc.Water_heating.Box42) / ((double) dwelling2.Water.Cylinder.Volume - (double) num17) - 80.0 + 10.0 * this._Calc.Water_heating.Box42) / 100.0) : (float) (((6.8 - 0.024 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) * this._Calc.Water_heating.Box42 + 14.0 - 0.07 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) / 100.0);
              }
              else
                num21 = Operators.CompareString(dwelling2.Water.Cylinder.Immersion, "Dual", false) != 0 ? (float) (((14530.0 - 762.0 * this._Calc.Water_heating.Box42) / (1.5 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) - 80.0 + 10.0 * this._Calc.Water_heating.Box42) / 100.0) : (float) (((6.8 - 0.036 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) * this._Calc.Water_heating.Box42 + 14.0 - 0.105 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) / 100.0);
            }
            else
              num21 = 1f;
            float num22 = 1f - num21;
            fuelCosts10a.Box247Imm = this._Calc.Water_heating.Box64Imm * ((double) num21 * this.FuelCost(this.GetElectricityType(0), 1, "Price") + (double) num22 * this.FuelCost(this.GetElectricityType(1), 1, "Price")) * 0.01;
            this._Calc.Actual_costs_10a.Box247Imm = this._Calc.Water_heating.Box64Imm * ((double) num21 * this.FuelCost(this.GetElectricityType(0), 0, "Price") + (double) num22 * this.FuelCost(this.GetElectricityType(1), 0, "Price")) * 0.01;
            if (this.OccupancyCalc)
            {
              fuelCosts10a.Box247Imm = 0.0;
              this._Calc.Actual_costs_10a.Box247Imm = 0.0;
            }
          }
          if (this.OccupancyCalc)
          {
            if (Microsoft.VisualBasic.Strings.LCase(dwelling2.MainHeating.Fuel).Contains("dual fuel"))
            {
              float fuelCost15 = (float) this.Get_FuelCost("house coal");
              if ((double) fuelCost15 != 0.0)
              {
                fuelCosts10a.Box247P = (double) fuelCost15;
                fuelCosts10a.Box247 = this._Calc.Energy_Requirements_9a.Box219_corrected * fuelCosts10a.Box247P * 0.01;
              }
              float fuelCost16 = (float) this.Get_FuelCost("wood logs");
              if ((double) fuelCost16 != 0.0)
              {
                fuelCosts10a.Box247P = (double) fuelCost16;
                Fuel_costs_10a2012 fuelCosts10a2012;
                double num23 = (fuelCosts10a2012 = fuelCosts10a).Box247 + this._Calc.Energy_Requirements_9a.Box219_Dual_corrected * fuelCosts10a.Box247P * 0.01;
                fuelCosts10a2012.Box247 = num23;
              }
              this._Calc.Actual_costs_10a.Box247 = fuelCosts10a.Box247;
            }
            else
            {
              float fuelCost = (float) this.Get_FuelCost(dwelling2.MainHeating.Fuel);
              if ((double) fuelCost != 0.0)
              {
                fuelCosts10a.Box247P = (double) fuelCost;
                fuelCosts10a.Box247 = this._Calc.Energy_Requirements_9a.Box219_corrected * fuelCosts10a.Box247P * 0.01;
                this._Calc.Actual_costs_10a.Box247 = fuelCosts10a.Box247;
              }
            }
            goto label_457;
          }
          else
            goto label_457;
        case 902:
          if (Operators.CompareString(dwelling2.SecHeating.Fuel, "Electricity", false) == 0)
          {
            string electricityTariff = dwelling2.MainHeating.ElectricityTariff;
            if (Operators.CompareString(electricityTariff, "standard tariff", false) != 0)
            {
              if (Operators.CompareString(electricityTariff, "10-hour tariff", false) != 0)
              {
                if (Operators.CompareString(electricityTariff, "7-hour tariff", false) != 0)
                {
                  if (Operators.CompareString(electricityTariff, "24-hour tariff", false) == 0)
                    fuelCosts10a.Box243 = 1.0;
                }
                else
                  fuelCosts10a.Box243 = Operators.CompareString(dwelling2.Water.Cylinder.Immersion, "Dual", false) != 0 ? ((14530.0 - 762.0 * this._Calc.Water_heating.Box42) / this._Calc.Water_heating.Box43 - 80.0 + 10.0 * this._Calc.Water_heating.Box42) / 100.0 : ((6.8 - 0.024 * this._Calc.Water_heating.Box43) * this._Calc.Water_heating.Box42 + 14.0 - 0.07 * this._Calc.Water_heating.Box43) / 100.0;
              }
              else
                fuelCosts10a.Box243 = Operators.CompareString(dwelling2.Water.Cylinder.Immersion, "Dual", false) != 0 ? ((14530.0 - 762.0 * this._Calc.Water_heating.Box42) / (1.5 * this._Calc.Water_heating.Box43) - 80.0 + 10.0 * this._Calc.Water_heating.Box42) / 100.0 : ((6.8 - 0.036 * this._Calc.Water_heating.Box43) * this._Calc.Water_heating.Box42 + 14.0 - 0.105 * this._Calc.Water_heating.Box43) / 100.0;
            }
            else
              fuelCosts10a.Box243 = 1.0;
            fuelCosts10a.Box244 = 1.0 - fuelCosts10a.Box243;
            this._Calc.Actual_costs_10a.Box243 = fuelCosts10a.Box243;
            this._Calc.Actual_costs_10a.Box244 = 1.0 - fuelCosts10a.Box243;
            fuelCosts10a.Box245P = this.FuelCost(this.GetElectricityType(0), 1, "Price");
            this._Calc.Actual_costs_10a.Box245P = this.FuelCost(this.GetElectricityType(1), 0, "Price");
            fuelCosts10a.Box245 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box243 * fuelCosts10a.Box245P * 0.01;
            this._Calc.Actual_costs_10a.Box245 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box243 * this.FuelCost(this.GetElectricityType(0), 0, "Price") * 0.01;
            fuelCosts10a.Box246P = this.FuelCost(this.GetElectricityType(1), 1, "Price");
            fuelCosts10a.Box246 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box244 * fuelCosts10a.Box246P * 0.01;
            this._Calc.Actual_costs_10a.Box246 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box244 * this.FuelCost(this.GetElectricityType(1), 0, "Price") * 0.01;
            this._Calc.Actual_costs_10a.Box246P = this.FuelCost(this.GetElectricityType(1), 0, "Price");
          }
          else
          {
            fuelCosts10a.Box247P = this.FuelCost(dwelling2.SecHeating.Fuel, 1, "Price");
            this._Calc.Actual_costs_10a.Box247P = this.FuelCost(dwelling2.SecHeating.Fuel, 0, "Price");
            fuelCosts10a.Box247 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box247P * 0.01;
            this._Calc.Actual_costs_10a.Box247 = this._Calc.Energy_Requirements_9a.Box219 * this.FuelCost(dwelling2.SecHeating.Fuel, 0, "Price") * 0.01;
          }
          if (this._Calc.Water_heating.Box64Imm != 0.0)
          {
            string electricityTariff = dwelling2.MainHeating.ElectricityTariff;
            float num24;
            if (Operators.CompareString(electricityTariff, "standard tariff", false) != 0)
            {
              if (Operators.CompareString(electricityTariff, "10-hour tariff", false) != 0)
              {
                if (Operators.CompareString(electricityTariff, "7-hour tariff", false) != 0)
                {
                  if (Operators.CompareString(electricityTariff, "24-hour tariff", false) == 0)
                    num24 = 1f;
                }
                else
                  num24 = Operators.CompareString(dwelling2.Water.Cylinder.Immersion, "Dual", false) != 0 ? (float) (((14530.0 - 762.0 * this._Calc.Water_heating.Box42) / ((double) dwelling2.Water.Cylinder.Volume - (double) num17) - 80.0 + 10.0 * this._Calc.Water_heating.Box42) / 100.0) : (float) (((6.8 - 0.024 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) * this._Calc.Water_heating.Box42 + 14.0 - 0.07 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) / 100.0);
              }
              else
                num24 = Operators.CompareString(dwelling2.Water.Cylinder.Immersion, "Dual", false) != 0 ? (float) (((14530.0 - 762.0 * this._Calc.Water_heating.Box42) / (1.5 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) - 80.0 + 10.0 * this._Calc.Water_heating.Box42) / 100.0) : (float) (((6.8 - 0.036 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) * this._Calc.Water_heating.Box42 + 14.0 - 0.105 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) / 100.0);
            }
            else
              num24 = 1f;
            float num25 = 1f - num24;
            fuelCosts10a.Box247Imm = this._Calc.Water_heating.Box64Imm * ((double) num24 * this.FuelCost(this.GetElectricityType(0), 1, "Price") + (double) num25 * this.FuelCost(this.GetElectricityType(1), 1, "Price")) * 0.01;
            this._Calc.Actual_costs_10a.Box247Imm = this._Calc.Water_heating.Box64Imm * ((double) num24 * this.FuelCost(this.GetElectricityType(0), 0, "Price") + (double) num25 * this.FuelCost(this.GetElectricityType(1), 0, "Price")) * 0.01;
            if (this.OccupancyCalc)
            {
              fuelCosts10a.Box247Imm = 0.0;
              this._Calc.Actual_costs_10a.Box247Imm = 0.0;
            }
          }
          if (this.OccupancyCalc && dwelling2.SecHeating.Fuel != null)
          {
            if (Microsoft.VisualBasic.Strings.LCase(dwelling2.SecHeating.Fuel).Contains("dual fuel"))
            {
              float fuelCost17 = (float) this.Get_FuelCost("house coal");
              if ((double) fuelCost17 != 0.0)
              {
                fuelCosts10a.Box247P = (double) fuelCost17;
                fuelCosts10a.Box247 = this._Calc.Energy_Requirements_9a.Box219_corrected * fuelCosts10a.Box247P * 0.01;
              }
              float fuelCost18 = (float) this.Get_FuelCost("wood logs");
              if ((double) fuelCost18 != 0.0)
              {
                fuelCosts10a.Box247P = (double) fuelCost18;
                Fuel_costs_10a2012 fuelCosts10a2012;
                double num26 = (fuelCosts10a2012 = fuelCosts10a).Box247 + this._Calc.Energy_Requirements_9a.Box219_Dual_corrected * fuelCosts10a.Box247P * 0.01;
                fuelCosts10a2012.Box247 = num26;
              }
              this._Calc.Actual_costs_10a.Box247 = fuelCosts10a.Box247;
            }
            else
            {
              float fuelCost = (float) this.Get_FuelCost(dwelling2.SecHeating.Fuel);
              if ((double) fuelCost != 0.0)
              {
                fuelCosts10a.Box247P = (double) fuelCost;
                fuelCosts10a.Box247 = this._Calc.Energy_Requirements_9a.Box219_corrected * fuelCosts10a.Box247P * 0.01;
                this._Calc.Actual_costs_10a.Box247 = fuelCosts10a.Box247;
              }
            }
            goto label_457;
          }
          else
            goto label_457;
        case 903:
          num18 = 1;
          break;
        case 914:
          if (Operators.CompareString(dwelling2.MainHeating2.Fuel, "Electricity", false) == 0)
          {
            if ((uint) Operators.CompareString(dwelling2.MainHeating.ElectricityTariff, "standard tariff", false) > 0U)
            {
              int sapTableCode = dwelling2.MainHeating2.SAPTableCode;
              if (sapTableCode == 192)
              {
                double num27 = this._Calc.Energy_Requirements_9a.Box219_m.M1 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M1 + this._Calc.Energy_Requirements_9a.Box219_m.M2 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M2 + this._Calc.Energy_Requirements_9a.Box219_m.M3 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M3 + this._Calc.Energy_Requirements_9a.Box219_m.M4 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M4 + this._Calc.Energy_Requirements_9a.Box219_m.M5 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M5 + this._Calc.Energy_Requirements_9a.Box219_m.M6 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M6 + this._Calc.Energy_Requirements_9a.Box219_m.M7 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M7 + this._Calc.Energy_Requirements_9a.Box219_m.M8 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M8 + this._Calc.Energy_Requirements_9a.Box219_m.M9 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M9 + this._Calc.Energy_Requirements_9a.Box219_m.M10 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M10 + this._Calc.Energy_Requirements_9a.Box219_m.M11 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M11 + this._Calc.Energy_Requirements_9a.Box219_m.M12 * this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M12;
                fuelCosts10a.Box245 = num27 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") * 0.01;
                this._Calc.Actual_costs_10a.Box245 = num27 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") * 0.01;
                double num28 = this._Calc.Energy_Requirements_9a.Box219_m.M1 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M1 + this._Calc.Energy_Requirements_9a.Box219_m.M2 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M2 + this._Calc.Energy_Requirements_9a.Box219_m.M3 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M3 + this._Calc.Energy_Requirements_9a.Box219_m.M4 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M4 + this._Calc.Energy_Requirements_9a.Box219_m.M5 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M5 + this._Calc.Energy_Requirements_9a.Box219_m.M6 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M6 + this._Calc.Energy_Requirements_9a.Box219_m.M7 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M7 + this._Calc.Energy_Requirements_9a.Box219_m.M8 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M8 + this._Calc.Energy_Requirements_9a.Box219_m.M9 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M9 + this._Calc.Energy_Requirements_9a.Box219_m.M10 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M10 + this._Calc.Energy_Requirements_9a.Box219_m.M11 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M11 + this._Calc.Energy_Requirements_9a.Box219_m.M12 * this._Calc.Energy_Requirements_9a.AppendixF.Flow.M12;
                fuelCosts10a.Box246 = num28 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price") * 0.01;
                this._Calc.Actual_costs_10a.Box246 = num28 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price") * 0.01;
              }
              else if (sapTableCode >= 201 && sapTableCode <= 204)
              {
                if (Operators.CompareString(dwelling2.Water.Cylinder.HPImmersion, "Yes", false) == 0)
                {
                  fuelCosts10a.Box243 = 0.17;
                  this._Calc.Actual_costs_10a.Box243 = 0.17;
                }
                else
                {
                  fuelCosts10a.Box243 = 0.7;
                  this._Calc.Actual_costs_10a.Box243 = 0.7;
                }
              }
              else
              {
                string electricityTariff = dwelling2.MainHeating.ElectricityTariff;
                if (Operators.CompareString(electricityTariff, "standard tariff", false) != 0)
                {
                  if (Operators.CompareString(electricityTariff, "10-hour tariff", false) != 0)
                  {
                    if (Operators.CompareString(electricityTariff, "7-hour tariff", false) != 0)
                    {
                      if (Operators.CompareString(electricityTariff, "24-hour tariff", false) == 0)
                      {
                        fuelCosts10a.Box243 = 1.0;
                        this._Calc.Actual_costs_10a.Box243 = fuelCosts10a.Box243;
                      }
                    }
                    else
                    {
                      if (dwelling2.WaterOnlyHeatPump)
                        dwelling2.Water.Cylinder.Immersion = "Dual";
                      if (Operators.CompareString(dwelling2.Water.Cylinder.Immersion, "Dual", false) == 0)
                      {
                        fuelCosts10a.Box243 = ((6.8 - 0.024 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) * this._Calc.Water_heating.Box42 + 14.0 - 0.07 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) / 100.0;
                        this._Calc.Actual_costs_10a.Box243 = fuelCosts10a.Box243;
                      }
                      else
                      {
                        fuelCosts10a.Box243 = ((14530.0 - 762.0 * this._Calc.Water_heating.Box42) / ((double) dwelling2.Water.Cylinder.Volume - (double) num17) - 80.0 + 10.0 * this._Calc.Water_heating.Box42) / 100.0;
                        this._Calc.Actual_costs_10a.Box243 = fuelCosts10a.Box243;
                      }
                      if (Operators.CompareString(dwelling2.MainHeating2.InforSource, "Boiler Database", false) == 0 && dwelling2.MainHeating2.SGroup.Contains("heat pumps") & !dwelling2.WaterOnlyHeatPump)
                      {
                        fuelCosts10a.Box243 = 0.7;
                        this._Calc.Actual_costs_10a.Box243 = fuelCosts10a.Box243;
                      }
                    }
                  }
                  else
                  {
                    if (dwelling2.WaterOnlyHeatPump)
                      dwelling2.Water.Cylinder.Immersion = "Dual";
                    if (Operators.CompareString(dwelling2.Water.Cylinder.Immersion, "Dual", false) == 0)
                    {
                      fuelCosts10a.Box243 = ((6.8 - 0.036 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) * this._Calc.Water_heating.Box42 + 14.0 - 0.105 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) / 100.0;
                      this._Calc.Actual_costs_10a.Box243 = fuelCosts10a.Box243;
                    }
                    else
                    {
                      fuelCosts10a.Box243 = ((14530.0 - 762.0 * this._Calc.Water_heating.Box42) / (1.5 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) - 80.0 + 10.0 * this._Calc.Water_heating.Box42) / 100.0;
                      this._Calc.Actual_costs_10a.Box243 = fuelCosts10a.Box243;
                    }
                    if (Operators.CompareString(dwelling2.MainHeating2.InforSource, "Boiler Database", false) == 0 && dwelling2.MainHeating2.SGroup.Contains("heat pumps") & !dwelling2.WaterOnlyHeatPump && dwelling2.MainHeating2.SGroup.Contains("heat pumps"))
                    {
                      fuelCosts10a.Box243 = 0.7;
                      this._Calc.Actual_costs_10a.Box243 = fuelCosts10a.Box243;
                    }
                  }
                }
                else
                {
                  fuelCosts10a.Box243 = 1.0;
                  this._Calc.Actual_costs_10a.Box243 = 1.0;
                }
              }
              if (dwelling2.MainHeating2.SAPTableCode != 192)
              {
                if (fuelCosts10a.Box243 < 0.0)
                  fuelCosts10a.Box243 = 0.0;
                if (fuelCosts10a.Box243 > 1.0)
                  fuelCosts10a.Box243 = 1.0;
                if (this._Calc.Actual_costs_10a.Box243 < 0.0)
                  this._Calc.Actual_costs_10a.Box243 = 0.0;
                if (this._Calc.Actual_costs_10a.Box243 > 1.0)
                  this._Calc.Actual_costs_10a.Box243 = 1.0;
                fuelCosts10a.Box244 = 1.0 - fuelCosts10a.Box243;
                this._Calc.Actual_costs_10a.Box244 = 1.0 - fuelCosts10a.Box243;
                fuelCosts10a.Box245P = this.FuelCost(this.GetElectricityType(0), 1, "Price");
                this._Calc.Actual_costs_10a.Box245P = this.FuelCost(this.GetElectricityType(0), 0, "Price");
                fuelCosts10a.Box245 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box243 * fuelCosts10a.Box245P * 0.01;
                this._Calc.Actual_costs_10a.Box245 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box243 * this.FuelCost(this.GetElectricityType(0), 0, "Price") * 0.01;
                fuelCosts10a.Box246P = this.FuelCost(this.GetElectricityType(1), 1, "Price");
                this._Calc.Actual_costs_10a.Box246P = this.FuelCost(this.GetElectricityType(1), 0, "Price");
                fuelCosts10a.Box246 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box244 * fuelCosts10a.Box246P * 0.01;
                this._Calc.Actual_costs_10a.Box246 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box244 * this.FuelCost(this.GetElectricityType(1), 0, "Price") * 0.01;
              }
            }
            else
            {
              fuelCosts10a.Box247P = this.FuelCost(dwelling2.MainHeating.ElectricityTariff, 1, "Price");
              this._Calc.Actual_costs_10a.Box247P = this.FuelCost(dwelling2.MainHeating.ElectricityTariff, 0, "Price");
              fuelCosts10a.Box247 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box247P * 0.01;
              this._Calc.Actual_costs_10a.Box247 = this._Calc.Energy_Requirements_9a.Box219 * this.FuelCost(dwelling2.MainHeating.ElectricityTariff, 0, "Price") * 0.01;
            }
          }
          else
          {
            fuelCosts10a.Box247P = this.FuelCost(dwelling2.MainHeating2.Fuel, 1, "Price");
            this._Calc.Actual_costs_10a.Box247P = this.FuelCost(dwelling2.MainHeating2.Fuel, 0, "Price");
            fuelCosts10a.Box247 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box247P * 0.01;
            this._Calc.Actual_costs_10a.Box247 = this._Calc.Energy_Requirements_9a.Box219 * this.FuelCost(dwelling2.MainHeating2.Fuel, 0, "Price") * 0.01;
          }
          if (this._Calc.Water_heating.Box64Imm != 0.0)
          {
            string electricityTariff = dwelling2.MainHeating.ElectricityTariff;
            float num29;
            if (Operators.CompareString(electricityTariff, "standard tariff", false) != 0)
            {
              if (Operators.CompareString(electricityTariff, "10-hour tariff", false) != 0)
              {
                if (Operators.CompareString(electricityTariff, "7-hour tariff", false) != 0)
                {
                  if (Operators.CompareString(electricityTariff, "24-hour tariff", false) == 0)
                    num29 = 1f;
                }
                else
                  num29 = Operators.CompareString(dwelling2.Water.Cylinder.Immersion, "Dual", false) != 0 ? (float) (((14530.0 - 762.0 * this._Calc.Water_heating.Box42) / ((double) dwelling2.Water.Cylinder.Volume - (double) num17) - 80.0 + 10.0 * this._Calc.Water_heating.Box42) / 100.0) : (float) (((6.8 - 0.024 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) * this._Calc.Water_heating.Box42 + 14.0 - 0.07 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) / 100.0);
              }
              else
                num29 = Operators.CompareString(dwelling2.Water.Cylinder.Immersion, "Dual", false) != 0 ? (float) (((14530.0 - 762.0 * this._Calc.Water_heating.Box42) / (1.5 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) - 80.0 + 10.0 * this._Calc.Water_heating.Box42) / 100.0) : (float) (((6.8 - 0.036 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) * this._Calc.Water_heating.Box42 + 14.0 - 0.105 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) / 100.0);
            }
            else
              num29 = 1f;
            float num30 = 1f - num29;
            fuelCosts10a.Box247Imm = this._Calc.Water_heating.Box64Imm * ((double) num29 * this.FuelCost(this.GetElectricityType2(0), 1, "Price") + (double) num30 * this.FuelCost(this.GetElectricityType2(0), 1, "Price")) * 0.01;
            this._Calc.Actual_costs_10a.Box247Imm = this._Calc.Water_heating.Box64Imm * ((double) num29 * this.FuelCost(this.GetElectricityType2(0), 0, "Price") + (double) num30 * this.FuelCost(this.GetElectricityType2(0), 0, "Price")) * 0.01;
            if (this.OccupancyCalc)
            {
              fuelCosts10a.Box247Imm = 0.0;
              this._Calc.Actual_costs_10a.Box247Imm = 0.0;
            }
          }
          if (this.OccupancyCalc && dwelling2.MainHeating2.Fuel != null)
          {
            if (Microsoft.VisualBasic.Strings.LCase(dwelling2.MainHeating2.Fuel).Contains("dual fuel"))
            {
              float fuelCost19 = (float) this.Get_FuelCost("house coal");
              if ((double) fuelCost19 != 0.0)
              {
                fuelCosts10a.Box247P = (double) fuelCost19;
                fuelCosts10a.Box247 = this._Calc.Energy_Requirements_9a.Box219_corrected * fuelCosts10a.Box247P * 0.01;
              }
              float fuelCost20 = (float) this.Get_FuelCost("wood logs");
              if ((double) fuelCost20 != 0.0)
              {
                fuelCosts10a.Box247P = (double) fuelCost20;
                Fuel_costs_10a2012 fuelCosts10a2012;
                double num31 = (fuelCosts10a2012 = fuelCosts10a).Box247 + this._Calc.Energy_Requirements_9a.Box219_Dual_corrected * fuelCosts10a.Box247P * 0.01;
                fuelCosts10a2012.Box247 = num31;
              }
              this._Calc.Actual_costs_10a.Box247 = fuelCosts10a.Box247;
            }
            else
            {
              float fuelCost = (float) this.Get_FuelCost(dwelling2.MainHeating2.Fuel);
              if ((double) fuelCost != 0.0)
              {
                fuelCosts10a.Box247P = (double) fuelCost;
                fuelCosts10a.Box247 = this._Calc.Energy_Requirements_9a.Box219_corrected * fuelCosts10a.Box247P * 0.01;
                this._Calc.Actual_costs_10a.Box247 = fuelCosts10a.Box247;
              }
            }
            goto label_457;
          }
          else
            goto label_457;
        default:
          num18 = systemRef1 == 999 ? 1 : 0;
          break;
      }
      if (num18 != 0)
      {
        string electricityTariff = dwelling2.MainHeating.ElectricityTariff;
        if (Operators.CompareString(electricityTariff, "standard tariff", false) != 0)
        {
          if (Operators.CompareString(electricityTariff, "10-hour tariff", false) != 0)
          {
            if (Operators.CompareString(electricityTariff, "7-hour tariff", false) != 0)
            {
              if (Operators.CompareString(electricityTariff, "24-hour tariff", false) == 0)
                fuelCosts10a.Box243 = 1.0;
            }
            else
              fuelCosts10a.Box243 = Operators.CompareString(dwelling2.Water.Cylinder.Immersion, "Dual", false) != 0 ? ((14530.0 - 762.0 * this._Calc.Water_heating.Box42) / ((double) dwelling2.Water.Cylinder.Volume - (double) num17) - 80.0 + 10.0 * this._Calc.Water_heating.Box42) / 100.0 : ((6.8 - 0.024 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) * this._Calc.Water_heating.Box42 + 14.0 - 0.07 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) / 100.0;
          }
          else
            fuelCosts10a.Box243 = Operators.CompareString(dwelling2.Water.Cylinder.Immersion, "Dual", false) != 0 ? ((14530.0 - 762.0 * this._Calc.Water_heating.Box42) / (1.5 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) - 80.0 + 10.0 * this._Calc.Water_heating.Box42) / 100.0 : ((6.8 - 0.036 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) * this._Calc.Water_heating.Box42 + 14.0 - 0.105 * ((double) dwelling2.Water.Cylinder.Volume - (double) num17)) / 100.0;
        }
        else
          fuelCosts10a.Box243 = 1.0;
        if (fuelCosts10a.Box243 < 0.0)
          fuelCosts10a.Box243 = 0.0;
        if (fuelCosts10a.Box243 > 1.0)
          fuelCosts10a.Box243 = 1.0;
        fuelCosts10a.Box244 = 1.0 - fuelCosts10a.Box243;
        this._Calc.Actual_costs_10a.Box243 = fuelCosts10a.Box243;
        this._Calc.Actual_costs_10a.Box244 = 1.0 - fuelCosts10a.Box243;
        fuelCosts10a.Box245P = this.FuelCost(this.GetElectricityType(0), 1, "Price");
        this._Calc.Actual_costs_10a.Box245P = this.FuelCost(this.GetElectricityType(0), 0, "Price");
        fuelCosts10a.Box245 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box243 * fuelCosts10a.Box245P * 0.01;
        this._Calc.Actual_costs_10a.Box245 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box243 * this.FuelCost(this.GetElectricityType(0), 0, "Price") * 0.01;
        fuelCosts10a.Box246P = this.FuelCost(this.GetElectricityType(1), 1, "Price");
        fuelCosts10a.Box246 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box244 * fuelCosts10a.Box246P * 0.01;
        this._Calc.Actual_costs_10a.Box246 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box244 * this.FuelCost(this.GetElectricityType(1), 0, "Price") * 0.01;
        this._Calc.Actual_costs_10a.Box246P = this.FuelCost(this.GetElectricityType(1), 0, "Price");
        if (this.OccupancyCalc)
        {
          float fuelCost = (float) this.Get_FuelCost("electricity");
          if ((double) fuelCost != 0.0)
          {
            fuelCosts10a.Box245P = (double) fuelCost;
            this._Calc.Actual_costs_10a.Box245P = (double) fuelCost;
            fuelCosts10a.Box246P = (double) fuelCost;
            fuelCosts10a.Box245 = this._Calc.Energy_Requirements_9a.Box219_corrected * fuelCosts10a.Box243 * fuelCosts10a.Box245P * 0.01;
            fuelCosts10a.Box246 = this._Calc.Energy_Requirements_9a.Box219_corrected * fuelCosts10a.Box244 * fuelCosts10a.Box246P * 0.01;
            this._Calc.Actual_costs_10a.Box245 = fuelCosts10a.Box245;
            this._Calc.Actual_costs_10a.Box246 = fuelCosts10a.Box246;
          }
        }
      }
      else if (systemRef1 == 909)
      {
        string electricityTariff = dwelling2.MainHeating.ElectricityTariff;
        if (Operators.CompareString(electricityTariff, "standard tariff", false) != 0 && Operators.CompareString(electricityTariff, "24-hour tariff", false) != 0)
        {
          if (Operators.CompareString(electricityTariff, "10-hour tariff", false) != 0)
          {
            if (Operators.CompareString(electricityTariff, "7-hour tariff", false) == 0)
            {
              fuelCosts10a.Box247P = 0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price");
              this._Calc.Actual_costs_10a.Box247P = 0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price");
              fuelCosts10a.Box247 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box247P * 0.01;
              this._Calc.Actual_costs_10a.Box247 = this._Calc.Energy_Requirements_9a.Box219 * (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price")) * 0.01;
            }
          }
          else
          {
            fuelCosts10a.Box247P = 0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price");
            this._Calc.Actual_costs_10a.Box247P = 0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price");
            fuelCosts10a.Box247 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box247P * 0.01;
            this._Calc.Actual_costs_10a.Box247 = this._Calc.Energy_Requirements_9a.Box219 * (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price")) * 0.01;
          }
        }
        else
        {
          fuelCosts10a.Box247P = this.FuelCost(this.GetElectricityType(0), 1, "Price");
          this._Calc.Actual_costs_10a.Box247P = this.FuelCost(this.GetElectricityType(0), 0, "Price");
          fuelCosts10a.Box247 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box247P * 0.01;
          this._Calc.Actual_costs_10a.Box247 = this._Calc.Energy_Requirements_9a.Box219 * this.FuelCost(this.GetElectricityType(0), 0, "Price") * 0.01;
        }
        if (this.OccupancyCalc)
        {
          float fuelCost = (float) this.Get_FuelCost("electricity");
          if ((double) fuelCost != 0.0)
          {
            fuelCosts10a.Box247P = (double) fuelCost;
            fuelCosts10a.Box247 = this._Calc.Energy_Requirements_9a.Box219_corrected * fuelCosts10a.Box247P * 0.01;
            this._Calc.Actual_costs_10a.Box247 = fuelCosts10a.Box247;
            this._Calc.Actual_costs_10a.Box247P = (double) fuelCost;
          }
        }
      }
      else if (systemRef1 == 908 || systemRef1 == 907 || systemRef1 >= 911 && systemRef1 <= 913 || systemRef1 >= 921 && systemRef1 <= 931)
      {
        fuelCosts10a.Box247P = this.FuelCost(dwelling2.Water.Fuel, 1, "Price");
        fuelCosts10a.Box247 = this._Calc.Energy_Requirements_9a.Box219 * fuelCosts10a.Box247P * 0.01;
        this._Calc.Actual_costs_10a.Box247 = this._Calc.Energy_Requirements_9a.Box219 * this.FuelCost(dwelling2.Water.Fuel, 0, "Price") * 0.01;
        if (this.OccupancyCalc)
        {
          float fuelCost = (float) this.Get_FuelCost(dwelling2.Water.Fuel);
          if ((double) fuelCost != 0.0)
          {
            fuelCosts10a.Box247P = (double) fuelCost;
            fuelCosts10a.Box247 = this._Calc.Energy_Requirements_9a.Box219_corrected * fuelCosts10a.Box247P * 0.01;
            this._Calc.Actual_costs_10a.Box247 = fuelCosts10a.Box247;
            this._Calc.Actual_costs_10a.Box247P = (double) fuelCost;
          }
        }
      }
      else if (systemRef1 >= 950 && systemRef1 <= 952)
      {
        this.NetworkWater = SAP_Module.PCDFData.CommunitySchemes.Where<PCDF.CommunityScheme>((Func<PCDF.CommunityScheme, bool>) (b => b.ID.Equals(this._House.Water.HWSComm.SystemRef))).SingleOrDefault<PCDF.CommunityScheme>();
        this.HeatSourcesWater = SAP_Module.PCDFData.CommunitySchemes_Sub.Where<PCDF.CommunityScheme_Sub>((Func<PCDF.CommunityScheme_Sub, bool>) (b => b.ID.Equals(this._House.Water.HWSComm.SystemRef))).ToList<PCDF.CommunityScheme_Sub>();
        if (dwelling2.Water.SystemRef == 951)
        {
          this._Calc.Fuel_costs_10b.Box342aP = this.FuelCost("heat from CHP", 1, "Price");
          this._Calc.Fuel_costs_10b.Box342a = this._Calc.Fuel_costs_10b.Box342aP * this._Calc.Energy_Requirements_9b.Box310a * 0.01;
          this._Calc.Actual_costs_10b.Box342aP = this.FuelCost("heat from CHP", 0, "Price");
          this._Calc.Actual_costs_10b.Box342a = this._Calc.Actual_costs_10b.Box342aP * this._Calc.Energy_Requirements_9b.Box310a * 0.01;
        }
        else
        {
          bool flag = false;
          if (this._House.Water.HWSComm.FromDatabase && this.HeatSourcesWater[0].CommunityFuel.Equals("99"))
          {
            flag = true;
            this._Calc.Fuel_costs_10b.Box342aP = this.FuelCost("heat from boilers – mains gas", 1, "Price");
            this._Calc.Fuel_costs_10b.Box342a = this._Calc.Fuel_costs_10b.Box342aP * this._Calc.Energy_Requirements_9b.Box310a * 0.01;
            this._Calc.Actual_costs_10b.Box342aP = this.FuelCost("heat from boilers – mains gas", 0, "Price");
            this._Calc.Actual_costs_10b.Box342a = this._Calc.Actual_costs_10b.Box342aP * this._Calc.Energy_Requirements_9b.Box310aW * 0.01;
          }
          if (!flag)
          {
            this._Calc.Fuel_costs_10b.Box342aP = this.FuelCost(dwelling2.Water.Fuel, 1, "Price");
            this._Calc.Fuel_costs_10b.Box342a = this._Calc.Fuel_costs_10b.Box342aP * this._Calc.Energy_Requirements_9b.Box310a * 0.01;
            this._Calc.Actual_costs_10b.Box342aP = this.FuelCost(dwelling2.Water.Fuel, 0, "Price");
            this._Calc.Actual_costs_10b.Box342a = this._Calc.Actual_costs_10b.Box342aP * this._Calc.Energy_Requirements_9b.Box310a * 0.01;
          }
        }
        if (dwelling2.Water.HWSComm.NoOfAdditionalHeatSources > 0)
        {
          bool flag = false;
          if (this._House.Water.HWSComm.FromDatabase && this.HeatSourcesWater[1].CommunityFuel.Equals("99"))
          {
            flag = true;
            this._Calc.Fuel_costs_10b.Box342bP = this.FuelCost("heat from boilers – mains gas", 1, "Price");
            this._Calc.Fuel_costs_10b.Box342b = this._Calc.Fuel_costs_10b.Box342bP * this._Calc.Energy_Requirements_9b.Box310b * 0.01;
            this._Calc.Actual_costs_10b.Box342bP = this.FuelCost("heat from boilers – mains gas", 0, "Price");
            this._Calc.Actual_costs_10b.Box342b = this._Calc.Actual_costs_10b.Box342bP * this._Calc.Energy_Requirements_9b.Box310b * 0.01;
          }
          if (!flag)
          {
            this._Calc.Fuel_costs_10b.Box342bP = this.FuelCost(dwelling2.Water.HWSComm.HeatSource1.Fuel, 1, "Price");
            this._Calc.Fuel_costs_10b.Box342b = this._Calc.Fuel_costs_10b.Box342bP * this._Calc.Energy_Requirements_9b.Box310b * 0.01;
            this._Calc.Actual_costs_10b.Box342bP = this.FuelCost(dwelling2.Water.HWSComm.HeatSource1.Fuel, 0, "Price");
            this._Calc.Actual_costs_10b.Box342b = this._Calc.Actual_costs_10b.Box342bP * this._Calc.Energy_Requirements_9b.Box310b * 0.01;
          }
        }
        if (dwelling2.Water.HWSComm.NoOfAdditionalHeatSources > 1)
        {
          bool flag = false;
          if (this._House.Water.HWSComm.FromDatabase && this.HeatSourcesWater[2].CommunityFuel.Equals("99"))
          {
            flag = true;
            this._Calc.Fuel_costs_10b.Box342cP = this.FuelCost("heat from boilers – mains gas", 1, "Price");
            this._Calc.Fuel_costs_10b.Box342c = this._Calc.Fuel_costs_10b.Box342cP * this._Calc.Energy_Requirements_9b.Box310c * 0.01;
            this._Calc.Actual_costs_10b.Box342cP = this.FuelCost("heat from boilers – mains gas", 0, "Price");
            this._Calc.Actual_costs_10b.Box342c = this._Calc.Actual_costs_10b.Box342cP * this._Calc.Energy_Requirements_9b.Box310c * 0.01;
          }
          if (!flag)
          {
            this._Calc.Fuel_costs_10b.Box342cP = this.FuelCost(dwelling2.Water.HWSComm.HeatSource2.Fuel, 1, "Price");
            this._Calc.Fuel_costs_10b.Box342c = this._Calc.Fuel_costs_10b.Box342cP * this._Calc.Energy_Requirements_9b.Box310c * 0.01;
            this._Calc.Actual_costs_10b.Box342cP = this.FuelCost(dwelling2.Water.HWSComm.HeatSource2.Fuel, 0, "Price");
            this._Calc.Actual_costs_10b.Box342c = this._Calc.Actual_costs_10b.Box342cP * this._Calc.Energy_Requirements_9b.Box310c * 0.01;
          }
        }
        if (dwelling2.Water.HWSComm.NoOfAdditionalHeatSources > 2)
        {
          bool flag = false;
          if (this._House.Water.HWSComm.FromDatabase && this.HeatSourcesWater[3].CommunityFuel.Equals("99"))
          {
            flag = true;
            this._Calc.Fuel_costs_10b.Box342dP = this.FuelCost("heat from boilers – mains gas", 1, "Price");
            this._Calc.Fuel_costs_10b.Box342d = this._Calc.Fuel_costs_10b.Box342dP * this._Calc.Energy_Requirements_9b.Box310d * 0.01;
            this._Calc.Actual_costs_10b.Box342dP = this.FuelCost("heat from boilers – mains gas", 0, "Price");
            this._Calc.Actual_costs_10b.Box342d = this._Calc.Actual_costs_10b.Box342dP * this._Calc.Energy_Requirements_9b.Box310d * 0.01;
          }
          if (!flag)
          {
            this._Calc.Fuel_costs_10b.Box342dP = this.FuelCost(dwelling2.Water.HWSComm.HeatSource3.Fuel, 1, "Price");
            this._Calc.Fuel_costs_10b.Box342d = this._Calc.Fuel_costs_10b.Box342dP * this._Calc.Energy_Requirements_9b.Box310d * 0.01;
            this._Calc.Actual_costs_10b.Box342dP = this.FuelCost(dwelling2.Water.HWSComm.HeatSource3.Fuel, 0, "Price");
            this._Calc.Actual_costs_10b.Box342d = this._Calc.Actual_costs_10b.Box342dP * this._Calc.Energy_Requirements_9b.Box310d * 0.01;
          }
        }
        if (dwelling2.Water.HWSComm.NoOfAdditionalHeatSources > 3)
        {
          bool flag = false;
          if (this._House.Water.HWSComm.FromDatabase && this.HeatSourcesWater[4].CommunityFuel.Equals("99"))
          {
            flag = true;
            this._Calc.Fuel_costs_10b.Box342eP = this.FuelCost("heat from boilers – mains gas", 1, "Price");
            this._Calc.Fuel_costs_10b.Box342e = this._Calc.Fuel_costs_10b.Box342eP * this._Calc.Energy_Requirements_9b.Box310e * 0.01;
            this._Calc.Actual_costs_10b.Box342eP = this.FuelCost("heat from boilers – mains gas", 0, "Price");
            this._Calc.Actual_costs_10b.Box342e = this._Calc.Actual_costs_10b.Box342eP * this._Calc.Energy_Requirements_9b.Box310e * 0.01;
          }
          if (!flag)
          {
            this._Calc.Fuel_costs_10b.Box342eP = this.FuelCost(dwelling2.Water.HWSComm.HeatSource4.Fuel, 1, "Price");
            this._Calc.Fuel_costs_10b.Box342e = this._Calc.Fuel_costs_10b.Box342eP * this._Calc.Energy_Requirements_9b.Box310e * 0.01;
            this._Calc.Actual_costs_10b.Box342eP = this.FuelCost(dwelling2.Water.HWSComm.HeatSource4.Fuel, 0, "Price");
            this._Calc.Actual_costs_10b.Box342e = this._Calc.Actual_costs_10b.Box342eP * this._Calc.Energy_Requirements_9b.Box310e * 0.01;
          }
        }
      }
label_457:
      if (this.OccupancyCalc)
      {
        if (this._Calc.Energy_Requirements_9a.Box219Imm_High_corrected != 0.0)
        {
          float fuelCost21 = (float) this.Get_FuelCost("low");
          if ((double) fuelCost21 != 0.0)
          {
            fuelCosts10a.Box246 = this._Calc.Energy_Requirements_9a.Box219Imm_corrected * (double) fuelCost21 * 0.01;
            this._Calc.Actual_costs_10a.Box246 = fuelCosts10a.Box246;
          }
          float fuelCost22 = (float) this.Get_FuelCost("high");
          if ((double) fuelCost22 != 0.0)
          {
            fuelCosts10a.Box245 = this._Calc.Energy_Requirements_9a.Box219Imm_High_corrected * (double) fuelCost22 * 0.01;
            this._Calc.Actual_costs_10a.Box245 = fuelCosts10a.Box245;
          }
        }
        else
        {
          float fuelCost = (float) this.Get_FuelCost("electricity");
          if ((double) fuelCost != 0.0)
          {
            fuelCosts10a.Box246P = (double) fuelCost;
            fuelCosts10a.Box245 = 0.0;
            this._Calc.Actual_costs_10a.Box245 = 0.0;
            fuelCosts10a.Box246 = this._Calc.Energy_Requirements_9a.Box219Imm_corrected * fuelCosts10a.Box246P * 0.01;
            this._Calc.Actual_costs_10a.Box246 = fuelCosts10a.Box246;
            this._Calc.Actual_costs_10a.Box246P = (double) fuelCost;
          }
        }
        if (Operators.CompareString(Microsoft.VisualBasic.Strings.LCase(this._House.Water.Fuel), "electricity", false) == 0 & this._House.Water.SystemRef != 901 & this._House.Water.SystemRef != 902 & this._House.Water.SystemRef != 914)
        {
          if (this._Calc.Energy_Requirements_9a.Box219_High_corrected != 0.0)
          {
            float fuelCost23 = (float) this.Get_FuelCost("low");
            if ((double) fuelCost23 != 0.0)
            {
              fuelCosts10a.Box246 = this._Calc.Energy_Requirements_9a.Box219_corrected * (double) fuelCost23 * 0.01;
              this._Calc.Actual_costs_10a.Box246 = fuelCosts10a.Box246;
              this._Calc.Actual_costs_10a.Box246P = (double) fuelCost23;
            }
            float fuelCost24 = (float) this.Get_FuelCost("high");
            if ((double) fuelCost24 != 0.0)
            {
              fuelCosts10a.Box245 = this._Calc.Energy_Requirements_9a.Box219_High_corrected * (double) fuelCost24 * 0.01;
              this._Calc.Actual_costs_10a.Box245 = fuelCosts10a.Box245;
            }
          }
          else
          {
            float fuelCost = (float) this.Get_FuelCost("electricity");
            if ((double) fuelCost != 0.0)
            {
              fuelCosts10a.Box246P = (double) fuelCost;
              this._Calc.Actual_costs_10a.Box246P = (double) fuelCost;
              fuelCosts10a.Box245 = 0.0;
              this._Calc.Actual_costs_10a.Box245 = 0.0;
              fuelCosts10a.Box246 = this._Calc.Energy_Requirements_9a.Box219_corrected * fuelCosts10a.Box246P * 0.01;
              this._Calc.Actual_costs_10a.Box246 = fuelCosts10a.Box246;
            }
          }
        }
        if (this._Calc.Energy_Requirements_9a.Box219a_High_corrected != 0.0)
        {
          float fuelCost25 = (float) this.Get_FuelCost("low");
          if ((double) fuelCost25 != 0.0)
          {
            fuelCosts10a.Box247a = this._Calc.Energy_Requirements_9a.Box219a_corrected * (double) fuelCost25 * 0.01;
            this._Calc.Actual_costs_10a.Box247a = fuelCosts10a.Box247a;
          }
          float fuelCost26 = (float) this.Get_FuelCost("high");
          if ((double) fuelCost26 != 0.0)
          {
            Fuel_costs_10a2012 fuelCosts10a2012;
            double num32 = (fuelCosts10a2012 = fuelCosts10a).Box247a + this._Calc.Energy_Requirements_9a.Box219a_High_corrected * (double) fuelCost26 * 0.01;
            fuelCosts10a2012.Box247a = num32;
            this._Calc.Actual_costs_10a.Box247a = fuelCosts10a.Box247a;
          }
        }
        else
        {
          float fuelCost = (float) this.Get_FuelCost("electricity domestic");
          if ((double) fuelCost != 0.0)
          {
            fuelCosts10a.Box247a = this._Calc.Energy_Requirements_9a.Box219a_corrected * (double) fuelCost * 0.01;
            this._Calc.Actual_costs_10a.Box247a = fuelCosts10a.Box247a;
          }
          else
          {
            float num33 = (float) this.FuelCost(this.GetElectricityType(1), 0, "Price");
            fuelCosts10a.Box247a = this._Calc.Energy_Requirements_9a.Box219a_corrected * (double) num33 * 0.01;
            this._Calc.Actual_costs_10a.Box247a = fuelCosts10a.Box247a;
          }
        }
      }
      if (this._House.Cooling.Include)
      {
        if (Operators.CompareString(this._House.MainHeating.ElectricityTariff, "10-hour tariff", false) == 0)
        {
          fuelCosts10a.Box248P = 0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price");
          fuelCosts10a.Box248 = this._Calc.Energy_Requirements_9a.Box221 * fuelCosts10a.Box248P * 0.01;
          this._Calc.Actual_costs_10a.Box248 = this._Calc.Energy_Requirements_9a.Box221 * (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price")) * 0.01;
        }
        else if (Operators.CompareString(this._House.MainHeating.ElectricityTariff, "7-hour tariff", false) == 0)
        {
          fuelCosts10a.Box248P = 0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price");
          fuelCosts10a.Box248 = this._Calc.Energy_Requirements_9a.Box221 * fuelCosts10a.Box248P * 0.01;
          this._Calc.Actual_costs_10a.Box248 = this._Calc.Energy_Requirements_9a.Box221 * (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price")) * 0.01;
        }
        else
        {
          fuelCosts10a.Box248P = this.FuelCost(this.GetElectricityType(0), 1, "Price");
          fuelCosts10a.Box248 = this._Calc.Energy_Requirements_9a.Box221 * fuelCosts10a.Box248P * 0.01;
          this._Calc.Actual_costs_10a.Box248 = this._Calc.Energy_Requirements_9a.Box221 * this.FuelCost(this.GetElectricityType(0), 0, "Price") * 0.01;
        }
        if (this.OccupancyCalc)
        {
          float fuelCost = (float) this.Get_FuelCost("electricity domestic");
          if ((double) fuelCost != 0.0)
          {
            fuelCosts10a.Box248P = (double) fuelCost;
            fuelCosts10a.Box248 = this._Calc.Energy_Requirements_9a.Box221 * fuelCosts10a.Box248P * 0.01;
            this._Calc.Actual_costs_10a.Box248 = fuelCosts10a.Box248;
          }
        }
      }
      if (this._House.MainHeating.SAPTableCode == 192)
      {
        if (str2.Contains("18"))
        {
          fuelCosts10a.Box249P = this.FuelCost(this.GetElectricityType(0), 1, "Price");
          fuelCosts10a.Box249 = this._Calc.Energy_Requirements_9a.Box231 * fuelCosts10a.Box249P * 0.01;
          this._Calc.Actual_costs_10a.Box249 = this._Calc.Energy_Requirements_9a.Box231 * this.FuelCost(this.GetElectricityType(0), 0, "Price") * 0.01;
          fuelCosts10a.Box250P = this.FuelCost(this.GetElectricityType(0), 1, "Price");
          Fuel_costs_10a2012 fuelCosts10a2012;
          double num34 = (fuelCosts10a2012 = fuelCosts10a).Box250 + this._Calc.Internal_gains.AppendixL.EL_Final * fuelCosts10a.Box250P * 0.01;
          fuelCosts10a2012.Box250 = num34;
          this._Calc.Actual_costs_10a.Box250 = this._Calc.Internal_gains.AppendixL.EL_Final * this.FuelCost(this.GetElectricityType(0), 0, "Price") * 0.01;
        }
        else
        {
          float num35 = (float) (0.58 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.42 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
          Fuel_costs_10a2012 fuelCosts10a2012_1;
          double num36 = (fuelCosts10a2012_1 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230a * (double) num35 * 0.01;
          fuelCosts10a2012_1.Box249 = num36;
          this._Calc.Actual_costs_10a.Box249 = Conversions.ToDouble(Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230a, (object) (0.58 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.42 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"))), (object) 0.01));
          float num37 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
          Fuel_costs_10a2012 fuelCosts10a2012_2;
          double num38 = (fuelCosts10a2012_2 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230b * (double) num37 * 0.01;
          fuelCosts10a2012_2.Box249 = num38;
          object Right1 = (object) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
          Actual_costs_10a2012 actualCosts10a1;
          double num39 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a1 = this._Calc.Actual_costs_10a).Box249, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230b, Right1), (object) 0.01)));
          actualCosts10a1.Box249 = num39;
          float num40 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
          Fuel_costs_10a2012 fuelCosts10a2012_3;
          double num41 = (fuelCosts10a2012_3 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230c * (double) num40 * 0.01;
          fuelCosts10a2012_3.Box249 = num41;
          object Right2 = (object) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
          Actual_costs_10a2012 actualCosts10a2;
          double num42 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a2 = this._Calc.Actual_costs_10a).Box249, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230c, Right2), (object) 0.01)));
          actualCosts10a2.Box249 = num42;
          float num43 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
          Fuel_costs_10a2012 fuelCosts10a2012_4;
          double num44 = (fuelCosts10a2012_4 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230d * (double) num43 * 0.01;
          fuelCosts10a2012_4.Box249 = num44;
          object Right3 = (object) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
          Actual_costs_10a2012 actualCosts10a3;
          double num45 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a3 = this._Calc.Actual_costs_10a).Box249, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230d, Right3), (object) 0.01)));
          actualCosts10a3.Box249 = num45;
          float num46 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
          Fuel_costs_10a2012 fuelCosts10a2012_5;
          double num47 = (fuelCosts10a2012_5 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230e * (double) num46 * 0.01;
          fuelCosts10a2012_5.Box249 = num47;
          object Right4 = (object) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
          Actual_costs_10a2012 actualCosts10a4;
          double num48 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a4 = this._Calc.Actual_costs_10a).Box249, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230e, Right4), (object) 0.01)));
          actualCosts10a4.Box249 = num48;
          float num49 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
          Fuel_costs_10a2012 fuelCosts10a2012_6;
          double num50 = (fuelCosts10a2012_6 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230f * (double) num49 * 0.01;
          fuelCosts10a2012_6.Box249 = num50;
          object Right5 = (object) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
          Actual_costs_10a2012 actualCosts10a5;
          double num51 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a5 = this._Calc.Actual_costs_10a).Box249, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230f, Right5), (object) 0.01)));
          actualCosts10a5.Box249 = num51;
          Actual_costs_10a2012 actualCosts10a6;
          double num52 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a6 = this._Calc.Actual_costs_10a).Box249Water, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230f, Right5), (object) 0.01)));
          actualCosts10a6.Box249Water = num52;
          float num53 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
          Fuel_costs_10a2012 fuelCosts10a2012_7;
          double num54 = (fuelCosts10a2012_7 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230g * (double) num53 * 0.01;
          fuelCosts10a2012_7.Box249 = num54;
          object Right6 = (object) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
          Actual_costs_10a2012 actualCosts10a7;
          double num55 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a7 = this._Calc.Actual_costs_10a).Box249, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230g, Right6), (object) 0.01)));
          actualCosts10a7.Box249 = num55;
          float num56 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
          Fuel_costs_10a2012 fuelCosts10a2012_8;
          double num57 = (fuelCosts10a2012_8 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230h * (double) num56 * 0.01;
          fuelCosts10a2012_8.Box249 = num57;
          object Right7 = (object) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
          Actual_costs_10a2012 actualCosts10a8;
          double num58 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a8 = this._Calc.Actual_costs_10a).Box249, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230h, Right7), (object) 0.01)));
          actualCosts10a8.Box249 = num58;
          Actual_costs_10a2012 actualCosts10a9;
          double num59 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a9 = this._Calc.Actual_costs_10a).Box249Water, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230g, Right7), (object) 0.01)));
          actualCosts10a9.Box249Water = num59;
          fuelCosts10a.Box250P = 0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price");
          Fuel_costs_10a2012 fuelCosts10a2012_9;
          double num60 = (fuelCosts10a2012_9 = fuelCosts10a).Box250 + this._Calc.Internal_gains.AppendixL.EL_Final * fuelCosts10a.Box250P * 0.01;
          fuelCosts10a2012_9.Box250 = num60;
          this._Calc.Actual_costs_10a.Box250 = Conversions.ToDouble(Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Internal_gains.AppendixL.EL_Final, (object) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"))), (object) 0.01));
          this._Calc.Actual_costs_10a.HeatingCost = Conversions.ToDouble(Operators.MultiplyObject(Operators.MultiplyObject((object) (this._Calc.Energy_Requirements_9a.Box230f + this._Calc.Energy_Requirements_9a.Box230e + this._Calc.Energy_Requirements_9a.Box230d + this._Calc.Energy_Requirements_9a.Box230c), (object) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"))), (object) 0.01));
        }
      }
      else if (Operators.CompareString(this._House.MainHeating.ElectricityTariff, "10-hour tariff", false) == 0)
      {
        float num61 = (float) (0.58 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.42 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
        Fuel_costs_10a2012 fuelCosts10a2012_10;
        double num62 = (fuelCosts10a2012_10 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230a * (double) num61 * 0.01;
        fuelCosts10a2012_10.Box249 = num62;
        this._Calc.Actual_costs_10a.Box249 = Conversions.ToDouble(Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230a, (object) (0.58 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.42 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"))), (object) 0.01));
        float num63 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
        Fuel_costs_10a2012 fuelCosts10a2012_11;
        double num64 = (fuelCosts10a2012_11 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230b * (double) num63 * 0.01;
        fuelCosts10a2012_11.Box249 = num64;
        object Right8 = (object) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
        Actual_costs_10a2012 actualCosts10a10;
        double num65 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a10 = this._Calc.Actual_costs_10a).Box249, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230b, Right8), (object) 0.01)));
        actualCosts10a10.Box249 = num65;
        float num66 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
        Fuel_costs_10a2012 fuelCosts10a2012_12;
        double num67 = (fuelCosts10a2012_12 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230c * (double) num66 * 0.01;
        fuelCosts10a2012_12.Box249 = num67;
        object Right9 = (object) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
        Actual_costs_10a2012 actualCosts10a11;
        double num68 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a11 = this._Calc.Actual_costs_10a).Box249, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230c, Right9), (object) 0.01)));
        actualCosts10a11.Box249 = num68;
        float num69 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
        Fuel_costs_10a2012 fuelCosts10a2012_13;
        double num70 = (fuelCosts10a2012_13 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230d * (double) num69 * 0.01;
        fuelCosts10a2012_13.Box249 = num70;
        object Right10 = (object) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
        Actual_costs_10a2012 actualCosts10a12;
        double num71 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a12 = this._Calc.Actual_costs_10a).Box249, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230d, Right10), (object) 0.01)));
        actualCosts10a12.Box249 = num71;
        float num72 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
        Fuel_costs_10a2012 fuelCosts10a2012_14;
        double num73 = (fuelCosts10a2012_14 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230e * (double) num72 * 0.01;
        fuelCosts10a2012_14.Box249 = num73;
        object Right11 = (object) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
        Actual_costs_10a2012 actualCosts10a13;
        double num74 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a13 = this._Calc.Actual_costs_10a).Box249, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230e, Right11), (object) 0.01)));
        actualCosts10a13.Box249 = num74;
        float num75 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
        Fuel_costs_10a2012 fuelCosts10a2012_15;
        double num76 = (fuelCosts10a2012_15 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230f * (double) num75 * 0.01;
        fuelCosts10a2012_15.Box249 = num76;
        object Right12 = (object) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
        Actual_costs_10a2012 actualCosts10a14;
        double num77 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a14 = this._Calc.Actual_costs_10a).Box249, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230f, Right12), (object) 0.01)));
        actualCosts10a14.Box249 = num77;
        Actual_costs_10a2012 actualCosts10a15;
        double num78 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a15 = this._Calc.Actual_costs_10a).Box249Water, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230f, Right12), (object) 0.01)));
        actualCosts10a15.Box249Water = num78;
        float num79 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
        Fuel_costs_10a2012 fuelCosts10a2012_16;
        double num80 = (fuelCosts10a2012_16 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230g * (double) num79 * 0.01;
        fuelCosts10a2012_16.Box249 = num80;
        object Right13 = (object) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
        Actual_costs_10a2012 actualCosts10a16;
        double num81 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a16 = this._Calc.Actual_costs_10a).Box249, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230g, Right13), (object) 0.01)));
        actualCosts10a16.Box249 = num81;
        float num82 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
        Fuel_costs_10a2012 fuelCosts10a2012_17;
        double num83 = (fuelCosts10a2012_17 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230h * (double) num82 * 0.01;
        fuelCosts10a2012_17.Box249 = num83;
        object Right14 = (object) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
        Actual_costs_10a2012 actualCosts10a17;
        double num84 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a17 = this._Calc.Actual_costs_10a).Box249, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230h, Right14), (object) 0.01)));
        actualCosts10a17.Box249 = num84;
        Actual_costs_10a2012 actualCosts10a18;
        double num85 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a18 = this._Calc.Actual_costs_10a).Box249Water, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230g, Right14), (object) 0.01)));
        actualCosts10a18.Box249Water = num85;
        fuelCosts10a.Box250P = 0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price");
        Fuel_costs_10a2012 fuelCosts10a2012_18;
        double num86 = (fuelCosts10a2012_18 = fuelCosts10a).Box250 + this._Calc.Internal_gains.AppendixL.EL_Final * fuelCosts10a.Box250P * 0.01;
        fuelCosts10a2012_18.Box250 = num86;
        this._Calc.Actual_costs_10a.Box250 = Conversions.ToDouble(Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Internal_gains.AppendixL.EL_Final, (object) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"))), (object) 0.01));
        this._Calc.Actual_costs_10a.HeatingCost = Conversions.ToDouble(Operators.MultiplyObject(Operators.MultiplyObject((object) (this._Calc.Energy_Requirements_9a.Box230f + this._Calc.Energy_Requirements_9a.Box230e + this._Calc.Energy_Requirements_9a.Box230d + this._Calc.Energy_Requirements_9a.Box230c), (object) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"))), (object) 0.01));
      }
      else if (Operators.CompareString(this._House.MainHeating.ElectricityTariff, "7-hour tariff", false) == 0)
      {
        float num87 = (float) (0.71 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.29 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
        Fuel_costs_10a2012 fuelCosts10a2012_19;
        double num88 = (fuelCosts10a2012_19 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230a * (double) num87 * 0.01;
        fuelCosts10a2012_19.Box249 = num88;
        this._Calc.Actual_costs_10a.Box249 = Conversions.ToDouble(Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230a, (object) (0.71 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.29 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"))), (object) 0.01));
        float num89 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
        Fuel_costs_10a2012 fuelCosts10a2012_20;
        double num90 = (fuelCosts10a2012_20 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230b * (double) num89 * 0.01;
        fuelCosts10a2012_20.Box249 = num90;
        object Right15 = (object) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
        Actual_costs_10a2012 actualCosts10a19;
        double num91 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a19 = this._Calc.Actual_costs_10a).Box249, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230b, Right15), (object) 0.01)));
        actualCosts10a19.Box249 = num91;
        float num92 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
        Fuel_costs_10a2012 fuelCosts10a2012_21;
        double num93 = (fuelCosts10a2012_21 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230c * (double) num92 * 0.01;
        fuelCosts10a2012_21.Box249 = num93;
        object Right16 = (object) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
        Actual_costs_10a2012 actualCosts10a20;
        double num94 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a20 = this._Calc.Actual_costs_10a).Box249, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230c, Right16), (object) 0.01)));
        actualCosts10a20.Box249 = num94;
        float num95 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
        Fuel_costs_10a2012 fuelCosts10a2012_22;
        double num96 = (fuelCosts10a2012_22 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230d * (double) num95 * 0.01;
        fuelCosts10a2012_22.Box249 = num96;
        object Right17 = (object) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
        Actual_costs_10a2012 actualCosts10a21;
        double num97 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a21 = this._Calc.Actual_costs_10a).Box249, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230d, Right17), (object) 0.01)));
        actualCosts10a21.Box249 = num97;
        float num98 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
        Fuel_costs_10a2012 fuelCosts10a2012_23;
        double num99 = (fuelCosts10a2012_23 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230e * (double) num98 * 0.01;
        fuelCosts10a2012_23.Box249 = num99;
        object Right18 = (object) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
        Actual_costs_10a2012 actualCosts10a22;
        double num100 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a22 = this._Calc.Actual_costs_10a).Box249, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230e, Right18), (object) 0.01)));
        actualCosts10a22.Box249 = num100;
        float num101 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
        Fuel_costs_10a2012 fuelCosts10a2012_24;
        double num102 = (fuelCosts10a2012_24 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230f * (double) num101 * 0.01;
        fuelCosts10a2012_24.Box249 = num102;
        object Right19 = (object) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
        Actual_costs_10a2012 actualCosts10a23;
        double num103 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a23 = this._Calc.Actual_costs_10a).Box249, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230f, Right19), (object) 0.01)));
        actualCosts10a23.Box249 = num103;
        Actual_costs_10a2012 actualCosts10a24;
        double num104 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a24 = this._Calc.Actual_costs_10a).Box249Water, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230f, Right19), (object) 0.01)));
        actualCosts10a24.Box249Water = num104;
        float num105 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
        Fuel_costs_10a2012 fuelCosts10a2012_25;
        double num106 = (fuelCosts10a2012_25 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230g * (double) num105 * 0.01;
        fuelCosts10a2012_25.Box249 = num106;
        object Right20 = (object) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
        Actual_costs_10a2012 actualCosts10a25;
        double num107 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a25 = this._Calc.Actual_costs_10a).Box249, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230g, Right20), (object) 0.01)));
        actualCosts10a25.Box249 = num107;
        float num108 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
        Fuel_costs_10a2012 fuelCosts10a2012_26;
        double num109 = (fuelCosts10a2012_26 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box230h * (double) num108 * 0.01;
        fuelCosts10a2012_26.Box249 = num109;
        object Right21 = (object) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
        Actual_costs_10a2012 actualCosts10a26;
        double num110 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a26 = this._Calc.Actual_costs_10a).Box249, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230h, Right21), (object) 0.01)));
        actualCosts10a26.Box249 = num110;
        Actual_costs_10a2012 actualCosts10a27;
        double num111 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10a27 = this._Calc.Actual_costs_10a).Box249Water, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9a.Box230g, Right21), (object) 0.01)));
        actualCosts10a27.Box249Water = num111;
        fuelCosts10a.Box250P = 0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price");
        Fuel_costs_10a2012 fuelCosts10a2012_27;
        double num112 = (fuelCosts10a2012_27 = fuelCosts10a).Box250 + this._Calc.Internal_gains.AppendixL.EL_Final * fuelCosts10a.Box250P * 0.01;
        fuelCosts10a2012_27.Box250 = num112;
        this._Calc.Actual_costs_10a.Box250 = Conversions.ToDouble(Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Internal_gains.AppendixL.EL_Final, (object) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"))), (object) 0.01));
        this._Calc.Actual_costs_10a.HeatingCost = Conversions.ToDouble(Operators.MultiplyObject(Operators.MultiplyObject((object) (this._Calc.Energy_Requirements_9a.Box230f + this._Calc.Energy_Requirements_9a.Box230e + this._Calc.Energy_Requirements_9a.Box230d + this._Calc.Energy_Requirements_9a.Box230c), (object) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"))), (object) 0.01));
      }
      else if (Operators.CompareString(this._House.MainHeating.ElectricityTariff, "24-hour tariff", false) == 0)
      {
        fuelCosts10a.Box249P = this.FuelCost("standard tariff", 1, "Price");
        fuelCosts10a.Box249 = this._Calc.Energy_Requirements_9a.Box231 * fuelCosts10a.Box249P * 0.01;
        this._Calc.Actual_costs_10a.Box249 = this._Calc.Energy_Requirements_9a.Box231 * this.FuelCost("standard tariff", 0, "Price") * 0.01;
        Actual_costs_10a2012 actualCosts10a28;
        double num113 = (actualCosts10a28 = this._Calc.Actual_costs_10a).Box249Water + this._Calc.Energy_Requirements_9a.Box230f * this.FuelCost("standard tariff", 0, "Price") * 0.01;
        actualCosts10a28.Box249Water = num113;
        Actual_costs_10a2012 actualCosts10a29;
        double num114 = (actualCosts10a29 = this._Calc.Actual_costs_10a).Box249Water + this._Calc.Energy_Requirements_9a.Box230g * this.FuelCost("standard tariff", 0, "Price") * 0.01;
        actualCosts10a29.Box249Water = num114;
        fuelCosts10a.Box250P = fuelCosts10a.Box249P;
        fuelCosts10a.Box250 = this._Calc.Internal_gains.AppendixL.EL_Final * fuelCosts10a.Box250P * 0.01;
        this._Calc.Actual_costs_10a.Box250 = this._Calc.Internal_gains.AppendixL.EL_Final * this.FuelCost("standard tariff", 0, "Price") * 0.01;
        this._Calc.Actual_costs_10a.HeatingCost = (this._Calc.Energy_Requirements_9a.Box230f + this._Calc.Energy_Requirements_9a.Box230e + this._Calc.Energy_Requirements_9a.Box230d + this._Calc.Energy_Requirements_9a.Box230c) * this.FuelCost("standard tariff", 0, "Price") * 0.01;
      }
      else
      {
        fuelCosts10a.Box249P = this.FuelCost(this.GetElectricityType(0), 1, "Price");
        fuelCosts10a.Box249 = this._Calc.Energy_Requirements_9a.Box231 * fuelCosts10a.Box249P * 0.01;
        this._Calc.Actual_costs_10a.Box249 = this._Calc.Energy_Requirements_9a.Box231 * this.FuelCost(this.GetElectricityType(0), 0, "Price") * 0.01;
        Actual_costs_10a2012 actualCosts10a30;
        double num115 = (actualCosts10a30 = this._Calc.Actual_costs_10a).Box249Water + this._Calc.Energy_Requirements_9a.Box230f * this.FuelCost(this.GetElectricityType(0), 0, "Price") * 0.01;
        actualCosts10a30.Box249Water = num115;
        Actual_costs_10a2012 actualCosts10a31;
        double num116 = (actualCosts10a31 = this._Calc.Actual_costs_10a).Box249Water + this._Calc.Energy_Requirements_9a.Box230g * this.FuelCost(this.GetElectricityType(0), 0, "Price") * 0.01;
        actualCosts10a31.Box249Water = num116;
        fuelCosts10a.Box250P = fuelCosts10a.Box249P;
        fuelCosts10a.Box250 = this._Calc.Internal_gains.AppendixL.EL_Final * fuelCosts10a.Box250P * 0.01;
        this._Calc.Actual_costs_10a.Box250 = this._Calc.Internal_gains.AppendixL.EL_Final * this.FuelCost(this.GetElectricityType(0), 0, "Price") * 0.01;
        this._Calc.Actual_costs_10a.HeatingCost = (this._Calc.Energy_Requirements_9a.Box230f + this._Calc.Energy_Requirements_9a.Box230e + this._Calc.Energy_Requirements_9a.Box230d + this._Calc.Energy_Requirements_9a.Box230c) * this.FuelCost(this.GetElectricityType(0), 0, "Price") * 0.01;
      }
      if (this.OccupancyCalc)
      {
        if (this._Calc.Energy_Requirements_9a.Box231_High_corrected != 0.0)
        {
          float fuelCost27 = (float) this.Get_FuelCost("low");
          if ((double) fuelCost27 != 0.0)
          {
            fuelCosts10a.Box249 = this._Calc.Energy_Requirements_9a.Box231_corrected * (double) fuelCost27 * 0.01;
            this._Calc.Actual_costs_10a.Box249 = fuelCosts10a.Box249;
          }
          float fuelCost28 = (float) this.Get_FuelCost("high");
          if ((double) fuelCost28 != 0.0)
          {
            Fuel_costs_10a2012 fuelCosts10a2012;
            double num117 = (fuelCosts10a2012 = fuelCosts10a).Box249 + this._Calc.Energy_Requirements_9a.Box231_High_corrected * (double) fuelCost28 * 0.01;
            fuelCosts10a2012.Box249 = num117;
            this._Calc.Actual_costs_10a.Box249 = fuelCosts10a.Box249;
          }
        }
        else
        {
          float fuelCost = (float) this.Get_FuelCost("electricity domestic");
          if ((double) fuelCost != 0.0)
          {
            fuelCosts10a.Box249 = this._Calc.Energy_Requirements_9a.Box231_corrected * (double) fuelCost * 0.01;
            this._Calc.Actual_costs_10a.Box249 = fuelCosts10a.Box249;
          }
        }
        float num118;
        if (this._Calc.Energy_Requirements_9a.Box232_High_corrected != 0.0)
        {
          float fuelCost = (float) this.Get_FuelCost("low");
          if ((double) fuelCost != 0.0)
          {
            fuelCosts10a.Box250 = this._Calc.Energy_Requirements_9a.Box232_corrected * (double) fuelCost * 0.01;
            fuelCosts10a.Box250a = this._Calc.Energy_Requirements_9a.Box232a_corrected * (double) fuelCost * 0.01;
            fuelCosts10a.Box250b = this._Calc.Energy_Requirements_9a.Box232b_corrected * (double) fuelCost * 0.01;
            this._Calc.Actual_costs_10a.Box250 = fuelCosts10a.Box250;
            this._Calc.Actual_costs_10a.Box250a = fuelCosts10a.Box250a;
            this._Calc.Actual_costs_10a.Box250b = fuelCosts10a.Box250b;
          }
          num118 = (float) this.Get_FuelCost("high");
          if ((double) num118 != 0.0)
          {
            Fuel_costs_10a2012 fuelCosts10a2012_28;
            double num119 = (fuelCosts10a2012_28 = fuelCosts10a).Box250 + this._Calc.Energy_Requirements_9a.Box232_High_corrected * (double) num118 * 0.01;
            fuelCosts10a2012_28.Box250 = num119;
            Fuel_costs_10a2012 fuelCosts10a2012_29;
            double num120 = (fuelCosts10a2012_29 = fuelCosts10a).Box250a + this._Calc.Energy_Requirements_9a.Box232a_High_corrected * (double) num118 * 0.01;
            fuelCosts10a2012_29.Box250a = num120;
            Fuel_costs_10a2012 fuelCosts10a2012_30;
            double num121 = (fuelCosts10a2012_30 = fuelCosts10a).Box250b + this._Calc.Energy_Requirements_9a.Box232b_High_corrected * (double) num118 * 0.01;
            fuelCosts10a2012_30.Box250b = num121;
            this._Calc.Actual_costs_10a.Box250 = fuelCosts10a.Box250;
            this._Calc.Actual_costs_10a.Box250a = fuelCosts10a.Box250a;
            this._Calc.Actual_costs_10a.Box250b = fuelCosts10a.Box250b;
          }
        }
        else
        {
          num118 = (float) this.Get_FuelCost("electricity domestic");
          if ((double) num118 != 0.0)
          {
            fuelCosts10a.Box250P = (double) num118;
            fuelCosts10a.Box250 = this._Calc.Energy_Requirements_9a.Box232_corrected * (double) num118 * 0.01;
            fuelCosts10a.Box250a = this._Calc.Energy_Requirements_9a.Box232a_corrected * (double) num118 * 0.01;
            fuelCosts10a.Box250b = this._Calc.Energy_Requirements_9a.Box232b_corrected * (double) num118 * 0.01;
            this._Calc.Actual_costs_10a.Box250 = fuelCosts10a.Box250;
            this._Calc.Actual_costs_10a.Box250a = fuelCosts10a.Box250a;
            this._Calc.Actual_costs_10a.Box250b = fuelCosts10a.Box250b;
          }
          else
          {
            num118 = (float) this.FuelCost(this.GetElectricityType(1), 0, "Price");
            fuelCosts10a.Box250 = this._Calc.Energy_Requirements_9a.Box232_corrected * (double) num118 * 0.01;
            fuelCosts10a.Box250a = this._Calc.Energy_Requirements_9a.Box232a_corrected * (double) num118 * 0.01;
            fuelCosts10a.Box250b = this._Calc.Energy_Requirements_9a.Box232b_corrected * (double) num118 * 0.01;
            this._Calc.Actual_costs_10a.Box250 = fuelCosts10a.Box250;
            this._Calc.Actual_costs_10a.Box250a = fuelCosts10a.Box250a;
            this._Calc.Actual_costs_10a.Box250b = fuelCosts10a.Box250b;
          }
        }
        if (this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Always_Gas | this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Gas | this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Gas_Electric)
        {
          num118 = 0.0f;
          try
          {
            foreach (OccupancyClass.OtherFuel otherFuel in (Collection<OccupancyClass.OtherFuel>) this.OccupancyData.OtherFuels)
            {
              if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Bulk_LPG)
              {
                if ((uint) Operators.CompareString(this._House.MainHeating.Fuel, "bulk LPG", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "bulk LPG", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "bulk LPG", false) > 0U && (uint) Operators.CompareString(this.OccupancyData.MainHeating_Fuel, "bulk LPG", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.MainHeating2_Fuel, "bulk LPG", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.Secondary_Fuel, "bulk LPG", false) > 0U)
                {
                  num118 = (float) this.Get_FuelCost("bulk LPG");
                  break;
                }
              }
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Bottled_LPG)
              {
                if ((uint) Operators.CompareString(this._House.MainHeating.Fuel, "bottled LPG", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "bottled LPG", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "bottled LPG", false) > 0U && (uint) Operators.CompareString(this.OccupancyData.MainHeating_Fuel, "bottled LPG", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.MainHeating2_Fuel, "bottled LPG", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.Secondary_Fuel, "bottled LPG", false) > 0U)
                {
                  num118 = (float) this.Get_FuelCost("bottled LPG");
                  break;
                }
              }
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.LPG_Special_Condition_18 && (uint) Operators.CompareString(this._House.MainHeating.Fuel, "LPG subject to Special Condition 18", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "LPG subject to Special Condition 18", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "LPG subject to Special Condition 18", false) > 0U && (uint) Operators.CompareString(this.OccupancyData.MainHeating_Fuel, "LPG subject to Special Condition 18", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.MainHeating2_Fuel, "LPG subject to Special Condition 18", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.Secondary_Fuel, "LPG subject to Special Condition 18", false) > 0U)
              {
                num118 = (float) this.Get_FuelCost("LPG subject to Special Condition 18");
                break;
              }
            }
          }
          finally
          {
            IEnumerator<OccupancyClass.OtherFuel> enumerator;
            enumerator?.Dispose();
          }
          if ((double) num118 == 0.0)
          {
            if (this.OccupancyData.MainsGas_Available)
            {
              num118 = (float) this.Get_FuelCost("mains gas");
            }
            else
            {
              try
              {
                foreach (OccupancyClass.OtherFuel otherFuel in (Collection<OccupancyClass.OtherFuel>) this.OccupancyData.OtherFuels)
                {
                  if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Bulk_LPG)
                  {
                    num118 = (float) this.Get_FuelCost("bulk LPG");
                    break;
                  }
                  if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Bottled_LPG)
                  {
                    num118 = (float) this.Get_FuelCost("bottled LPG");
                    break;
                  }
                  if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.LPG_Special_Condition_18)
                  {
                    num118 = (float) this.Get_FuelCost("LPG subject to Special Condition 18");
                    break;
                  }
                }
              }
              finally
              {
                IEnumerator<OccupancyClass.OtherFuel> enumerator;
                enumerator?.Dispose();
              }
            }
          }
        }
        if (this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Always_Solid)
        {
          num118 = 0.0f;
          try
          {
            foreach (OccupancyClass.OtherFuel otherFuel in (Collection<OccupancyClass.OtherFuel>) this.OccupancyData.OtherFuels)
            {
              if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Coal)
              {
                if ((uint) Operators.CompareString(this._House.MainHeating.Fuel, "house coal", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "house coal", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "house coal", false) > 0U && (uint) Operators.CompareString(this.OccupancyData.MainHeating_Fuel, "house coal", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.MainHeating2_Fuel, "house coal", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.Secondary_Fuel, "house coal", false) > 0U)
                {
                  num118 = (float) this.Get_FuelCost("house coal");
                  break;
                }
              }
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Anthracite)
              {
                if ((uint) Operators.CompareString(this._House.MainHeating.Fuel, "anthracite", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "anthracite", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "anthracite", false) > 0U && (uint) Operators.CompareString(this.OccupancyData.MainHeating_Fuel, "anthracite", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.MainHeating2_Fuel, "anthracite", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.Secondary_Fuel, "anthracite", false) > 0U)
                {
                  num118 = (float) this.Get_FuelCost("anthracite");
                  break;
                }
              }
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Smokeless_Fuel)
              {
                if ((uint) Operators.CompareString(this._House.MainHeating.Fuel, "manufactured smokeless fuel", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "manufactured smokeless fuel", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "manufactured smokeless fuel", false) > 0U && (uint) Operators.CompareString(this.OccupancyData.MainHeating_Fuel, "manufactured smokeless fuel", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.MainHeating2_Fuel, "manufactured smokeless fuel", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.Secondary_Fuel, "manufactured smokeless fuel", false) > 0U)
                {
                  num118 = (float) this.Get_FuelCost("manufactured smokeless fuel");
                  break;
                }
              }
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Wood_Logs)
              {
                if ((uint) Operators.CompareString(this._House.MainHeating.Fuel, "wood logs", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "wood logs", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "wood logs", false) > 0U && (uint) Operators.CompareString(this.OccupancyData.MainHeating_Fuel, "wood logs", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.MainHeating2_Fuel, "wood logs", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.Secondary_Fuel, "wood logs", false) > 0U)
                {
                  num118 = (float) this.Get_FuelCost("wood logs");
                  break;
                }
              }
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Wood_Chips)
              {
                if ((uint) Operators.CompareString(this._House.MainHeating.Fuel, "wood chips", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "wood chips", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "wood chips", false) > 0U && (uint) Operators.CompareString(this.OccupancyData.MainHeating_Fuel, "wood chips", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.MainHeating2_Fuel, "wood chips", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.Secondary_Fuel, "wood chips", false) > 0U)
                {
                  num118 = (float) this.Get_FuelCost("wood chips");
                  break;
                }
              }
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Wood_Pellets && (uint) Operators.CompareString(this._House.MainHeating.Fuel, "wood pellets (in bags, for secondary heating)", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating.Fuel, "wood pellets (bulk supply in bags, for main heating)", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "wood pellets (in bags, for secondary heating)", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "wood pellets (bulk supply in bags, for main heating)", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "wood pellets (in bags, for secondary heating)", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "wood pellets (bulk supply in bags, for main heating)", false) > 0U && (uint) Operators.CompareString(this.OccupancyData.MainHeating_Fuel, "wood pellets (in bags, for secondary heating)", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.MainHeating_Fuel, "wood pellets (bulk supply in bags, for main heating)", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.MainHeating2_Fuel, "wood pellets (in bags, for secondary heating)", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.MainHeating2_Fuel, "wood pellets (bulk supply in bags, for main heating)", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.Secondary_Fuel, "wood pellets (in bags, for secondary heating)", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.Secondary_Fuel, "wood pellets (bulk supply in bags, for main heating)", false) > 0U)
              {
                num118 = (float) this.Get_FuelCost("wood pellets (in bags, for secondary heating)");
                break;
              }
            }
          }
          finally
          {
            IEnumerator<OccupancyClass.OtherFuel> enumerator;
            enumerator?.Dispose();
          }
          if ((double) num118 == 0.0)
          {
            try
            {
              foreach (OccupancyClass.OtherFuel otherFuel in (Collection<OccupancyClass.OtherFuel>) this.OccupancyData.OtherFuels)
              {
                if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Coal)
                {
                  num118 = (float) this.Get_FuelCost("house coal");
                  break;
                }
                if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Anthracite)
                {
                  num118 = (float) this.Get_FuelCost("anthracite");
                  break;
                }
                if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Smokeless_Fuel)
                {
                  num118 = (float) this.Get_FuelCost("manufactured smokeless fuel");
                  break;
                }
                if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Wood_Logs)
                {
                  num118 = (float) this.Get_FuelCost("wood logs");
                  break;
                }
                if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Wood_Chips)
                {
                  num118 = (float) this.Get_FuelCost("wood chips");
                  break;
                }
                if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Wood_Pellets)
                {
                  num118 = (float) this.Get_FuelCost("wood pellets (in bags, for secondary heating)");
                  break;
                }
              }
            }
            finally
            {
              IEnumerator<OccupancyClass.OtherFuel> enumerator;
              enumerator?.Dispose();
            }
          }
        }
        if (this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Always_Oil)
        {
          num118 = 0.0f;
          try
          {
            foreach (OccupancyClass.OtherFuel otherFuel in (Collection<OccupancyClass.OtherFuel>) this.OccupancyData.OtherFuels)
            {
              if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Biodiesel_From_Cooking_Oil)
              {
                if ((uint) Operators.CompareString(this._House.MainHeating.Fuel, "biodiesel from used cooking oil only", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "biodiesel from used cooking oil only", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "biodiesel from used cooking oil only", false) > 0U && (uint) Operators.CompareString(this.OccupancyData.MainHeating_Fuel, "biodiesel from used cooking oil only", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.MainHeating2_Fuel, "biodiesel from used cooking oil only", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.Secondary_Fuel, "biodiesel from used cooking oil only", false) > 0U)
                {
                  num118 = (float) this.Get_FuelCost("biodiesel from used cooking oil only");
                  break;
                }
              }
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Heating_Oil)
              {
                if ((uint) Operators.CompareString(this._House.MainHeating.Fuel, "heating oil", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "heating oil", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "heating oil", false) > 0U && (uint) Operators.CompareString(this.OccupancyData.MainHeating_Fuel, "heating oil", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.MainHeating2_Fuel, "heating oil", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.Secondary_Fuel, "heating oil", false) > 0U)
                {
                  num118 = (float) this.Get_FuelCost("heating oil");
                  break;
                }
              }
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Mineral_Oil_Or_Liquid_Biofuel)
              {
                if ((uint) Operators.CompareString(this._House.MainHeating.Fuel, "appliances able to use mineral oil or liquid biofuel", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "appliances able to use mineral oil or liquid biofuel", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "appliances able to use mineral oil or liquid biofuel", false) > 0U && (uint) Operators.CompareString(this.OccupancyData.MainHeating_Fuel, "appliances able to use mineral oil or liquid biofuel", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.MainHeating2_Fuel, "appliances able to use mineral oil or liquid biofuel", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.Secondary_Fuel, "appliances able to use mineral oil or liquid biofuel", false) > 0U)
                {
                  num118 = (float) this.Get_FuelCost("appliances able to use mineral oil or liquid biofuel");
                  break;
                }
              }
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Rapeseed_Oil && (uint) Operators.CompareString(this._House.MainHeating.Fuel, "rapeseed oil", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "rapeseed oil", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "rapeseed oil", false) > 0U && (uint) Operators.CompareString(this.OccupancyData.MainHeating_Fuel, "rapeseed oil", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.MainHeating2_Fuel, "rapeseed oil", false) > 0U & (uint) Operators.CompareString(this.OccupancyData.Secondary_Fuel, "rapeseed oil", false) > 0U)
              {
                num118 = (float) this.Get_FuelCost("rapeseed oil");
                break;
              }
            }
          }
          finally
          {
            IEnumerator<OccupancyClass.OtherFuel> enumerator;
            enumerator?.Dispose();
          }
          if ((double) num118 == 0.0)
          {
            try
            {
              foreach (OccupancyClass.OtherFuel otherFuel in (Collection<OccupancyClass.OtherFuel>) this.OccupancyData.OtherFuels)
              {
                if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Biodiesel_From_Cooking_Oil)
                {
                  num118 = (float) this.Get_FuelCost("biodiesel from used cooking oil only");
                  break;
                }
                if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Heating_Oil)
                {
                  num118 = (float) this.Get_FuelCost("heating oil");
                  break;
                }
                if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Mineral_Oil_Or_Liquid_Biofuel)
                {
                  num118 = (float) this.Get_FuelCost("appliances able to use mineral oil or liquid biofuel");
                  break;
                }
                if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Rapeseed_Oil)
                {
                  num118 = (float) this.Get_FuelCost("rapeseed oil");
                  break;
                }
              }
            }
            finally
            {
              IEnumerator<OccupancyClass.OtherFuel> enumerator;
              enumerator?.Dispose();
            }
          }
        }
        if ((double) num118 != 0.0)
        {
          if (this._Calc.Energy_Requirements_9a.Box232c_corrected != 0.0)
          {
            fuelCosts10a.Box250c = this._Calc.Energy_Requirements_9a.Box232c_corrected * (double) num118 * 0.01;
            this._Calc.Actual_costs_10a.Box250c = fuelCosts10a.Box250c;
          }
          else if (this.OccupancyData.CookingFuel != OccupancyClass.CookingFuel.Electric & this.OccupancyData.CookingFuel != OccupancyClass.CookingFuel.Always_Electric & this.OccupancyData.CookingFuel != OccupancyClass.CookingFuel.Gas_Electric)
          {
            fuelCosts10a.Box250b = this._Calc.Energy_Requirements_9a.Box232b_corrected * (double) num118 * 0.01;
            this._Calc.Actual_costs_10a.Box250b = fuelCosts10a.Box250b;
          }
        }
        float fuelCost29 = (float) this.Get_FuelCost("heat from boilers");
        if ((double) fuelCost29 != 0.0)
        {
          this._Calc.Fuel_costs_10b.Box342a = this._Calc.Energy_Requirements_9b.Box310a * (double) fuelCost29 * 0.01;
          this._Calc.Actual_costs_10b.Box342a = this._Calc.Energy_Requirements_9b.Box310a * (double) fuelCost29 * 0.01;
        }
      }
      string[] arySrc;
      string[] strArray = (string[]) Utils.CopyArray((Array) arySrc, (Array) new string[1]);
      strArray[0] = Operators.CompareString(this._House.MainHeating.Fuel, "Electricity", false) == 0 ? this.GetElectricityType(0) : this._House.MainHeating.Fuel;
      this._MainFuel = strArray[0];
      if (this._House.IncludeMainHeating2)
      {
        str1 = "";
        string str3 = Operators.CompareString(this._House.MainHeating2.Fuel, "Electricity", false) == 0 ? this.GetElectricityType2(0) : this._House.MainHeating2.Fuel;
        this._SecMainHeating = str3;
        if (!this.ArrayContains(strArray, str3) & (uint) Operators.CompareString(str3, "", false) > 0U)
        {
          strArray = (string[]) Utils.CopyArray((Array) strArray, (Array) new string[checked (strArray.Length + 1)]);
          strArray[checked (strArray.Length - 1)] = str3;
        }
      }
      str1 = "";
      string str4;
      if (Operators.CompareString(this._House.SecHeating.Fuel, "Electricity", false) == 0)
      {
        str4 = this.GetElectricityType(0);
      }
      else
      {
        str4 = this._House.SecHeating.Fuel;
        if (!this.ArrayContains(strArray, str4) & (uint) Operators.CompareString(str4, "", false) > 0U)
        {
          strArray = (string[]) Utils.CopyArray((Array) strArray, (Array) new string[checked (strArray.Length + 1)]);
          strArray[checked (strArray.Length - 1)] = str4;
        }
      }
      this._SecFuel = str4;
      str1 = "";
      int num122 = Information.UBound((Array) strArray);
      int index = 0;
      while (index <= num122)
      {
        Fuel_costs_10a2012 fuelCosts10a2012;
        double num123 = (fuelCosts10a2012 = fuelCosts10a).Box251 + this.FuelCost(strArray[index], 1, "SC");
        fuelCosts10a2012.Box251 = num123;
        Actual_costs_10a2012 actualCosts10a;
        double num124 = (actualCosts10a = this._Calc.Actual_costs_10a).Box251 + this.FuelCost(strArray[index], 0, "SC");
        actualCosts10a.Box251 = num124;
        checked { ++index; }
      }
      if (string.IsNullOrEmpty(this._House.Water.Fuel))
        this._House.Water.Fuel = "Electricity";
      string str5 = Operators.CompareString(this._House.Water.Fuel, "Electricity", false) == 0 ? this.GetElectricityType(0) : this._House.Water.Fuel;
      switch (this._House.Water.SystemRef)
      {
        case 950:
        case 951:
        case 952:
          Fuel_costs_10a2012 fuelCosts10a2012_31;
          double num125 = (fuelCosts10a2012_31 = fuelCosts10a).Box251 + this.FuelCost(str5, 1, "SC") / 2.0;
          fuelCosts10a2012_31.Box251 = num125;
          Actual_costs_10a2012 actualCosts10a32;
          double num126 = (actualCosts10a32 = this._Calc.Actual_costs_10a).Box251 + this.FuelCost(str5, 0, "SC") / 2.0;
          actualCosts10a32.Box251 = num126;
          break;
        default:
          if (!this.ArrayContains(strArray, str5))
          {
            Fuel_costs_10a2012 fuelCosts10a2012_32;
            double num127 = (fuelCosts10a2012_32 = fuelCosts10a).Box251 + this.FuelCost(str5, 1, "SC");
            fuelCosts10a2012_32.Box251 = num127;
            Actual_costs_10a2012 actualCosts10a33;
            double num128 = (actualCosts10a33 = this._Calc.Actual_costs_10a).Box251 + this.FuelCost(str5, 0, "SC");
            actualCosts10a33.Box251 = num128;
            break;
          }
          break;
      }
      this._WaterFuel = str5;
      if (this._Calc.Water_heating.Box64Imm != 0.0 && !this.ArrayContains(strArray, this.GetElectricityType(1)))
      {
        Fuel_costs_10a2012 fuelCosts10a2012_33;
        double num129 = (fuelCosts10a2012_33 = fuelCosts10a).Box251 + this.FuelCost(this.GetElectricityType(1), 1, "SC");
        fuelCosts10a2012_33.Box251 = num129;
        Actual_costs_10a2012 actualCosts10a34;
        double num130 = (actualCosts10a34 = this._Calc.Actual_costs_10a).Box251 + this.FuelCost(this.GetElectricityType(1), 0, "SC");
        actualCosts10a34.Box251 = num130;
      }
      if (this.OccupancyCalc)
      {
        fuelCosts10a.Box251 = Math.Round(this.Get_StandingCharge(), 0);
        this._Calc.Actual_costs_10a.Box251 = fuelCosts10a.Box251;
      }
      if (this._House.Renewable.Special.Include)
      {
        string electricityTariff = this._House.MainHeating.ElectricityTariff;
        float num131;
        float num132;
        if (Operators.CompareString(electricityTariff, "10-hour tariff", false) != 0)
        {
          if (Operators.CompareString(electricityTariff, "7-hour tariff", false) != 0)
          {
            if (Operators.CompareString(electricityTariff, "24-hour tariff", false) == 0)
            {
              num131 = (float) this.FuelCost("standard tariff", 1, "Price");
              num132 = (float) this.FuelCost("standard tariff", 0, "Price");
            }
            else
            {
              num131 = (float) this.FuelCost(this.GetElectricityType(0), 1, "Price");
              num132 = (float) this.FuelCost(this.GetElectricityType(0), 0, "Price");
            }
          }
          else
          {
            num131 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
            num132 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
          }
        }
        else
        {
          num131 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
          num132 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
        }
        this._Calc.Fuel_costs_10a.AppendixQ_Item_Count = this._House.Renewable.Special.Special.Length;
        this._Calc.Actual_costs_10a.AppendixQ_Item_Count = this._House.Renewable.Special.Special.Length;
        int num133 = checked (this._House.Renewable.Special.Special.Length - 1);
        int Index = 0;
        while (Index <= num133)
        {
          if (!this._House.Renewable.Special.Special[Index].MakeEmissionsOnly)
          {
            if (Operators.CompareString(this._House.Renewable.Special.Special[Index].FuelSaved, "Electricity", false) == 0)
            {
              this._Calc.Fuel_costs_10a.get_AppendixQ_Item(Index).Energy_Saved_Price = (double) num131;
              this._Calc.Fuel_costs_10a.get_AppendixQ_Item(Index).Energy_Saved_Cost = this._Calc.Energy_Requirements_9a.get_AppendixQ_Item(Index).Energy_Saved * (double) num131 * 0.01;
              this._Calc.Actual_costs_10a.get_AppendixQ_Item(Index).Energy_Saved_Price = (double) num132;
              this._Calc.Actual_costs_10a.get_AppendixQ_Item(Index).Energy_Saved_Cost = this._Calc.Energy_Requirements_9a.get_AppendixQ_Item(Index).Energy_Saved * (double) num132 * 0.01;
            }
            else
            {
              this._Calc.Fuel_costs_10a.get_AppendixQ_Item(Index).Energy_Saved_Price = (double) num131;
              this._Calc.Fuel_costs_10a.get_AppendixQ_Item(Index).Energy_Saved_Cost = this._Calc.Energy_Requirements_9a.get_AppendixQ_Item(Index).Energy_Saved * this.FuelCost(this._House.Renewable.Special.Special[Index].FuelSaved, 1, "Price") / 100.0;
              this._Calc.Actual_costs_10a.get_AppendixQ_Item(Index).Energy_Saved_Price = (double) num132;
              this._Calc.Actual_costs_10a.get_AppendixQ_Item(Index).Energy_Saved_Cost = this._Calc.Energy_Requirements_9a.get_AppendixQ_Item(Index).Energy_Saved * this.FuelCost(this._House.Renewable.Special.Special[Index].FuelSaved, 0, "Price") / 100.0;
            }
            if (Operators.CompareString(this._House.Renewable.Special.Special[Index].FuelUsed, "Electricity", false) == 0)
            {
              this._Calc.Fuel_costs_10a.get_AppendixQ_Item(Index).Energy_Used_Price = (double) num131;
              this._Calc.Fuel_costs_10a.get_AppendixQ_Item(Index).Energy_Used_Cost = this._Calc.Energy_Requirements_9a.get_AppendixQ_Item(Index).Energy_Used * (double) num131 * 0.01;
              this._Calc.Actual_costs_10a.get_AppendixQ_Item(Index).Energy_Used_Price = (double) num132;
              this._Calc.Actual_costs_10a.get_AppendixQ_Item(Index).Energy_Used_Cost = this._Calc.Energy_Requirements_9a.get_AppendixQ_Item(Index).Energy_Used * (double) num132 * 0.01;
            }
            else
            {
              this._Calc.Fuel_costs_10a.get_AppendixQ_Item(Index).Energy_Used_Price = this.FuelCost(this._House.Renewable.Special.Special[Index].FuelUsed, 1, "Price");
              this._Calc.Fuel_costs_10a.get_AppendixQ_Item(Index).Energy_Used_Cost = this._Calc.Energy_Requirements_9a.get_AppendixQ_Item(Index).Energy_Used * this._Calc.Fuel_costs_10a.get_AppendixQ_Item(Index).Energy_Used_Price / 100.0;
              this._Calc.Actual_costs_10a.get_AppendixQ_Item(Index).Energy_Used_Price = this.FuelCost(this._House.Renewable.Special.Special[Index].FuelUsed, 0, "Price");
              this._Calc.Actual_costs_10a.get_AppendixQ_Item(Index).Energy_Used_Cost = this._Calc.Energy_Requirements_9a.get_AppendixQ_Item(Index).Energy_Used * this._Calc.Actual_costs_10a.get_AppendixQ_Item(Index).Energy_Used_Price / 100.0;
            }
          }
          checked { ++Index; }
        }
      }
      if (this._House.Renewable.AAEGeneration.Inlcude | this._House.Renewable.HydroGeneration.Inlcude)
      {
        string electricityTariff = this._House.MainHeating.ElectricityTariff;
        float num134;
        float num135;
        if (Operators.CompareString(electricityTariff, "10-hour tariff", false) != 0)
        {
          if (Operators.CompareString(electricityTariff, "7-hour tariff", false) != 0)
          {
            if (Operators.CompareString(electricityTariff, "24-hour tariff", false) == 0)
            {
              num134 = (float) (0.4 * this.FuelCost("standard tariff", 1, "Price") + 0.6 * this.FuelCost("electricity sold to grid", 1, "Price"));
              num135 = (float) (0.4 * this.FuelCost("standard tariff", 0, "Price") + 0.6 * this.FuelCost("electricity sold to grid", 0, "Price"));
            }
            else
            {
              num134 = (float) (0.4 * this.FuelCost(this.GetElectricityType(0), 1, "Price") + 0.6 * this.FuelCost("electricity sold to grid", 1, "Price"));
              num135 = (float) (0.4 * this.FuelCost(this.GetElectricityType(0), 0, "Price") + 0.6 * this.FuelCost("electricity sold to grid", 0, "Price"));
            }
          }
          else
          {
            num134 = (float) (0.4 * (0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price")) + 0.6 * this.FuelCost("electricity sold to grid", 1, "Price"));
            num135 = (float) (0.4 * (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price")) + 0.6 * this.FuelCost("electricity sold to grid", 0, "Price"));
          }
        }
        else
        {
          num134 = (float) (0.4 * (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price")) + 0.6 * this.FuelCost("electricity sold to grid", 1, "Price"));
          num135 = (float) (0.4 * (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price")) + 0.6 * this.FuelCost("electricity sold to grid", 0, "Price"));
        }
        if (this.OccupancyCalc)
        {
          if ((uint) this.OccupancyData.Electricity_High.FuelBillInfo > 0U)
          {
            num134 = (float) (0.45 * this.Get_FuelCost("high") + 0.05 * this.Get_FuelCost("low") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
            num135 = (float) (0.45 * this.Get_FuelCost("high") + 0.05 * this.Get_FuelCost("low") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
          }
          else
          {
            num134 = (float) (0.4 * this.Get_FuelCost("electricity") + 0.6 * this.FuelCost("electricity sold to grid", 0, "Price"));
            num135 = (float) (0.4 * this.Get_FuelCost("electricity") + 0.6 * this.FuelCost("electricity sold to grid", 0, "Price"));
          }
        }
        checked { ++this._Calc.Fuel_costs_10a.Box252_Count; }
        this._Calc.Actual_costs_10a.Box252_Count = checked (this._Calc.Fuel_costs_10a.Box252_Count + 1);
        checked { ++this._Calc.CO2_Emissions_12a.Box269_Count; }
        checked { ++this._Calc.Primary_Energy_13a.Box269_Count; }
        if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0)
        {
          this._Calc.Fuel_costs_10a.set_Box252_Prices(checked (this._Calc.Fuel_costs_10a.Box252_Prices.Length - 1), (double) num134);
          this._Calc.Fuel_costs_10a.set_Box252_Costs(checked (this._Calc.Fuel_costs_10a.Box252_Costs.Length - 1), (double) num134 * this._Calc.Energy_Requirements_9a.Box235a * 0.01);
          this._Calc.Actual_costs_10a.set_Box252_Prices(checked (this._Calc.Actual_costs_10a.Box252_Prices.Length - 1), (double) num135);
          this._Calc.Actual_costs_10a.set_Box252_Costs(checked (this._Calc.Actual_costs_10a.Box252_Costs.Length - 1), (double) num135 * this._Calc.Energy_Requirements_9a.Box235a * 0.01);
          this._Calc.CO2_Emissions_12a.set_Box269_EFactors(checked (this._Calc.CO2_Emissions_12a.Box269_EFactors.Length - 1), this.FuelCost("electricity displaced from grid", 1, "Emissions"));
          this._Calc.CO2_Emissions_12a.Box269_Emissions[checked (this._Calc.CO2_Emissions_12a.Box269_Emissions.Length - 1)] = this._Calc.Energy_Requirements_9a.Box235a * this._Calc.CO2_Emissions_12a.get_Box269_EFactors(checked (this._Calc.CO2_Emissions_12a.Box269_EFactors.Length - 1));
          this._Calc.Primary_Energy_13a.set_Box269_EFactors(checked (this._Calc.Primary_Energy_13a.Box269_EFactors.Length - 1), this.FuelCost("electricity displaced from grid", 1, "Energy"));
          this._Calc.Primary_Energy_13a.Box269_Emissions[checked (this._Calc.Primary_Energy_13a.Box269_Emissions.Length - 1)] = this._Calc.Energy_Requirements_9a.Box235a * this._Calc.Primary_Energy_13a.get_Box269_EFactors(checked (this._Calc.Primary_Energy_13a.Box269_EFactors.Length - 1));
        }
        else
        {
          switch (this._House.MainHeating.SAPTableCode)
          {
            case 306:
            case 307:
            case 309:
            case 310:
              break;
            default:
              this._Calc.Fuel_costs_10a.set_Box252_Prices(checked (this._Calc.Fuel_costs_10a.Box252_Prices.Length - 1), (double) num134);
              this._Calc.Fuel_costs_10a.set_Box252_Costs(checked (this._Calc.Fuel_costs_10a.Box252_Costs.Length - 1), (double) num134 * this._Calc.Energy_Requirements_9a.Box235a * 0.01);
              this._Calc.Actual_costs_10a.set_Box252_Prices(checked (this._Calc.Actual_costs_10a.Box252_Prices.Length - 1), (double) num135);
              this._Calc.Actual_costs_10a.set_Box252_Costs(checked (this._Calc.Actual_costs_10a.Box252_Costs.Length - 1), (double) num135 * this._Calc.Energy_Requirements_9a.Box235a * 0.01);
              this._Calc.CO2_Emissions_12a.set_Box269_EFactors(checked (this._Calc.CO2_Emissions_12a.Box269_EFactors.Length - 1), this.FuelCost("electricity displaced from grid", 1, "Emissions"));
              this._Calc.CO2_Emissions_12a.Box269_Emissions[checked (this._Calc.CO2_Emissions_12a.Box269_Emissions.Length - 1)] = this._Calc.Energy_Requirements_9a.Box235a * this._Calc.CO2_Emissions_12a.get_Box269_EFactors(checked (this._Calc.CO2_Emissions_12a.Box269_EFactors.Length - 1));
              this._Calc.Primary_Energy_13a.set_Box269_EFactors(checked (this._Calc.Primary_Energy_13a.Box269_EFactors.Length - 1), this.FuelCost("electricity displaced from grid", 1, "Energy"));
              this._Calc.Primary_Energy_13a.Box269_Emissions[checked (this._Calc.Primary_Energy_13a.Box269_Emissions.Length - 1)] = this._Calc.Energy_Requirements_9a.Box235a * this._Calc.Primary_Energy_13a.get_Box269_EFactors(checked (this._Calc.Primary_Energy_13a.Box269_EFactors.Length - 1));
              goto case 306;
          }
        }
      }
      if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 && Operators.CompareString(this._House.MainHeating.SGroup, "Micro-cogeneration (micro-CHP)", false) == 0)
      {
        string electricityTariff = this._House.MainHeating.ElectricityTariff;
        float num136;
        float num137;
        if (Operators.CompareString(electricityTariff, "10-hour tariff", false) != 0)
        {
          if (Operators.CompareString(electricityTariff, "7-hour tariff", false) == 0)
          {
            num136 = (float) (0.4 * (0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price")) + 0.6 * this.FuelCost("electricity sold to grid", 1, "Price"));
            num137 = (float) (0.4 * (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price")) + 0.6 * this.FuelCost("electricity sold to grid", 0, "Price"));
          }
          else
          {
            num136 = (float) (0.4 * this.FuelCost(this.GetElectricityType(0), 1, "Price") + 0.6 * this.FuelCost("electricity sold to grid", 1, "Price"));
            num137 = (float) (0.4 * this.FuelCost(this.GetElectricityType(0), 0, "Price") + 0.6 * this.FuelCost("electricity sold to grid", 0, "Price"));
          }
        }
        else
        {
          num136 = (float) (0.4 * (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price")) + 0.6 * this.FuelCost("electricity sold to grid", 1, "Price"));
          num137 = (float) (0.4 * (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price")) + 0.6 * this.FuelCost("electricity sold to grid", 0, "Price"));
        }
        if (this.OccupancyCalc)
        {
          if ((uint) this.OccupancyData.Electricity_High.FuelBillInfo > 0U)
          {
            num136 = (float) (0.45 * this.Get_FuelCost("high") + 0.05 * this.Get_FuelCost("low") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
            num137 = (float) (0.45 * this.Get_FuelCost("high") + 0.05 * this.Get_FuelCost("low") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
          }
          else
          {
            num136 = (float) (0.4 * this.Get_FuelCost("electricity") + 0.6 * this.FuelCost("electricity sold to grid", 0, "Price"));
            num137 = (float) (0.4 * this.Get_FuelCost("electricity") + 0.6 * this.FuelCost("electricity sold to grid", 0, "Price"));
          }
        }
        checked { ++this._Calc.Fuel_costs_10a.Box252_Count; }
        this._Calc.Actual_costs_10a.Box252_Count = checked (this._Calc.Fuel_costs_10a.Box252_Count + 1);
        checked { ++this._Calc.CO2_Emissions_12a.Box269_Count; }
        checked { ++this._Calc.Primary_Energy_13a.Box269_Count; }
        this._Calc.Fuel_costs_10a.set_Box252_Prices(checked (this._Calc.Fuel_costs_10a.Box252_Prices.Length - 1), (double) num136);
        this._Calc.Fuel_costs_10a.set_Box252_Costs(checked (this._Calc.Fuel_costs_10a.Box252_Costs.Length - 1), (double) num136 * this._Calc.Energy_Requirements_9a.Box235 * 0.01);
        this._Calc.Actual_costs_10a.set_Box252_Prices(checked (this._Calc.Actual_costs_10a.Box252_Prices.Length - 1), (double) num137);
        this._Calc.Actual_costs_10a.set_Box252_Costs(checked (this._Calc.Actual_costs_10a.Box252_Costs.Length - 1), (double) num137 * this._Calc.Energy_Requirements_9a.Box235 * 0.01);
        this._Calc.CO2_Emissions_12a.set_Box269_EFactors(checked (this._Calc.CO2_Emissions_12a.Box269_EFactors.Length - 1), this.FuelCost("electricity displaced from grid", 1, "Emissions"));
        this._Calc.CO2_Emissions_12a.Box269_Emissions[checked (this._Calc.CO2_Emissions_12a.Box269_Emissions.Length - 1)] = this._Calc.Energy_Requirements_9a.Box235 * this._Calc.CO2_Emissions_12a.get_Box269_EFactors(checked (this._Calc.CO2_Emissions_12a.Box269_EFactors.Length - 1));
        this._Calc.Primary_Energy_13a.set_Box269_EFactors(checked (this._Calc.Primary_Energy_13a.Box269_EFactors.Length - 1), this.FuelCost("electricity displaced from grid", 1, "Energy"));
        this._Calc.Primary_Energy_13a.Box269_Emissions[checked (this._Calc.Primary_Energy_13a.Box269_Emissions.Length - 1)] = this._Calc.Energy_Requirements_9a.Box235 * this._Calc.Primary_Energy_13a.get_Box269_EFactors(checked (this._Calc.Primary_Energy_13a.Box269_EFactors.Length - 1));
      }
      if (this.OccupancyCalc)
      {
        float num138;
        float num139;
        if (this.OccupancyData.U_Included & (uint) this.OccupancyData.Electricity_High.FuelBillInfo > 0U)
        {
          num138 = (float) (0.4 * this.Get_FuelCost("high") + 0.1 * this.Get_FuelCost("low") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
          num139 = (float) (0.4 * this.Get_FuelCost("high") + 0.1 * this.Get_FuelCost("low") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
        }
        else if ((uint) this.OccupancyData.Electricity_High.FuelBillInfo > 0U)
        {
          num138 = (float) (0.45 * this.Get_FuelCost("high") + 0.05 * this.Get_FuelCost("low") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
          num139 = (float) (0.45 * this.Get_FuelCost("high") + 0.05 * this.Get_FuelCost("low") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
        }
        else
        {
          num138 = (float) (0.5 * this.Get_FuelCost("electricity") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
          num139 = (float) (0.5 * this.Get_FuelCost("electricity") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
        }
        this._Calc.Actual_costs_10a.Box252_OA = this._Calc.Energy_Requirements_9a.Box233_OA * (double) num138 * 0.01;
        this._Calc.Fuel_costs_10a.Box252_OA = this._Calc.Energy_Requirements_9a.Box233_OA * (double) num138 * 0.01;
        float num140;
        if ((uint) this.OccupancyData.Electricity_High.FuelBillInfo > 0U)
        {
          num140 = (float) (0.45 * this.Get_FuelCost("high") + 0.05 * this.Get_FuelCost("low") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
          num139 = (float) (0.45 * this.Get_FuelCost("high") + 0.05 * this.Get_FuelCost("low") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
        }
        else
        {
          num140 = (float) (0.7 * this.Get_FuelCost("electricity") + 0.3 * this.FuelCost("electricity sold to grid", 0, "Price"));
          num139 = (float) (0.7 * this.Get_FuelCost("electricity") + 0.3 * this.FuelCost("electricity sold to grid", 0, "Price"));
        }
        this._Calc.Actual_costs_10a.Box253_OA = this._Calc.Energy_Requirements_9a.Box234_OA * (double) num140 * 0.01;
        this._Calc.Fuel_costs_10a.Box253_OA = this._Calc.Energy_Requirements_9a.Box234_OA * (double) num140 * 0.01;
        float num141;
        if ((uint) this.OccupancyData.Electricity_High.FuelBillInfo > 0U)
        {
          num141 = (float) (0.45 * this.Get_FuelCost("high") + 0.05 * this.Get_FuelCost("low") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
          num139 = (float) (0.45 * this.Get_FuelCost("high") + 0.05 * this.Get_FuelCost("low") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
        }
        else
        {
          num141 = (float) (0.4 * this.Get_FuelCost("electricity") + 0.6 * this.FuelCost("electricity sold to grid", 0, "Price"));
          num139 = (float) (0.4 * this.Get_FuelCost("electricity") + 0.6 * this.FuelCost("electricity sold to grid", 0, "Price"));
        }
        this._Calc.Actual_costs_10a.Box254_OA = this._Calc.Energy_Requirements_9a.Box235_OA * (double) num141 * 0.01;
        this._Calc.Fuel_costs_10a.Box254_OA = this._Calc.Energy_Requirements_9a.Box235_OA * (double) num141 * 0.01;
      }
      int systemRef2 = this._House.Water.SystemRef;
      if (systemRef2 >= 950 && systemRef2 <= 952)
      {
        fuelCosts10a.Box255 = fuelCosts10a.Box240 + fuelCosts10a.Box241 + fuelCosts10a.Box242 + fuelCosts10a.Box245 + fuelCosts10a.Box246 + fuelCosts10a.Box247 + fuelCosts10a.Box247Imm + fuelCosts10a.Box248 + fuelCosts10a.Box249 + fuelCosts10a.Box250 + fuelCosts10a.Box251 + fuelCosts10a.Box252 + fuelCosts10a.Box253 + fuelCosts10a.Box254 + this._Calc.Fuel_costs_10b.Box342a + this._Calc.Fuel_costs_10b.Box342b + this._Calc.Fuel_costs_10b.Box342c + this._Calc.Fuel_costs_10b.Box342d + this._Calc.Fuel_costs_10b.Box342e;
        this._Calc.Actual_costs_10a.Box255 = this._Calc.Actual_costs_10a.Box240 + this._Calc.Actual_costs_10a.Box241 + this._Calc.Actual_costs_10a.Box242 + this._Calc.Actual_costs_10a.Box245 + this._Calc.Actual_costs_10a.Box246 + this._Calc.Actual_costs_10a.Box247 + this._Calc.Actual_costs_10a.Box247Imm + this._Calc.Actual_costs_10a.Box248 + this._Calc.Actual_costs_10a.Box249 + this._Calc.Actual_costs_10a.Box250 + this._Calc.Actual_costs_10a.Box251 + this._Calc.Actual_costs_10a.Box252 + this._Calc.Actual_costs_10a.Box253 + this._Calc.Actual_costs_10a.Box254 + this._Calc.Actual_costs_10b.Box342a + this._Calc.Actual_costs_10b.Box342b + this._Calc.Actual_costs_10b.Box342c + this._Calc.Actual_costs_10b.Box342d + this._Calc.Actual_costs_10b.Box342e;
      }
      else
      {
        fuelCosts10a.Box255 = fuelCosts10a.Box240 + fuelCosts10a.Box241 + fuelCosts10a.Box242 + fuelCosts10a.Box245 + fuelCosts10a.Box246 + fuelCosts10a.Box247 + fuelCosts10a.Box247Imm + fuelCosts10a.Box248 + fuelCosts10a.Box249 + fuelCosts10a.Box250 + fuelCosts10a.Box251 + fuelCosts10a.Box252 + fuelCosts10a.Box253 + fuelCosts10a.Box254;
        this._Calc.Actual_costs_10a.Box255 = this._Calc.Actual_costs_10a.Box240 + this._Calc.Actual_costs_10a.Box241 + this._Calc.Actual_costs_10a.Box242 + this._Calc.Actual_costs_10a.Box245 + this._Calc.Actual_costs_10a.Box246 + this._Calc.Actual_costs_10a.Box247 + this._Calc.Actual_costs_10a.Box247Imm + this._Calc.Actual_costs_10a.Box248 + this._Calc.Actual_costs_10a.Box249 + this._Calc.Actual_costs_10a.Box250 + this._Calc.Actual_costs_10a.Box251 + this._Calc.Actual_costs_10a.Box252 + this._Calc.Actual_costs_10a.Box253 + this._Calc.Actual_costs_10a.Box254;
      }
      if (this.OccupancyCalc)
      {
        Actual_costs_10a2012 actualCosts10a35;
        double num142 = (actualCosts10a35 = this._Calc.Actual_costs_10a).Box255 - this._Calc.Actual_costs_10a.Box252;
        actualCosts10a35.Box255 = num142;
        Actual_costs_10a2012 actualCosts10a36;
        double num143 = (actualCosts10a36 = this._Calc.Actual_costs_10a).Box255 - this._Calc.Actual_costs_10a.Box253;
        actualCosts10a36.Box255 = num143;
        Actual_costs_10a2012 actualCosts10a37;
        double num144 = (actualCosts10a37 = this._Calc.Actual_costs_10a).Box255 - this._Calc.Actual_costs_10a.Box254;
        actualCosts10a37.Box255 = num144;
        Actual_costs_10a2012 actualCosts10a38;
        double num145 = (actualCosts10a38 = this._Calc.Actual_costs_10a).Box255 + (fuelCosts10a.Box247a + fuelCosts10a.Box250a + fuelCosts10a.Box250b + fuelCosts10a.Box250c + fuelCosts10a.Box252_OA + fuelCosts10a.Box253_OA + fuelCosts10a.Box254_OA);
        actualCosts10a38.Box255 = num145;
      }
      if (!this.StandardOccupancyCalc)
        return;
      this.OccupancyCalc = false;
    }

    private void Fuel_Costs_10b()
    {
      if (this.StandardOccupancyCalc)
        this.OccupancyCalc = true;
      Fuel_costs_10b2012 fuelCosts10b = this._Calc.Fuel_costs_10b;
      if (this._House.MainHeating.SAPTableCode == 307)
      {
        fuelCosts10b.Box340aP = this.FuelCost("heat from CHP", 1, "Price");
        fuelCosts10b.Box340a = fuelCosts10b.Box340aP * this._Calc.Energy_Requirements_9b.Box307a * 0.01;
        this._Calc.Actual_costs_10b.Box340aP = this.FuelCost("heat from CHP", 0, "Price");
        this._Calc.Actual_costs_10b.Box340a = this._Calc.Actual_costs_10b.Box340aP * this._Calc.Energy_Requirements_9b.Box307a * 0.01;
      }
      else
      {
        bool flag = false;
        if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 && this.HeatSources[0].CommunityFuel.Equals("99"))
        {
          flag = true;
          fuelCosts10b.Box340aP = this.FuelCost("heat from boilers – mains gas", 1, "Price");
          fuelCosts10b.Box340a = fuelCosts10b.Box340aP * this._Calc.Energy_Requirements_9b.Box307a * 0.01;
          this._Calc.Actual_costs_10b.Box340aP = this.FuelCost("heat from boilers – mains gas", 0, "Price");
          this._Calc.Actual_costs_10b.Box340a = this._Calc.Actual_costs_10b.Box340aP * this._Calc.Energy_Requirements_9b.Box307a * 0.01;
        }
        if (!flag)
        {
          fuelCosts10b.Box340aP = this.FuelCost(this._House.MainHeating.Fuel, 1, "Price");
          fuelCosts10b.Box340a = fuelCosts10b.Box340aP * this._Calc.Energy_Requirements_9b.Box307a * 0.01;
          this._Calc.Actual_costs_10b.Box340aP = this.FuelCost(this._House.MainHeating.Fuel, 0, "Price");
          this._Calc.Actual_costs_10b.Box340a = this._Calc.Actual_costs_10b.Box340aP * this._Calc.Energy_Requirements_9b.Box307a * 0.01;
        }
      }
      if (this._House.MainHeating.CommunityH.NoOfAdditionalHeatSources > 0)
      {
        bool flag = false;
        if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 && this.HeatSources[1].CommunityFuel.Equals("99"))
        {
          flag = true;
          fuelCosts10b.Box340bP = this.FuelCost("heat from boilers – mains gas", 1, "Price");
          fuelCosts10b.Box340b = fuelCosts10b.Box340bP * this._Calc.Energy_Requirements_9b.Box307b * 0.01;
          this._Calc.Actual_costs_10b.Box340bP = this.FuelCost("heat from boilers – mains gas", 0, "Price");
          this._Calc.Actual_costs_10b.Box340b = this._Calc.Actual_costs_10b.Box340bP * this._Calc.Energy_Requirements_9b.Box307b * 0.01;
        }
        if (!flag)
        {
          fuelCosts10b.Box340bP = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource1.Fuel, 1, "Price");
          fuelCosts10b.Box340b = fuelCosts10b.Box340bP * this._Calc.Energy_Requirements_9b.Box307b * 0.01;
          this._Calc.Actual_costs_10b.Box340bP = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource1.Fuel, 0, "Price");
          this._Calc.Actual_costs_10b.Box340b = this._Calc.Actual_costs_10b.Box340bP * this._Calc.Energy_Requirements_9b.Box307b * 0.01;
        }
      }
      if (this._House.MainHeating.CommunityH.NoOfAdditionalHeatSources > 1)
      {
        bool flag = false;
        if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 && this.HeatSources[2].CommunityFuel.Equals("99"))
        {
          flag = true;
          fuelCosts10b.Box340cP = this.FuelCost("heat from boilers – mains gas", 1, "Price");
          fuelCosts10b.Box340c = fuelCosts10b.Box340cP * this._Calc.Energy_Requirements_9b.Box307c * 0.01;
          this._Calc.Actual_costs_10b.Box340cP = this.FuelCost("heat from boilers – mains gas", 0, "Price");
          this._Calc.Actual_costs_10b.Box340c = this._Calc.Actual_costs_10b.Box340cP * this._Calc.Energy_Requirements_9b.Box307c * 0.01;
        }
        if (!flag)
        {
          fuelCosts10b.Box340cP = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource2.Fuel, 1, "Price");
          fuelCosts10b.Box340c = fuelCosts10b.Box340cP * this._Calc.Energy_Requirements_9b.Box307c * 0.01;
          this._Calc.Actual_costs_10b.Box340cP = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource2.Fuel, 0, "Price");
          this._Calc.Actual_costs_10b.Box340c = this._Calc.Actual_costs_10b.Box340cP * this._Calc.Energy_Requirements_9b.Box307c * 0.01;
        }
      }
      if (this._House.MainHeating.CommunityH.NoOfAdditionalHeatSources > 2)
      {
        bool flag = false;
        if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 && this.HeatSources[3].CommunityFuel.Equals("99"))
        {
          flag = true;
          fuelCosts10b.Box340dP = this.FuelCost("heat from boilers – mains gas", 1, "Price");
          fuelCosts10b.Box340d = fuelCosts10b.Box340dP * this._Calc.Energy_Requirements_9b.Box307d * 0.01;
          this._Calc.Actual_costs_10b.Box340dP = this.FuelCost("heat from boilers – mains gas", 0, "Price");
          this._Calc.Actual_costs_10b.Box340d = this._Calc.Actual_costs_10b.Box340dP * this._Calc.Energy_Requirements_9b.Box307d * 0.01;
        }
        if (!flag)
        {
          fuelCosts10b.Box340dP = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource3.Fuel, 1, "Price");
          fuelCosts10b.Box340d = fuelCosts10b.Box340dP * this._Calc.Energy_Requirements_9b.Box307d * 0.01;
          this._Calc.Actual_costs_10b.Box340dP = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource3.Fuel, 0, "Price");
          this._Calc.Actual_costs_10b.Box340d = this._Calc.Actual_costs_10b.Box340dP * this._Calc.Energy_Requirements_9b.Box307d * 0.01;
        }
      }
      if (this._House.MainHeating.CommunityH.NoOfAdditionalHeatSources > 3)
      {
        bool flag = false;
        if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 && this.HeatSources[4].CommunityFuel.Equals("99"))
        {
          flag = true;
          fuelCosts10b.Box340eP = this.FuelCost("heat from boilers – mains gas", 1, "Price");
          fuelCosts10b.Box340e = fuelCosts10b.Box340eP * this._Calc.Energy_Requirements_9b.Box307e * 0.01;
          this._Calc.Actual_costs_10b.Box340eP = this.FuelCost("heat from boilers – mains gas", 0, "Price");
          this._Calc.Actual_costs_10b.Box340e = this._Calc.Actual_costs_10b.Box340eP * this._Calc.Energy_Requirements_9b.Box307e * 0.01;
        }
        if (!flag)
        {
          fuelCosts10b.Box340eP = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource4.Fuel, 1, "Price");
          fuelCosts10b.Box340e = fuelCosts10b.Box340eP * this._Calc.Energy_Requirements_9b.Box307e * 0.01;
          this._Calc.Actual_costs_10b.Box340eP = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource4.Fuel, 0, "Price");
          this._Calc.Actual_costs_10b.Box340e = this._Calc.Actual_costs_10b.Box340eP * this._Calc.Energy_Requirements_9b.Box307e * 0.01;
        }
      }
      if (this.OccupancyCalc && this._House.MainHeating.Fuel != null)
      {
        float fuelCost = (float) this.Get_FuelCost(this._House.MainHeating.Fuel);
        if ((double) fuelCost != 0.0)
        {
          fuelCosts10b.Box340aP = (double) fuelCost;
          fuelCosts10b.Box340a = this._Calc.Energy_Requirements_9b.Box307a * fuelCosts10b.Box340aP * 0.01;
          this._Calc.Actual_costs_10b.Box340a = fuelCosts10b.Box340a;
          fuelCosts10b.Box340b = this._Calc.Energy_Requirements_9b.Box307b * fuelCosts10b.Box340aP * 0.01;
          this._Calc.Actual_costs_10b.Box340b = fuelCosts10b.Box340b;
          fuelCosts10b.Box340c = this._Calc.Energy_Requirements_9b.Box307c * fuelCosts10b.Box340aP * 0.01;
          this._Calc.Actual_costs_10b.Box340c = fuelCosts10b.Box340c;
          fuelCosts10b.Box340d = this._Calc.Energy_Requirements_9b.Box307d * fuelCosts10b.Box340aP * 0.01;
          this._Calc.Actual_costs_10b.Box340d = fuelCosts10b.Box340d;
          fuelCosts10b.Box340e = this._Calc.Energy_Requirements_9b.Box307e * fuelCosts10b.Box340aP * 0.01;
          this._Calc.Actual_costs_10b.Box340e = fuelCosts10b.Box340e;
        }
      }
      if ((uint) this._House.SecHeating.SAPTableCode > 0U)
      {
        if (Operators.CompareString(this._House.SecHeating.Fuel, "Electricity", false) == 0)
        {
          string electricityType = this.GetElectricityType(0);
          if (Operators.CompareString(electricityType, "10-hour tariff (on-peak)", false) == 0)
          {
            fuelCosts10b.Box341P = 0.5 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price");
            this._Calc.Actual_costs_10b.Box341P = 0.5 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.5 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price");
          }
          else
          {
            fuelCosts10b.Box341P = this.FuelCost(electricityType, 1, "Price");
            this._Calc.Actual_costs_10b.Box341P = this.FuelCost(electricityType, 0, "Price");
          }
        }
        else
        {
          fuelCosts10b.Box341P = this.FuelCost(this._House.SecHeating.Fuel, 1, "Price");
          this._Calc.Actual_costs_10b.Box341P = this.FuelCost(this._House.SecHeating.Fuel, 0, "Price");
        }
        fuelCosts10b.Box341 = fuelCosts10b.Box341P * this._Calc.Energy_Requirements_9b.Box309 * 0.01;
        this._Calc.Actual_costs_10b.Box341 = this._Calc.Actual_costs_10b.Box341P * this._Calc.Energy_Requirements_9b.Box309 * 0.01;
      }
      if (this.OccupancyCalc && this._House.SecHeating.Fuel != null)
      {
        if (Microsoft.VisualBasic.Strings.LCase(this._House.SecHeating.Fuel).Contains("dual fuel"))
        {
          float fuelCost1 = (float) this.Get_FuelCost("house coal");
          if ((double) fuelCost1 != 0.0)
          {
            fuelCosts10b.Box341P = (double) fuelCost1;
            fuelCosts10b.Box341 = this._Calc.Energy_Requirements_9b.Box309 * fuelCosts10b.Box341P * 0.01;
          }
          float fuelCost2 = (float) this.Get_FuelCost("wood logs");
          if ((double) fuelCost2 != 0.0)
          {
            fuelCosts10b.Box341P = (double) fuelCost2;
            Fuel_costs_10b2012 fuelCosts10b2012;
            double num = (fuelCosts10b2012 = fuelCosts10b).Box341 + this._Calc.Energy_Requirements_9b.Box309_Dual_corrected * fuelCosts10b.Box341P * 0.01;
            fuelCosts10b2012.Box341 = num;
          }
          this._Calc.Actual_costs_10b.Box341 = fuelCosts10b.Box341;
        }
        else
        {
          float fuelCost3 = (float) this.Get_FuelCost(this._House.SecHeating.Fuel);
          if ((double) fuelCost3 != 0.0)
          {
            fuelCosts10b.Box341P = (double) fuelCost3;
            fuelCosts10b.Box341 = this._Calc.Energy_Requirements_9b.Box309_corrected * fuelCosts10b.Box341P * 0.01;
            this._Calc.Actual_costs_10b.Box341 = fuelCosts10b.Box341;
          }
          else
          {
            float fuelCost4 = (float) this.Get_FuelCost("low");
            if ((double) fuelCost4 != 0.0)
            {
              fuelCosts10b.Box341 = this._Calc.Energy_Requirements_9b.Box309_corrected * (double) fuelCost4 * 0.01;
              this._Calc.Actual_costs_10b.Box341 = fuelCosts10b.Box341;
            }
            float fuelCost5 = (float) this.Get_FuelCost("high");
            if ((double) fuelCost5 != 0.0)
            {
              Fuel_costs_10b2012 fuelCosts10b2012;
              double num = (fuelCosts10b2012 = fuelCosts10b).Box341 + this._Calc.Energy_Requirements_9b.Box309_High_corrected * (double) fuelCost5 * 0.01;
              fuelCosts10b2012.Box341 = num;
              this._Calc.Actual_costs_10b.Box341 = fuelCosts10b.Box341;
            }
          }
        }
      }
      SAP_Module.Dwelling dwelling1 = new SAP_Module.Dwelling();
      SAP_Module.Dwelling dwelling2 = !this.OccupancyCalc ? this._House : this.OriginalSAPDwelling;
      if (dwelling2.Water.SystemRef == 901)
      {
        if (dwelling2.MainHeating.SAPTableCode == 307)
        {
          fuelCosts10b.Box342aP = this.FuelCost("heat from CHP", 1, "Price");
          fuelCosts10b.Box342a = fuelCosts10b.Box342aP * this._Calc.Energy_Requirements_9b.Box310a * 0.01;
          this._Calc.Actual_costs_10b.Box342aP = this.FuelCost("heat from CHP", 0, "Price");
          this._Calc.Actual_costs_10b.Box342a = this._Calc.Actual_costs_10b.Box342aP * this._Calc.Energy_Requirements_9b.Box310a * 0.01;
        }
        else
        {
          bool flag = false;
          if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 && this.HeatSources[0].CommunityFuel.Equals("99"))
          {
            flag = true;
            fuelCosts10b.Box342aP = this.FuelCost("heat from boilers – mains gas", 1, "Price");
            fuelCosts10b.Box342a = fuelCosts10b.Box342aP * this._Calc.Energy_Requirements_9b.Box310a * 0.01;
            this._Calc.Actual_costs_10b.Box342aP = this.FuelCost("heat from boilers – mains gas", 0, "Price");
            this._Calc.Actual_costs_10b.Box342a = this._Calc.Actual_costs_10b.Box342aP * this._Calc.Energy_Requirements_9b.Box310a * 0.01;
          }
          if (!flag)
          {
            fuelCosts10b.Box342aP = this.FuelCost(this._House.MainHeating.Fuel, 1, "Price");
            fuelCosts10b.Box342a = fuelCosts10b.Box342aP * this._Calc.Energy_Requirements_9b.Box310a * 0.01;
            this._Calc.Actual_costs_10b.Box342aP = this.FuelCost(this._House.MainHeating.Fuel, 0, "Price");
            this._Calc.Actual_costs_10b.Box342a = this._Calc.Actual_costs_10b.Box342aP * this._Calc.Energy_Requirements_9b.Box310a * 0.01;
          }
        }
        if (dwelling2.MainHeating.CommunityH.NoOfAdditionalHeatSources > 0)
        {
          bool flag = false;
          if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 && this.HeatSources[1].CommunityFuel.Equals("99"))
          {
            flag = true;
            fuelCosts10b.Box342bP = this.FuelCost("heat from boilers – mains gas", 1, "Price");
            fuelCosts10b.Box342b = fuelCosts10b.Box342bP * this._Calc.Energy_Requirements_9b.Box310b * 0.01;
            this._Calc.Actual_costs_10b.Box342bP = this.FuelCost("heat from boilers – mains gas", 0, "Price");
            this._Calc.Actual_costs_10b.Box342b = this._Calc.Actual_costs_10b.Box342bP * this._Calc.Energy_Requirements_9b.Box310b * 0.01;
          }
          if (!flag)
          {
            fuelCosts10b.Box342bP = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource1.Fuel, 1, "Price");
            fuelCosts10b.Box342b = fuelCosts10b.Box342bP * this._Calc.Energy_Requirements_9b.Box310b * 0.01;
            this._Calc.Actual_costs_10b.Box342bP = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource1.Fuel, 0, "Price");
            this._Calc.Actual_costs_10b.Box342b = this._Calc.Actual_costs_10b.Box342bP * this._Calc.Energy_Requirements_9b.Box310b * 0.01;
          }
        }
        if (dwelling2.MainHeating.CommunityH.NoOfAdditionalHeatSources > 1)
        {
          bool flag = false;
          if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 && this.HeatSources[2].CommunityFuel.Equals("99"))
          {
            flag = true;
            fuelCosts10b.Box342cP = this.FuelCost("heat from boilers – mains gas", 1, "Price");
            fuelCosts10b.Box342c = fuelCosts10b.Box342cP * this._Calc.Energy_Requirements_9b.Box310c * 0.01;
            this._Calc.Actual_costs_10b.Box342cP = this.FuelCost("heat from boilers – mains gas", 0, "Price");
            this._Calc.Actual_costs_10b.Box342c = this._Calc.Actual_costs_10b.Box342cP * this._Calc.Energy_Requirements_9b.Box310c * 0.01;
          }
          if (!flag)
          {
            fuelCosts10b.Box342cP = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource2.Fuel, 1, "Price");
            fuelCosts10b.Box342c = fuelCosts10b.Box342cP * this._Calc.Energy_Requirements_9b.Box310c * 0.01;
            this._Calc.Actual_costs_10b.Box342cP = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource2.Fuel, 0, "Price");
            this._Calc.Actual_costs_10b.Box342c = this._Calc.Actual_costs_10b.Box342cP * this._Calc.Energy_Requirements_9b.Box310c * 0.01;
          }
        }
        if (dwelling2.MainHeating.CommunityH.NoOfAdditionalHeatSources > 2)
        {
          bool flag = false;
          if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 && this.HeatSources[3].CommunityFuel.Equals("99"))
          {
            flag = true;
            fuelCosts10b.Box342dP = this.FuelCost("heat from boilers – mains gas", 1, "Price");
            fuelCosts10b.Box342d = fuelCosts10b.Box342dP * this._Calc.Energy_Requirements_9b.Box310d * 0.01;
            this._Calc.Actual_costs_10b.Box342dP = this.FuelCost("heat from boilers – mains gas", 0, "Price");
            this._Calc.Actual_costs_10b.Box342d = this._Calc.Actual_costs_10b.Box342dP * this._Calc.Energy_Requirements_9b.Box310d * 0.01;
          }
          if (!flag)
          {
            fuelCosts10b.Box342dP = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource3.Fuel, 1, "Price");
            fuelCosts10b.Box342d = fuelCosts10b.Box342dP * this._Calc.Energy_Requirements_9b.Box310d * 0.01;
            this._Calc.Actual_costs_10b.Box342dP = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource3.Fuel, 0, "Price");
            this._Calc.Actual_costs_10b.Box342d = this._Calc.Actual_costs_10b.Box342dP * this._Calc.Energy_Requirements_9b.Box310d * 0.01;
          }
        }
        if (dwelling2.MainHeating.CommunityH.NoOfAdditionalHeatSources > 3)
        {
          bool flag = false;
          if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 && this.HeatSources[4].CommunityFuel.Equals("99"))
          {
            flag = true;
            fuelCosts10b.Box342eP = this.FuelCost("heat from boilers – mains gas", 1, "Price");
            fuelCosts10b.Box342e = fuelCosts10b.Box342eP * this._Calc.Energy_Requirements_9b.Box310e * 0.01;
            this._Calc.Actual_costs_10b.Box342eP = this.FuelCost("heat from boilers – mains gas", 0, "Price");
            this._Calc.Actual_costs_10b.Box342e = this._Calc.Actual_costs_10b.Box342eP * this._Calc.Energy_Requirements_9b.Box310e * 0.01;
          }
          if (!flag)
          {
            fuelCosts10b.Box342eP = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource4.Fuel, 1, "Price");
            fuelCosts10b.Box342e = fuelCosts10b.Box342eP * this._Calc.Energy_Requirements_9b.Box310e * 0.01;
            this._Calc.Actual_costs_10b.Box342eP = this.FuelCost(this._House.MainHeating.CommunityH.HeatSource4.Fuel, 0, "Price");
            this._Calc.Actual_costs_10b.Box342e = this._Calc.Actual_costs_10b.Box342eP * this._Calc.Energy_Requirements_9b.Box310e * 0.01;
          }
        }
        if (this.OccupancyCalc)
        {
          float fuelCost = (float) this.Get_FuelCost(this._House.MainHeating.Fuel);
          fuelCosts10b.Box342aP = (double) fuelCost;
          fuelCosts10b.Box342a = fuelCosts10b.Box342aP * this._Calc.Energy_Requirements_9b.Box310a * 0.01;
          this._Calc.Actual_costs_10b.Box342aP = (double) fuelCost;
          this._Calc.Actual_costs_10b.Box342a = this._Calc.Actual_costs_10b.Box342aP * this._Calc.Energy_Requirements_9b.Box310a * 0.01;
          if (dwelling2.MainHeating.CommunityH.NoOfAdditionalHeatSources > 0)
          {
            fuelCosts10b.Box342bP = (double) fuelCost;
            fuelCosts10b.Box342b = fuelCosts10b.Box342bP * this._Calc.Energy_Requirements_9b.Box310b * 0.01;
            this._Calc.Actual_costs_10b.Box342bP = (double) fuelCost;
            this._Calc.Actual_costs_10b.Box342b = this._Calc.Actual_costs_10b.Box342bP * this._Calc.Energy_Requirements_9b.Box310b * 0.01;
          }
          if (dwelling2.MainHeating.CommunityH.NoOfAdditionalHeatSources > 1)
          {
            fuelCosts10b.Box342cP = (double) fuelCost;
            fuelCosts10b.Box342c = fuelCosts10b.Box342cP * this._Calc.Energy_Requirements_9b.Box310c * 0.01;
            this._Calc.Actual_costs_10b.Box342cP = (double) fuelCost;
            this._Calc.Actual_costs_10b.Box342c = this._Calc.Actual_costs_10b.Box342cP * this._Calc.Energy_Requirements_9b.Box310c * 0.01;
          }
          if (dwelling2.MainHeating.CommunityH.NoOfAdditionalHeatSources > 2)
          {
            fuelCosts10b.Box342dP = (double) fuelCost;
            fuelCosts10b.Box342d = fuelCosts10b.Box342dP * this._Calc.Energy_Requirements_9b.Box310d * 0.01;
            this._Calc.Actual_costs_10b.Box342dP = (double) fuelCost;
            this._Calc.Actual_costs_10b.Box342d = this._Calc.Actual_costs_10b.Box342dP * this._Calc.Energy_Requirements_9b.Box310d * 0.01;
          }
          if (dwelling2.MainHeating.CommunityH.NoOfAdditionalHeatSources > 3)
          {
            fuelCosts10b.Box342eP = (double) fuelCost;
            fuelCosts10b.Box342e = fuelCosts10b.Box342eP * this._Calc.Energy_Requirements_9b.Box310e * 0.01;
            this._Calc.Actual_costs_10b.Box342eP = (double) fuelCost;
            this._Calc.Actual_costs_10b.Box342e = this._Calc.Actual_costs_10b.Box342eP * this._Calc.Energy_Requirements_9b.Box310e * 0.01;
          }
        }
      }
      int systemRef = this._House.Water.SystemRef;
      if (systemRef == 903 || systemRef == 999)
      {
        int num = !(this._House.Water.Solar.Inlcude & !this._House.Water.Solar.SolarSeperate) ? 0 : checked ((int) Math.Round((double) this._House.Water.Solar.SolarVolume));
        string electricityTariff = this._House.MainHeating.ElectricityTariff;
        if (Operators.CompareString(electricityTariff, "standard tariff", false) != 0)
        {
          if (Operators.CompareString(electricityTariff, "10-hour tariff", false) != 0)
          {
            if (Operators.CompareString(electricityTariff, "7-hour tariff", false) != 0)
            {
              if (Operators.CompareString(electricityTariff, "24-hour tariff", false) == 0)
                fuelCosts10b.Box343 = 1.0;
            }
            else
              fuelCosts10b.Box343 = Operators.CompareString(this._House.Water.Cylinder.Immersion, "Dual", false) != 0 ? ((14530.0 - 762.0 * this._Calc.Water_heating.Box42) / ((double) this._House.Water.Cylinder.Volume - (double) num) - 80.0 + 10.0 * this._Calc.Water_heating.Box42) / 100.0 : ((6.8 - 0.024 * ((double) this._House.Water.Cylinder.Volume - (double) num)) * this._Calc.Water_heating.Box42 + 14.0 - 0.07 * ((double) this._House.Water.Cylinder.Volume - (double) num)) / 100.0;
          }
          else
            fuelCosts10b.Box343 = Operators.CompareString(this._House.Water.Cylinder.Immersion, "Dual", false) != 0 ? ((14530.0 - 762.0 * this._Calc.Water_heating.Box42) / (1.5 * ((double) this._House.Water.Cylinder.Volume - (double) num)) - 80.0 + 10.0 * this._Calc.Water_heating.Box42) / 100.0 : ((6.8 - 0.036 * ((double) this._House.Water.Cylinder.Volume - (double) num)) * this._Calc.Water_heating.Box42 + 14.0 - 0.105 * ((double) this._House.Water.Cylinder.Volume - (double) num)) / 100.0;
        }
        else
          fuelCosts10b.Box343 = 1.0;
        if (fuelCosts10b.Box343 < 0.0)
          fuelCosts10b.Box343 = 0.0;
        if (fuelCosts10b.Box343 > 1.0)
          fuelCosts10b.Box343 = 1.0;
        fuelCosts10b.Box344 = 1.0 - fuelCosts10b.Box343;
        this._Calc.Actual_costs_10b.Box343 = fuelCosts10b.Box343;
        this._Calc.Actual_costs_10b.Box344 = 1.0 - fuelCosts10b.Box343;
        fuelCosts10b.Box345P = this.FuelCost(this.GetElectricityType(0), 1, "Price");
        fuelCosts10b.Box345 = this._Calc.Energy_Requirements_9b.Box312 * fuelCosts10b.Box343 * fuelCosts10b.Box345P * 0.01;
        this._Calc.Actual_costs_10a.Box245 = this._Calc.Energy_Requirements_9b.Box312 * fuelCosts10b.Box343 * this.FuelCost(this.GetElectricityType(0), 0, "Price") * 0.01;
        fuelCosts10b.Box346P = this.FuelCost(this.GetElectricityType(1), 1, "Price");
        fuelCosts10b.Box346 = this._Calc.Energy_Requirements_9b.Box312 * fuelCosts10b.Box344 * fuelCosts10b.Box346P * 0.01;
        this._Calc.Actual_costs_10b.Box346 = this._Calc.Energy_Requirements_9b.Box312 * fuelCosts10b.Box344 * this.FuelCost(this.GetElectricityType(1), 0, "Price") * 0.01;
        if (this.OccupancyCalc)
        {
          float fuelCost = (float) this.Get_FuelCost("electricity");
          if ((double) fuelCost != 0.0)
          {
            fuelCosts10b.Box345P = (double) fuelCost;
            fuelCosts10b.Box346P = (double) fuelCost;
            fuelCosts10b.Box345 = this._Calc.Energy_Requirements_9a.Box219_corrected * fuelCosts10b.Box343 * fuelCosts10b.Box345P * 0.01;
            fuelCosts10b.Box346 = this._Calc.Energy_Requirements_9a.Box219_corrected * fuelCosts10b.Box344 * fuelCosts10b.Box346P * 0.01;
            this._Calc.Actual_costs_10a.Box245 = fuelCosts10b.Box345;
            this._Calc.Actual_costs_10a.Box246 = fuelCosts10b.Box346;
          }
        }
      }
      else
      {
        int num;
        switch (systemRef)
        {
          case 907:
          case 908:
            num = 1;
            break;
          case 909:
            string electricityTariff = this._House.MainHeating.ElectricityTariff;
            if (Operators.CompareString(electricityTariff, "standard tariff", false) != 0 && Operators.CompareString(electricityTariff, "24-hour tariff", false) != 0)
            {
              if (Operators.CompareString(electricityTariff, "10-hour tariff", false) != 0)
              {
                if (Operators.CompareString(electricityTariff, "7-hour tariff", false) == 0)
                {
                  fuelCosts10b.Box347P = 0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price");
                  fuelCosts10b.Box347 = this._Calc.Energy_Requirements_9b.Box312 * fuelCosts10b.Box347P * 0.01;
                  this._Calc.Actual_costs_10b.Box347 = this._Calc.Energy_Requirements_9b.Box312 * (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price")) * 0.01;
                }
              }
              else
              {
                fuelCosts10b.Box347P = 0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price");
                fuelCosts10b.Box347 = this._Calc.Energy_Requirements_9b.Box312 * fuelCosts10b.Box347P * 0.01;
                this._Calc.Actual_costs_10b.Box347 = this._Calc.Energy_Requirements_9b.Box312 * (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price")) * 0.01;
              }
            }
            else
            {
              fuelCosts10b.Box347P = this.FuelCost(this.GetElectricityType(0), 1, "Price");
              fuelCosts10b.Box347 = this._Calc.Energy_Requirements_9b.Box312 * fuelCosts10b.Box347P * 0.01;
              this._Calc.Actual_costs_10b.Box347 = this._Calc.Energy_Requirements_9b.Box312 * this.FuelCost(this.GetElectricityType(0), 0, "Price") * 0.01;
            }
            if (this.OccupancyCalc)
            {
              float fuelCost = (float) this.Get_FuelCost("electricity");
              if ((double) fuelCost != 0.0)
              {
                fuelCosts10b.Box347P = (double) fuelCost;
                fuelCosts10b.Box347 = this._Calc.Energy_Requirements_9a.Box219_corrected * fuelCosts10b.Box347P * 0.01;
                this._Calc.Actual_costs_10b.Box347 = fuelCosts10b.Box347;
              }
              goto label_171;
            }
            else
              goto label_171;
          default:
            num = systemRef == 911 ? 1 : 0;
            break;
        }
        if (num != 0)
        {
          fuelCosts10b.Box347P = this.FuelCost(this._House.Water.Fuel, 1, "Price");
          fuelCosts10b.Box347 = this._Calc.Energy_Requirements_9b.Box312 * fuelCosts10b.Box347P * 0.01;
          this._Calc.Actual_costs_10a.Box247 = this._Calc.Energy_Requirements_9b.Box312 * this.FuelCost(this._House.Water.Fuel, 0, "Price") * 0.01;
          if (this.OccupancyCalc)
          {
            float fuelCost = (float) this.Get_FuelCost(this._House.Water.Fuel);
            if ((double) fuelCost != 0.0)
            {
              fuelCosts10b.Box347P = (double) fuelCost;
              fuelCosts10b.Box347 = this._Calc.Energy_Requirements_9a.Box219_corrected * fuelCosts10b.Box347P * 0.01;
              this._Calc.Actual_costs_10b.Box347 = fuelCosts10b.Box347;
            }
          }
        }
        else if (systemRef >= 950 && systemRef <= 952)
        {
          if (this._House.Water.SystemRef == 951)
          {
            fuelCosts10b.Box342aP = this.FuelCost("heat from CHP", 1, "Price");
            fuelCosts10b.Box342a = fuelCosts10b.Box342aP * this._Calc.Energy_Requirements_9b.Box310aW * 0.01;
            this._Calc.Actual_costs_10b.Box342aP = this.FuelCost("heat from CHP", 0, "Price");
            this._Calc.Actual_costs_10b.Box342a = this._Calc.Actual_costs_10b.Box342aP * this._Calc.Energy_Requirements_9b.Box310aW * 0.01;
          }
          else
          {
            bool flag = false;
            if (this._House.Water.HWSComm.FromDatabase && this.HeatSourcesWater[0].CommunityFuel.Equals("99"))
            {
              flag = true;
              fuelCosts10b.Box342aP = this.FuelCost("heat from boilers – mains gas", 1, "Price");
              fuelCosts10b.Box342a = fuelCosts10b.Box342aP * this._Calc.Energy_Requirements_9b.Box310aW * 0.01;
              this._Calc.Actual_costs_10b.Box342aP = this.FuelCost("heat from boilers – mains gas", 0, "Price");
              this._Calc.Actual_costs_10b.Box342a = this._Calc.Actual_costs_10b.Box342aP * this._Calc.Energy_Requirements_9b.Box310aW * 0.01;
            }
            if (!flag)
            {
              fuelCosts10b.Box342aP = this.FuelCost(this._House.Water.Fuel, 1, "Price");
              fuelCosts10b.Box342a = fuelCosts10b.Box342aP * this._Calc.Energy_Requirements_9b.Box310aW * 0.01;
              this._Calc.Actual_costs_10b.Box342aP = this.FuelCost(this._House.Water.Fuel, 0, "Price");
              this._Calc.Actual_costs_10b.Box342a = this._Calc.Actual_costs_10b.Box342aP * this._Calc.Energy_Requirements_9b.Box310aW * 0.01;
            }
          }
          if (this._House.Water.HWSComm.NoOfAdditionalHeatSources > 0)
          {
            bool flag = false;
            if (this._House.Water.HWSComm.FromDatabase && this.HeatSourcesWater[1].CommunityFuel.Equals("99"))
            {
              flag = true;
              fuelCosts10b.Box342bP = this.FuelCost("heat from boilers – mains gas", 1, "Price");
              fuelCosts10b.Box342b = fuelCosts10b.Box342bP * this._Calc.Energy_Requirements_9b.Box310bW * 0.01;
              this._Calc.Actual_costs_10b.Box342bP = this.FuelCost("heat from boilers – mains gas", 0, "Price");
              this._Calc.Actual_costs_10b.Box342b = this._Calc.Actual_costs_10b.Box342bP * this._Calc.Energy_Requirements_9b.Box310bW * 0.01;
            }
            if (!flag)
            {
              fuelCosts10b.Box342bP = this.FuelCost(this._House.Water.HWSComm.HeatSource1.Fuel, 1, "Price");
              fuelCosts10b.Box342b = fuelCosts10b.Box342bP * this._Calc.Energy_Requirements_9b.Box310bW * 0.01;
              this._Calc.Actual_costs_10b.Box342bP = this.FuelCost(this._House.Water.HWSComm.HeatSource1.Fuel, 0, "Price");
              this._Calc.Actual_costs_10b.Box342b = this._Calc.Actual_costs_10b.Box342bP * this._Calc.Energy_Requirements_9b.Box310bW * 0.01;
            }
          }
          if (this._House.Water.HWSComm.NoOfAdditionalHeatSources > 1)
          {
            bool flag = false;
            if (this._House.Water.HWSComm.FromDatabase && this.HeatSourcesWater[2].CommunityFuel.Equals("99"))
            {
              flag = true;
              fuelCosts10b.Box342cP = this.FuelCost("heat from boilers – mains gas", 1, "Price");
              fuelCosts10b.Box342c = fuelCosts10b.Box342cP * this._Calc.Energy_Requirements_9b.Box310cW * 0.01;
              this._Calc.Actual_costs_10b.Box342cP = this.FuelCost("heat from boilers – mains gas", 0, "Price");
              this._Calc.Actual_costs_10b.Box342c = this._Calc.Actual_costs_10b.Box342cP * this._Calc.Energy_Requirements_9b.Box310cW * 0.01;
            }
            if (!flag)
            {
              fuelCosts10b.Box342cP = this.FuelCost(this._House.Water.HWSComm.HeatSource2.Fuel, 1, "Price");
              fuelCosts10b.Box342c = fuelCosts10b.Box342cP * this._Calc.Energy_Requirements_9b.Box310cW * 0.01;
              this._Calc.Actual_costs_10b.Box342cP = this.FuelCost(this._House.Water.HWSComm.HeatSource2.Fuel, 0, "Price");
              this._Calc.Actual_costs_10b.Box342c = this._Calc.Actual_costs_10b.Box342cP * this._Calc.Energy_Requirements_9b.Box310cW * 0.01;
            }
          }
          if (this._House.Water.HWSComm.NoOfAdditionalHeatSources > 2)
          {
            bool flag = false;
            if (this._House.Water.HWSComm.FromDatabase && this.HeatSourcesWater[3].CommunityFuel.Equals("99"))
            {
              flag = true;
              fuelCosts10b.Box342dP = this.FuelCost("heat from boilers – mains gas", 1, "Price");
              fuelCosts10b.Box342d = fuelCosts10b.Box342dP * this._Calc.Energy_Requirements_9b.Box310dW * 0.01;
              this._Calc.Actual_costs_10b.Box342dP = this.FuelCost("heat from boilers – mains gas", 0, "Price");
              this._Calc.Actual_costs_10b.Box342d = this._Calc.Actual_costs_10b.Box342dP * this._Calc.Energy_Requirements_9b.Box310dW * 0.01;
            }
            if (!flag)
            {
              fuelCosts10b.Box342dP = this.FuelCost(this._House.Water.HWSComm.HeatSource3.Fuel, 1, "Price");
              fuelCosts10b.Box342d = fuelCosts10b.Box342dP * this._Calc.Energy_Requirements_9b.Box310dW * 0.01;
              this._Calc.Actual_costs_10b.Box342dP = this.FuelCost(this._House.Water.HWSComm.HeatSource3.Fuel, 0, "Price");
              this._Calc.Actual_costs_10b.Box342d = this._Calc.Actual_costs_10b.Box342dP * this._Calc.Energy_Requirements_9b.Box310dW * 0.01;
            }
          }
          if (this._House.Water.HWSComm.NoOfAdditionalHeatSources > 3)
          {
            bool flag = false;
            if (this._House.Water.HWSComm.FromDatabase && this.HeatSourcesWater[4].CommunityFuel.Equals("99"))
            {
              flag = true;
              fuelCosts10b.Box342eP = this.FuelCost("heat from boilers – mains gas", 1, "Price");
              fuelCosts10b.Box342e = fuelCosts10b.Box342eP * this._Calc.Energy_Requirements_9b.Box310eW * 0.01;
              this._Calc.Actual_costs_10b.Box342eP = this.FuelCost("heat from boilers – mains gas", 0, "Price");
              this._Calc.Actual_costs_10b.Box342e = this._Calc.Actual_costs_10b.Box342eP * this._Calc.Energy_Requirements_9b.Box310eW * 0.01;
            }
            if (!flag)
            {
              fuelCosts10b.Box342eP = this.FuelCost(this._House.Water.HWSComm.HeatSource4.Fuel, 1, "Price");
              fuelCosts10b.Box342e = fuelCosts10b.Box342eP * this._Calc.Energy_Requirements_9b.Box310eW * 0.01;
              this._Calc.Actual_costs_10b.Box342eP = this.FuelCost(this._House.Water.HWSComm.HeatSource4.Fuel, 0, "Price");
              this._Calc.Actual_costs_10b.Box342e = this._Calc.Actual_costs_10b.Box342eP * this._Calc.Energy_Requirements_9b.Box310eW * 0.01;
            }
          }
        }
      }
label_171:
      if (this.OccupancyCalc)
      {
        if (Operators.CompareString(Microsoft.VisualBasic.Strings.LCase(this._House.Water.Fuel), "electricity", false) == 0 & this._House.Water.SystemRef != 901 & this._House.Water.SystemRef != 902 & this._House.Water.SystemRef != 914)
        {
          if (this._Calc.Energy_Requirements_9b.Box312_High_corrected != 0.0)
          {
            float fuelCost6 = (float) this.Get_FuelCost("low");
            if ((double) fuelCost6 != 0.0)
            {
              fuelCosts10b.Box346 = this._Calc.Energy_Requirements_9b.Box312_corrected * (double) fuelCost6 * 0.01;
              this._Calc.Actual_costs_10b.Box346 = fuelCosts10b.Box346;
            }
            float fuelCost7 = (float) this.Get_FuelCost("high");
            if ((double) fuelCost7 != 0.0)
            {
              fuelCosts10b.Box345 = this._Calc.Energy_Requirements_9b.Box312_High_corrected * (double) fuelCost7 * 0.01;
              this._Calc.Actual_costs_10b.Box345 = fuelCosts10b.Box345;
            }
          }
          else
          {
            float fuelCost = (float) this.Get_FuelCost("electricity");
            if ((double) fuelCost != 0.0)
            {
              fuelCosts10b.Box346P = (double) fuelCost;
              fuelCosts10b.Box345 = 0.0;
              this._Calc.Actual_costs_10b.Box345 = 0.0;
              fuelCosts10b.Box346 = this._Calc.Energy_Requirements_9b.Box312_corrected * fuelCosts10b.Box346P * 0.01;
              this._Calc.Actual_costs_10b.Box346 = fuelCosts10b.Box346;
            }
          }
        }
        if (this._Calc.Energy_Requirements_9b.Box312a_High_corrected != 0.0)
        {
          float fuelCost8 = (float) this.Get_FuelCost("low");
          if ((double) fuelCost8 != 0.0)
          {
            fuelCosts10b.Box347a = this._Calc.Energy_Requirements_9b.Box312a_corrected * (double) fuelCost8 * 0.01;
            this._Calc.Actual_costs_10b.Box347a = fuelCosts10b.Box347a;
          }
          float fuelCost9 = (float) this.Get_FuelCost("high");
          if ((double) fuelCost9 != 0.0)
          {
            Fuel_costs_10b2012 fuelCosts10b2012;
            double num = (fuelCosts10b2012 = fuelCosts10b).Box347a + this._Calc.Energy_Requirements_9b.Box312a_High_corrected * (double) fuelCost9 * 0.01;
            fuelCosts10b2012.Box347a = num;
            this._Calc.Actual_costs_10b.Box347a = fuelCosts10b.Box347a;
          }
        }
        else
        {
          float fuelCost = (float) this.Get_FuelCost("electricity domestic");
          if ((double) fuelCost != 0.0)
          {
            fuelCosts10b.Box347a = this._Calc.Energy_Requirements_9b.Box312a_corrected * (double) fuelCost * 0.01;
            this._Calc.Actual_costs_10b.Box347a = fuelCosts10b.Box347a;
          }
          else
          {
            float num = (float) this.FuelCost(this.GetElectricityType(1), 0, "Price");
            fuelCosts10b.Box347a = this._Calc.Energy_Requirements_9b.Box312a_corrected * (double) num * 0.01;
            this._Calc.Actual_costs_10b.Box347a = fuelCosts10b.Box347a;
          }
        }
      }
      if (this._House.Cooling.Include)
      {
        if (Operators.CompareString(this._House.MainHeating.ElectricityTariff, "10-hour tariff", false) == 0)
        {
          fuelCosts10b.Box348P = 0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price");
          fuelCosts10b.Box348 = this._Calc.Energy_Requirements_9b.Box315 * fuelCosts10b.Box348P * 0.01;
          this._Calc.Actual_costs_10b.Box348 = this._Calc.Energy_Requirements_9b.Box314 * (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price")) * 0.01;
        }
        else if (Operators.CompareString(this._House.MainHeating.ElectricityTariff, "7-hour tariff", false) == 0)
        {
          fuelCosts10b.Box348P = 0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price");
          fuelCosts10b.Box348 = this._Calc.Energy_Requirements_9b.Box315 * fuelCosts10b.Box348P * 0.01;
          this._Calc.Actual_costs_10b.Box348 = this._Calc.Energy_Requirements_9b.Box314 * (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price")) * 0.01;
        }
        else
        {
          fuelCosts10b.Box348P = this.FuelCost(this.GetElectricityType(0), 1, "Price");
          fuelCosts10b.Box348 = this._Calc.Energy_Requirements_9b.Box315 * fuelCosts10b.Box348P * 0.01;
          this._Calc.Actual_costs_10b.Box348 = this._Calc.Energy_Requirements_9b.Box314 * this.FuelCost(this.GetElectricityType(0), 0, "Price") * 0.01;
        }
      }
      if (Operators.CompareString(this._House.MainHeating.ElectricityTariff, "10-hour tariff", false) == 0)
      {
        float num1 = (float) (0.58 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.42 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
        Fuel_costs_10b2012 fuelCosts10b2012_1;
        double num2 = (fuelCosts10b2012_1 = fuelCosts10b).Box349 + this._Calc.Energy_Requirements_9b.Box330a * (double) num1 * 0.01;
        fuelCosts10b2012_1.Box349 = num2;
        this._Calc.Actual_costs_10b.Box349 = Conversions.ToDouble(Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9b.Box330a, (object) (0.58 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.42 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"))), (object) 0.01));
        float num3 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
        Fuel_costs_10b2012 fuelCosts10b2012_2;
        double num4 = (fuelCosts10b2012_2 = fuelCosts10b).Box349 + this._Calc.Energy_Requirements_9b.Box330b * (double) num3 * 0.01;
        fuelCosts10b2012_2.Box349 = num4;
        object Right1 = (object) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
        Actual_costs_10b2012 actualCosts10b1;
        double num5 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10b1 = this._Calc.Actual_costs_10b).Box349, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9b.Box330b, Right1), (object) 0.01)));
        actualCosts10b1.Box349 = num5;
        float num6 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
        Fuel_costs_10b2012 fuelCosts10b2012_3;
        double num7 = (fuelCosts10b2012_3 = fuelCosts10b).Box349 + this._Calc.Energy_Requirements_9b.Box330g * (double) num6 * 0.01;
        fuelCosts10b2012_3.Box349 = num7;
        object Right2 = (object) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
        Actual_costs_10b2012 actualCosts10b2;
        double num8 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10b2 = this._Calc.Actual_costs_10b).Box349, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9b.Box330g, Right2), (object) 0.01)));
        actualCosts10b2.Box349 = num8;
        Actual_costs_10b2012 actualCosts10b3;
        double num9 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10b3 = this._Calc.Actual_costs_10b).Box349Water, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9b.Box330g, Right2), (object) 0.01)));
        actualCosts10b3.Box349Water = num9;
        fuelCosts10b.Box350P = 0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price");
        Fuel_costs_10b2012 fuelCosts10b2012_4;
        double num10 = (fuelCosts10b2012_4 = fuelCosts10b).Box350 + this._Calc.Internal_gains.AppendixL.EL_Final * fuelCosts10b.Box350P * 0.01;
        fuelCosts10b2012_4.Box350 = num10;
        this._Calc.Actual_costs_10b.Box350 = Conversions.ToDouble(Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Internal_gains.AppendixL.EL_Final, (object) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"))), (object) 0.01));
      }
      else if (Operators.CompareString(this._House.MainHeating.ElectricityTariff, "7-hour tariff", false) == 0)
      {
        float num11 = (float) (0.71 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.29 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
        Fuel_costs_10b2012 fuelCosts10b2012_5;
        double num12 = (fuelCosts10b2012_5 = fuelCosts10b).Box349 + this._Calc.Energy_Requirements_9b.Box330a * (double) num11 * 0.01;
        fuelCosts10b2012_5.Box349 = num12;
        this._Calc.Actual_costs_10b.Box349 = Conversions.ToDouble(Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9b.Box330a, (object) (0.71 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.29 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"))), (object) 0.01));
        float num13 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
        Fuel_costs_10b2012 fuelCosts10b2012_6;
        double num14 = (fuelCosts10b2012_6 = fuelCosts10b).Box349 + this._Calc.Energy_Requirements_9b.Box330b * (double) num13 * 0.01;
        fuelCosts10b2012_6.Box349 = num14;
        object Right3 = (object) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
        Actual_costs_10b2012 actualCosts10b4;
        double num15 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10b4 = this._Calc.Actual_costs_10b).Box349, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9b.Box330b, Right3), (object) 0.01)));
        actualCosts10b4.Box349 = num15;
        float num16 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
        Fuel_costs_10b2012 fuelCosts10b2012_7;
        double num17 = (fuelCosts10b2012_7 = fuelCosts10b).Box349 + this._Calc.Energy_Requirements_9b.Box330g * (double) num16 * 0.01;
        fuelCosts10b2012_7.Box349 = num17;
        object Right4 = (object) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
        Actual_costs_10b2012 actualCosts10b5;
        double num18 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10b5 = this._Calc.Actual_costs_10b).Box349, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9b.Box330g, Right4), (object) 0.01)));
        actualCosts10b5.Box349 = num18;
        Actual_costs_10b2012 actualCosts10b6;
        double num19 = Conversions.ToDouble(Operators.AddObject((object) (actualCosts10b6 = this._Calc.Actual_costs_10b).Box349Water, Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Energy_Requirements_9b.Box330g, Right4), (object) 0.01)));
        actualCosts10b6.Box349Water = num19;
        fuelCosts10b.Box350P = 0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price");
        Fuel_costs_10b2012 fuelCosts10b2012_8;
        double num20 = (fuelCosts10b2012_8 = fuelCosts10b).Box350 + this._Calc.Internal_gains.AppendixL.EL_Final * fuelCosts10b.Box350P * 0.01;
        fuelCosts10b2012_8.Box350 = num20;
        this._Calc.Actual_costs_10b.Box350 = Conversions.ToDouble(Operators.MultiplyObject(Operators.MultiplyObject((object) this._Calc.Internal_gains.AppendixL.EL_Final, (object) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"))), (object) 0.01));
      }
      else
      {
        fuelCosts10b.Box349P = this.FuelCost(this.GetElectricityType(0), 1, "Price");
        fuelCosts10b.Box349 = this._Calc.Energy_Requirements_9b.Box331 * fuelCosts10b.Box349P * 0.01;
        this._Calc.Actual_costs_10b.Box349 = this._Calc.Energy_Requirements_9b.Box331 * this.FuelCost(this.GetElectricityType(0), 0, "Price") * 0.01;
        fuelCosts10b.Box350P = fuelCosts10b.Box349P;
        fuelCosts10b.Box350 = this._Calc.Internal_gains.AppendixL.EL_Final * fuelCosts10b.Box350P * 0.01;
        this._Calc.Actual_costs_10b.Box350 = this._Calc.Internal_gains.AppendixL.EL_Final * this.FuelCost(this.GetElectricityType(0), 0, "Price") * 0.01;
      }
      if (this.OccupancyCalc)
      {
        if (this._Calc.Energy_Requirements_9b.Box331_High_corrected != 0.0)
        {
          float fuelCost10 = (float) this.Get_FuelCost("low");
          if ((double) fuelCost10 != 0.0)
          {
            fuelCosts10b.Box349 = this._Calc.Energy_Requirements_9b.Box331_corrected * (double) fuelCost10 * 0.01;
            this._Calc.Actual_costs_10b.Box349 = fuelCosts10b.Box349;
          }
          float fuelCost11 = (float) this.Get_FuelCost("high");
          if ((double) fuelCost11 != 0.0)
          {
            Fuel_costs_10b2012 fuelCosts10b2012;
            double num = (fuelCosts10b2012 = fuelCosts10b).Box349 + this._Calc.Energy_Requirements_9b.Box331_High_corrected * (double) fuelCost11 * 0.01;
            fuelCosts10b2012.Box349 = num;
            this._Calc.Actual_costs_10b.Box349 = fuelCosts10b.Box349;
          }
        }
        else
        {
          float fuelCost = (float) this.Get_FuelCost("electricity domestic");
          if ((double) fuelCost != 0.0)
          {
            fuelCosts10b.Box349 = this._Calc.Energy_Requirements_9b.Box331_corrected * (double) fuelCost * 0.01;
            this._Calc.Actual_costs_10b.Box349 = fuelCosts10b.Box349;
          }
        }
        float num21;
        if (this._Calc.Energy_Requirements_9b.Box332_High_corrected != 0.0)
        {
          float fuelCost = (float) this.Get_FuelCost("low");
          if ((double) fuelCost != 0.0)
          {
            fuelCosts10b.Box350 = this._Calc.Energy_Requirements_9b.Box332_corrected * (double) fuelCost * 0.01;
            fuelCosts10b.Box350a = this._Calc.Energy_Requirements_9b.Box332a_corrected * (double) fuelCost * 0.01;
            fuelCosts10b.Box350b = this._Calc.Energy_Requirements_9b.Box332b_corrected * (double) fuelCost * 0.01;
            this._Calc.Actual_costs_10b.Box350 = fuelCosts10b.Box350;
            this._Calc.Actual_costs_10b.Box350a = fuelCosts10b.Box350a;
            this._Calc.Actual_costs_10b.Box350b = fuelCosts10b.Box350b;
          }
          num21 = (float) this.Get_FuelCost("high");
          if ((double) num21 != 0.0)
          {
            Fuel_costs_10b2012 fuelCosts10b2012_9;
            double num22 = (fuelCosts10b2012_9 = fuelCosts10b).Box350 + this._Calc.Energy_Requirements_9b.Box332_High_corrected * (double) num21 * 0.01;
            fuelCosts10b2012_9.Box350 = num22;
            Fuel_costs_10b2012 fuelCosts10b2012_10;
            double num23 = (fuelCosts10b2012_10 = fuelCosts10b).Box350a + this._Calc.Energy_Requirements_9b.Box332a_High_corrected * (double) num21 * 0.01;
            fuelCosts10b2012_10.Box350a = num23;
            Fuel_costs_10b2012 fuelCosts10b2012_11;
            double num24 = (fuelCosts10b2012_11 = fuelCosts10b).Box350b + this._Calc.Energy_Requirements_9b.Box332b_High_corrected * (double) num21 * 0.01;
            fuelCosts10b2012_11.Box350b = num24;
            this._Calc.Actual_costs_10b.Box350 = fuelCosts10b.Box350;
            this._Calc.Actual_costs_10b.Box350a = fuelCosts10b.Box350a;
            this._Calc.Actual_costs_10b.Box350b = fuelCosts10b.Box350b;
          }
        }
        else
        {
          num21 = (float) this.Get_FuelCost("electricity domestic");
          if ((double) num21 != 0.0)
          {
            fuelCosts10b.Box350P = (double) num21;
            fuelCosts10b.Box350 = this._Calc.Energy_Requirements_9b.Box332_corrected * (double) num21 * 0.01;
            fuelCosts10b.Box350a = this._Calc.Energy_Requirements_9b.Box332a_corrected * (double) num21 * 0.01;
            fuelCosts10b.Box350b = this._Calc.Energy_Requirements_9b.Box332b_corrected * (double) num21 * 0.01;
            this._Calc.Actual_costs_10b.Box350 = fuelCosts10b.Box350;
            this._Calc.Actual_costs_10b.Box350a = fuelCosts10b.Box350a;
            this._Calc.Actual_costs_10b.Box350b = fuelCosts10b.Box350b;
          }
          else
          {
            num21 = (float) this.FuelCost(this.GetElectricityType(1), 0, "Price");
            fuelCosts10b.Box350 = this._Calc.Energy_Requirements_9b.Box332_corrected * (double) num21 * 0.01;
            fuelCosts10b.Box350a = this._Calc.Energy_Requirements_9b.Box332a_corrected * (double) num21 * 0.01;
            fuelCosts10b.Box350b = this._Calc.Energy_Requirements_9b.Box332b_corrected * (double) num21 * 0.01;
            this._Calc.Actual_costs_10b.Box350 = fuelCosts10b.Box350;
            this._Calc.Actual_costs_10b.Box350a = fuelCosts10b.Box350a;
            this._Calc.Actual_costs_10b.Box350b = fuelCosts10b.Box350b;
          }
        }
        if (this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Always_Gas | this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Gas | this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Gas_Electric)
        {
          num21 = 0.0f;
          try
          {
            foreach (OccupancyClass.OtherFuel otherFuel in (Collection<OccupancyClass.OtherFuel>) this.OccupancyData.OtherFuels)
            {
              if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Bulk_LPG)
              {
                if ((uint) Operators.CompareString(this._House.MainHeating.Fuel, "bulk LPG", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "bulk LPG", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "bulk LPG", false) > 0U)
                {
                  num21 = (float) this.Get_FuelCost("bulk LPG");
                  break;
                }
              }
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Bottled_LPG)
              {
                if ((uint) Operators.CompareString(this._House.MainHeating.Fuel, "bottled LPG", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "bottled LPG", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "bottled LPG", false) > 0U)
                {
                  num21 = (float) this.Get_FuelCost("bottled LPG");
                  break;
                }
              }
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.LPG_Special_Condition_18 && (uint) Operators.CompareString(this._House.MainHeating.Fuel, "LPG subject to Special Condition 18", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "LPG subject to Special Condition 18", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "LPG subject to Special Condition 18", false) > 0U)
              {
                num21 = (float) this.Get_FuelCost("LPG subject to Special Condition 18");
                break;
              }
            }
          }
          finally
          {
            IEnumerator<OccupancyClass.OtherFuel> enumerator;
            enumerator?.Dispose();
          }
          if ((double) num21 == 0.0)
          {
            if (this.OccupancyData.MainsGas_Available)
            {
              num21 = (float) this.Get_FuelCost("mains gas");
            }
            else
            {
              try
              {
                foreach (OccupancyClass.OtherFuel otherFuel in (Collection<OccupancyClass.OtherFuel>) this.OccupancyData.OtherFuels)
                {
                  if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Bulk_LPG)
                  {
                    num21 = (float) this.Get_FuelCost("bulk LPG");
                    break;
                  }
                  if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Bottled_LPG)
                  {
                    num21 = (float) this.Get_FuelCost("bottled LPG");
                    break;
                  }
                  if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.LPG_Special_Condition_18)
                  {
                    num21 = (float) this.Get_FuelCost("LPG subject to Special Condition 18");
                    break;
                  }
                }
              }
              finally
              {
                IEnumerator<OccupancyClass.OtherFuel> enumerator;
                enumerator?.Dispose();
              }
            }
          }
        }
        if (this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Always_Solid)
        {
          num21 = 0.0f;
          try
          {
            foreach (OccupancyClass.OtherFuel otherFuel in (Collection<OccupancyClass.OtherFuel>) this.OccupancyData.OtherFuels)
            {
              if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Coal)
              {
                if ((uint) Operators.CompareString(this._House.MainHeating.Fuel, "house coal", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "house coal", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "house coal", false) > 0U)
                {
                  num21 = (float) this.Get_FuelCost("house coal");
                  break;
                }
              }
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Anthracite)
              {
                if ((uint) Operators.CompareString(this._House.MainHeating.Fuel, "anthracite", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "anthracite", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "anthracite", false) > 0U)
                {
                  num21 = (float) this.Get_FuelCost("anthracite");
                  break;
                }
              }
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Smokeless_Fuel)
              {
                if ((uint) Operators.CompareString(this._House.MainHeating.Fuel, "manufactured smokeless fuel", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "manufactured smokeless fuel", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "manufactured smokeless fuel", false) > 0U)
                {
                  num21 = (float) this.Get_FuelCost("manufactured smokeless fuel");
                  break;
                }
              }
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Wood_Logs)
              {
                if ((uint) Operators.CompareString(this._House.MainHeating.Fuel, "wood logs", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "wood logs", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "wood logs", false) > 0U)
                {
                  num21 = (float) this.Get_FuelCost("wood logs");
                  break;
                }
              }
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Wood_Chips)
              {
                if ((uint) Operators.CompareString(this._House.MainHeating.Fuel, "wood chips", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "wood chips", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "wood chips", false) > 0U)
                {
                  num21 = (float) this.Get_FuelCost("wood chips");
                  break;
                }
              }
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Wood_Pellets && (uint) Operators.CompareString(this._House.MainHeating.Fuel, "wood pellets (in bags, for secondary heating)", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating.Fuel, "wood pellets (bulk supply in bags, for main heating)", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "wood pellets (in bags, for secondary heating)", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "wood pellets (bulk supply in bags, for main heating)", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "wood pellets (in bags, for secondary heating)", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "wood pellets (bulk supply in bags, for main heating)", false) > 0U)
              {
                num21 = (float) this.Get_FuelCost("wood pellets (in bags, for secondary heating)");
                break;
              }
            }
          }
          finally
          {
            IEnumerator<OccupancyClass.OtherFuel> enumerator;
            enumerator?.Dispose();
          }
          if ((double) num21 == 0.0)
          {
            try
            {
              foreach (OccupancyClass.OtherFuel otherFuel in (Collection<OccupancyClass.OtherFuel>) this.OccupancyData.OtherFuels)
              {
                if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Coal)
                {
                  num21 = (float) this.Get_FuelCost("house coal");
                  break;
                }
                if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Anthracite)
                {
                  num21 = (float) this.Get_FuelCost("anthracite");
                  break;
                }
                if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Smokeless_Fuel)
                {
                  num21 = (float) this.Get_FuelCost("manufactured smokeless fuel");
                  break;
                }
                if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Wood_Logs)
                {
                  num21 = (float) this.Get_FuelCost("wood logs");
                  break;
                }
                if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Wood_Chips)
                {
                  num21 = (float) this.Get_FuelCost("wood chips");
                  break;
                }
                if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Wood_Pellets)
                {
                  num21 = (float) this.Get_FuelCost("wood pellets (in bags, for secondary heating)");
                  break;
                }
              }
            }
            finally
            {
              IEnumerator<OccupancyClass.OtherFuel> enumerator;
              enumerator?.Dispose();
            }
          }
        }
        if (this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Always_Oil)
        {
          num21 = 0.0f;
          try
          {
            foreach (OccupancyClass.OtherFuel otherFuel in (Collection<OccupancyClass.OtherFuel>) this.OccupancyData.OtherFuels)
            {
              if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Biodiesel_From_Cooking_Oil)
              {
                if ((uint) Operators.CompareString(this._House.MainHeating.Fuel, "biodiesel from used cooking oil only", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "biodiesel from used cooking oil only", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "biodiesel from used cooking oil only", false) > 0U)
                {
                  num21 = (float) this.Get_FuelCost("biodiesel from used cooking oil only");
                  break;
                }
              }
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Heating_Oil)
              {
                if ((uint) Operators.CompareString(this._House.MainHeating.Fuel, "heating oil", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "heating oil", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "heating oil", false) > 0U)
                {
                  num21 = (float) this.Get_FuelCost("heating oil");
                  break;
                }
              }
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Mineral_Oil_Or_Liquid_Biofuel)
              {
                if ((uint) Operators.CompareString(this._House.MainHeating.Fuel, "appliances able to use mineral oil or liquid biofuel", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "appliances able to use mineral oil or liquid biofuel", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "appliances able to use mineral oil or liquid biofuel", false) > 0U)
                {
                  num21 = (float) this.Get_FuelCost("appliances able to use mineral oil or liquid biofuel");
                  break;
                }
              }
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Rapeseed_Oil && (uint) Operators.CompareString(this._House.MainHeating.Fuel, "rapeseed oil", false) > 0U & (uint) Operators.CompareString(this._House.MainHeating2.Fuel, "rapeseed oil", false) > 0U & (uint) Operators.CompareString(this._House.SecHeating.Fuel, "rapeseed oil", false) > 0U)
              {
                num21 = (float) this.Get_FuelCost("rapeseed oil");
                break;
              }
            }
          }
          finally
          {
            IEnumerator<OccupancyClass.OtherFuel> enumerator;
            enumerator?.Dispose();
          }
          if ((double) num21 == 0.0)
          {
            try
            {
              foreach (OccupancyClass.OtherFuel otherFuel in (Collection<OccupancyClass.OtherFuel>) this.OccupancyData.OtherFuels)
              {
                if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Biodiesel_From_Cooking_Oil)
                {
                  num21 = (float) this.Get_FuelCost("biodiesel from used cooking oil only");
                  break;
                }
                if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Heating_Oil)
                {
                  num21 = (float) this.Get_FuelCost("heating oil");
                  break;
                }
                if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Mineral_Oil_Or_Liquid_Biofuel)
                {
                  num21 = (float) this.Get_FuelCost("appliances able to use mineral oil or liquid biofuel");
                  break;
                }
                if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Rapeseed_Oil)
                {
                  num21 = (float) this.Get_FuelCost("rapeseed oil");
                  break;
                }
              }
            }
            finally
            {
              IEnumerator<OccupancyClass.OtherFuel> enumerator;
              enumerator?.Dispose();
            }
          }
        }
        if ((double) num21 != 0.0)
        {
          if (this._Calc.Energy_Requirements_9b.Box332c_corrected != 0.0)
          {
            fuelCosts10b.Box350c = this._Calc.Energy_Requirements_9b.Box332c_corrected * (double) num21 * 0.01;
            this._Calc.Actual_costs_10b.Box350c = fuelCosts10b.Box350c;
          }
          else if (this.OccupancyData.CookingFuel != OccupancyClass.CookingFuel.Electric & this.OccupancyData.CookingFuel != OccupancyClass.CookingFuel.Always_Electric & this.OccupancyData.CookingFuel != OccupancyClass.CookingFuel.Gas_Electric)
          {
            fuelCosts10b.Box350b = this._Calc.Energy_Requirements_9b.Box332b_corrected * (double) num21 * 0.01;
            this._Calc.Actual_costs_10b.Box350b = fuelCosts10b.Box350b;
          }
        }
      }
      if (this._House.Renewable.Special.Include)
      {
        string electricityTariff = this._House.MainHeating.ElectricityTariff;
        float num25;
        float num26;
        if (Operators.CompareString(electricityTariff, "10-hour tariff", false) != 0)
        {
          if (Operators.CompareString(electricityTariff, "7-hour tariff", false) == 0)
          {
            num25 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price"));
            num26 = (float) (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price"));
          }
          else
          {
            num25 = (float) this.FuelCost(this.GetElectricityType(0), 1, "Price");
            num26 = (float) this.FuelCost(this.GetElectricityType(0), 0, "Price");
          }
        }
        else
        {
          num25 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price"));
          num26 = (float) (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price"));
        }
        if (this.OccupancyCalc)
        {
          if ((uint) this.OccupancyData.Electricity_High.FuelBillInfo > 0U)
          {
            num25 = (float) (0.45 * this.Get_FuelCost("high") + 0.05 * this.Get_FuelCost("low") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
            num26 = (float) (0.45 * this.Get_FuelCost("high") + 0.05 * this.Get_FuelCost("low") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
          }
          else
          {
            num25 = (float) (0.4 * this.Get_FuelCost("electricity") + 0.6 * this.FuelCost("electricity sold to grid", 0, "Price"));
            num26 = (float) (0.4 * this.Get_FuelCost("electricity") + 0.6 * this.FuelCost("electricity sold to grid", 0, "Price"));
          }
        }
        this._Calc.Fuel_costs_10b.AppendixQ_Item_Count = this._House.Renewable.Special.Special.Length;
        this._Calc.Actual_costs_10b.AppendixQ_Item_Count = this._House.Renewable.Special.Special.Length;
        int num27 = checked (this._House.Renewable.Special.Special.Length - 1);
        int Index = 0;
        while (Index <= num27)
        {
          if (Operators.CompareString(this._House.Renewable.Special.Special[Index].FuelSaved, "Electricity", false) == 0)
          {
            this._Calc.Fuel_costs_10b.get_AppendixQ_Item(Index).Energy_Saved_Price = (double) num25;
            this._Calc.Fuel_costs_10b.get_AppendixQ_Item(Index).Energy_Saved_Cost = this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index).Energy_Saved * (double) num25 * 0.01;
            this._Calc.Actual_costs_10b.get_AppendixQ_Item(Index).Energy_Saved_Price = (double) num26;
            this._Calc.Actual_costs_10b.get_AppendixQ_Item(Index).Energy_Saved_Cost = this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index).Energy_Saved * (double) num26 * 0.01;
          }
          else
          {
            this._Calc.Fuel_costs_10b.get_AppendixQ_Item(Index).Energy_Saved_Price = (double) num25;
            this._Calc.Fuel_costs_10b.get_AppendixQ_Item(Index).Energy_Saved_Cost = this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index).Energy_Saved * this.FuelCost(this._House.Renewable.Special.Special[Index].FuelSaved, 1, "Price") / 100.0;
            this._Calc.Actual_costs_10b.get_AppendixQ_Item(Index).Energy_Saved_Price = (double) num26;
            this._Calc.Actual_costs_10b.get_AppendixQ_Item(Index).Energy_Saved_Cost = this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index).Energy_Saved * this.FuelCost(this._House.Renewable.Special.Special[Index].FuelSaved, 0, "Price") / 100.0;
          }
          if (Operators.CompareString(this._House.Renewable.Special.Special[Index].FuelUsed, "Electricity", false) == 0)
          {
            this._Calc.Fuel_costs_10b.get_AppendixQ_Item(Index).Energy_Used_Price = (double) num25;
            this._Calc.Fuel_costs_10b.get_AppendixQ_Item(Index).Energy_Used_Cost = this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index).Energy_Used * (double) num25 * 0.01;
            this._Calc.Actual_costs_10b.get_AppendixQ_Item(Index).Energy_Used_Price = (double) num26;
            this._Calc.Actual_costs_10b.get_AppendixQ_Item(Index).Energy_Used_Cost = this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index).Energy_Used * (double) num26 * 0.01;
          }
          else
          {
            this._Calc.Fuel_costs_10b.get_AppendixQ_Item(Index).Energy_Used_Price = this.FuelCost(this._House.Renewable.Special.Special[Index].FuelUsed, 1, "Price");
            this._Calc.Fuel_costs_10b.get_AppendixQ_Item(Index).Energy_Used_Cost = this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index).Energy_Used * this._Calc.Fuel_costs_10b.get_AppendixQ_Item(Index).Energy_Used_Price / 100.0;
            this._Calc.Actual_costs_10b.get_AppendixQ_Item(Index).Energy_Used_Price = this.FuelCost(this._House.Renewable.Special.Special[Index].FuelUsed, 0, "Price");
            this._Calc.Actual_costs_10b.get_AppendixQ_Item(Index).Energy_Used_Cost = this._Calc.Energy_Requirements_9b.get_AppendixQ_Item(Index).Energy_Used * this._Calc.Actual_costs_10b.get_AppendixQ_Item(Index).Energy_Used_Price / 100.0;
          }
          checked { ++Index; }
        }
      }
      fuelCosts10b.Box351 = this.FuelCost("heat from boilers – mains gas", 1, "SC");
      this._Calc.Actual_costs_10b.Box351 = this.FuelCost("heat from boilers – mains gas", 0, "SC");
      if (this._House.Water.SystemRef == 903)
      {
        Fuel_costs_10b2012 fuelCosts10b2012;
        double num28 = (fuelCosts10b2012 = fuelCosts10b).Box351 + this.FuelCost(this.GetElectricityType(1), 1, "SC");
        fuelCosts10b2012.Box351 = num28;
        Actual_costs_10b2012 actualCosts10b;
        double num29 = (actualCosts10b = this._Calc.Actual_costs_10b).Box351 + this.FuelCost(this.GetElectricityType(1), 0, "SC");
        actualCosts10b.Box351 = num29;
      }
      if (this.OccupancyCalc)
      {
        fuelCosts10b.Box351 = Math.Round(this.Get_StandingCharge(), 0);
        this._Calc.Actual_costs_10b.Box351 = fuelCosts10b.Box351;
      }
      if (this.OccupancyCalc)
      {
        float num30;
        float num31;
        if ((uint) this.OccupancyData.Electricity_High.FuelBillInfo > 0U)
        {
          num30 = (float) (0.45 * this.Get_FuelCost("high") + 0.05 * this.Get_FuelCost("low") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
          num31 = (float) (0.45 * this.Get_FuelCost("high") + 0.05 * this.Get_FuelCost("low") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
        }
        else
        {
          num30 = (float) (0.5 * this.Get_FuelCost("electricity") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
          num31 = (float) (0.5 * this.Get_FuelCost("electricity") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
        }
        this._Calc.Actual_costs_10b.Box352_OA = this._Calc.Energy_Requirements_9b.Box333_OA * (double) num30 * 0.01;
        this._Calc.Fuel_costs_10b.Box352_OA = this._Calc.Energy_Requirements_9b.Box333_OA * (double) num30 * 0.01;
        float num32;
        if ((uint) this.OccupancyData.Electricity_High.FuelBillInfo > 0U)
        {
          num32 = (float) (0.45 * this.Get_FuelCost("high") + 0.05 * this.Get_FuelCost("low") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
          num31 = (float) (0.45 * this.Get_FuelCost("high") + 0.05 * this.Get_FuelCost("low") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
        }
        else
        {
          num32 = (float) (0.7 * this.Get_FuelCost("electricity") + 0.3 * this.FuelCost("electricity sold to grid", 0, "Price"));
          num31 = (float) (0.7 * this.Get_FuelCost("electricity") + 0.3 * this.FuelCost("electricity sold to grid", 0, "Price"));
        }
        this._Calc.Actual_costs_10b.Box353_OA = this._Calc.Energy_Requirements_9b.Box334_OA * (double) num32 * 0.01;
        this._Calc.Fuel_costs_10b.Box353_OA = this._Calc.Energy_Requirements_9b.Box334_OA * (double) num32 * 0.01;
      }
      fuelCosts10b.Box355 = fuelCosts10b.Box340a + fuelCosts10b.Box340b + fuelCosts10b.Box340c + fuelCosts10b.Box340d + fuelCosts10b.Box340e + fuelCosts10b.Box341 + fuelCosts10b.Box342a + fuelCosts10b.Box342b + fuelCosts10b.Box342c + fuelCosts10b.Box342d + fuelCosts10b.Box342e + fuelCosts10b.Box345 + fuelCosts10b.Box346 + fuelCosts10b.Box347 + fuelCosts10b.Box348 + fuelCosts10b.Box349 + fuelCosts10b.Box350 + fuelCosts10b.Box351 + fuelCosts10b.Box352 + fuelCosts10b.Box353 + fuelCosts10b.Box354;
      this._Calc.Actual_costs_10b.Box355 = this._Calc.Actual_costs_10b.Box340a + this._Calc.Actual_costs_10b.Box340b + this._Calc.Actual_costs_10b.Box340c + this._Calc.Actual_costs_10b.Box340d + this._Calc.Actual_costs_10b.Box340e + this._Calc.Actual_costs_10b.Box341 + this._Calc.Actual_costs_10b.Box342a + this._Calc.Actual_costs_10b.Box342b + this._Calc.Actual_costs_10b.Box342c + this._Calc.Actual_costs_10b.Box342d + this._Calc.Actual_costs_10b.Box342e + this._Calc.Actual_costs_10b.Box345 + this._Calc.Actual_costs_10b.Box346 + this._Calc.Actual_costs_10b.Box347 + this._Calc.Actual_costs_10b.Box348 + this._Calc.Actual_costs_10b.Box349 + this._Calc.Actual_costs_10b.Box350 + this._Calc.Actual_costs_10b.Box351 + this._Calc.Actual_costs_10b.Box352 + this._Calc.Actual_costs_10b.Box353 + this._Calc.Actual_costs_10b.Box354;
      if (this.OccupancyCalc)
      {
        Actual_costs_10b2012 actualCosts10b7;
        double num33 = (actualCosts10b7 = this._Calc.Actual_costs_10b).Box355 - this._Calc.Actual_costs_10b.Box352;
        actualCosts10b7.Box355 = num33;
        Actual_costs_10b2012 actualCosts10b8;
        double num34 = (actualCosts10b8 = this._Calc.Actual_costs_10b).Box355 - this._Calc.Actual_costs_10b.Box353;
        actualCosts10b8.Box355 = num34;
        Actual_costs_10b2012 actualCosts10b9;
        double num35 = (actualCosts10b9 = this._Calc.Actual_costs_10b).Box355 - this._Calc.Actual_costs_10b.Box354;
        actualCosts10b9.Box355 = num35;
        Actual_costs_10b2012 actualCosts10b10;
        double num36 = (actualCosts10b10 = this._Calc.Actual_costs_10b).Box355 + (fuelCosts10b.Box347a + fuelCosts10b.Box350a + fuelCosts10b.Box350b + fuelCosts10b.Box350c + fuelCosts10b.Box352_OA + fuelCosts10b.Box353_OA);
        actualCosts10b10.Box355 = num36;
      }
    }

    private double Get_FuelCost(string Fuel)
    {
      if (Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("electricity"))
      {
        if (this.OccupancyData.Electricity.FuelBillInfo != OccupancyClass.Fuel.FuelBillInformation.NotAvailable)
        {
          double num = this.OccupancyData.Electricity.VAT ? 1.0 : 1.05;
          return (double) this.OccupancyData.Electricity.UnitPrice.FollowOnUnitPrice == 0.0 ? (double) this.OccupancyData.Electricity.StandardCharge.Rate * num : (double) this.OccupancyData.Electricity.UnitPrice.FollowOnUnitPrice * num;
        }
        return Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("domestic") ? this.FuelCost("standard tariff", 0, "Price") : this.FuelCost(this.GetElectricityType(1), 0, "Price");
      }
      if (Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("low"))
      {
        if (this.OccupancyData.Electricity_Low.FuelBillInfo != OccupancyClass.Fuel.FuelBillInformation.NotAvailable)
          return (double) this.OccupancyData.Electricity_Low.StandardCharge.Rate * (this.OccupancyData.Electricity_Low.VAT ? 1.0 : 1.05);
        if ((uint) this.OccupancyData.Electricity_Low.FuelBillInfo > 0U)
          return this.FuelCost(this.GetElectricityType(1), 0, "Price");
      }
      else if (Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("high"))
      {
        if (this.OccupancyData.Electricity_High.FuelBillInfo != OccupancyClass.Fuel.FuelBillInformation.NotAvailable)
          return (double) this.OccupancyData.Electricity_High.StandardCharge.Rate * (this.OccupancyData.Electricity_High.VAT ? 1.0 : 1.05);
        if ((uint) this.OccupancyData.Electricity_High.FuelBillInfo > 0U)
          return this.FuelCost(this.GetElectricityType(0), 0, "Price");
      }
      else
      {
        if (Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("mains gas"))
        {
          if (this.OccupancyData.Gas.FuelBillInfo == OccupancyClass.Fuel.FuelBillInformation.NotAvailable)
            return this.FuelCost("mains gas", 0, "Price");
          double num = this.OccupancyData.Gas.VAT ? 1.0 : 1.05;
          return (double) this.OccupancyData.Gas.UnitPrice.FollowOnUnitPrice != 0.0 ? (double) this.OccupancyData.Gas.UnitPrice.FollowOnUnitPrice * num : (double) this.OccupancyData.Gas.StandardCharge.Rate * num;
        }
        if (Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("heat from boilers"))
        {
          if (this.OccupancyData.CommunityHeating.FuelBillInfo != OccupancyClass.Community.FuelBillInformation.NotAvailable)
            return this.OccupancyData.CommunityHeating.UnitPrice * (this.OccupancyData.CommunityHeating.VAT ? 1.0 : 1.05);
        }
        else
        {
          bool flag = false;
          try
          {
            foreach (OccupancyClass.OtherFuel otherFuel in (Collection<OccupancyClass.OtherFuel>) this.OccupancyData.OtherFuels)
            {
              if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Coal & (Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("coal") | Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("dual fuel appliance (mineral and wood)")))
                flag = true;
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Smokeless_Fuel & Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("smokeless"))
                flag = true;
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Anthracite & Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("anthracite"))
                flag = true;
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.B30K & Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("b30k"))
                flag = true;
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Rapeseed_Oil & Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("rapeseed"))
                flag = true;
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Heating_Oil & Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("oil"))
                flag = true;
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Wood_Chips & Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("wood chips"))
                flag = true;
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Wood_Logs & Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("wood logs"))
                flag = true;
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Wood_Pellets & Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("wood pellets"))
                flag = true;
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.LPG_Special_Condition_18 & Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("lpg subject to special condition 18"))
                flag = true;
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Bioethanol & Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("bioethanol"))
                flag = true;
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Bulk_LPG & Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("bulk lpg"))
                flag = true;
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Bottled_LPG & Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("bottled lpg"))
                flag = true;
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Biodiesel_From_Biomass & Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("biodiesel from any biomass source"))
                flag = true;
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Biodiesel_From_Cooking_Oil & Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("biodiesel from used cooking oil only"))
                flag = true;
              else if (otherFuel.Fuel == OccupancyClass.OtherFuel.FuelType.Mineral_Oil_Or_Liquid_Biofuel & Microsoft.VisualBasic.Strings.LCase(Fuel).Contains("appliances able to use mineral oil or liquid biofuel"))
                flag = true;
              if (flag)
              {
                if (otherFuel.FuelBillInfo == OccupancyClass.OtherFuel.FuelBillInformation.NotAvailable)
                  return this.FuelCost(Fuel, 0, "Price");
                double num = otherFuel.VAT ? 1.0 : 1.05;
                return (double) otherFuel.TotalCost != 0.0 ? (this.StandardOccupancyCalc ? this.FuelCost(Fuel, 0, "Price") : (double) otherFuel.TotalCost * num * 100.0 / this.Units_To_kWh(otherFuel.Fuel, otherFuel.UnitType, (double) otherFuel.UnitsPurchased)) : ((uint) otherFuel.UnitsPurchased > 0U ? (double) otherFuel.UnitPrice * (double) otherFuel.UnitsPurchased * num / this.Units_To_kWh(otherFuel.Fuel, otherFuel.UnitType, (double) otherFuel.UnitsPurchased) : (double) otherFuel.UnitPrice * 1.0 * num / this.Units_To_kWh(otherFuel.Fuel, otherFuel.UnitType, 1.0));
              }
            }
          }
          finally
          {
            IEnumerator<OccupancyClass.OtherFuel> enumerator;
            enumerator?.Dispose();
          }
        }
      }
      return 0.0;
    }

    private void HeatLoss()
    {
      int num1 = checked (this._House.NoofDoors - 1);
      int index1 = 0;
      while (index1 <= num1)
      {
        HeatLoss2012 heatLoss1;
        double num2 = (heatLoss1 = this._Calc.HeatLoss).Box26HL + (double) this._House.Doors[index1].Area * (double) this._House.Doors[index1].U * (double) this._House.Doors[index1].Count;
        heatLoss1.Box26HL = num2;
        HeatLoss2012 heatLoss2;
        double num3 = (heatLoss2 = this._Calc.HeatLoss).Box31 + (double) this._House.Doors[index1].Area * (double) this._House.Doors[index1].Count;
        heatLoss2.Box31 = num3;
        checked { ++index1; }
      }
      int num4 = checked (this._House.NoofWindows - 1);
      int index2 = 0;
      while (index2 <= num4)
      {
        HeatLoss2012 heatLoss3;
        double num5 = (heatLoss3 = this._Calc.HeatLoss).Box27HL + (double) this._House.Windows[index2].Area * (1.0 / (1.0 / (double) this._House.Windows[index2].U + 0.04)) * (double) this._House.Windows[index2].Count;
        heatLoss3.Box27HL = num5;
        HeatLoss2012 heatLoss4;
        double num6 = (heatLoss4 = this._Calc.HeatLoss).Box31 + (double) this._House.Windows[index2].Area * (double) this._House.Windows[index2].Count;
        heatLoss4.Box31 = num6;
        checked { ++index2; }
      }
      int num7 = checked (this._House.NoofRoofLights - 1);
      int index3 = 0;
      while (index3 <= num7)
      {
        HeatLoss2012 heatLoss5;
        double num8 = (heatLoss5 = this._Calc.HeatLoss).Box27aHL + (double) this._House.RoofLights[index3].Area * (1.0 / (1.0 / (double) this._House.RoofLights[index3].U + 0.04)) * (double) this._House.RoofLights[index3].Count;
        heatLoss5.Box27aHL = num8;
        HeatLoss2012 heatLoss6;
        double num9 = (heatLoss6 = this._Calc.HeatLoss).Box31 + (double) this._House.RoofLights[index3].Area * (double) this._House.RoofLights[index3].Count;
        heatLoss6.Box31 = num9;
        checked { ++index3; }
      }
      int num10 = checked (this._House.NoofFloors - 1);
      int index4 = 0;
      while (index4 <= num10)
      {
        string type = this._House.Floors[index4].Type;
        if (Operators.CompareString(type, "Basement floor", false) != 0)
        {
          if (Operators.CompareString(type, "Ground floor", false) != 0 && Operators.CompareString(type, "", false) != 0)
          {
            if (Operators.CompareString(type, "Exposed floor", false) == 0)
            {
              HeatLoss2012 heatLoss7;
              double num11 = (heatLoss7 = this._Calc.HeatLoss).Box28bHL + (double) this._House.Floors[index4].Area * (1.0 / (1.0 / (double) this._House.Floors[index4].U_Value + (double) this._House.Floors[index4].Ru));
              heatLoss7.Box28bHL = num11;
              HeatLoss2012 heatLoss8;
              double num12 = (heatLoss8 = this._Calc.HeatLoss).Box28bHC + (double) this._House.Floors[index4].Area * (double) this._House.Floors[index4].K;
              heatLoss8.Box28bHC = num12;
            }
          }
          else
          {
            HeatLoss2012 heatLoss9;
            double num13 = (heatLoss9 = this._Calc.HeatLoss).Box28aHL + (double) this._House.Floors[index4].Area * (1.0 / (1.0 / (double) this._House.Floors[index4].U_Value + (double) this._House.Floors[index4].Ru));
            heatLoss9.Box28aHL = num13;
            HeatLoss2012 heatLoss10;
            double num14 = (heatLoss10 = this._Calc.HeatLoss).Box28aHC + (double) this._House.Floors[index4].Area * (double) this._House.Floors[index4].K;
            heatLoss10.Box28aHC = num14;
          }
        }
        else
        {
          HeatLoss2012 heatLoss11;
          double num15 = (heatLoss11 = this._Calc.HeatLoss).Box28HL + (double) this._House.Floors[index4].Area * (1.0 / (1.0 / (double) this._House.Floors[index4].U_Value + (double) this._House.Floors[index4].Ru));
          heatLoss11.Box28HL = num15;
          HeatLoss2012 heatLoss12;
          double num16 = (heatLoss12 = this._Calc.HeatLoss).Box28HC + (double) this._House.Floors[index4].Area * (double) this._House.Floors[index4].K;
          heatLoss12.Box28HC = num16;
        }
        HeatLoss2012 heatLoss;
        double num17 = (heatLoss = this._Calc.HeatLoss).Box31 + (double) this._House.Floors[index4].Area;
        heatLoss.Box31 = num17;
        checked { ++index4; }
      }
      this._Add_Variable._3._WallAreas = new double[checked (this._House.NoofWalls - 1 + 1)];
      int num18 = checked (this._House.NoofWalls - 1);
      int index5 = 0;
      while (index5 <= num18)
      {
        double area = (double) this._House.Walls[index5].Area;
        if (this._House.GrossAreas)
        {
          int num19 = checked (this._House.NoofDoors - 1);
          int index6 = 0;
          while (index6 <= num19)
          {
            if (Operators.CompareString(this._House.Doors[index6].Location, this._House.Walls[index5].Name, false) == 0)
              area -= (double) this._House.Doors[index6].Area * (double) this._House.Doors[index6].Count;
            checked { ++index6; }
          }
          int num20 = checked (this._House.NoofWindows - 1);
          int index7 = 0;
          while (index7 <= num20)
          {
            if (Operators.CompareString(this._House.Windows[index7].Location, this._House.Walls[index5].Name, false) == 0)
              area -= (double) this._House.Windows[index7].Area * (double) this._House.Windows[index7].Count;
            checked { ++index7; }
          }
        }
        this._Add_Variable._3._WallAreas[index5] = area;
        string type = this._House.Walls[index5].Type;
        if (Operators.CompareString(type, "Basement wall", false) != 0)
        {
          if (Operators.CompareString(type, "Exposed wall", false) == 0)
          {
            HeatLoss2012 heatLoss13;
            double num21 = (heatLoss13 = this._Calc.HeatLoss).Box29aHL + area * (1.0 / (1.0 / (double) this._House.Walls[index5].U_Value + (double) this._House.Walls[index5].Ru));
            heatLoss13.Box29aHL = num21;
            HeatLoss2012 heatLoss14;
            double num22 = (heatLoss14 = this._Calc.HeatLoss).Box29aHC + area * (double) this._House.Walls[index5].K;
            heatLoss14.Box29aHC = num22;
          }
          else
          {
            HeatLoss2012 heatLoss15;
            double num23 = (heatLoss15 = this._Calc.HeatLoss).Box29aHL + area * (1.0 / (1.0 / (double) this._House.Walls[index5].U_Value + (double) this._House.Walls[index5].Ru));
            heatLoss15.Box29aHL = num23;
            HeatLoss2012 heatLoss16;
            double num24 = (heatLoss16 = this._Calc.HeatLoss).Box29aHC + area * (double) this._House.Walls[index5].K;
            heatLoss16.Box29aHC = num24;
          }
        }
        else
        {
          HeatLoss2012 heatLoss17;
          double num25 = (heatLoss17 = this._Calc.HeatLoss).Box29HL + area * (1.0 / (1.0 / (double) this._House.Walls[index5].U_Value + (double) this._House.Walls[index5].Ru));
          heatLoss17.Box29HL = num25;
          HeatLoss2012 heatLoss18;
          double num26 = (heatLoss18 = this._Calc.HeatLoss).Box29HC + area * (double) this._House.Walls[index5].K;
          heatLoss18.Box29HC = num26;
        }
        HeatLoss2012 heatLoss;
        double num27 = (heatLoss = this._Calc.HeatLoss).Box31 + area;
        heatLoss.Box31 = num27;
        checked { ++index5; }
      }
      this._Add_Variable._3._RoofAreas = new double[checked (this._House.NoofRoofs - 1 + 1)];
      int num28 = checked (this._House.NoofRoofs - 1);
      int index8 = 0;
      while (index8 <= num28)
      {
        double area = (double) this._House.Roofs[index8].Area;
        if (this._House.GrossAreas)
        {
          int num29 = checked (this._House.NoofRoofLights - 1);
          int index9 = 0;
          while (index9 <= num29)
          {
            if (Operators.CompareString(this._House.RoofLights[index9].Location, this._House.Roofs[index8].Name, false) == 0)
              area -= (double) this._House.RoofLights[index9].Area * (double) this._House.RoofLights[index9].Count;
            checked { ++index9; }
          }
        }
        this._Add_Variable._3._RoofAreas[index8] = area;
        HeatLoss2012 heatLoss19;
        double num30 = (heatLoss19 = this._Calc.HeatLoss).Box30HL + area * (1.0 / (1.0 / (double) this._House.Roofs[index8].U_Value + (double) this._House.Roofs[index8].Ru));
        heatLoss19.Box30HL = num30;
        HeatLoss2012 heatLoss20;
        double num31 = (heatLoss20 = this._Calc.HeatLoss).Box30HC + area * (double) this._House.Roofs[index8].K;
        heatLoss20.Box30HC = num31;
        HeatLoss2012 heatLoss21;
        double num32 = (heatLoss21 = this._Calc.HeatLoss).Box31 + area;
        heatLoss21.Box31 = num32;
        checked { ++index8; }
      }
      int num33 = checked (this._House.NoofPWalls - 1);
      int index10 = 0;
      while (index10 <= num33)
      {
        HeatLoss2012 heatLoss22;
        double num34 = (heatLoss22 = this._Calc.HeatLoss).Box32HL + (double) this._House.PWalls[index10].Area * (double) this._House.PWalls[index10].U_Value;
        heatLoss22.Box32HL = num34;
        HeatLoss2012 heatLoss23;
        double num35 = (heatLoss23 = this._Calc.HeatLoss).Box32HC + (double) this._House.PWalls[index10].Area * (double) this._House.PWalls[index10].K;
        heatLoss23.Box32HC = num35;
        checked { ++index10; }
      }
      int num36 = checked (this._House.NoofpFloors - 1);
      int index11 = 0;
      while (index11 <= num36)
      {
        HeatLoss2012 heatLoss;
        double num37 = (heatLoss = this._Calc.HeatLoss).Box32aHC + (double) this._House.PFloors[index11].Area * (double) this._House.PFloors[index11].K;
        heatLoss.Box32aHC = num37;
        checked { ++index11; }
      }
      int num38 = checked (this._House.NoofPCeilings - 1);
      int index12 = 0;
      while (index12 <= num38)
      {
        HeatLoss2012 heatLoss;
        double num39 = (heatLoss = this._Calc.HeatLoss).Box32bHC + (double) this._House.PCeilings[index12].Area * (double) this._House.PCeilings[index12].K;
        heatLoss.Box32bHC = num39;
        checked { ++index12; }
      }
      int num40 = checked (this._House.NoofIWalls - 1);
      int index13 = 0;
      while (index13 <= num40)
      {
        HeatLoss2012 heatLoss;
        double num41 = (heatLoss = this._Calc.HeatLoss).Box32cHC + (double) this._House.IWalls[index13].Area * (double) this._House.IWalls[index13].K;
        heatLoss.Box32cHC = num41;
        checked { ++index13; }
      }
      int num42 = checked (this._House.NoofIFloors - 1);
      int index14 = 0;
      while (index14 <= num42)
      {
        HeatLoss2012 heatLoss;
        double num43 = (heatLoss = this._Calc.HeatLoss).Box32dHC + (double) this._House.IFloors[index14].Area * (double) this._House.IFloors[index14].K;
        heatLoss.Box32dHC = num43;
        checked { ++index14; }
      }
      int num44 = checked (this._House.NoofICeilings - 1);
      int index15 = 0;
      while (index15 <= num44)
      {
        HeatLoss2012 heatLoss;
        double num45 = (heatLoss = this._Calc.HeatLoss).Box32eHC + (double) this._House.ICeilings[index15].Area * (double) this._House.ICeilings[index15].K;
        heatLoss.Box32eHC = num45;
        checked { ++index15; }
      }
      this._Calc.HeatLoss.Box33 = this._Calc.HeatLoss.Box26HL + this._Calc.HeatLoss.Box27HL + this._Calc.HeatLoss.Box27aHL + this._Calc.HeatLoss.Box28HL + this._Calc.HeatLoss.Box28aHL + this._Calc.HeatLoss.Box28bHL + this._Calc.HeatLoss.Box29HL + this._Calc.HeatLoss.Box29aHL + this._Calc.HeatLoss.Box30HL + this._Calc.HeatLoss.Box32HL;
      this._Calc.HeatLoss.Box34 = this._Calc.HeatLoss.Box28HC + this._Calc.HeatLoss.Box28aHC + this._Calc.HeatLoss.Box28bHC + this._Calc.HeatLoss.Box29HC + this._Calc.HeatLoss.Box29aHC + this._Calc.HeatLoss.Box30HC + this._Calc.HeatLoss.Box32HC + this._Calc.HeatLoss.Box32aHC + this._Calc.HeatLoss.Box32bHC + this._Calc.HeatLoss.Box32cHC + this._Calc.HeatLoss.Box32dHC + this._Calc.HeatLoss.Box32eHC;
      string type1 = this._House.TMP.Type;
      if (Operators.CompareString(type1, "Calculated", false) != 0)
      {
        if (Operators.CompareString(type1, "Indicative Value", false) != 0)
        {
          if (Operators.CompareString(type1, "User Value", false) == 0)
            this._Calc.HeatLoss.Box35 = (double) this._House.TMP.UserDefined;
        }
        else
        {
          string indicative = this._House.TMP.Indicative;
          if (Operators.CompareString(indicative, "Low", false) != 0)
          {
            if (Operators.CompareString(indicative, "Medium", false) != 0)
            {
              if (Operators.CompareString(indicative, "High", false) == 0)
                this._Calc.HeatLoss.Box35 = 450.0;
            }
            else
              this._Calc.HeatLoss.Box35 = 250.0;
          }
          else
            this._Calc.HeatLoss.Box35 = 100.0;
        }
      }
      else
        this._Calc.HeatLoss.Box35 = this._Calc.HeatLoss.Box34 / this._Calc.Dimensions.Box4;
      this._Calc.HeatLoss.Box36 = this._House.Thermal.ManualHtb ? (double) this._House.Thermal.HtbValue : (double) this._House.Thermal.YValue * this._Calc.HeatLoss.Box31;
      this._Calc.HeatLoss.Box37 = this._Calc.HeatLoss.Box33 + this._Calc.HeatLoss.Box36;
      this._Calc.HeatLoss.Box38_m.M1 = 0.33 * this._Calc.Ventilation.Box25_m.M1 * this._Calc.Dimensions.Box5;
      this._Calc.HeatLoss.Box38_m.M2 = 0.33 * this._Calc.Ventilation.Box25_m.M2 * this._Calc.Dimensions.Box5;
      this._Calc.HeatLoss.Box38_m.M3 = 0.33 * this._Calc.Ventilation.Box25_m.M3 * this._Calc.Dimensions.Box5;
      this._Calc.HeatLoss.Box38_m.M4 = 0.33 * this._Calc.Ventilation.Box25_m.M4 * this._Calc.Dimensions.Box5;
      this._Calc.HeatLoss.Box38_m.M5 = 0.33 * this._Calc.Ventilation.Box25_m.M5 * this._Calc.Dimensions.Box5;
      this._Calc.HeatLoss.Box38_m.M6 = 0.33 * this._Calc.Ventilation.Box25_m.M6 * this._Calc.Dimensions.Box5;
      this._Calc.HeatLoss.Box38_m.M7 = 0.33 * this._Calc.Ventilation.Box25_m.M7 * this._Calc.Dimensions.Box5;
      this._Calc.HeatLoss.Box38_m.M8 = 0.33 * this._Calc.Ventilation.Box25_m.M8 * this._Calc.Dimensions.Box5;
      this._Calc.HeatLoss.Box38_m.M9 = 0.33 * this._Calc.Ventilation.Box25_m.M9 * this._Calc.Dimensions.Box5;
      this._Calc.HeatLoss.Box38_m.M10 = 0.33 * this._Calc.Ventilation.Box25_m.M10 * this._Calc.Dimensions.Box5;
      this._Calc.HeatLoss.Box38_m.M11 = 0.33 * this._Calc.Ventilation.Box25_m.M11 * this._Calc.Dimensions.Box5;
      this._Calc.HeatLoss.Box38_m.M12 = 0.33 * this._Calc.Ventilation.Box25_m.M12 * this._Calc.Dimensions.Box5;
      this._Calc.HeatLoss.Box39_m.M1 = this._Calc.HeatLoss.Box37 + this._Calc.HeatLoss.Box38_m.M1;
      this._Calc.HeatLoss.Box39_m.M2 = this._Calc.HeatLoss.Box37 + this._Calc.HeatLoss.Box38_m.M2;
      this._Calc.HeatLoss.Box39_m.M3 = this._Calc.HeatLoss.Box37 + this._Calc.HeatLoss.Box38_m.M3;
      this._Calc.HeatLoss.Box39_m.M4 = this._Calc.HeatLoss.Box37 + this._Calc.HeatLoss.Box38_m.M4;
      this._Calc.HeatLoss.Box39_m.M5 = this._Calc.HeatLoss.Box37 + this._Calc.HeatLoss.Box38_m.M5;
      this._Calc.HeatLoss.Box39_m.M6 = this._Calc.HeatLoss.Box37 + this._Calc.HeatLoss.Box38_m.M6;
      this._Calc.HeatLoss.Box39_m.M7 = this._Calc.HeatLoss.Box37 + this._Calc.HeatLoss.Box38_m.M7;
      this._Calc.HeatLoss.Box39_m.M8 = this._Calc.HeatLoss.Box37 + this._Calc.HeatLoss.Box38_m.M8;
      this._Calc.HeatLoss.Box39_m.M9 = this._Calc.HeatLoss.Box37 + this._Calc.HeatLoss.Box38_m.M9;
      this._Calc.HeatLoss.Box39_m.M10 = this._Calc.HeatLoss.Box37 + this._Calc.HeatLoss.Box38_m.M10;
      this._Calc.HeatLoss.Box39_m.M11 = this._Calc.HeatLoss.Box37 + this._Calc.HeatLoss.Box38_m.M11;
      this._Calc.HeatLoss.Box39_m.M12 = this._Calc.HeatLoss.Box37 + this._Calc.HeatLoss.Box38_m.M12;
      this._Calc.HeatLoss.Box39 = (this._Calc.HeatLoss.Box39_m.M1 + this._Calc.HeatLoss.Box39_m.M2 + this._Calc.HeatLoss.Box39_m.M3 + this._Calc.HeatLoss.Box39_m.M4 + this._Calc.HeatLoss.Box39_m.M5 + this._Calc.HeatLoss.Box39_m.M6 + this._Calc.HeatLoss.Box39_m.M7 + this._Calc.HeatLoss.Box39_m.M8 + this._Calc.HeatLoss.Box39_m.M9 + this._Calc.HeatLoss.Box39_m.M10 + this._Calc.HeatLoss.Box39_m.M11 + this._Calc.HeatLoss.Box39_m.M12) / 12.0;
      this._Calc.HeatLoss.Box40_m.M1 = this._Calc.HeatLoss.Box39_m.M1 / this._Calc.Dimensions.Box4;
      this._Calc.HeatLoss.Box40_m.M2 = this._Calc.HeatLoss.Box39_m.M2 / this._Calc.Dimensions.Box4;
      this._Calc.HeatLoss.Box40_m.M3 = this._Calc.HeatLoss.Box39_m.M3 / this._Calc.Dimensions.Box4;
      this._Calc.HeatLoss.Box40_m.M4 = this._Calc.HeatLoss.Box39_m.M4 / this._Calc.Dimensions.Box4;
      this._Calc.HeatLoss.Box40_m.M5 = this._Calc.HeatLoss.Box39_m.M5 / this._Calc.Dimensions.Box4;
      this._Calc.HeatLoss.Box40_m.M6 = this._Calc.HeatLoss.Box39_m.M6 / this._Calc.Dimensions.Box4;
      this._Calc.HeatLoss.Box40_m.M7 = this._Calc.HeatLoss.Box39_m.M7 / this._Calc.Dimensions.Box4;
      this._Calc.HeatLoss.Box40_m.M8 = this._Calc.HeatLoss.Box39_m.M8 / this._Calc.Dimensions.Box4;
      this._Calc.HeatLoss.Box40_m.M9 = this._Calc.HeatLoss.Box39_m.M9 / this._Calc.Dimensions.Box4;
      this._Calc.HeatLoss.Box40_m.M10 = this._Calc.HeatLoss.Box39_m.M10 / this._Calc.Dimensions.Box4;
      this._Calc.HeatLoss.Box40_m.M11 = this._Calc.HeatLoss.Box39_m.M11 / this._Calc.Dimensions.Box4;
      this._Calc.HeatLoss.Box40_m.M12 = this._Calc.HeatLoss.Box39_m.M12 / this._Calc.Dimensions.Box4;
      this._Calc.HeatLoss.Box40 = (this._Calc.HeatLoss.Box40_m.M1 + this._Calc.HeatLoss.Box40_m.M2 + this._Calc.HeatLoss.Box40_m.M3 + this._Calc.HeatLoss.Box40_m.M4 + this._Calc.HeatLoss.Box40_m.M5 + this._Calc.HeatLoss.Box40_m.M6 + this._Calc.HeatLoss.Box40_m.M7 + this._Calc.HeatLoss.Box40_m.M8 + this._Calc.HeatLoss.Box40_m.M9 + this._Calc.HeatLoss.Box40_m.M10 + this._Calc.HeatLoss.Box40_m.M11 + this._Calc.HeatLoss.Box40_m.M12) / 12.0;
      this._Calc.HeatLoss.Box41_m.M1 = 31.0;
      this._Calc.HeatLoss.Box41_m.M2 = 28.0;
      this._Calc.HeatLoss.Box41_m.M3 = 31.0;
      this._Calc.HeatLoss.Box41_m.M4 = 30.0;
      this._Calc.HeatLoss.Box41_m.M5 = 31.0;
      this._Calc.HeatLoss.Box41_m.M6 = 30.0;
      this._Calc.HeatLoss.Box41_m.M7 = 31.0;
      this._Calc.HeatLoss.Box41_m.M8 = 31.0;
      this._Calc.HeatLoss.Box41_m.M9 = 30.0;
      this._Calc.HeatLoss.Box41_m.M10 = 31.0;
      this._Calc.HeatLoss.Box41_m.M11 = 30.0;
      this._Calc.HeatLoss.Box41_m.M12 = 31.0;
    }

    private void Internal_gains()
    {
      if (this.IsFabricEfficiency | this.DTER)
      {
        this._Calc.Internal_gains.Box66_m.M1 = 50.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box66_m.M2 = 50.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box66_m.M3 = 50.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box66_m.M4 = 50.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box66_m.M5 = 50.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box66_m.M6 = 50.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box66_m.M7 = 50.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box66_m.M8 = 50.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box66_m.M9 = 50.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box66_m.M10 = 50.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box66_m.M11 = 50.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box66_m.M12 = 50.0 * this._Calc.Water_heating.Box42;
      }
      else
      {
        this._Calc.Internal_gains.Box66_m.M1 = 60.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box66_m.M2 = 60.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box66_m.M3 = 60.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box66_m.M4 = 60.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box66_m.M5 = 60.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box66_m.M6 = 60.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box66_m.M7 = 60.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box66_m.M8 = 60.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box66_m.M9 = 60.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box66_m.M10 = 60.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box66_m.M11 = 60.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box66_m.M12 = 60.0 * this._Calc.Water_heating.Box42;
      }
      this.Lighting();
      this.Appliances();
      if (this.IsFabricEfficiency | this.DTER)
      {
        this._Calc.Internal_gains.Box69_m.M1 = 23.0 + 5.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box69_m.M2 = 23.0 + 5.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box69_m.M3 = 23.0 + 5.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box69_m.M4 = 23.0 + 5.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box69_m.M5 = 23.0 + 5.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box69_m.M6 = 23.0 + 5.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box69_m.M7 = 23.0 + 5.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box69_m.M8 = 23.0 + 5.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box69_m.M9 = 23.0 + 5.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box69_m.M10 = 23.0 + 5.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box69_m.M11 = 23.0 + 5.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box69_m.M12 = 23.0 + 5.0 * this._Calc.Water_heating.Box42;
      }
      else
      {
        this._Calc.Internal_gains.Box69_m.M1 = 35.0 + 7.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box69_m.M2 = 35.0 + 7.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box69_m.M3 = 35.0 + 7.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box69_m.M4 = 35.0 + 7.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box69_m.M5 = 35.0 + 7.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box69_m.M6 = 35.0 + 7.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box69_m.M7 = 35.0 + 7.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box69_m.M8 = 35.0 + 7.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box69_m.M9 = 35.0 + 7.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box69_m.M10 = 35.0 + 7.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box69_m.M11 = 35.0 + 7.0 * this._Calc.Water_heating.Box42;
        this._Calc.Internal_gains.Box69_m.M12 = 35.0 + 7.0 * this._Calc.Water_heating.Box42;
      }
      if (this.OccupancyCalc | this.StandardOccupancyCalc)
      {
        this._Calc.Internal_gains.Box69_m.M1 = this.OccupancyData.Gc_m.M1;
        this._Calc.Internal_gains.Box69_m.M2 = this.OccupancyData.Gc_m.M2;
        this._Calc.Internal_gains.Box69_m.M3 = this.OccupancyData.Gc_m.M3;
        this._Calc.Internal_gains.Box69_m.M4 = this.OccupancyData.Gc_m.M4;
        this._Calc.Internal_gains.Box69_m.M5 = this.OccupancyData.Gc_m.M5;
        this._Calc.Internal_gains.Box69_m.M6 = this.OccupancyData.Gc_m.M6;
        this._Calc.Internal_gains.Box69_m.M7 = this.OccupancyData.Gc_m.M7;
        this._Calc.Internal_gains.Box69_m.M8 = this.OccupancyData.Gc_m.M8;
        this._Calc.Internal_gains.Box69_m.M9 = this.OccupancyData.Gc_m.M9;
        this._Calc.Internal_gains.Box69_m.M10 = this.OccupancyData.Gc_m.M10;
        this._Calc.Internal_gains.Box69_m.M11 = this.OccupancyData.Gc_m.M11;
        this._Calc.Internal_gains.Box69_m.M12 = this.OccupancyData.Gc_m.M12;
      }
      if (string.IsNullOrEmpty(this._House.MainHeating.Boiler.PumpType))
        this._House.MainHeating.Boiler.PumpType = "";
      float num1;
      float num2;
      bool flag;
      if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 & (uint) Operators.CompareString(this._House.MainHeating.HGroup, "Community heating schemes", false) > 0U)
      {
        if (Operators.CompareString(this._House.MainHeating.Boiler.PumpHP, "Yes", false) == 0)
        {
          num2 = num1 + (this._House.MainHeating.Boiler.PumpType.Equals("2013 or later") ? 3f : 10f);
          flag = true;
        }
        if (this._House.MainHeating.SGroup.Contains("heat pumps"))
        {
          if (Conversions.ToBoolean(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "SepCirculator", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)))
          {
            num2 = 0.0f;
            flag = false;
          }
          if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "Emitter_Type", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) "4", false))
            num2 = (float) (0.06 * this._Calc.Dimensions.Box5);
        }
        if (Operators.CompareString(this._House.MainHeating.HGroup, "Warm air systems (Not heat pump)", false) == 0)
          num2 += (float) (0.06 * this._Calc.Dimensions.Box5);
      }
      else
      {
        int sapTableCode = this._House.MainHeating.SAPTableCode;
        if (sapTableCode < 300)
        {
          if (Operators.CompareString(this._House.MainHeating.Boiler.PumpHP, "Yes", false) == 0)
          {
            num2 = num1 + (this._House.MainHeating.Boiler.PumpType.Equals("2013 or later") ? 3f : 10f);
            flag = true;
          }
        }
        else if (sapTableCode >= 500 && sapTableCode <= 530 && !this._House.Ventilation.MechVent.ToString().Contains("Balanced"))
          num2 = num1 + (float) (0.06 * this._Calc.Dimensions.Box5);
      }
      if (this._House.IncludeMainHeating2)
      {
        if (Operators.CompareString(this._House.MainHeating2.InforSource, "Boiler Database", false) == 0)
        {
          if (Operators.CompareString(this._House.MainHeating2.Boiler.PumpHP, "Yes", false) == 0)
          {
            if (!flag & (double) this._House.HeatFractionSec > 0.0)
              num2 += this._House.MainHeating2.Boiler.PumpType.Equals("2013 or later") ? 3f : 10f;
            if (flag & (double) this._House.HeatFractionSec > 0.0 & this._House.MainHeating2.Boiler.PumpType.Equals("2013 or later"))
              num2 += 3f;
          }
          if (Operators.CompareString(this._House.MainHeating2.HGroup, "Warm air systems (Not heat pump)", false) == 0)
            num2 += (float) (0.06 * this._Calc.Dimensions.Box5);
        }
        else
        {
          int sapTableCode = this._House.MainHeating2.SAPTableCode;
          if (sapTableCode < 300)
          {
            if (Operators.CompareString(this._House.MainHeating2.Boiler.PumpHP, "Yes", false) == 0 && !flag)
              num2 += 10f;
          }
          else if (sapTableCode >= 500 && sapTableCode <= 600 && !this._House.Ventilation.MechVent.ToString().Contains("Balanced"))
            num2 += (float) (0.06 * this._Calc.Dimensions.Box5);
        }
      }
      string mechVent = this._House.Ventilation.MechVent;
      if (Operators.CompareString(mechVent, "Positive input from outside", false) != 0)
      {
        if (Operators.CompareString(mechVent, "Balanced without heat recovery", false) == 0)
        {
          string parameters = this._House.Ventilation.Parameters;
          if (Operators.CompareString(parameters, "User defined", false) != 0)
          {
            if (Operators.CompareString(parameters, "SAP 2012", false) == 0)
              num2 += (float) (0.06 * this._Calc.Dimensions.Box5 * 2.5 * 2.0);
          }
          else if (this._House.Ventilation.MVDetails.DuctingType.ToUpper().Contains("RIGID"))
            num2 += (float) (0.06 * this._Calc.Dimensions.Box5 * (double) this._House.Ventilation.MVDetails.SFP * 1.4);
          else
            num2 += (float) (0.06 * this._Calc.Dimensions.Box5 * (double) this._House.Ventilation.MVDetails.SFP * 1.7);
        }
      }
      else
      {
        string parameters = this._House.Ventilation.Parameters;
        if (Operators.CompareString(parameters, "SAP 2012", false) != 0)
        {
          if (Operators.CompareString(parameters, "User defined", false) == 0)
          {
            if (Operators.CompareString(this._House.Ventilation.MVDetails.DuctingType, "Rigid", false) == 0)
            {
              if (this._House.Ventilation.ApprovedScheme)
                num2 += (float) ((double) this._House.Ventilation.MVDetails.SFP * 2.5 * 0.12 * this._Calc.Dimensions.Box5);
              else
                num2 += (float) ((double) this._House.Ventilation.MVDetails.SFP * 1.3 * 0.12 * this._Calc.Dimensions.Box5);
            }
            else if (this._House.Ventilation.ApprovedScheme)
              num2 += (float) ((double) this._House.Ventilation.MVDetails.SFP * 2.5 * 0.12 * this._Calc.Dimensions.Box5);
            else
              num2 += (float) ((double) this._House.Ventilation.MVDetails.SFP * 1.45 * 0.12 * this._Calc.Dimensions.Box5);
          }
        }
        else
          num2 += (float) (0.24 * this._Calc.Dimensions.Box5);
      }
      if (this._House.IncludeMainHeating2 && Operators.CompareString(this._House.MainHeating2.Fuel, "heating oil", false) == 0 | Operators.CompareString(this._House.MainHeating2.Fuel, "biodiesel from any biomass source", false) == 0 | Operators.CompareString(this._House.MainHeating2.Fuel, "biodiesel from used cooking oil only", false) == 0 | Operators.CompareString(this._House.MainHeating2.Fuel, "rapeseed oil", false) == 0 | Operators.CompareString(this._House.MainHeating2.Fuel, "appliances able to use mineral oil or liquid biofuel", false) == 0 | Operators.CompareString(this._House.MainHeating2.Fuel, "B30K", false) == 0 | Operators.CompareString(this._House.MainHeating2.Fuel, "bioethanol from any biomass source", false) == 0 && this._House.MainHeating2.OilPump)
        num2 += 10f;
      if (Operators.CompareString(this._House.MainHeating.Fuel, "heating oil", false) == 0 | Operators.CompareString(this._House.MainHeating.Fuel, "biodiesel from any biomass source", false) == 0 | Operators.CompareString(this._House.MainHeating.Fuel, "biodiesel from used cooking oil only", false) == 0 | Operators.CompareString(this._House.MainHeating.Fuel, "rapeseed oil", false) == 0 | Operators.CompareString(this._House.MainHeating.Fuel, "appliances able to use mineral oil or liquid biofuel", false) == 0 | Operators.CompareString(this._House.MainHeating.Fuel, "B30K", false) == 0 | Operators.CompareString(this._House.MainHeating.Fuel, "bioethanol from any biomass source", false) == 0 | Operators.CompareString(this._House.MainHeating.Fuel, "appliances able to used mineral oil or liquid biofuel", false) == 0 && this._House.MainHeating.OilPump)
        num2 += 10f;
      if (!this.IsFabricEfficiency)
      {
        this._Calc.Internal_gains.Box70_m.M1 = (double) num2;
        this._Calc.Internal_gains.Box70_m.M2 = (double) num2;
        this._Calc.Internal_gains.Box70_m.M3 = (double) num2;
        this._Calc.Internal_gains.Box70_m.M4 = (double) num2;
        this._Calc.Internal_gains.Box70_m.M5 = (double) num2;
        this._Calc.Internal_gains.Box70_m.M6 = (double) num2;
        this._Calc.Internal_gains.Box70_m.M7 = (double) num2;
        this._Calc.Internal_gains.Box70_m.M8 = (double) num2;
        this._Calc.Internal_gains.Box70_m.M9 = (double) num2;
        this._Calc.Internal_gains.Box70_m.M10 = (double) num2;
        this._Calc.Internal_gains.Box70_m.M11 = (double) num2;
        this._Calc.Internal_gains.Box70_m.M12 = (double) num2;
      }
      this._Calc.Internal_gains.Box71_m.M1 = -40.0 * this._Calc.Water_heating.Box42;
      this._Calc.Internal_gains.Box71_m.M2 = -40.0 * this._Calc.Water_heating.Box42;
      this._Calc.Internal_gains.Box71_m.M3 = -40.0 * this._Calc.Water_heating.Box42;
      this._Calc.Internal_gains.Box71_m.M4 = -40.0 * this._Calc.Water_heating.Box42;
      this._Calc.Internal_gains.Box71_m.M5 = -40.0 * this._Calc.Water_heating.Box42;
      this._Calc.Internal_gains.Box71_m.M6 = -40.0 * this._Calc.Water_heating.Box42;
      this._Calc.Internal_gains.Box71_m.M7 = -40.0 * this._Calc.Water_heating.Box42;
      this._Calc.Internal_gains.Box71_m.M8 = -40.0 * this._Calc.Water_heating.Box42;
      this._Calc.Internal_gains.Box71_m.M9 = -40.0 * this._Calc.Water_heating.Box42;
      this._Calc.Internal_gains.Box71_m.M10 = -40.0 * this._Calc.Water_heating.Box42;
      this._Calc.Internal_gains.Box71_m.M11 = -40.0 * this._Calc.Water_heating.Box42;
      this._Calc.Internal_gains.Box71_m.M12 = -40.0 * this._Calc.Water_heating.Box42;
      this._Calc.Internal_gains.Box72_m.M1 = 1000.0 * this._Calc.Water_heating.Box65_m.M1 / (this._Calc.HeatLoss.Box41_m.M1 * 24.0);
      this._Calc.Internal_gains.Box72_m.M2 = 1000.0 * this._Calc.Water_heating.Box65_m.M2 / (this._Calc.HeatLoss.Box41_m.M2 * 24.0);
      this._Calc.Internal_gains.Box72_m.M3 = 1000.0 * this._Calc.Water_heating.Box65_m.M3 / (this._Calc.HeatLoss.Box41_m.M3 * 24.0);
      this._Calc.Internal_gains.Box72_m.M4 = 1000.0 * this._Calc.Water_heating.Box65_m.M4 / (this._Calc.HeatLoss.Box41_m.M4 * 24.0);
      this._Calc.Internal_gains.Box72_m.M5 = 1000.0 * this._Calc.Water_heating.Box65_m.M5 / (this._Calc.HeatLoss.Box41_m.M5 * 24.0);
      this._Calc.Internal_gains.Box72_m.M6 = 1000.0 * this._Calc.Water_heating.Box65_m.M6 / (this._Calc.HeatLoss.Box41_m.M6 * 24.0);
      this._Calc.Internal_gains.Box72_m.M7 = 1000.0 * this._Calc.Water_heating.Box65_m.M7 / (this._Calc.HeatLoss.Box41_m.M7 * 24.0);
      this._Calc.Internal_gains.Box72_m.M8 = 1000.0 * this._Calc.Water_heating.Box65_m.M8 / (this._Calc.HeatLoss.Box41_m.M8 * 24.0);
      this._Calc.Internal_gains.Box72_m.M9 = 1000.0 * this._Calc.Water_heating.Box65_m.M9 / (this._Calc.HeatLoss.Box41_m.M9 * 24.0);
      this._Calc.Internal_gains.Box72_m.M10 = 1000.0 * this._Calc.Water_heating.Box65_m.M10 / (this._Calc.HeatLoss.Box41_m.M10 * 24.0);
      this._Calc.Internal_gains.Box72_m.M11 = 1000.0 * this._Calc.Water_heating.Box65_m.M11 / (this._Calc.HeatLoss.Box41_m.M11 * 24.0);
      this._Calc.Internal_gains.Box72_m.M12 = 1000.0 * this._Calc.Water_heating.Box65_m.M12 / (this._Calc.HeatLoss.Box41_m.M12 * 24.0);
      if (this.OccupancyCalc | this.StandardOccupancyCalc)
      {
        this._Calc.Internal_gains.Box72a_m.M1 = this.OccupancyData.Gshower_m.M1;
        this._Calc.Internal_gains.Box72a_m.M2 = this.OccupancyData.Gshower_m.M2;
        this._Calc.Internal_gains.Box72a_m.M3 = this.OccupancyData.Gshower_m.M3;
        this._Calc.Internal_gains.Box72a_m.M4 = this.OccupancyData.Gshower_m.M4;
        this._Calc.Internal_gains.Box72a_m.M5 = this.OccupancyData.Gshower_m.M5;
        this._Calc.Internal_gains.Box72a_m.M6 = this.OccupancyData.Gshower_m.M6;
        this._Calc.Internal_gains.Box72a_m.M7 = this.OccupancyData.Gshower_m.M7;
        this._Calc.Internal_gains.Box72a_m.M8 = this.OccupancyData.Gshower_m.M8;
        this._Calc.Internal_gains.Box72a_m.M9 = this.OccupancyData.Gshower_m.M9;
        this._Calc.Internal_gains.Box72a_m.M10 = this.OccupancyData.Gshower_m.M10;
        this._Calc.Internal_gains.Box72a_m.M11 = this.OccupancyData.Gshower_m.M11;
        this._Calc.Internal_gains.Box72a_m.M12 = this.OccupancyData.Gshower_m.M12;
      }
      this._Calc.Internal_gains.Box73_m.M1 = this._Calc.Internal_gains.Box66_m.M1 + this._Calc.Internal_gains.Box67_m.M1 + this._Calc.Internal_gains.Box68_m.M1 + this._Calc.Internal_gains.Box69_m.M1 + this._Calc.Internal_gains.Box70_m.M1 + this._Calc.Internal_gains.Box71_m.M1 + this._Calc.Internal_gains.Box72_m.M1;
      this._Calc.Internal_gains.Box73_m.M2 = this._Calc.Internal_gains.Box66_m.M2 + this._Calc.Internal_gains.Box67_m.M2 + this._Calc.Internal_gains.Box68_m.M2 + this._Calc.Internal_gains.Box69_m.M2 + this._Calc.Internal_gains.Box70_m.M2 + this._Calc.Internal_gains.Box71_m.M2 + this._Calc.Internal_gains.Box72_m.M2;
      this._Calc.Internal_gains.Box73_m.M3 = this._Calc.Internal_gains.Box66_m.M3 + this._Calc.Internal_gains.Box67_m.M3 + this._Calc.Internal_gains.Box68_m.M3 + this._Calc.Internal_gains.Box69_m.M3 + this._Calc.Internal_gains.Box70_m.M3 + this._Calc.Internal_gains.Box71_m.M3 + this._Calc.Internal_gains.Box72_m.M3;
      this._Calc.Internal_gains.Box73_m.M4 = this._Calc.Internal_gains.Box66_m.M4 + this._Calc.Internal_gains.Box67_m.M4 + this._Calc.Internal_gains.Box68_m.M4 + this._Calc.Internal_gains.Box69_m.M4 + this._Calc.Internal_gains.Box70_m.M4 + this._Calc.Internal_gains.Box71_m.M4 + this._Calc.Internal_gains.Box72_m.M4;
      this._Calc.Internal_gains.Box73_m.M5 = this._Calc.Internal_gains.Box66_m.M5 + this._Calc.Internal_gains.Box67_m.M5 + this._Calc.Internal_gains.Box68_m.M5 + this._Calc.Internal_gains.Box69_m.M5 + this._Calc.Internal_gains.Box70_m.M5 + this._Calc.Internal_gains.Box71_m.M5 + this._Calc.Internal_gains.Box72_m.M5;
      this._Calc.Internal_gains.Box73_m.M6 = this._Calc.Internal_gains.Box66_m.M6 + this._Calc.Internal_gains.Box67_m.M6 + this._Calc.Internal_gains.Box68_m.M6 + this._Calc.Internal_gains.Box69_m.M6 + this._Calc.Internal_gains.Box70_m.M6 + this._Calc.Internal_gains.Box71_m.M6 + this._Calc.Internal_gains.Box72_m.M6;
      this._Calc.Internal_gains.Box73_m.M7 = this._Calc.Internal_gains.Box66_m.M7 + this._Calc.Internal_gains.Box67_m.M7 + this._Calc.Internal_gains.Box68_m.M7 + this._Calc.Internal_gains.Box69_m.M7 + this._Calc.Internal_gains.Box70_m.M7 + this._Calc.Internal_gains.Box71_m.M7 + this._Calc.Internal_gains.Box72_m.M7;
      this._Calc.Internal_gains.Box73_m.M8 = this._Calc.Internal_gains.Box66_m.M8 + this._Calc.Internal_gains.Box67_m.M8 + this._Calc.Internal_gains.Box68_m.M8 + this._Calc.Internal_gains.Box69_m.M8 + this._Calc.Internal_gains.Box70_m.M8 + this._Calc.Internal_gains.Box71_m.M8 + this._Calc.Internal_gains.Box72_m.M8;
      this._Calc.Internal_gains.Box73_m.M9 = this._Calc.Internal_gains.Box66_m.M9 + this._Calc.Internal_gains.Box67_m.M9 + this._Calc.Internal_gains.Box68_m.M9 + this._Calc.Internal_gains.Box69_m.M9 + this._Calc.Internal_gains.Box70_m.M9 + this._Calc.Internal_gains.Box71_m.M9 + this._Calc.Internal_gains.Box72_m.M9;
      this._Calc.Internal_gains.Box73_m.M10 = this._Calc.Internal_gains.Box66_m.M10 + this._Calc.Internal_gains.Box67_m.M10 + this._Calc.Internal_gains.Box68_m.M10 + this._Calc.Internal_gains.Box69_m.M10 + this._Calc.Internal_gains.Box70_m.M10 + this._Calc.Internal_gains.Box71_m.M10 + this._Calc.Internal_gains.Box72_m.M10;
      this._Calc.Internal_gains.Box73_m.M11 = this._Calc.Internal_gains.Box66_m.M11 + this._Calc.Internal_gains.Box67_m.M11 + this._Calc.Internal_gains.Box68_m.M11 + this._Calc.Internal_gains.Box69_m.M11 + this._Calc.Internal_gains.Box70_m.M11 + this._Calc.Internal_gains.Box71_m.M11 + this._Calc.Internal_gains.Box72_m.M11;
      this._Calc.Internal_gains.Box73_m.M12 = this._Calc.Internal_gains.Box66_m.M12 + this._Calc.Internal_gains.Box67_m.M12 + this._Calc.Internal_gains.Box68_m.M12 + this._Calc.Internal_gains.Box69_m.M12 + this._Calc.Internal_gains.Box70_m.M12 + this._Calc.Internal_gains.Box71_m.M12 + this._Calc.Internal_gains.Box72_m.M12;
      if (!(this.OccupancyCalc | this.StandardOccupancyCalc))
        return;
      Months box73M1;
      double num3 = (box73M1 = this._Calc.Internal_gains.Box73_m).M1 + this._Calc.Internal_gains.Box72a_m.M1;
      box73M1.M1 = num3;
      Months box73M2;
      double num4 = (box73M2 = this._Calc.Internal_gains.Box73_m).M2 + this._Calc.Internal_gains.Box72a_m.M2;
      box73M2.M2 = num4;
      Months box73M3;
      double num5 = (box73M3 = this._Calc.Internal_gains.Box73_m).M3 + this._Calc.Internal_gains.Box72a_m.M3;
      box73M3.M3 = num5;
      Months box73M4;
      double num6 = (box73M4 = this._Calc.Internal_gains.Box73_m).M4 + this._Calc.Internal_gains.Box72a_m.M4;
      box73M4.M4 = num6;
      Months box73M5;
      double num7 = (box73M5 = this._Calc.Internal_gains.Box73_m).M5 + this._Calc.Internal_gains.Box72a_m.M5;
      box73M5.M5 = num7;
      Months box73M6;
      double num8 = (box73M6 = this._Calc.Internal_gains.Box73_m).M6 + this._Calc.Internal_gains.Box72a_m.M6;
      box73M6.M6 = num8;
      Months box73M7;
      double num9 = (box73M7 = this._Calc.Internal_gains.Box73_m).M7 + this._Calc.Internal_gains.Box72a_m.M7;
      box73M7.M7 = num9;
      Months box73M8;
      double num10 = (box73M8 = this._Calc.Internal_gains.Box73_m).M8 + this._Calc.Internal_gains.Box72a_m.M8;
      box73M8.M8 = num10;
      Months box73M9;
      double num11 = (box73M9 = this._Calc.Internal_gains.Box73_m).M9 + this._Calc.Internal_gains.Box72a_m.M9;
      box73M9.M9 = num11;
      Months box73M10;
      double num12 = (box73M10 = this._Calc.Internal_gains.Box73_m).M10 + this._Calc.Internal_gains.Box72a_m.M10;
      box73M10.M10 = num12;
      Months box73M11;
      double num13 = (box73M11 = this._Calc.Internal_gains.Box73_m).M11 + this._Calc.Internal_gains.Box72a_m.M11;
      box73M11.M11 = num13;
      Months box73M12;
      double num14 = (box73M12 = this._Calc.Internal_gains.Box73_m).M12 + this._Calc.Internal_gains.Box72a_m.M12;
      box73M12.M12 = num14;
    }

    private void Lighting()
    {
      this._Calc.Internal_gains.AppendixL.Eb = 59.73 * Math.Pow(this._Calc.Dimensions.Box4 * this._Calc.Water_heating.Box42, 0.4714);
      this._Calc.Internal_gains.AppendixL.C1 = 1.0 - 0.5 * (double) this._House.LowEnergyLight / 100.0;
      double num1;
      double num2;
      if (this._House.Doors != null)
      {
        int num3 = checked (this._House.NoofDoors - 1);
        int index = 0;
        while (index <= num3)
        {
          if ((uint) Operators.CompareString(this._House.Doors[index].DoorType, "Solid", false) > 0U)
          {
            if (this._House.Doors[index].GlazingType.ToString().Contains("Single"))
              num1 = 0.9;
            else if (this._House.Doors[index].GlazingType.ToString().Contains("double"))
              num1 = 0.8;
            else if (this._House.Doors[index].GlazingType.ToString().Contains("triple"))
              num1 = 0.7;
            else if (this._House.Doors[index].GlazingType.ToString().Contains("secondary"))
              num1 = 0.8;
            string overshading = this._House.Doors[index].Overshading;
            if (Operators.CompareString(overshading, "Heavy", false) != 0)
            {
              if (Operators.CompareString(overshading, "More than average", false) != 0)
              {
                if (Operators.CompareString(overshading, "Average or unknown", false) != 0)
                {
                  if (Operators.CompareString(overshading, "Very Little", false) == 0)
                    num2 = 1.0;
                }
                else
                  num2 = 0.83;
              }
              else
                num2 = 0.67;
            }
            else
              num2 = 0.5;
            if (Operators.CompareString(this._House.Doors[index].UValueSource, "BFRC", false) == 0)
              this._House.Doors[index].FF = 0.7f;
            AppendixL2012 appendixL;
            double num4 = (appendixL = this._Calc.Internal_gains.AppendixL).GL + 0.9 * (double) this._House.Doors[index].Area * num1 * (double) this._House.Doors[index].FF * num2 * (double) this._House.Doors[index].Count;
            appendixL.GL = num4;
          }
          checked { ++index; }
        }
      }
      if (this._House.Windows != null)
      {
        int num5 = checked (this._House.NoofWindows - 1);
        int index = 0;
        while (index <= num5)
        {
          if (this._House.Windows[index].GlazingType.ToUpper().Contains("SINGLE"))
            num1 = 0.9;
          else if (this._House.Windows[index].GlazingType.ToUpper().Contains("DOUBLE"))
            num1 = 0.8;
          else if (this._House.Windows[index].GlazingType.ToUpper().Contains("TRIPLE"))
            num1 = 0.7;
          else if (this._House.Windows[index].GlazingType.ToString().Contains("secondary") | this._House.Windows[index].GlazingType.ToString().Contains("Secondary"))
            num1 = 0.8;
          string overshading = this._House.Windows[index].Overshading;
          if (Operators.CompareString(overshading, "Heavy", false) != 0)
          {
            if (Operators.CompareString(overshading, "More than average", false) != 0)
            {
              if (Operators.CompareString(overshading, "Average or unknown", false) != 0)
              {
                if (Operators.CompareString(overshading, "Very Little", false) == 0)
                  num2 = 1.0;
              }
              else
                num2 = 0.83;
            }
            else
              num2 = 0.67;
          }
          else
            num2 = 0.5;
          if (Operators.CompareString(this._House.Windows[index].UValueSource, "BFRC", false) == 0)
            this._House.Windows[index].FF = 0.7f;
          AppendixL2012 appendixL;
          double num6 = (appendixL = this._Calc.Internal_gains.AppendixL).GL + 0.9 * (double) this._House.Windows[index].Area * num1 * (double) this._House.Windows[index].FF * num2 * (double) this._House.Windows[index].Count;
          appendixL.GL = num6;
          checked { ++index; }
        }
      }
      if (this._House.RoofLights != null)
      {
        int num7 = checked (this._House.NoofRoofLights - 1);
        int index = 0;
        while (index <= num7)
        {
          if (this._House.RoofLights[index].GlazingType.ToString().Contains("single"))
            num1 = 0.9;
          else if (this._House.RoofLights[index].GlazingType.ToString().Contains("double"))
            num1 = 0.8;
          else if (this._House.RoofLights[index].GlazingType.ToString().Contains("triple"))
            num1 = 0.7;
          else if (this._House.RoofLights[index].GlazingType.ToString().Contains("secondary"))
            num1 = 0.8;
          double num8 = 1.0;
          AppendixL2012 appendixL;
          double num9 = (appendixL = this._Calc.Internal_gains.AppendixL).GL + 0.9 * (double) this._House.RoofLights[index].Area * num1 * (double) this._House.RoofLights[index].FF * num8 * (double) this._House.RoofLights[index].Count;
          appendixL.GL = num9;
          checked { ++index; }
        }
      }
      this._Calc.Internal_gains.AppendixL.GL /= this._Calc.Dimensions.Box4;
      this._Calc.Internal_gains.AppendixL.C2 = this._Calc.Internal_gains.AppendixL.GL > 0.095 ? 0.96 : 52.2 * Math.Pow(this._Calc.Internal_gains.AppendixL.GL, 2.0) - 9.94 * this._Calc.Internal_gains.AppendixL.GL + 1.433;
      this._Calc.Internal_gains.AppendixL.EL = this._Calc.Internal_gains.AppendixL.Eb * this._Calc.Internal_gains.AppendixL.C1 * this._Calc.Internal_gains.AppendixL.C2;
      this._Calc.Internal_gains.AppendixL.ELm.M1 = this._Calc.Internal_gains.AppendixL.EL * (1.0 + 0.5 * Math.Cos(2.0 * Math.PI / 15.0)) * this._Calc.HeatLoss.Box41_m.M1 / 365.0;
      this._Calc.Internal_gains.AppendixL.ELm.M2 = this._Calc.Internal_gains.AppendixL.EL * (1.0 + 0.5 * Math.Cos(3.0 * Math.PI / 10.0)) * this._Calc.HeatLoss.Box41_m.M2 / 365.0;
      this._Calc.Internal_gains.AppendixL.ELm.M3 = this._Calc.Internal_gains.AppendixL.EL * (1.0 + 0.5 * Math.Cos(7.0 * Math.PI / 15.0)) * this._Calc.HeatLoss.Box41_m.M3 / 365.0;
      this._Calc.Internal_gains.AppendixL.ELm.M4 = this._Calc.Internal_gains.AppendixL.EL * (1.0 + 0.5 * Math.Cos(19.0 * Math.PI / 30.0)) * this._Calc.HeatLoss.Box41_m.M4 / 365.0;
      this._Calc.Internal_gains.AppendixL.ELm.M5 = this._Calc.Internal_gains.AppendixL.EL * (1.0 + 0.5 * Math.Cos(4.0 * Math.PI / 5.0)) * this._Calc.HeatLoss.Box41_m.M5 / 365.0;
      this._Calc.Internal_gains.AppendixL.ELm.M6 = this._Calc.Internal_gains.AppendixL.EL * (1.0 + 0.5 * Math.Cos(29.0 * Math.PI / 30.0)) * this._Calc.HeatLoss.Box41_m.M6 / 365.0;
      this._Calc.Internal_gains.AppendixL.ELm.M7 = this._Calc.Internal_gains.AppendixL.EL * (1.0 + 0.5 * Math.Cos(17.0 * Math.PI / 15.0)) * this._Calc.HeatLoss.Box41_m.M7 / 365.0;
      this._Calc.Internal_gains.AppendixL.ELm.M8 = this._Calc.Internal_gains.AppendixL.EL * (1.0 + 0.5 * Math.Cos(13.0 * Math.PI / 10.0)) * this._Calc.HeatLoss.Box41_m.M8 / 365.0;
      this._Calc.Internal_gains.AppendixL.ELm.M9 = this._Calc.Internal_gains.AppendixL.EL * (1.0 + 0.5 * Math.Cos(22.0 * Math.PI / 15.0)) * this._Calc.HeatLoss.Box41_m.M9 / 365.0;
      this._Calc.Internal_gains.AppendixL.ELm.M10 = this._Calc.Internal_gains.AppendixL.EL * (1.0 + 0.5 * Math.Cos(49.0 * Math.PI / 30.0)) * this._Calc.HeatLoss.Box41_m.M10 / 365.0;
      this._Calc.Internal_gains.AppendixL.ELm.M11 = this._Calc.Internal_gains.AppendixL.EL * (1.0 + 0.5 * Math.Cos(9.0 * Math.PI / 5.0)) * this._Calc.HeatLoss.Box41_m.M11 / 365.0;
      this._Calc.Internal_gains.AppendixL.ELm.M12 = this._Calc.Internal_gains.AppendixL.EL * (1.0 + 0.5 * Math.Cos(59.0 * Math.PI / 30.0)) * this._Calc.HeatLoss.Box41_m.M12 / 365.0;
      this._Calc.Internal_gains.AppendixL.EL_Final = this._Calc.Internal_gains.AppendixL.ELm.M1 + this._Calc.Internal_gains.AppendixL.ELm.M2 + this._Calc.Internal_gains.AppendixL.ELm.M3 + this._Calc.Internal_gains.AppendixL.ELm.M4 + this._Calc.Internal_gains.AppendixL.ELm.M5 + this._Calc.Internal_gains.AppendixL.ELm.M6 + this._Calc.Internal_gains.AppendixL.ELm.M7 + this._Calc.Internal_gains.AppendixL.ELm.M8 + this._Calc.Internal_gains.AppendixL.ELm.M9 + this._Calc.Internal_gains.AppendixL.ELm.M10 + this._Calc.Internal_gains.AppendixL.ELm.M11 + this._Calc.Internal_gains.AppendixL.ELm.M12;
      if (this.IsFabricEfficiency | this.DTER)
      {
        this._Calc.Internal_gains.Box67_m.M1 = 0.4 * this._Calc.Internal_gains.AppendixL.ELm.M1 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M1);
        this._Calc.Internal_gains.Box67_m.M2 = 0.4 * this._Calc.Internal_gains.AppendixL.ELm.M2 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M2);
        this._Calc.Internal_gains.Box67_m.M3 = 0.4 * this._Calc.Internal_gains.AppendixL.ELm.M3 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M3);
        this._Calc.Internal_gains.Box67_m.M4 = 0.4 * this._Calc.Internal_gains.AppendixL.ELm.M4 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M4);
        this._Calc.Internal_gains.Box67_m.M5 = 0.4 * this._Calc.Internal_gains.AppendixL.ELm.M5 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M5);
        this._Calc.Internal_gains.Box67_m.M6 = 0.4 * this._Calc.Internal_gains.AppendixL.ELm.M6 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M6);
        this._Calc.Internal_gains.Box67_m.M7 = 0.4 * this._Calc.Internal_gains.AppendixL.ELm.M7 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M7);
        this._Calc.Internal_gains.Box67_m.M8 = 0.4 * this._Calc.Internal_gains.AppendixL.ELm.M8 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M8);
        this._Calc.Internal_gains.Box67_m.M9 = 0.4 * this._Calc.Internal_gains.AppendixL.ELm.M9 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M9);
        this._Calc.Internal_gains.Box67_m.M10 = 0.4 * this._Calc.Internal_gains.AppendixL.ELm.M10 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M10);
        this._Calc.Internal_gains.Box67_m.M11 = 0.4 * this._Calc.Internal_gains.AppendixL.ELm.M11 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M11);
        this._Calc.Internal_gains.Box67_m.M12 = 0.4 * this._Calc.Internal_gains.AppendixL.ELm.M12 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M12);
      }
      else
      {
        this._Calc.Internal_gains.Box67_m.M1 = this._Calc.Internal_gains.AppendixL.ELm.M1 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M1);
        this._Calc.Internal_gains.Box67_m.M2 = this._Calc.Internal_gains.AppendixL.ELm.M2 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M2);
        this._Calc.Internal_gains.Box67_m.M3 = this._Calc.Internal_gains.AppendixL.ELm.M3 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M3);
        this._Calc.Internal_gains.Box67_m.M4 = this._Calc.Internal_gains.AppendixL.ELm.M4 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M4);
        this._Calc.Internal_gains.Box67_m.M5 = this._Calc.Internal_gains.AppendixL.ELm.M5 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M5);
        this._Calc.Internal_gains.Box67_m.M6 = this._Calc.Internal_gains.AppendixL.ELm.M6 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M6);
        this._Calc.Internal_gains.Box67_m.M7 = this._Calc.Internal_gains.AppendixL.ELm.M7 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M7);
        this._Calc.Internal_gains.Box67_m.M8 = this._Calc.Internal_gains.AppendixL.ELm.M8 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M8);
        this._Calc.Internal_gains.Box67_m.M9 = this._Calc.Internal_gains.AppendixL.ELm.M9 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M9);
        this._Calc.Internal_gains.Box67_m.M10 = this._Calc.Internal_gains.AppendixL.ELm.M10 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M10);
        this._Calc.Internal_gains.Box67_m.M11 = this._Calc.Internal_gains.AppendixL.ELm.M11 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M11);
        this._Calc.Internal_gains.Box67_m.M12 = this._Calc.Internal_gains.AppendixL.ELm.M12 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M12);
      }
    }

    private void Appliances()
    {
      this._Calc.Internal_gains.AppendixLAppliaces.EA = 207.8 * Math.Pow(this._Calc.Dimensions.Box4 * this._Calc.Water_heating.Box42, 0.4714);
      this._Calc.Internal_gains.AppendixLAppliaces.EAm.M1 = this._Calc.Internal_gains.AppendixLAppliaces.EA * (1.0 + 0.157 * Math.Cos(-13.0 * Math.PI / 100.0)) * this._Calc.HeatLoss.Box41_m.M1 / 365.0;
      this._Calc.Internal_gains.AppendixLAppliaces.EAm.M2 = this._Calc.Internal_gains.AppendixLAppliaces.EA * (1.0 + 0.157 * Math.Cos(11.0 * Math.PI / 300.0)) * this._Calc.HeatLoss.Box41_m.M2 / 365.0;
      this._Calc.Internal_gains.AppendixLAppliaces.EAm.M3 = this._Calc.Internal_gains.AppendixLAppliaces.EA * (1.0 + 0.157 * Math.Cos(61.0 * Math.PI / 300.0)) * this._Calc.HeatLoss.Box41_m.M3 / 365.0;
      this._Calc.Internal_gains.AppendixLAppliaces.EAm.M4 = this._Calc.Internal_gains.AppendixLAppliaces.EA * (1.0 + 0.157 * Math.Cos(37.0 * Math.PI / 100.0)) * this._Calc.HeatLoss.Box41_m.M4 / 365.0;
      this._Calc.Internal_gains.AppendixLAppliaces.EAm.M5 = this._Calc.Internal_gains.AppendixLAppliaces.EA * (1.0 + 0.157 * Math.Cos(161.0 * Math.PI / 300.0)) * this._Calc.HeatLoss.Box41_m.M5 / 365.0;
      this._Calc.Internal_gains.AppendixLAppliaces.EAm.M6 = this._Calc.Internal_gains.AppendixLAppliaces.EA * (1.0 + 0.157 * Math.Cos(211.0 * Math.PI / 300.0)) * this._Calc.HeatLoss.Box41_m.M6 / 365.0;
      this._Calc.Internal_gains.AppendixLAppliaces.EAm.M7 = this._Calc.Internal_gains.AppendixLAppliaces.EA * (1.0 + 0.157 * Math.Cos(87.0 * Math.PI / 100.0)) * this._Calc.HeatLoss.Box41_m.M7 / 365.0;
      this._Calc.Internal_gains.AppendixLAppliaces.EAm.M8 = this._Calc.Internal_gains.AppendixLAppliaces.EA * (1.0 + 0.157 * Math.Cos(311.0 * Math.PI / 300.0)) * this._Calc.HeatLoss.Box41_m.M8 / 365.0;
      this._Calc.Internal_gains.AppendixLAppliaces.EAm.M9 = this._Calc.Internal_gains.AppendixLAppliaces.EA * (1.0 + 0.157 * Math.Cos(361.0 * Math.PI / 300.0)) * this._Calc.HeatLoss.Box41_m.M9 / 365.0;
      this._Calc.Internal_gains.AppendixLAppliaces.EAm.M10 = this._Calc.Internal_gains.AppendixLAppliaces.EA * (1.0 + 0.157 * Math.Cos(137.0 * Math.PI / 100.0)) * this._Calc.HeatLoss.Box41_m.M10 / 365.0;
      this._Calc.Internal_gains.AppendixLAppliaces.EAm.M11 = this._Calc.Internal_gains.AppendixLAppliaces.EA * (1.0 + 0.157 * Math.Cos(461.0 * Math.PI / 300.0)) * this._Calc.HeatLoss.Box41_m.M11 / 365.0;
      this._Calc.Internal_gains.AppendixLAppliaces.EAm.M12 = this._Calc.Internal_gains.AppendixLAppliaces.EA * (1.0 + 0.157 * Math.Cos(511.0 * Math.PI / 300.0)) * this._Calc.HeatLoss.Box41_m.M12 / 365.0;
      if (this.OccupancyCalc | this.StandardOccupancyCalc)
      {
        this._Calc.Internal_gains.AppendixLAppliaces.EA = this.OccupancyData.Ea;
        this._Calc.Internal_gains.AppendixLAppliaces.EAm.M1 = this.OccupancyData.Ea_m.M1;
        this._Calc.Internal_gains.AppendixLAppliaces.EAm.M2 = this.OccupancyData.Ea_m.M2;
        this._Calc.Internal_gains.AppendixLAppliaces.EAm.M3 = this.OccupancyData.Ea_m.M3;
        this._Calc.Internal_gains.AppendixLAppliaces.EAm.M4 = this.OccupancyData.Ea_m.M4;
        this._Calc.Internal_gains.AppendixLAppliaces.EAm.M5 = this.OccupancyData.Ea_m.M5;
        this._Calc.Internal_gains.AppendixLAppliaces.EAm.M6 = this.OccupancyData.Ea_m.M6;
        this._Calc.Internal_gains.AppendixLAppliaces.EAm.M7 = this.OccupancyData.Ea_m.M7;
        this._Calc.Internal_gains.AppendixLAppliaces.EAm.M8 = this.OccupancyData.Ea_m.M8;
        this._Calc.Internal_gains.AppendixLAppliaces.EAm.M9 = this.OccupancyData.Ea_m.M9;
        this._Calc.Internal_gains.AppendixLAppliaces.EAm.M10 = this.OccupancyData.Ea_m.M10;
        this._Calc.Internal_gains.AppendixLAppliaces.EAm.M11 = this.OccupancyData.Ea_m.M11;
        this._Calc.Internal_gains.AppendixLAppliaces.EAm.M12 = this.OccupancyData.Ea_m.M12;
      }
      this._Calc.Internal_gains.AppendixLAppliaces.EA_Final = this._Calc.Internal_gains.AppendixLAppliaces.EAm.M1 + this._Calc.Internal_gains.AppendixLAppliaces.EAm.M2 + this._Calc.Internal_gains.AppendixLAppliaces.EAm.M3 + this._Calc.Internal_gains.AppendixLAppliaces.EAm.M4 + this._Calc.Internal_gains.AppendixLAppliaces.EAm.M5 + this._Calc.Internal_gains.AppendixLAppliaces.EAm.M6 + this._Calc.Internal_gains.AppendixLAppliaces.EAm.M7 + this._Calc.Internal_gains.AppendixLAppliaces.EAm.M8 + this._Calc.Internal_gains.AppendixLAppliaces.EAm.M9 + this._Calc.Internal_gains.AppendixLAppliaces.EAm.M10 + this._Calc.Internal_gains.AppendixLAppliaces.EAm.M11 + this._Calc.Internal_gains.AppendixLAppliaces.EAm.M12;
      if (this.IsFabricEfficiency | this.DTER)
      {
        this._Calc.Internal_gains.Box68_m.M1 = 0.67 * this._Calc.Internal_gains.AppendixLAppliaces.EAm.M1 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M1);
        this._Calc.Internal_gains.Box68_m.M2 = 0.67 * this._Calc.Internal_gains.AppendixLAppliaces.EAm.M2 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M2);
        this._Calc.Internal_gains.Box68_m.M3 = 0.67 * this._Calc.Internal_gains.AppendixLAppliaces.EAm.M3 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M3);
        this._Calc.Internal_gains.Box68_m.M4 = 0.67 * this._Calc.Internal_gains.AppendixLAppliaces.EAm.M4 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M4);
        this._Calc.Internal_gains.Box68_m.M5 = 0.67 * this._Calc.Internal_gains.AppendixLAppliaces.EAm.M5 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M5);
        this._Calc.Internal_gains.Box68_m.M6 = 0.67 * this._Calc.Internal_gains.AppendixLAppliaces.EAm.M6 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M6);
        this._Calc.Internal_gains.Box68_m.M7 = 0.67 * this._Calc.Internal_gains.AppendixLAppliaces.EAm.M7 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M7);
        this._Calc.Internal_gains.Box68_m.M8 = 0.67 * this._Calc.Internal_gains.AppendixLAppliaces.EAm.M8 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M8);
        this._Calc.Internal_gains.Box68_m.M9 = 0.67 * this._Calc.Internal_gains.AppendixLAppliaces.EAm.M9 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M9);
        this._Calc.Internal_gains.Box68_m.M10 = 0.67 * this._Calc.Internal_gains.AppendixLAppliaces.EAm.M10 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M10);
        this._Calc.Internal_gains.Box68_m.M11 = 0.67 * this._Calc.Internal_gains.AppendixLAppliaces.EAm.M11 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M11);
        this._Calc.Internal_gains.Box68_m.M12 = 0.67 * this._Calc.Internal_gains.AppendixLAppliaces.EAm.M12 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M12);
      }
      else
      {
        this._Calc.Internal_gains.Box68_m.M1 = this._Calc.Internal_gains.AppendixLAppliaces.EAm.M1 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M1);
        this._Calc.Internal_gains.Box68_m.M2 = this._Calc.Internal_gains.AppendixLAppliaces.EAm.M2 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M2);
        this._Calc.Internal_gains.Box68_m.M3 = this._Calc.Internal_gains.AppendixLAppliaces.EAm.M3 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M3);
        this._Calc.Internal_gains.Box68_m.M4 = this._Calc.Internal_gains.AppendixLAppliaces.EAm.M4 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M4);
        this._Calc.Internal_gains.Box68_m.M5 = this._Calc.Internal_gains.AppendixLAppliaces.EAm.M5 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M5);
        this._Calc.Internal_gains.Box68_m.M6 = this._Calc.Internal_gains.AppendixLAppliaces.EAm.M6 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M6);
        this._Calc.Internal_gains.Box68_m.M7 = this._Calc.Internal_gains.AppendixLAppliaces.EAm.M7 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M7);
        this._Calc.Internal_gains.Box68_m.M8 = this._Calc.Internal_gains.AppendixLAppliaces.EAm.M8 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M8);
        this._Calc.Internal_gains.Box68_m.M9 = this._Calc.Internal_gains.AppendixLAppliaces.EAm.M9 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M9);
        this._Calc.Internal_gains.Box68_m.M10 = this._Calc.Internal_gains.AppendixLAppliaces.EAm.M10 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M10);
        this._Calc.Internal_gains.Box68_m.M11 = this._Calc.Internal_gains.AppendixLAppliaces.EAm.M11 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M11);
        this._Calc.Internal_gains.Box68_m.M12 = this._Calc.Internal_gains.AppendixLAppliaces.EAm.M12 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M12);
      }
    }

    private void Mean_Temp()
    {
      // ISSUE: unable to decompile the method.
    }

    private double Utilisation_Factor(
      double H,
      double G,
      double Ti,
      double Te,
      double TMP,
      double HLP)
    {
      float y = (float) (1.0 + TMP / (3.6 * HLP) / 15.0);
      float num = (float) (H * (Ti - Te));
      float x = (float) G / num;
      return (double) x <= 0.0 ? 1.0 : ((double) x != 1.0 ? (1.0 - Math.Pow((double) x, (double) y)) / (1.0 - Math.Pow((double) x, (double) y + 1.0)) : (double) y / ((double) y + 1.0));
    }

    private double Mean_Temperature2(
      double H,
      double G,
      double Th,
      double Te,
      double TMP,
      double HLP,
      double n,
      int Control,
      int Month)
    {
      int num1;
      int num2;
      int num3;
      int num4;
      int num5;
      switch (Month)
      {
        case 1:
          num1 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N24_16.M1));
          num2 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N24_9.M1));
          num3 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N16_9.M1));
          num4 = 9;
          num5 = 22;
          break;
        case 2:
          num1 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N24_16.M2));
          num2 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N24_9.M2));
          num3 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N16_9.M2));
          num4 = 8;
          num5 = 20;
          break;
        case 3:
          num1 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N24_16.M3));
          num2 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N24_9.M3));
          num3 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N16_9.M3));
          num4 = 9;
          num5 = 22;
          break;
        case 4:
          num1 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N24_16.M4));
          num2 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N24_9.M4));
          num3 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N16_9.M4));
          num4 = 8;
          num5 = 22;
          break;
        case 5:
          num1 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N24_16.M5));
          num2 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N24_9.M5));
          num3 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N16_9.M5));
          num4 = 9;
          num5 = 22;
          break;
        case 6:
          num4 = 9;
          num5 = 21;
          break;
        case 7:
          num4 = 9;
          num5 = 22;
          break;
        case 8:
          num4 = 9;
          num5 = 22;
          break;
        case 9:
          num4 = 8;
          num5 = 22;
          break;
        case 10:
          num1 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N24_16.M10));
          num2 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N24_9.M10));
          num3 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N16_9.M10));
          num4 = 9;
          num5 = 22;
          break;
        case 11:
          num1 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N24_16.M11));
          num2 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N24_9.M11));
          num3 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N16_9.M11));
          num4 = 8;
          num5 = 22;
          break;
        case 12:
          num1 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N24_16.M12));
          num2 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N24_9.M12));
          num3 = checked ((int) Math.Round(this._Calc.HeatLoss.CHPCalc.N16_9.M12));
          num4 = 9;
          num5 = 22;
          break;
      }
      float num6 = (float) (4.0 + 0.25 * (TMP / (3.6 * HLP)));
      float num7 = (float) ((1.0 - this.Responsive) * (Th - 2.0) + this.Responsive * (Te + n * G / H));
      double num8;
      if (Control == 1 | Control == 2)
      {
        float x1 = 7f;
        float num9 = (double) x1 > (double) num6 ? (float) ((Th - (double) num7) * ((double) x1 - 0.5 * (double) num6) / 24.0) : (float) (0.5 * Math.Pow((double) x1, 2.0) * (Th - (double) num7) / (24.0 * (double) num6));
        float x2 = 8f;
        float num10 = (double) x2 > (double) num6 ? (float) ((Th - (double) num7) * ((double) x2 - 0.5 * (double) num6) / 24.0) : (float) (0.5 * Math.Pow((double) x2, 2.0) * (Th - (double) num7) / (24.0 * (double) num6));
        float x3 = 0.0f;
        float num11 = (double) x3 > (double) num6 ? (float) ((Th - (double) num7) * ((double) x3 - 0.5 * (double) num6) / 24.0) : (float) (0.5 * Math.Pow((double) x3, 2.0) * (Th - (double) num7) / (24.0 * (double) num6));
        float x4 = 8f;
        float num12 = (double) x4 > (double) num6 ? (float) ((Th - (double) num7) * ((double) x4 - 0.5 * (double) num6) / 24.0) : (float) (0.5 * Math.Pow((double) x4, 2.0) * (Th - (double) num7) / (24.0 * (double) num6));
        num8 = ((double) checked (num1 + num2) * Th + (double) checked (num4 - num1 + num3) * (Th - ((double) num11 + (double) num12)) + (double) checked (num5 - num3 - num2) * (Th - ((double) num9 + (double) num10))) / (double) checked (num4 + num5);
      }
      else
      {
        float x5 = 9f;
        float num13 = (double) x5 > (double) num6 ? (float) ((Th - (double) num7) * ((double) x5 - 0.5 * (double) num6) / 24.0) : (float) (0.5 * Math.Pow((double) x5, 2.0) * (Th - (double) num7) / (24.0 * (double) num6));
        float x6 = 8f;
        float num14 = (double) x6 > (double) num6 ? (float) ((Th - (double) num7) * ((double) x6 - 0.5 * (double) num6) / 24.0) : (float) (0.5 * Math.Pow((double) x6, 2.0) * (Th - (double) num7) / (24.0 * (double) num6));
        num8 = ((double) checked (num1 + num2) * Th + (double) checked (num4 - num1 + num3) * (Th - ((double) num13 + (double) num14)) + (double) checked (num5 - num3 - num2) * (Th - ((double) num13 + (double) num14))) / (double) checked (num4 + num5);
      }
      return num8;
    }

    private double Mean_Temperature3(
      double H,
      double G,
      double Th,
      double Te,
      double TMP,
      double HLP,
      double n,
      int Control,
      int Month)
    {
      int num1;
      int num2;
      int num3;
      int num4;
      int num5;
      switch (Month)
      {
        case 1:
          num1 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_16.M1));
          num2 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_9.M1));
          num3 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N16_9.M1));
          num4 = 9;
          num5 = 22;
          break;
        case 2:
          num1 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_16.M2));
          num2 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_9.M2));
          num3 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N16_9.M2));
          num4 = 8;
          num5 = 20;
          break;
        case 3:
          num1 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_16.M3));
          num2 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_9.M3));
          num3 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N16_9.M3));
          num4 = 9;
          num5 = 22;
          break;
        case 4:
          num1 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_16.M4));
          num2 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_9.M4));
          num3 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N16_9.M4));
          num4 = 8;
          num5 = 22;
          break;
        case 5:
          num1 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_16.M5));
          num2 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_9.M5));
          num3 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N16_9.M5));
          num4 = 9;
          num5 = 22;
          break;
        case 6:
          num1 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_16.M6));
          num2 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_9.M6));
          num3 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N16_9.M6));
          num4 = 9;
          num5 = 21;
          break;
        case 7:
          num1 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_16.M7));
          num2 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_9.M7));
          num3 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N16_9.M7));
          num4 = 9;
          num5 = 22;
          break;
        case 8:
          num1 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_16.M8));
          num2 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_9.M8));
          num3 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N16_9.M8));
          num4 = 9;
          num5 = 22;
          break;
        case 9:
          num1 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_16.M9));
          num2 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_9.M9));
          num3 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N16_9.M9));
          num4 = 8;
          num5 = 22;
          break;
        case 10:
          num1 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_16.M10));
          num2 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_9.M10));
          num3 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N16_9.M10));
          num4 = 9;
          num5 = 22;
          break;
        case 11:
          num1 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_16.M11));
          num2 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_9.M11));
          num3 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N16_9.M11));
          num4 = 8;
          num5 = 22;
          break;
        case 12:
          num1 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_16.M12));
          num2 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N24_9.M12));
          num3 = checked ((int) Math.Round(this._Calc.HeatLoss.HPCalc.N16_9.M12));
          num4 = 9;
          num5 = 22;
          break;
      }
      float num6 = (float) (4.0 + 0.25 * (TMP / (3.6 * HLP)));
      float num7 = (float) ((1.0 - this.Responsive) * (Th - 2.0) + this.Responsive * (Te + n * G / H));
      double num8;
      if (Control == 1 | Control == 2)
      {
        float x1 = 7f;
        float num9 = (double) x1 > (double) num6 ? (float) ((Th - (double) num7) * ((double) x1 - 0.5 * (double) num6) / 24.0) : (float) (0.5 * Math.Pow((double) x1, 2.0) * (Th - (double) num7) / (24.0 * (double) num6));
        float x2 = 8f;
        float num10 = (double) x2 > (double) num6 ? (float) ((Th - (double) num7) * ((double) x2 - 0.5 * (double) num6) / 24.0) : (float) (0.5 * Math.Pow((double) x2, 2.0) * (Th - (double) num7) / (24.0 * (double) num6));
        float x3 = 0.0f;
        float num11 = (double) x3 > (double) num6 ? (float) ((Th - (double) num7) * ((double) x3 - 0.5 * (double) num6) / 24.0) : (float) (0.5 * Math.Pow((double) x3, 2.0) * (Th - (double) num7) / (24.0 * (double) num6));
        float x4 = 8f;
        float num12 = (double) x4 > (double) num6 ? (float) ((Th - (double) num7) * ((double) x4 - 0.5 * (double) num6) / 24.0) : (float) (0.5 * Math.Pow((double) x4, 2.0) * (Th - (double) num7) / (24.0 * (double) num6));
        num8 = ((double) checked (num1 + num2) * Th + (double) checked (num4 - num1 + num3) * (Th - ((double) num11 + (double) num12)) + (double) checked (num5 - num3 - num2) * (Th - ((double) num9 + (double) num10))) / (double) checked (num4 + num5);
      }
      else
      {
        float x5 = 9f;
        if (this._House.MainHeating.ControlCode == 2112 | this._House.MainHeating.ControlCode == 2208)
        {
          PCDF.HeatingControl heatingControl = SAP_Module.PCDFData.HeatingControls.Where<PCDF.HeatingControl>((Func<PCDF.HeatingControl, bool>) (b => b.Index.Equals(this._House.MainHeating.ControlCodePCDF))).SingleOrDefault<PCDF.HeatingControl>();
          if (heatingControl != null)
            x5 = (float) Conversion.Val(heatingControl.HoursHeating);
        }
        float num13 = (double) x5 > (double) num6 ? (float) ((Th - (double) num7) * ((double) x5 - 0.5 * (double) num6) / 24.0) : (float) (0.5 * Math.Pow((double) x5, 2.0) * (Th - (double) num7) / (24.0 * (double) num6));
        float x6 = 8f;
        float num14 = (double) x6 > (double) num6 ? (float) ((Th - (double) num7) * ((double) x6 - 0.5 * (double) num6) / 24.0) : (float) (0.5 * Math.Pow((double) x6, 2.0) * (Th - (double) num7) / (24.0 * (double) num6));
        num8 = ((double) checked (num1 + num2) * Th + (double) checked (num4 - num1 + num3) * (Th - ((double) num13 + (double) num14)) + (double) checked (num5 - num3 - num2) * (Th - ((double) num13 + (double) num14))) / (double) checked (num4 + num5);
      }
      return num8;
    }

    private double Mean_Temperature(
      double H,
      double G,
      double Th,
      double Te,
      double TMP,
      double HLP,
      double n,
      int Control)
    {
      float num1 = (float) (4.0 + 0.25 * (TMP / (3.6 * HLP)));
      float num2 = (float) ((1.0 - this.Responsive) * (Th - 2.0) + this.Responsive * (Te + n * G / H));
      double num3;
      if (Control == 1 | Control == 2)
      {
        float x1 = 7f;
        float num4 = (double) x1 > (double) num1 ? (float) ((Th - (double) num2) * ((double) x1 - 0.5 * (double) num1) / 24.0) : (float) (0.5 * Math.Pow((double) x1, 2.0) * (Th - (double) num2) / (24.0 * (double) num1));
        float x2 = 8f;
        float num5 = (double) x2 > (double) num1 ? (float) ((Th - (double) num2) * ((double) x2 - 0.5 * (double) num1) / 24.0) : (float) (0.5 * Math.Pow((double) x2, 2.0) * (Th - (double) num2) / (24.0 * (double) num1));
        float x3 = 0.0f;
        float num6 = (double) x3 > (double) num1 ? (float) ((Th - (double) num2) * ((double) x3 - 0.5 * (double) num1) / 24.0) : (float) (0.5 * Math.Pow((double) x3, 2.0) * (Th - (double) num2) / (24.0 * (double) num1));
        float x4 = 8f;
        float num7 = (double) x4 > (double) num1 ? (float) ((Th - (double) num2) * ((double) x4 - 0.5 * (double) num1) / 24.0) : (float) (0.5 * Math.Pow((double) x4, 2.0) * (Th - (double) num2) / (24.0 * (double) num1));
        num3 = (5.0 * (Th - ((double) num4 + (double) num5)) + 2.0 * (Th - ((double) num6 + (double) num7))) / 7.0;
      }
      else
      {
        float x5 = 9f;
        float num8 = (double) x5 > (double) num1 ? (float) ((Th - (double) num2) * ((double) x5 - 0.5 * (double) num1) / 24.0) : (float) (0.5 * Math.Pow((double) x5, 2.0) * (Th - (double) num2) / (24.0 * (double) num1));
        float x6 = 8f;
        float num9 = (double) x6 > (double) num1 ? (float) ((Th - (double) num2) * ((double) x6 - 0.5 * (double) num1) / 24.0) : (float) (0.5 * Math.Pow((double) x6, 2.0) * (Th - (double) num2) / (24.0 * (double) num1));
        num3 = Th - ((double) num8 + (double) num9);
      }
      return num3;
    }

    private double Mean_TemperatureTest(
      double H,
      double G,
      double Th,
      double Te,
      double TMP,
      double HLP,
      double n,
      int Control)
    {
      float num1;
      float num2;
      float num3;
      float num4;
      float num5;
      float num6;
      float num7;
      float num8;
      int noofAlternativeDays;
      int num9;
      if (this.OccupancyCalc)
      {
        TimeSpan timeSpan;
        if (this.OccupancyData.NormalPattern2.Include)
        {
          num1 = (float) (OccupancyClass.TellMeTheTime(this.OccupancyData.NormalPattern2.TimeOn).TotalHours - OccupancyClass.TellMeTheTime(this.OccupancyData.NormalPattern1.TimeOff).TotalHours);
          if (this.OccupancyData.NormalPattern3.Include)
          {
            num2 = (float) (OccupancyClass.TellMeTheTime(this.OccupancyData.NormalPattern3.TimeOn).TotalHours - OccupancyClass.TellMeTheTime(this.OccupancyData.NormalPattern2.TimeOff).TotalHours);
            if (this.OccupancyData.NormalPattern4.Include)
            {
              num3 = (float) (OccupancyClass.TellMeTheTime(this.OccupancyData.NormalPattern4.TimeOn).TotalHours - OccupancyClass.TellMeTheTime(this.OccupancyData.NormalPattern3.TimeOff).TotalHours);
              double totalHours = OccupancyClass.TellMeTheTime(this.OccupancyData.NormalPattern1.TimeOn).TotalHours;
              timeSpan = OccupancyClass.TellMeTheTime(this.OccupancyData.NormalPattern4.TimeOff);
              double num10 = 24.0 - timeSpan.TotalHours;
              num4 = (float) (totalHours + num10);
            }
            else
            {
              double totalHours = OccupancyClass.TellMeTheTime(this.OccupancyData.NormalPattern1.TimeOn).TotalHours;
              timeSpan = OccupancyClass.TellMeTheTime(this.OccupancyData.NormalPattern3.TimeOff);
              double num11 = 24.0 - timeSpan.TotalHours;
              num3 = (float) (totalHours + num11);
            }
          }
          else
          {
            double totalHours = OccupancyClass.TellMeTheTime(this.OccupancyData.NormalPattern1.TimeOn).TotalHours;
            timeSpan = OccupancyClass.TellMeTheTime(this.OccupancyData.NormalPattern2.TimeOff);
            double num12 = 24.0 - timeSpan.TotalHours;
            num2 = (float) (totalHours + num12);
          }
        }
        else
        {
          double totalHours = OccupancyClass.TellMeTheTime(this.OccupancyData.NormalPattern1.TimeOn).TotalHours;
          timeSpan = OccupancyClass.TellMeTheTime(this.OccupancyData.NormalPattern1.TimeOff);
          double num13 = 24.0 - timeSpan.TotalHours;
          num2 = (float) (totalHours + num13);
        }
        if (this.OccupancyData.AltPattern1.Include)
        {
          if (this.OccupancyData.AltPattern2.Include)
          {
            timeSpan = OccupancyClass.TellMeTheTime(this.OccupancyData.AltPattern2.TimeOn);
            double totalHours1 = timeSpan.TotalHours;
            timeSpan = OccupancyClass.TellMeTheTime(this.OccupancyData.AltPattern1.TimeOff);
            double totalHours2 = timeSpan.TotalHours;
            num5 = (float) (totalHours1 - totalHours2);
            if (this.OccupancyData.AltPattern3.Include)
            {
              timeSpan = OccupancyClass.TellMeTheTime(this.OccupancyData.AltPattern3.TimeOn);
              double totalHours3 = timeSpan.TotalHours;
              timeSpan = OccupancyClass.TellMeTheTime(this.OccupancyData.AltPattern2.TimeOff);
              double totalHours4 = timeSpan.TotalHours;
              num6 = (float) (totalHours3 - totalHours4);
              if (this.OccupancyData.AltPattern4.Include)
              {
                timeSpan = OccupancyClass.TellMeTheTime(this.OccupancyData.AltPattern4.TimeOn);
                double totalHours5 = timeSpan.TotalHours;
                timeSpan = OccupancyClass.TellMeTheTime(this.OccupancyData.AltPattern3.TimeOff);
                double totalHours6 = timeSpan.TotalHours;
                num7 = (float) (totalHours5 - totalHours6);
                timeSpan = OccupancyClass.TellMeTheTime(this.OccupancyData.AltPattern1.TimeOn);
                double totalHours7 = timeSpan.TotalHours;
                timeSpan = OccupancyClass.TellMeTheTime(this.OccupancyData.AltPattern4.TimeOff);
                double num14 = 24.0 - timeSpan.TotalHours;
                num8 = (float) (totalHours7 + num14);
              }
              else
              {
                timeSpan = OccupancyClass.TellMeTheTime(this.OccupancyData.AltPattern1.TimeOn);
                double totalHours8 = timeSpan.TotalHours;
                timeSpan = OccupancyClass.TellMeTheTime(this.OccupancyData.AltPattern3.TimeOff);
                double num15 = 24.0 - timeSpan.TotalHours;
                num7 = (float) (totalHours8 + num15);
              }
            }
            else
            {
              timeSpan = OccupancyClass.TellMeTheTime(this.OccupancyData.AltPattern1.TimeOn);
              double totalHours9 = timeSpan.TotalHours;
              timeSpan = OccupancyClass.TellMeTheTime(this.OccupancyData.AltPattern2.TimeOff);
              double num16 = 24.0 - timeSpan.TotalHours;
              num6 = (float) (totalHours9 + num16);
            }
          }
          else
          {
            timeSpan = OccupancyClass.TellMeTheTime(this.OccupancyData.AltPattern1.TimeOn);
            double totalHours = timeSpan.TotalHours;
            timeSpan = OccupancyClass.TellMeTheTime(this.OccupancyData.AltPattern1.TimeOff);
            double num17 = 24.0 - timeSpan.TotalHours;
            num6 = (float) (totalHours + num17);
          }
        }
        noofAlternativeDays = this.OccupancyData.NoofAlternativeDays;
        num9 = checked (7 - noofAlternativeDays);
      }
      float num18 = (float) (4.0 + 0.25 * (TMP / (3.6 * HLP)));
      float num19 = (float) ((1.0 - this.Responsive) * (Th - 2.0) + this.Responsive * (Te + n * G / H));
      double num20;
      if (Control == 1 | Control == 2)
      {
        float x1 = !this.OccupancyCalc ? 7f : num1;
        float num21 = (double) x1 > (double) num18 ? (float) ((Th - (double) num19) * ((double) x1 - 0.5 * (double) num18) / 24.0) : (float) (0.5 * Math.Pow((double) x1, 2.0) * (Th - (double) num19) / (24.0 * (double) num18));
        float x2 = !this.OccupancyCalc ? 8f : num2;
        float num22 = (double) x2 > (double) num18 ? (float) ((Th - (double) num19) * ((double) x2 - 0.5 * (double) num18) / 24.0) : (float) (0.5 * Math.Pow((double) x2, 2.0) * (Th - (double) num19) / (24.0 * (double) num18));
        float num23;
        float num24;
        if (this.OccupancyCalc)
        {
          float x3 = num3;
          num23 = (double) x3 > (double) num18 ? (float) ((Th - (double) num19) * ((double) x3 - 0.5 * (double) num18) / 24.0) : (float) (0.5 * Math.Pow((double) x3, 2.0) * (Th - (double) num19) / (24.0 * (double) num18));
          float x4 = num4;
          num24 = (double) x4 > (double) num18 ? (float) ((Th - (double) num19) * ((double) x4 - 0.5 * (double) num18) / 24.0) : (float) (0.5 * Math.Pow((double) x4, 2.0) * (Th - (double) num19) / (24.0 * (double) num18));
        }
        float x5 = !this.OccupancyCalc ? 0.0f : num5;
        float num25 = (double) x5 > (double) num18 ? (float) ((Th - (double) num19) * ((double) x5 - 0.5 * (double) num18) / 24.0) : (float) (0.5 * Math.Pow((double) x5, 2.0) * (Th - (double) num19) / (24.0 * (double) num18));
        float x6 = !this.OccupancyCalc ? 8f : num6;
        float num26 = (double) x6 > (double) num18 ? (float) ((Th - (double) num19) * ((double) x6 - 0.5 * (double) num18) / 24.0) : (float) (0.5 * Math.Pow((double) x6, 2.0) * (Th - (double) num19) / (24.0 * (double) num18));
        float num27;
        float num28;
        if (this.OccupancyCalc)
        {
          float x7 = num7;
          num27 = (double) x7 > (double) num18 ? (float) ((Th - (double) num19) * ((double) x7 - 0.5 * (double) num18) / 24.0) : (float) (0.5 * Math.Pow((double) x7, 2.0) * (Th - (double) num19) / (24.0 * (double) num18));
          float x8 = num8;
          num28 = (double) x8 > (double) num18 ? (float) ((Th - (double) num19) * ((double) x8 - 0.5 * (double) num18) / 24.0) : (float) (0.5 * Math.Pow((double) x8, 2.0) * (Th - (double) num19) / (24.0 * (double) num18));
        }
        num20 = !this.OccupancyCalc ? (5.0 * (Th - ((double) num21 + (double) num22)) + 2.0 * (Th - ((double) num25 + (double) num26))) / 7.0 : ((double) num9 * (Th - ((double) num21 + (double) num22 + (double) num23 + (double) num24)) + (double) noofAlternativeDays * (Th - ((double) num25 + (double) num26 + (double) num27 + (double) num28))) / 7.0;
      }
      else
      {
        float num29;
        float num30;
        float num31;
        float num32;
        if (this.OccupancyCalc)
        {
          if ((double) num2 == 0.0 & (double) num3 == 0.0 & (double) num4 == 0.0 & (double) num1 <= 12.0)
            num2 = 9f;
          else if (((double) num1 < (double) num2 | (double) num2 == 0.0) & ((double) num1 < (double) num3 | (double) num3 == 0.0) & ((double) num1 < (double) num4 | (double) num4 == 0.0))
            num1 += 2f;
          else if (((double) num2 < (double) num1 | (double) num1 == 0.0) & ((double) num2 < (double) num3 | (double) num3 == 0.0) & ((double) num2 < (double) num4 | (double) num4 == 0.0))
            num2 += 2f;
          else if (((double) num3 < (double) num1 | (double) num1 == 0.0) & ((double) num3 < (double) num2 | (double) num2 == 0.0) & ((double) num3 < (double) num4 | (double) num4 == 0.0))
            num3 += 2f;
          else
            num4 += 2f;
          float x9 = num1;
          num29 = (double) x9 > (double) num18 ? (float) ((Th - (double) num19) * ((double) x9 - 0.5 * (double) num18) / 24.0) : (float) (0.5 * Math.Pow((double) x9, 2.0) * (Th - (double) num19) / (24.0 * (double) num18));
          float x10 = num2;
          num30 = (double) x10 > (double) num18 ? (float) ((Th - (double) num19) * ((double) x10 - 0.5 * (double) num18) / 24.0) : (float) (0.5 * Math.Pow((double) x10, 2.0) * (Th - (double) num19) / (24.0 * (double) num18));
          float x11 = num3;
          num31 = (double) x11 > (double) num18 ? (float) ((Th - (double) num19) * ((double) x11 - 0.5 * (double) num18) / 24.0) : (float) (0.5 * Math.Pow((double) x11, 2.0) * (Th - (double) num19) / (24.0 * (double) num18));
          float x12 = num4;
          num32 = (double) x12 > (double) num18 ? (float) ((Th - (double) num19) * ((double) x12 - 0.5 * (double) num18) / 24.0) : (float) (0.5 * Math.Pow((double) x12, 2.0) * (Th - (double) num19) / (24.0 * (double) num18));
          if ((double) num5 == 0.0 & (double) num7 == 0.0 & (double) num8 == 0.0 & (double) num6 <= 12.0)
            num5 = 9f;
          else if (((double) num5 < (double) num6 | (double) num6 == 0.0) & ((double) num5 < (double) num7 | (double) num7 == 0.0) & ((double) num5 < (double) num8 | (double) num8 == 0.0))
            num5 += 2f;
          else if (((double) num6 < (double) num5 | (double) num5 == 0.0) & ((double) num6 < (double) num7 | (double) num7 == 0.0) & ((double) num6 < (double) num8 | (double) num8 == 0.0))
            num6 += 2f;
          else if (((double) num7 < (double) num5 | (double) num5 == 0.0) & ((double) num7 < (double) num6 | (double) num6 == 0.0) & ((double) num7 < (double) num8 | (double) num8 == 0.0))
            num7 += 2f;
          else
            num8 += 2f;
        }
        float x13 = !this.OccupancyCalc ? 9f : num5;
        if (this._House.MainHeating.ControlCode == 2112)
        {
          PCDF.HeatingControl heatingControl = SAP_Module.PCDFData.HeatingControls.Where<PCDF.HeatingControl>((Func<PCDF.HeatingControl, bool>) (b => b.Index.Equals(this._House.MainHeating.ControlCodePCDF))).SingleOrDefault<PCDF.HeatingControl>();
          if (heatingControl != null)
            x13 = (float) Conversion.Val(heatingControl.HoursHeating);
        }
        float num33 = (double) x13 > (double) num18 ? (float) ((Th - (double) num19) * ((double) x13 - 0.5 * (double) num18) / 24.0) : (float) (0.5 * Math.Pow((double) x13, 2.0) * (Th - (double) num19) / (24.0 * (double) num18));
        float x14 = !this.OccupancyCalc ? 8f : num6;
        float num34 = (double) x14 > (double) num18 ? (float) ((Th - (double) num19) * ((double) x14 - 0.5 * (double) num18) / 24.0) : (float) (0.5 * Math.Pow((double) x14, 2.0) * (Th - (double) num19) / (24.0 * (double) num18));
        float num35;
        float num36;
        if (this.OccupancyCalc)
        {
          float x15 = num7;
          num35 = (double) x15 > (double) num18 ? (float) ((Th - (double) num19) * ((double) x15 - 0.5 * (double) num18) / 24.0) : (float) (0.5 * Math.Pow((double) x15, 2.0) * (Th - (double) num19) / (24.0 * (double) num18));
          float x16 = num8;
          num36 = (double) x16 > (double) num18 ? (float) ((Th - (double) num19) * ((double) x16 - 0.5 * (double) num18) / 24.0) : (float) (0.5 * Math.Pow((double) x16, 2.0) * (Th - (double) num19) / (24.0 * (double) num18));
        }
        num20 = !this.OccupancyCalc ? Th - ((double) num33 + (double) num34) : ((double) num9 * (Th - ((double) num29 + (double) num30 + (double) num31 + (double) num32)) + (double) noofAlternativeDays * (Th - ((double) num33 + (double) num34 + (double) num35 + (double) num36))) / 7.0;
      }
      return num20;
    }

    private void Emmiter()
    {
      string emitter = this._House.MainHeating.Emitter;
      // ISSUE: reference to a compiler-generated method
      switch (\u003CPrivateImplementationDetails\u003E.ComputeStringHash(emitter))
      {
        case 83421456:
          if (Operators.CompareString(emitter, "Underfloor heating and radiators, pipes in concrete slab", false) != 0)
            return;
          this.HT = 4.0;
          this.Responsive = 0.25;
          return;
        case 1150666285:
          if (Operators.CompareString(emitter, "Underfloor heating and radiators, pipes in insulated timber floor", false) != 0)
            return;
          this.HT = 1.0;
          this.Responsive = 1.0;
          return;
        case 1251058319:
          if (Operators.CompareString(emitter, "Underfloor heating, pipes in insulated timber floor", false) != 0)
            return;
          break;
        case 1501161800:
          if (Operators.CompareString(emitter, "Underfloor heating, pipes in screed above insulation", false) != 0)
            return;
          this.HT = 2.0;
          this.Responsive = 0.75;
          return;
        case 2395580722:
          if (Operators.CompareString(emitter, "Underfloor heating and radiators, pipes in screed above insulation", false) != 0)
            return;
          this.HT = 2.0;
          this.Responsive = 0.75;
          return;
        case 2409319762:
          if (Operators.CompareString(emitter, "Underfloor heating, pipes in concrete slab", false) != 0)
            return;
          this.HT = 4.0;
          this.Responsive = 0.25;
          return;
        case 2565474752:
          if (Operators.CompareString(emitter, "Systems with radiators", false) != 0)
            return;
          break;
        case 3146736266:
          if (Operators.CompareString(emitter, "Fan coil units", false) != 0)
            return;
          this.HT = 1.0;
          this.Responsive = 1.0;
          return;
        default:
          return;
      }
      this.HT = 1.0;
      this.Responsive = 1.0;
    }

    private void Emmiter2()
    {
      string emitter = this._House.MainHeating2.Emitter;
      // ISSUE: reference to a compiler-generated method
      switch (\u003CPrivateImplementationDetails\u003E.ComputeStringHash(emitter))
      {
        case 83421456:
          if (Operators.CompareString(emitter, "Underfloor heating and radiators, pipes in concrete slab", false) != 0)
            return;
          this.HT2 = 4.0;
          this.Responsive2 = 0.25;
          return;
        case 1150666285:
          if (Operators.CompareString(emitter, "Underfloor heating and radiators, pipes in insulated timber floor", false) != 0)
            return;
          this.HT2 = 1.0;
          this.Responsive2 = 1.0;
          return;
        case 1251058319:
          if (Operators.CompareString(emitter, "Underfloor heating, pipes in insulated timber floor", false) != 0)
            return;
          break;
        case 1501161800:
          if (Operators.CompareString(emitter, "Underfloor heating, pipes in screed above insulation", false) != 0)
            return;
          this.HT2 = 2.0;
          this.Responsive2 = 0.75;
          return;
        case 2395580722:
          if (Operators.CompareString(emitter, "Underfloor heating and radiators, pipes in screed above insulation", false) != 0)
            return;
          this.HT2 = 2.0;
          this.Responsive2 = 0.75;
          return;
        case 2409319762:
          if (Operators.CompareString(emitter, "Underfloor heating, pipes in concrete slab", false) != 0)
            return;
          this.HT2 = 4.0;
          this.Responsive2 = 0.25;
          return;
        case 2565474752:
          if (Operators.CompareString(emitter, "Systems with radiators", false) != 0)
            return;
          break;
        case 3146736266:
          if (Operators.CompareString(emitter, "Fan coil units", false) != 0)
            return;
          this.HT2 = 1.0;
          this.Responsive2 = 1.0;
          return;
        default:
          return;
      }
      this.HT2 = 1.0;
      this.Responsive2 = 1.0;
    }

    private void Temp_Heat_Rest(int ControlType)
    {
      float num = !this.OccupancyCalc ? 21f : (this.OccupancyData.LivingTempKnown ? (float) this.OccupancyData.LivingTemp : 21f);
      switch (ControlType)
      {
        case 1:
          this._Calc.Mean_Int_Temp.Box88_m.M1 = (double) num - 0.5 * (this._Calc.HeatLoss.Box40_m.M1 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M1);
          this._Calc.Mean_Int_Temp.Box88_m.M2 = (double) num - 0.5 * (this._Calc.HeatLoss.Box40_m.M2 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M2);
          this._Calc.Mean_Int_Temp.Box88_m.M3 = (double) num - 0.5 * (this._Calc.HeatLoss.Box40_m.M3 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M3);
          this._Calc.Mean_Int_Temp.Box88_m.M4 = (double) num - 0.5 * (this._Calc.HeatLoss.Box40_m.M4 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M4);
          this._Calc.Mean_Int_Temp.Box88_m.M5 = (double) num - 0.5 * (this._Calc.HeatLoss.Box40_m.M5 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M5);
          this._Calc.Mean_Int_Temp.Box88_m.M6 = (double) num - 0.5 * (this._Calc.HeatLoss.Box40_m.M6 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M6);
          this._Calc.Mean_Int_Temp.Box88_m.M7 = (double) num - 0.5 * (this._Calc.HeatLoss.Box40_m.M7 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M7);
          this._Calc.Mean_Int_Temp.Box88_m.M8 = (double) num - 0.5 * (this._Calc.HeatLoss.Box40_m.M8 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M8);
          this._Calc.Mean_Int_Temp.Box88_m.M9 = (double) num - 0.5 * (this._Calc.HeatLoss.Box40_m.M9 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M9);
          this._Calc.Mean_Int_Temp.Box88_m.M10 = (double) num - 0.5 * (this._Calc.HeatLoss.Box40_m.M10 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M10);
          this._Calc.Mean_Int_Temp.Box88_m.M11 = (double) num - 0.5 * (this._Calc.HeatLoss.Box40_m.M11 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M11);
          this._Calc.Mean_Int_Temp.Box88_m.M12 = (double) num - 0.5 * (this._Calc.HeatLoss.Box40_m.M12 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M12);
          break;
        case 2:
        case 3:
          this._Calc.Mean_Int_Temp.Box88_m.M1 = (double) num - (this._Calc.HeatLoss.Box40_m.M1 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M1) + 1.0 / 12.0 * Math.Pow(this._Calc.HeatLoss.Box40_m.M1 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M1, 2.0);
          this._Calc.Mean_Int_Temp.Box88_m.M2 = (double) num - (this._Calc.HeatLoss.Box40_m.M2 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M2) + 1.0 / 12.0 * Math.Pow(this._Calc.HeatLoss.Box40_m.M2 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M2, 2.0);
          this._Calc.Mean_Int_Temp.Box88_m.M3 = (double) num - (this._Calc.HeatLoss.Box40_m.M3 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M3) + 1.0 / 12.0 * Math.Pow(this._Calc.HeatLoss.Box40_m.M3 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M3, 2.0);
          this._Calc.Mean_Int_Temp.Box88_m.M4 = (double) num - (this._Calc.HeatLoss.Box40_m.M4 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M4) + 1.0 / 12.0 * Math.Pow(this._Calc.HeatLoss.Box40_m.M4 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M4, 2.0);
          this._Calc.Mean_Int_Temp.Box88_m.M5 = (double) num - (this._Calc.HeatLoss.Box40_m.M5 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M5) + 1.0 / 12.0 * Math.Pow(this._Calc.HeatLoss.Box40_m.M5 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M5, 2.0);
          this._Calc.Mean_Int_Temp.Box88_m.M6 = (double) num - (this._Calc.HeatLoss.Box40_m.M6 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M6) + 1.0 / 12.0 * Math.Pow(this._Calc.HeatLoss.Box40_m.M6 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M6, 2.0);
          this._Calc.Mean_Int_Temp.Box88_m.M7 = (double) num - (this._Calc.HeatLoss.Box40_m.M7 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M7) + 1.0 / 12.0 * Math.Pow(this._Calc.HeatLoss.Box40_m.M7 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M7, 2.0);
          this._Calc.Mean_Int_Temp.Box88_m.M8 = (double) num - (this._Calc.HeatLoss.Box40_m.M8 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M8) + 1.0 / 12.0 * Math.Pow(this._Calc.HeatLoss.Box40_m.M8 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M8, 2.0);
          this._Calc.Mean_Int_Temp.Box88_m.M9 = (double) num - (this._Calc.HeatLoss.Box40_m.M9 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M9) + 1.0 / 12.0 * Math.Pow(this._Calc.HeatLoss.Box40_m.M9 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M9, 2.0);
          this._Calc.Mean_Int_Temp.Box88_m.M10 = (double) num - (this._Calc.HeatLoss.Box40_m.M10 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M10) + 1.0 / 12.0 * Math.Pow(this._Calc.HeatLoss.Box40_m.M10 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M10, 2.0);
          this._Calc.Mean_Int_Temp.Box88_m.M11 = (double) num - (this._Calc.HeatLoss.Box40_m.M11 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M11) + 1.0 / 12.0 * Math.Pow(this._Calc.HeatLoss.Box40_m.M11 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M11, 2.0);
          this._Calc.Mean_Int_Temp.Box88_m.M12 = (double) num - (this._Calc.HeatLoss.Box40_m.M12 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M12) + 1.0 / 12.0 * Math.Pow(this._Calc.HeatLoss.Box40_m.M12 > 6.0 ? 6.0 : this._Calc.HeatLoss.Box40_m.M12, 2.0);
          break;
      }
    }

    private List<Calc2012.N4> TableN4()
    {
      List<Calc2012.N4> n4List = new List<Calc2012.N4>();
      Calc2012.N4 n4_1 = new Calc2012.N4();
      Calc2012.N4 n4_2 = n4_1;
      n4_2.PSR = 0.2f;
      n4_2.N24_16 = 57;
      n4_2.N24_9 = 143;
      n4_2.N16_9 = 8;
      n4List.Add(n4_1);
      Calc2012.N4 n4_3 = new Calc2012.N4();
      Calc2012.N4 n4_4 = n4_3;
      n4_4.PSR = 0.25f;
      n4_4.N24_16 = 54;
      n4_4.N24_9 = 135;
      n4_4.N16_9 = 2;
      n4List.Add(n4_3);
      Calc2012.N4 n4_5 = new Calc2012.N4();
      Calc2012.N4 n4_6 = n4_5;
      n4_6.PSR = 0.3f;
      n4_6.N24_16 = 51;
      n4_6.N24_9 = (int) sbyte.MaxValue;
      n4_6.N16_9 = 10;
      n4List.Add(n4_5);
      Calc2012.N4 n4_7 = new Calc2012.N4();
      Calc2012.N4 n4_8 = n4_7;
      n4_8.PSR = 0.35f;
      n4_8.N24_16 = 40;
      n4_8.N24_9 = 99;
      n4_8.N16_9 = 20;
      n4List.Add(n4_7);
      Calc2012.N4 n4_9 = new Calc2012.N4();
      Calc2012.N4 n4_10 = n4_9;
      n4_10.PSR = 0.4f;
      n4_10.N24_16 = 35;
      n4_10.N24_9 = 88;
      n4_10.N16_9 = 29;
      n4List.Add(n4_9);
      Calc2012.N4 n4_11 = new Calc2012.N4();
      Calc2012.N4 n4_12 = n4_11;
      n4_12.PSR = 0.45f;
      n4_12.N24_16 = 31;
      n4_12.N24_9 = 77;
      n4_12.N16_9 = 40;
      n4List.Add(n4_11);
      Calc2012.N4 n4_13 = new Calc2012.N4();
      Calc2012.N4 n4_14 = n4_13;
      n4_14.PSR = 0.5f;
      n4_14.N24_16 = 26;
      n4_14.N24_9 = 65;
      n4_14.N16_9 = 31;
      n4List.Add(n4_13);
      Calc2012.N4 n4_15 = new Calc2012.N4();
      Calc2012.N4 n4_16 = n4_15;
      n4_16.PSR = 0.55f;
      n4_16.N24_16 = 21;
      n4_16.N24_9 = 54;
      n4_16.N16_9 = 41;
      n4List.Add(n4_15);
      Calc2012.N4 n4_17 = new Calc2012.N4();
      Calc2012.N4 n4_18 = n4_17;
      n4_18.PSR = 0.6f;
      n4_18.N24_16 = 17;
      n4_18.N24_9 = 43;
      n4_18.N16_9 = 30;
      n4List.Add(n4_17);
      Calc2012.N4 n4_19 = new Calc2012.N4();
      Calc2012.N4 n4_20 = n4_19;
      n4_20.PSR = 0.65f;
      n4_20.N24_16 = 8;
      n4_20.N24_9 = 20;
      n4_20.N16_9 = 51;
      n4List.Add(n4_19);
      Calc2012.N4 n4_21 = new Calc2012.N4();
      Calc2012.N4 n4_22 = n4_21;
      n4_22.PSR = 0.7f;
      n4_22.N24_16 = 6;
      n4_22.N24_9 = 15;
      n4_22.N16_9 = 36;
      n4List.Add(n4_21);
      Calc2012.N4 n4_23 = new Calc2012.N4();
      Calc2012.N4 n4_24 = n4_23;
      n4_24.PSR = 0.75f;
      n4_24.N24_16 = 4;
      n4_24.N24_9 = 10;
      n4_24.N16_9 = 40;
      n4List.Add(n4_23);
      Calc2012.N4 n4_25 = new Calc2012.N4();
      Calc2012.N4 n4_26 = n4_25;
      n4_26.PSR = 0.8f;
      n4_26.N24_16 = 3;
      n4_26.N24_9 = 6;
      n4_26.N16_9 = 24;
      n4List.Add(n4_25);
      Calc2012.N4 n4_27 = new Calc2012.N4();
      Calc2012.N4 n4_28 = n4_27;
      n4_28.PSR = 0.85f;
      n4_28.N24_16 = 2;
      n4_28.N24_9 = 4;
      n4_28.N16_9 = 27;
      n4List.Add(n4_27);
      Calc2012.N4 n4_29 = new Calc2012.N4();
      Calc2012.N4 n4_30 = n4_29;
      n4_30.PSR = 0.9f;
      n4_30.N24_16 = 0;
      n4_30.N24_9 = 1;
      n4_30.N16_9 = 15;
      n4List.Add(n4_29);
      Calc2012.N4 n4_31 = new Calc2012.N4();
      Calc2012.N4 n4_32 = n4_31;
      n4_32.PSR = 0.95f;
      n4_32.N24_16 = 0;
      n4_32.N24_9 = 0;
      n4_32.N16_9 = 15;
      n4List.Add(n4_31);
      Calc2012.N4 n4_33 = new Calc2012.N4();
      Calc2012.N4 n4_34 = n4_33;
      n4_34.PSR = 1f;
      n4_34.N24_16 = 0;
      n4_34.N24_9 = 0;
      n4_34.N16_9 = 14;
      n4List.Add(n4_33);
      Calc2012.N4 n4_35 = new Calc2012.N4();
      Calc2012.N4 n4_36 = n4_35;
      n4_36.PSR = 1.05f;
      n4_36.N24_16 = 0;
      n4_36.N24_9 = 0;
      n4_36.N16_9 = 7;
      n4List.Add(n4_35);
      Calc2012.N4 n4_37 = new Calc2012.N4();
      Calc2012.N4 n4_38 = n4_37;
      n4_38.PSR = 1.1f;
      n4_38.N24_16 = 0;
      n4_38.N24_9 = 0;
      n4_38.N16_9 = 6;
      n4List.Add(n4_37);
      Calc2012.N4 n4_39 = new Calc2012.N4();
      Calc2012.N4 n4_40 = n4_39;
      n4_40.PSR = 1.15f;
      n4_40.N24_16 = 0;
      n4_40.N24_9 = 0;
      n4_40.N16_9 = 3;
      n4List.Add(n4_39);
      Calc2012.N4 n4_41 = new Calc2012.N4();
      Calc2012.N4 n4_42 = n4_41;
      n4_42.PSR = 1.2f;
      n4_42.N24_16 = 0;
      n4_42.N24_9 = 0;
      n4_42.N16_9 = 2;
      n4List.Add(n4_41);
      Calc2012.N4 n4_43 = new Calc2012.N4();
      Calc2012.N4 n4_44 = n4_43;
      n4_44.PSR = 1.25f;
      n4_44.N24_16 = 0;
      n4_44.N24_9 = 0;
      n4_44.N16_9 = 1;
      n4List.Add(n4_43);
      Calc2012.N4 n4_45 = new Calc2012.N4();
      Calc2012.N4 n4_46 = n4_45;
      n4_46.PSR = 1.3f;
      n4_46.N24_16 = 0;
      n4_46.N24_9 = 0;
      n4_46.N16_9 = 0;
      n4List.Add(n4_45);
      return n4List;
    }

    private int[,] TableN5()
    {
      int[,] numArray = new int[12, 2]
      {
        {
          9,
          0
        },
        {
          9,
          0
        },
        {
          8,
          0
        },
        {
          9,
          0
        },
        {
          8,
          0
        },
        {
          8,
          0
        },
        {
          9,
          0
        },
        {
          9,
          0
        },
        {
          9,
          0
        },
        {
          9,
          0
        },
        {
          9,
          0
        },
        {
          8,
          0
        }
      };
      numArray[0, 1] = 22;
      numArray[1, 1] = 22;
      numArray[2, 1] = 20;
      numArray[3, 1] = 22;
      numArray[4, 1] = 22;
      numArray[5, 1] = 22;
      numArray[6, 1] = 22;
      numArray[7, 1] = 22;
      numArray[8, 1] = 21;
      numArray[9, 1] = 22;
      numArray[10, 1] = 22;
      numArray[11, 1] = 22;
      return numArray;
    }

    private void MicroGeneration_Mean_Temp()
    {
      if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "HeatingDuration", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) "11", false))
        return;
      int[,] numArray = this.TableN5();
      object Left = NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "HeatingDuration", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
      int num1;
      int num2;
      int num3;
      if (Operators.ConditionalCompareObjectEqual(Left, (object) "V", false))
      {
        List<Calc2012.N4> n4List = this.TableN4();
        int num4 = checked (n4List.Count - 2);
        int index = 0;
        while (index <= num4)
        {
          if (this._Calc.HeatLoss.CHPCalc.PSR >= (double) n4List[index].PSR & this._Calc.HeatLoss.CHPCalc.PSR < (double) n4List[checked (index + 1)].PSR)
          {
            num1 = checked ((int) Math.Round(Math.Round(this.GiveInterloationValue((double) n4List[index].PSR, (double) n4List[index + 1].PSR, unchecked ((double) n4List[index].N24_16), unchecked ((double) n4List[checked (index + 1)].N24_16), this._Calc.HeatLoss.CHPCalc.PSR), 0)));
            num2 = checked ((int) Math.Round(Math.Round(this.GiveInterloationValue((double) n4List[index].PSR, (double) n4List[index + 1].PSR, unchecked ((double) n4List[index].N24_9), unchecked ((double) n4List[checked (index + 1)].N24_9), this._Calc.HeatLoss.CHPCalc.PSR), 0)));
            num3 = checked ((int) Math.Round(Math.Round(this.GiveInterloationValue((double) n4List[index].PSR, (double) n4List[index + 1].PSR, unchecked ((double) n4List[index].N16_9), unchecked ((double) n4List[checked (index + 1)].N16_9), this._Calc.HeatLoss.CHPCalc.PSR), 0)));
          }
          checked { ++index; }
        }
      }
      else if (Operators.ConditionalCompareObjectEqual(Left, (object) "24", false))
      {
        num1 = 68;
        num2 = 170;
      }
      else if (Operators.ConditionalCompareObjectEqual(Left, (object) "16", false))
        num3 = 170;
      MicroCHP_Values2012 chpCalc = this._Calc.HeatLoss.CHPCalc;
      int num5 = numArray[0, 0];
      // ISSUE: variable of a reference type
      int& local1;
      // ISSUE: explicit reference operation
      int num6 = checked (^(local1 = ref numArray.Address(0, 0)) - num1);
      local1 = num6;
      if (numArray[0, 0] < 0)
        numArray[0, 0] = 0;
      int num7 = checked (num1 - num5 - numArray[0, 0]);
      chpCalc.N24_16.M1 = (double) checked (num5 - numArray[0, 0]);
      int num8 = numArray[0, 1];
      // ISSUE: variable of a reference type
      int& local2;
      // ISSUE: explicit reference operation
      int num9 = checked (^(local2 = ref numArray.Address(0, 1)) - num2);
      local2 = num9;
      if (numArray[0, 1] < 0)
        numArray[0, 1] = 0;
      int num10 = checked (num2 - num8 - numArray[0, 1]);
      chpCalc.N24_9.M1 = (double) checked (num8 - numArray[0, 1]);
      if (num10 == 0)
      {
        int num11 = numArray[0, 1];
        // ISSUE: variable of a reference type
        int& local3;
        // ISSUE: explicit reference operation
        int num12 = checked (^(local3 = ref numArray.Address(0, 1)) - num3);
        local3 = num12;
        if (numArray[0, 1] < 0)
          numArray[0, 1] = 0;
        checked { num3 -= num11 - numArray[0, 1]; }
        chpCalc.N16_9.M1 = (double) checked (num11 - numArray[0, 1]);
      }
      int num13 = numArray[1, 0];
      // ISSUE: variable of a reference type
      int& local4;
      // ISSUE: explicit reference operation
      int num14 = checked (^(local4 = ref numArray.Address(1, 0)) - num7);
      local4 = num14;
      if (numArray[1, 0] < 0)
        numArray[1, 0] = 0;
      int num15 = checked (num7 - num13 - numArray[1, 0]);
      chpCalc.N24_16.M12 = (double) checked (num13 - numArray[1, 0]);
      int num16 = numArray[1, 1];
      // ISSUE: variable of a reference type
      int& local5;
      // ISSUE: explicit reference operation
      int num17 = checked (^(local5 = ref numArray.Address(1, 1)) - num10);
      local5 = num17;
      if (numArray[1, 1] < 0)
        numArray[1, 1] = 0;
      int num18 = checked (num10 - num16 - numArray[1, 1]);
      chpCalc.N24_9.M12 = (double) checked (num16 - numArray[1, 1]);
      if (num18 == 0)
      {
        int num19 = numArray[1, 1];
        // ISSUE: variable of a reference type
        int& local6;
        // ISSUE: explicit reference operation
        int num20 = checked (^(local6 = ref numArray.Address(1, 1)) - num3);
        local6 = num20;
        if (numArray[1, 1] < 0)
          numArray[1, 1] = 0;
        checked { num3 -= num19 - numArray[1, 1]; }
        chpCalc.N16_9.M12 = (double) checked (num19 - numArray[1, 1]);
      }
      int num21 = numArray[2, 0];
      // ISSUE: variable of a reference type
      int& local7;
      // ISSUE: explicit reference operation
      int num22 = checked (^(local7 = ref numArray.Address(2, 0)) - num15);
      local7 = num22;
      if (numArray[2, 0] < 0)
        numArray[2, 0] = 0;
      int num23 = checked (num15 - num21 - numArray[2, 0]);
      chpCalc.N24_16.M2 = (double) checked (num21 - numArray[2, 0]);
      int num24 = numArray[2, 1];
      // ISSUE: variable of a reference type
      int& local8;
      // ISSUE: explicit reference operation
      int num25 = checked (^(local8 = ref numArray.Address(2, 1)) - num18);
      local8 = num25;
      if (numArray[2, 1] < 0)
        numArray[2, 1] = 0;
      int num26 = checked (num18 - num24 - numArray[2, 1]);
      chpCalc.N24_9.M2 = (double) checked (num24 - numArray[2, 1]);
      if (num26 == 0)
      {
        int num27 = numArray[2, 1];
        // ISSUE: variable of a reference type
        int& local9;
        // ISSUE: explicit reference operation
        int num28 = checked (^(local9 = ref numArray.Address(2, 1)) - num3);
        local9 = num28;
        if (numArray[2, 1] < 0)
          numArray[2, 1] = 0;
        checked { num3 -= num27 - numArray[2, 1]; }
        chpCalc.N16_9.M2 = (double) checked (num27 - numArray[2, 1]);
      }
      int num29 = numArray[3, 0];
      // ISSUE: variable of a reference type
      int& local10;
      // ISSUE: explicit reference operation
      int num30 = checked (^(local10 = ref numArray.Address(3, 0)) - num23);
      local10 = num30;
      if (numArray[3, 0] < 0)
        numArray[3, 0] = 0;
      int num31 = checked (num23 - num29 - numArray[3, 0]);
      chpCalc.N24_16.M3 = (double) checked (num29 - numArray[3, 0]);
      int num32 = numArray[3, 1];
      // ISSUE: variable of a reference type
      int& local11;
      // ISSUE: explicit reference operation
      int num33 = checked (^(local11 = ref numArray.Address(3, 1)) - num26);
      local11 = num33;
      if (numArray[3, 1] < 0)
        numArray[3, 1] = 0;
      int num34 = checked (num26 - num32 - numArray[3, 1]);
      chpCalc.N24_9.M3 = (double) checked (num32 - numArray[3, 1]);
      if (num34 == 0)
      {
        int num35 = numArray[3, 1];
        // ISSUE: variable of a reference type
        int& local12;
        // ISSUE: explicit reference operation
        int num36 = checked (^(local12 = ref numArray.Address(3, 1)) - num3);
        local12 = num36;
        if (numArray[3, 1] < 0)
          numArray[3, 1] = 0;
        checked { num3 -= num35 - numArray[3, 1]; }
        chpCalc.N16_9.M3 = (double) checked (num35 - numArray[3, 1]);
      }
      int num37 = numArray[4, 0];
      // ISSUE: variable of a reference type
      int& local13;
      // ISSUE: explicit reference operation
      int num38 = checked (^(local13 = ref numArray.Address(4, 0)) - num31);
      local13 = num38;
      if (numArray[4, 0] < 0)
        numArray[4, 0] = 0;
      int num39 = checked (num31 - num37 - numArray[4, 0]);
      chpCalc.N24_16.M11 = (double) checked (num37 - numArray[4, 0]);
      int num40 = numArray[4, 1];
      // ISSUE: variable of a reference type
      int& local14;
      // ISSUE: explicit reference operation
      int num41 = checked (^(local14 = ref numArray.Address(4, 1)) - num34);
      local14 = num41;
      if (numArray[4, 1] < 0)
        numArray[4, 1] = 0;
      int num42 = checked (num34 - num40 - numArray[4, 1]);
      chpCalc.N24_9.M11 = (double) checked (num40 - numArray[4, 1]);
      if (num42 == 0)
      {
        int num43 = numArray[4, 1];
        // ISSUE: variable of a reference type
        int& local15;
        // ISSUE: explicit reference operation
        int num44 = checked (^(local15 = ref numArray.Address(4, 1)) - num3);
        local15 = num44;
        if (numArray[4, 1] < 0)
          numArray[4, 1] = 0;
        checked { num3 -= num43 - numArray[4, 1]; }
        chpCalc.N16_9.M11 = (double) checked (num43 - numArray[4, 1]);
      }
      int num45 = numArray[5, 0];
      // ISSUE: variable of a reference type
      int& local16;
      // ISSUE: explicit reference operation
      int num46 = checked (^(local16 = ref numArray.Address(5, 0)) - num39);
      local16 = num46;
      if (numArray[5, 0] < 0)
        numArray[5, 0] = 0;
      int num47 = checked (num39 - num45 - numArray[5, 0]);
      chpCalc.N24_16.M4 = (double) checked (num45 - numArray[5, 0]);
      int num48 = numArray[5, 1];
      // ISSUE: variable of a reference type
      int& local17;
      // ISSUE: explicit reference operation
      int num49 = checked (^(local17 = ref numArray.Address(5, 1)) - num42);
      local17 = num49;
      if (numArray[5, 1] < 0)
        numArray[5, 1] = 0;
      int num50 = checked (num42 - num48 - numArray[5, 1]);
      chpCalc.N24_9.M4 = (double) checked (num48 - numArray[5, 1]);
      if (num50 == 0)
      {
        int num51 = numArray[5, 1];
        // ISSUE: variable of a reference type
        int& local18;
        // ISSUE: explicit reference operation
        int num52 = checked (^(local18 = ref numArray.Address(5, 1)) - num3);
        local18 = num52;
        if (numArray[5, 1] < 0)
          numArray[5, 1] = 0;
        checked { num3 -= num51 - numArray[5, 1]; }
        chpCalc.N16_9.M4 = (double) checked (num51 - numArray[5, 1]);
      }
      int num53 = numArray[6, 0];
      // ISSUE: variable of a reference type
      int& local19;
      // ISSUE: explicit reference operation
      int num54 = checked (^(local19 = ref numArray.Address(6, 0)) - num47);
      local19 = num54;
      if (numArray[6, 0] < 0)
        numArray[6, 0] = 0;
      int num55 = checked (num47 - num53 - numArray[6, 0]);
      chpCalc.N24_16.M10 = (double) checked (num53 - numArray[6, 0]);
      int num56 = numArray[6, 1];
      // ISSUE: variable of a reference type
      int& local20;
      // ISSUE: explicit reference operation
      int num57 = checked (^(local20 = ref numArray.Address(6, 1)) - num50);
      local20 = num57;
      if (numArray[6, 1] < 0)
        numArray[6, 1] = 0;
      int num58 = checked (num50 - num56 - numArray[6, 1]);
      chpCalc.N24_9.M10 = (double) checked (num56 - numArray[6, 1]);
      if (num58 == 0)
      {
        int num59 = numArray[6, 1];
        // ISSUE: variable of a reference type
        int& local21;
        // ISSUE: explicit reference operation
        int num60 = checked (^(local21 = ref numArray.Address(6, 1)) - num3);
        local21 = num60;
        if (numArray[6, 1] < 0)
          numArray[6, 1] = 0;
        checked { num3 -= num59 - numArray[6, 1]; }
        chpCalc.N16_9.M10 = (double) checked (num59 - numArray[6, 1]);
      }
      int num61 = numArray[7, 0];
      // ISSUE: variable of a reference type
      int& local22;
      // ISSUE: explicit reference operation
      int num62 = checked (^(local22 = ref numArray.Address(7, 0)) - num55);
      local22 = num62;
      if (numArray[7, 0] < 0)
        numArray[7, 0] = 0;
      int num63 = checked (num55 - num61 - numArray[7, 0]);
      chpCalc.N24_16.M5 = (double) checked (num61 - numArray[7, 0]);
      int num64 = numArray[7, 1];
      // ISSUE: variable of a reference type
      int& local23;
      // ISSUE: explicit reference operation
      int num65 = checked (^(local23 = ref numArray.Address(7, 1)) - num58);
      local23 = num65;
      if (numArray[7, 1] < 0)
        numArray[7, 1] = 0;
      int num66 = checked (num58 - num64 - numArray[7, 1]);
      chpCalc.N24_9.M5 = (double) checked (num64 - numArray[7, 1]);
      if (num66 == 0)
      {
        int num67 = numArray[7, 1];
        // ISSUE: variable of a reference type
        int& local24;
        // ISSUE: explicit reference operation
        int num68 = checked (^(local24 = ref numArray.Address(7, 1)) - num3);
        local24 = num68;
        if (numArray[7, 1] < 0)
          numArray[7, 1] = 0;
        int num69 = checked (num3 - num67 - numArray[7, 1]);
        chpCalc.N16_9.M5 = (double) checked (num67 - numArray[7, 1]);
      }
    }

    private void HeatPump_Mean_Temp()
    {
      if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "Heating_Duration", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) "11", false))
        return;
      int[,] numArray = this.TableN5();
      object Left = NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "Heating_Duration", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
      int num1;
      int num2;
      int num3;
      if (Operators.ConditionalCompareObjectEqual(Left, (object) "V", false))
      {
        List<Calc2012.N4> n4List = this.TableN4();
        int num4 = checked (n4List.Count - 2);
        int index = 0;
        while (index <= num4)
        {
          if (this._Calc.HeatLoss.HPCalc.PSR >= (double) n4List[index].PSR & this._Calc.HeatLoss.HPCalc.PSR < (double) n4List[checked (index + 1)].PSR)
          {
            num1 = checked ((int) Math.Round(Math.Round(this.GiveInterloationValue((double) n4List[index].PSR, (double) n4List[index + 1].PSR, unchecked ((double) n4List[index].N24_16), unchecked ((double) n4List[checked (index + 1)].N24_16), this._Calc.HeatLoss.HPCalc.PSR), 0)));
            num2 = checked ((int) Math.Round(Math.Round(this.GiveInterloationValue((double) n4List[index].PSR, (double) n4List[index + 1].PSR, unchecked ((double) n4List[index].N24_9), unchecked ((double) n4List[checked (index + 1)].N24_9), this._Calc.HeatLoss.HPCalc.PSR), 0)));
            num3 = checked ((int) Math.Round(Math.Round(this.GiveInterloationValue((double) n4List[index].PSR, (double) n4List[index + 1].PSR, unchecked ((double) n4List[index].N16_9), unchecked ((double) n4List[checked (index + 1)].N16_9), this._Calc.HeatLoss.HPCalc.PSR), 0)));
          }
          checked { ++index; }
        }
      }
      else if (Operators.ConditionalCompareObjectEqual(Left, (object) "24", false))
      {
        num1 = 108;
        num2 = 270;
      }
      else if (Operators.ConditionalCompareObjectEqual(Left, (object) "16", false))
        num3 = 270;
      HeatPumps_Values2012 hpCalc = this._Calc.HeatLoss.HPCalc;
      int num5 = numArray[0, 0];
      // ISSUE: variable of a reference type
      int& local1;
      // ISSUE: explicit reference operation
      int num6 = checked (^(local1 = ref numArray.Address(0, 0)) - num1);
      local1 = num6;
      if (numArray[0, 0] < 0)
        numArray[0, 0] = 0;
      int num7 = checked (num1 - num5 - numArray[0, 0]);
      hpCalc.N24_16.M1 = (double) checked (num5 - numArray[0, 0]);
      int num8 = numArray[0, 1];
      // ISSUE: variable of a reference type
      int& local2;
      // ISSUE: explicit reference operation
      int num9 = checked (^(local2 = ref numArray.Address(0, 1)) - num2);
      local2 = num9;
      if (numArray[0, 1] < 0)
        numArray[0, 1] = 0;
      int num10 = checked (num2 - num8 - numArray[0, 1]);
      hpCalc.N24_9.M1 = (double) checked (num8 - numArray[0, 1]);
      if (num10 == 0)
      {
        int num11 = numArray[0, 1];
        // ISSUE: variable of a reference type
        int& local3;
        // ISSUE: explicit reference operation
        int num12 = checked (^(local3 = ref numArray.Address(0, 1)) - num3);
        local3 = num12;
        if (numArray[0, 1] < 0)
          numArray[0, 1] = 0;
        checked { num3 -= num11 - numArray[0, 1]; }
        hpCalc.N16_9.M1 = (double) checked (num11 - numArray[0, 1]);
      }
      int num13 = numArray[1, 0];
      // ISSUE: variable of a reference type
      int& local4;
      // ISSUE: explicit reference operation
      int num14 = checked (^(local4 = ref numArray.Address(1, 0)) - num7);
      local4 = num14;
      if (numArray[1, 0] < 0)
        numArray[1, 0] = 0;
      int num15 = checked (num7 - num13 - numArray[1, 0]);
      hpCalc.N24_16.M12 = (double) checked (num13 - numArray[1, 0]);
      int num16 = numArray[1, 1];
      // ISSUE: variable of a reference type
      int& local5;
      // ISSUE: explicit reference operation
      int num17 = checked (^(local5 = ref numArray.Address(1, 1)) - num10);
      local5 = num17;
      if (numArray[1, 1] < 0)
        numArray[1, 1] = 0;
      int num18 = checked (num10 - num16 - numArray[1, 1]);
      hpCalc.N24_9.M12 = (double) checked (num16 - numArray[1, 1]);
      if (num18 == 0)
      {
        int num19 = numArray[1, 1];
        // ISSUE: variable of a reference type
        int& local6;
        // ISSUE: explicit reference operation
        int num20 = checked (^(local6 = ref numArray.Address(1, 1)) - num3);
        local6 = num20;
        if (numArray[1, 1] < 0)
          numArray[1, 1] = 0;
        checked { num3 -= num19 - numArray[1, 1]; }
        hpCalc.N16_9.M12 = (double) checked (num19 - numArray[1, 1]);
      }
      int num21 = numArray[2, 0];
      // ISSUE: variable of a reference type
      int& local7;
      // ISSUE: explicit reference operation
      int num22 = checked (^(local7 = ref numArray.Address(2, 0)) - num15);
      local7 = num22;
      if (numArray[2, 0] < 0)
        numArray[2, 0] = 0;
      int num23 = checked (num15 - num21 - numArray[2, 0]);
      hpCalc.N24_16.M2 = (double) checked (num21 - numArray[2, 0]);
      int num24 = numArray[2, 1];
      // ISSUE: variable of a reference type
      int& local8;
      // ISSUE: explicit reference operation
      int num25 = checked (^(local8 = ref numArray.Address(2, 1)) - num18);
      local8 = num25;
      if (numArray[2, 1] < 0)
        numArray[2, 1] = 0;
      int num26 = checked (num18 - num24 - numArray[2, 1]);
      hpCalc.N24_9.M2 = (double) checked (num24 - numArray[2, 1]);
      if (num26 == 0)
      {
        int num27 = numArray[2, 1];
        // ISSUE: variable of a reference type
        int& local9;
        // ISSUE: explicit reference operation
        int num28 = checked (^(local9 = ref numArray.Address(2, 1)) - num3);
        local9 = num28;
        if (numArray[2, 1] < 0)
          numArray[2, 1] = 0;
        checked { num3 -= num27 - numArray[2, 1]; }
        hpCalc.N16_9.M2 = (double) checked (num27 - numArray[2, 1]);
      }
      int num29 = numArray[3, 0];
      // ISSUE: variable of a reference type
      int& local10;
      // ISSUE: explicit reference operation
      int num30 = checked (^(local10 = ref numArray.Address(3, 0)) - num23);
      local10 = num30;
      if (numArray[3, 0] < 0)
        numArray[3, 0] = 0;
      int num31 = checked (num23 - num29 - numArray[3, 0]);
      hpCalc.N24_16.M3 = (double) checked (num29 - numArray[3, 0]);
      int num32 = numArray[3, 1];
      // ISSUE: variable of a reference type
      int& local11;
      // ISSUE: explicit reference operation
      int num33 = checked (^(local11 = ref numArray.Address(3, 1)) - num26);
      local11 = num33;
      if (numArray[3, 1] < 0)
        numArray[3, 1] = 0;
      int num34 = checked (num26 - num32 - numArray[3, 1]);
      hpCalc.N24_9.M3 = (double) checked (num32 - numArray[3, 1]);
      if (num34 == 0)
      {
        int num35 = numArray[3, 1];
        // ISSUE: variable of a reference type
        int& local12;
        // ISSUE: explicit reference operation
        int num36 = checked (^(local12 = ref numArray.Address(3, 1)) - num3);
        local12 = num36;
        if (numArray[3, 1] < 0)
          numArray[3, 1] = 0;
        checked { num3 -= num35 - numArray[3, 1]; }
        hpCalc.N16_9.M3 = (double) checked (num35 - numArray[3, 1]);
      }
      int num37 = numArray[4, 0];
      // ISSUE: variable of a reference type
      int& local13;
      // ISSUE: explicit reference operation
      int num38 = checked (^(local13 = ref numArray.Address(4, 0)) - num31);
      local13 = num38;
      if (numArray[4, 0] < 0)
        numArray[4, 0] = 0;
      int num39 = checked (num31 - num37 - numArray[4, 0]);
      hpCalc.N24_16.M11 = (double) checked (num37 - numArray[4, 0]);
      int num40 = numArray[4, 1];
      // ISSUE: variable of a reference type
      int& local14;
      // ISSUE: explicit reference operation
      int num41 = checked (^(local14 = ref numArray.Address(4, 1)) - num34);
      local14 = num41;
      if (numArray[4, 1] < 0)
        numArray[4, 1] = 0;
      int num42 = checked (num34 - num40 - numArray[4, 1]);
      hpCalc.N24_9.M11 = (double) checked (num40 - numArray[4, 1]);
      if (num42 == 0)
      {
        int num43 = numArray[4, 1];
        // ISSUE: variable of a reference type
        int& local15;
        // ISSUE: explicit reference operation
        int num44 = checked (^(local15 = ref numArray.Address(4, 1)) - num3);
        local15 = num44;
        if (numArray[4, 1] < 0)
          numArray[4, 1] = 0;
        checked { num3 -= num43 - numArray[4, 1]; }
        hpCalc.N16_9.M11 = (double) checked (num43 - numArray[4, 1]);
      }
      int num45 = numArray[5, 0];
      // ISSUE: variable of a reference type
      int& local16;
      // ISSUE: explicit reference operation
      int num46 = checked (^(local16 = ref numArray.Address(5, 0)) - num39);
      local16 = num46;
      if (numArray[5, 0] < 0)
        numArray[5, 0] = 0;
      int num47 = checked (num39 - num45 - numArray[5, 0]);
      hpCalc.N24_16.M4 = (double) checked (num45 - numArray[5, 0]);
      int num48 = numArray[5, 1];
      // ISSUE: variable of a reference type
      int& local17;
      // ISSUE: explicit reference operation
      int num49 = checked (^(local17 = ref numArray.Address(5, 1)) - num42);
      local17 = num49;
      if (numArray[5, 1] < 0)
        numArray[5, 1] = 0;
      int num50 = checked (num42 - num48 - numArray[5, 1]);
      hpCalc.N24_9.M4 = (double) checked (num48 - numArray[5, 1]);
      if (num50 == 0)
      {
        int num51 = numArray[5, 1];
        // ISSUE: variable of a reference type
        int& local18;
        // ISSUE: explicit reference operation
        int num52 = checked (^(local18 = ref numArray.Address(5, 1)) - num3);
        local18 = num52;
        if (numArray[5, 1] < 0)
          numArray[5, 1] = 0;
        checked { num3 -= num51 - numArray[5, 1]; }
        hpCalc.N16_9.M4 = (double) checked (num51 - numArray[5, 1]);
      }
      int num53 = numArray[6, 0];
      // ISSUE: variable of a reference type
      int& local19;
      // ISSUE: explicit reference operation
      int num54 = checked (^(local19 = ref numArray.Address(6, 0)) - num47);
      local19 = num54;
      if (numArray[6, 0] < 0)
        numArray[6, 0] = 0;
      int num55 = checked (num47 - num53 - numArray[6, 0]);
      hpCalc.N24_16.M10 = (double) checked (num53 - numArray[6, 0]);
      int num56 = numArray[6, 1];
      // ISSUE: variable of a reference type
      int& local20;
      // ISSUE: explicit reference operation
      int num57 = checked (^(local20 = ref numArray.Address(6, 1)) - num50);
      local20 = num57;
      if (numArray[6, 1] < 0)
        numArray[6, 1] = 0;
      int num58 = checked (num50 - num56 - numArray[6, 1]);
      hpCalc.N24_9.M10 = (double) checked (num56 - numArray[6, 1]);
      if (num58 == 0)
      {
        int num59 = numArray[6, 1];
        // ISSUE: variable of a reference type
        int& local21;
        // ISSUE: explicit reference operation
        int num60 = checked (^(local21 = ref numArray.Address(6, 1)) - num3);
        local21 = num60;
        if (numArray[6, 1] < 0)
          numArray[6, 1] = 0;
        checked { num3 -= num59 - numArray[6, 1]; }
        hpCalc.N16_9.M10 = (double) checked (num59 - numArray[6, 1]);
      }
      int num61 = numArray[7, 0];
      // ISSUE: variable of a reference type
      int& local22;
      // ISSUE: explicit reference operation
      int num62 = checked (^(local22 = ref numArray.Address(7, 0)) - num55);
      local22 = num62;
      if (numArray[7, 0] < 0)
        numArray[7, 0] = 0;
      int num63 = checked (num55 - num61 - numArray[7, 0]);
      hpCalc.N24_16.M5 = (double) checked (num61 - numArray[7, 0]);
      int num64 = numArray[7, 1];
      // ISSUE: variable of a reference type
      int& local23;
      // ISSUE: explicit reference operation
      int num65 = checked (^(local23 = ref numArray.Address(7, 1)) - num58);
      local23 = num65;
      if (numArray[7, 1] < 0)
        numArray[7, 1] = 0;
      int num66 = checked (num58 - num64 - numArray[7, 1]);
      hpCalc.N24_9.M5 = (double) checked (num64 - numArray[7, 1]);
      if (num66 == 0)
      {
        int num67 = numArray[7, 1];
        // ISSUE: variable of a reference type
        int& local24;
        // ISSUE: explicit reference operation
        int num68 = checked (^(local24 = ref numArray.Address(7, 1)) - num3);
        local24 = num68;
        if (numArray[7, 1] < 0)
          numArray[7, 1] = 0;
        checked { num3 -= num67 - numArray[7, 1]; }
        hpCalc.N16_9.M5 = (double) checked (num67 - numArray[7, 1]);
      }
      int num69 = numArray[8, 0];
      // ISSUE: variable of a reference type
      int& local25;
      // ISSUE: explicit reference operation
      int num70 = checked (^(local25 = ref numArray.Address(8, 0)) - num63);
      local25 = num70;
      if (numArray[8, 0] < 0)
        numArray[8, 0] = 0;
      int num71 = checked (num63 - num69 - numArray[8, 0]);
      hpCalc.N24_16.M6 = (double) checked (num69 - numArray[8, 0]);
      int num72 = numArray[8, 1];
      // ISSUE: variable of a reference type
      int& local26;
      // ISSUE: explicit reference operation
      int num73 = checked (^(local26 = ref numArray.Address(8, 1)) - num66);
      local26 = num73;
      if (numArray[8, 1] < 0)
        numArray[8, 1] = 0;
      int num74 = checked (num66 - num72 - numArray[8, 1]);
      hpCalc.N24_9.M6 = (double) checked (num72 - numArray[8, 1]);
      if (num74 == 0)
      {
        int num75 = numArray[8, 1];
        // ISSUE: variable of a reference type
        int& local27;
        // ISSUE: explicit reference operation
        int num76 = checked (^(local27 = ref numArray.Address(8, 1)) - num3);
        local27 = num76;
        if (numArray[8, 1] < 0)
          numArray[8, 1] = 0;
        checked { num3 -= num75 - numArray[8, 1]; }
        hpCalc.N16_9.M6 = (double) checked (num75 - numArray[8, 1]);
      }
      int num77 = numArray[9, 0];
      // ISSUE: variable of a reference type
      int& local28;
      // ISSUE: explicit reference operation
      int num78 = checked (^(local28 = ref numArray.Address(9, 0)) - num71);
      local28 = num78;
      if (numArray[9, 0] < 0)
        numArray[9, 0] = 0;
      int num79 = checked (num71 - num77 - numArray[9, 0]);
      hpCalc.N24_16.M7 = (double) checked (num77 - numArray[9, 0]);
      int num80 = numArray[9, 1];
      // ISSUE: variable of a reference type
      int& local29;
      // ISSUE: explicit reference operation
      int num81 = checked (^(local29 = ref numArray.Address(9, 1)) - num74);
      local29 = num81;
      if (numArray[9, 1] < 0)
        numArray[9, 1] = 0;
      int num82 = checked (num74 - num80 - numArray[9, 1]);
      hpCalc.N24_9.M7 = (double) checked (num80 - numArray[9, 1]);
      if (num82 == 0)
      {
        int num83 = numArray[9, 1];
        // ISSUE: variable of a reference type
        int& local30;
        // ISSUE: explicit reference operation
        int num84 = checked (^(local30 = ref numArray.Address(9, 1)) - num3);
        local30 = num84;
        if (numArray[9, 1] < 0)
          numArray[9, 1] = 0;
        checked { num3 -= num83 - numArray[9, 1]; }
        hpCalc.N16_9.M7 = (double) checked (num83 - numArray[9, 1]);
      }
      int num85 = numArray[10, 0];
      // ISSUE: variable of a reference type
      int& local31;
      // ISSUE: explicit reference operation
      int num86 = checked (^(local31 = ref numArray.Address(10, 0)) - num79);
      local31 = num86;
      if (numArray[10, 0] < 0)
        numArray[10, 0] = 0;
      int num87 = checked (num79 - num85 - numArray[10, 0]);
      hpCalc.N24_16.M8 = (double) checked (num85 - numArray[10, 0]);
      int num88 = numArray[10, 1];
      // ISSUE: variable of a reference type
      int& local32;
      // ISSUE: explicit reference operation
      int num89 = checked (^(local32 = ref numArray.Address(10, 1)) - num82);
      local32 = num89;
      if (numArray[10, 1] < 0)
        numArray[10, 1] = 0;
      int num90 = checked (num82 - num88 - numArray[10, 1]);
      hpCalc.N24_9.M8 = (double) checked (num88 - numArray[10, 1]);
      if (num90 == 0)
      {
        int num91 = numArray[10, 1];
        // ISSUE: variable of a reference type
        int& local33;
        // ISSUE: explicit reference operation
        int num92 = checked (^(local33 = ref numArray.Address(10, 1)) - num3);
        local33 = num92;
        if (numArray[10, 1] < 0)
          numArray[10, 1] = 0;
        checked { num3 -= num91 - numArray[10, 1]; }
        hpCalc.N16_9.M8 = (double) checked (num91 - numArray[10, 1]);
      }
      int num93 = numArray[11, 0];
      // ISSUE: variable of a reference type
      int& local34;
      // ISSUE: explicit reference operation
      int num94 = checked (^(local34 = ref numArray.Address(11, 0)) - num87);
      local34 = num94;
      if (numArray[11, 0] < 0)
        numArray[11, 0] = 0;
      int num95 = checked (num87 - num93 - numArray[11, 0]);
      hpCalc.N24_16.M9 = (double) checked (num93 - numArray[11, 0]);
      int num96 = numArray[11, 1];
      // ISSUE: variable of a reference type
      int& local35;
      // ISSUE: explicit reference operation
      int num97 = checked (^(local35 = ref numArray.Address(11, 1)) - num90);
      local35 = num97;
      if (numArray[11, 1] < 0)
        numArray[11, 1] = 0;
      int num98 = checked (num90 - num96 - numArray[11, 1]);
      hpCalc.N24_9.M9 = (double) checked (num96 - numArray[11, 1]);
      if (num98 == 0)
      {
        int num99 = numArray[11, 1];
        // ISSUE: variable of a reference type
        int& local36;
        // ISSUE: explicit reference operation
        int num100 = checked (^(local36 = ref numArray.Address(11, 1)) - num3);
        local36 = num100;
        if (numArray[11, 1] < 0)
          numArray[11, 1] = 0;
        int num101 = checked (num3 - num99 - numArray[11, 1]);
        hpCalc.N16_9.M9 = (double) checked (num99 - numArray[11, 1]);
      }
    }

    private void SAP_rating_11b()
    {
      this._Calc.SAP_rating_11b.Box356 = 0.42;
      this._Calc.SAP_rating_11b.Box357 = this._Calc.Fuel_costs_10b.Box355 * this._Calc.SAP_rating_11b.Box356 / (this._Calc.Dimensions.Box4 + 45.0);
      this._Calc.SAP_rating_11b.Box358 = this._Calc.SAP_rating_11b.Box357 < 3.5 ? 100.0 - 13.95 * this._Calc.SAP_rating_11b.Box357 : 117.0 - 121.0 * Math.Log10(this._Calc.SAP_rating_11b.Box357);
      this._Calc.SAP_rating_11b.SAPRating = this._Calc.SAP_rating_11b.Box358 >= 0.0 ? (!SAP_Module.Admin ? Conversions.ToDouble(Microsoft.VisualBasic.Strings.Format((object) this._Calc.SAP_rating_11b.Box358, "#0")) : Math.Round(this._Calc.SAP_rating_11b.Box358, 2)) : 1.0;
      double sapRating = this._Calc.SAP_rating_11b.SAPRating;
      if (sapRating >= 1.0 && sapRating <= 20.0)
        this._Calc.SAP_rating_11b.SAPBand = "G";
      else if (sapRating >= 21.0 && sapRating <= 38.0)
        this._Calc.SAP_rating_11b.SAPBand = "F";
      else if (sapRating >= 39.0 && sapRating <= 54.0)
        this._Calc.SAP_rating_11b.SAPBand = "E";
      else if (sapRating >= 55.0 && sapRating <= 68.0)
        this._Calc.SAP_rating_11b.SAPBand = "D";
      else if (sapRating >= 69.0 && sapRating <= 80.0)
        this._Calc.SAP_rating_11b.SAPBand = "C";
      else if (sapRating >= 81.0 && sapRating <= 91.0)
      {
        this._Calc.SAP_rating_11b.SAPBand = "B";
      }
      else
      {
        if (sapRating < 92.0)
          return;
        this._Calc.SAP_rating_11b.SAPBand = "A";
      }
    }

    private void SAP_rating_11a()
    {
      this._Calc.SAP_rating_11a.Box256 = 0.42;
      this._Calc.SAP_rating_11a.Box257 = this._Calc.Fuel_costs_10a.Box255 * this._Calc.SAP_rating_11a.Box256 / (this._Calc.Dimensions.Box4 + 45.0);
      this._Calc.SAP_rating_11a.Box258 = this._Calc.SAP_rating_11a.Box257 < 3.5 ? 100.0 - 13.95 * this._Calc.SAP_rating_11a.Box257 : 117.0 - 121.0 * Math.Log10(this._Calc.SAP_rating_11a.Box257);
      this._Calc.SAP_rating_11a.SAPRating = this._Calc.SAP_rating_11a.Box258 >= 0.0 ? (!SAP_Module.Admin ? Conversions.ToDouble(Microsoft.VisualBasic.Strings.Format((object) this._Calc.SAP_rating_11a.Box258, "#0")) : Math.Round(this._Calc.SAP_rating_11a.Box258, 2)) : 1.0;
      double sapRating = this._Calc.SAP_rating_11a.SAPRating;
      if (sapRating >= 1.0 && sapRating <= 20.0)
        this._Calc.SAP_rating_11a.SAPBand = "G";
      else if (sapRating >= 21.0 && sapRating <= 38.0)
        this._Calc.SAP_rating_11a.SAPBand = "F";
      else if (sapRating >= 39.0 && sapRating <= 54.0)
        this._Calc.SAP_rating_11a.SAPBand = "E";
      else if (sapRating >= 55.0 && sapRating <= 68.0)
        this._Calc.SAP_rating_11a.SAPBand = "D";
      else if (sapRating >= 69.0 && sapRating <= 80.0)
        this._Calc.SAP_rating_11a.SAPBand = "C";
      else if (sapRating >= 81.0 && sapRating <= 91.0)
      {
        this._Calc.SAP_rating_11a.SAPBand = "B";
      }
      else
      {
        if (sapRating < 92.0)
          return;
        this._Calc.SAP_rating_11a.SAPBand = "A";
      }
    }

    private void Solar_Gains()
    {
      this._Add_Variable.C6a._Box74 = new SolarParts[0];
      this._Add_Variable.C6a._Box75 = new SolarParts[0];
      this._Add_Variable.C6a._Box76 = new SolarParts[0];
      this._Add_Variable.C6a._Box77 = new SolarParts[0];
      this._Add_Variable.C6a._Box78 = new SolarParts[0];
      this._Add_Variable.C6a._Box79 = new SolarParts[0];
      this._Add_Variable.C6a._Box80 = new SolarParts[0];
      this._Add_Variable.C6a._Box81 = new SolarParts[0];
      this._Add_Variable.C6a._Box82 = new SolarParts[0];
      int Month = 1;
      do
      {
        double num1;
        if (this._House.Windows != null)
        {
          int num2 = checked (this._House.Windows.Length - 1);
          int Opening = 0;
          while (Opening <= num2)
          {
            float num3 = 0.9f;
            string overshading = this._House.Windows[Opening].Overshading;
            if (Operators.CompareString(overshading, "Heavy", false) != 0)
            {
              if (Operators.CompareString(overshading, "More than average", false) != 0)
              {
                if (Operators.CompareString(overshading, "Average or unknown", false) != 0)
                {
                  if (Operators.CompareString(overshading, "Very Little", false) == 0)
                    num1 = 1.0;
                }
                else
                  num1 = 0.77;
              }
              else
                num1 = 0.54;
            }
            else
              num1 = 0.3;
            double num4 = this.SolarFlux(Month, Opening, true);
            if (Operators.CompareString(this._House.Windows[Opening].UValueSource, "BFRC", false) == 0)
              this._House.Windows[Opening].FF = 1.111111f;
            _6a2012 c6a = this._Add_Variable.C6a;
            string orientation = this._House.Windows[Opening].Orientation;
            // ISSUE: reference to a compiler-generated method
            switch (\u003CPrivateImplementationDetails\u003E.ComputeStringHash(orientation))
            {
              case 105265260:
                if (Operators.CompareString(orientation, "Unspecified", false) == 0)
                {
                  // ISSUE: variable of a reference type
                  SolarParts[]& local;
                  // ISSUE: explicit reference operation
                  SolarParts[] solarPartsArray = (SolarParts[]) Utils.CopyArray((Array) ^(local = ref c6a._Box76), (Array) new SolarParts[checked (c6a._Box76.Length + 1)]);
                  local = solarPartsArray;
                  c6a._Box76[checked (c6a._Box76.Length - 1)] = new SolarParts();
                  c6a._Box76[checked (c6a._Box76.Length - 1)].Table6d = num1;
                  c6a._Box76[checked (c6a._Box76.Length - 1)].Area = (double) this._House.Windows[Opening].Area;
                  c6a._Box76[checked (c6a._Box76.Length - 1)].Flux = num4;
                  c6a._Box76[checked (c6a._Box76.Length - 1)].Table6b = (double) this._House.Windows[Opening].g;
                  c6a._Box76[checked (c6a._Box76.Length - 1)].Table6c = (double) this._House.Windows[Opening].FF;
                  c6a._Box76[checked (c6a._Box76.Length - 1)].Count = this._House.Windows[Opening].Count;
                  c6a._Box76[checked (c6a._Box76.Length - 1)].Name = this._House.Windows[Opening].Name;
                  this.Solar_Month(Month, this._Calc.Solar_gains.Box76_m, (float) (num1 * (double) this._House.Windows[Opening].Area * num4) * num3 * this._House.Windows[Opening].g * this._House.Windows[Opening].FF * (float) this._House.Windows[Opening].Count);
                  c6a._Box76[checked (c6a._Box76.Length - 1)].Value = num1 * (double) this._House.Windows[Opening].Area * num4 * (double) num3 * (double) this._House.Windows[Opening].g * (double) this._House.Windows[Opening].FF * (double) this._House.Windows[Opening].Count;
                  break;
                }
                break;
              case 1128440633:
                if (Operators.CompareString(orientation, "North East", false) == 0)
                {
                  // ISSUE: variable of a reference type
                  SolarParts[]& local;
                  // ISSUE: explicit reference operation
                  SolarParts[] solarPartsArray = (SolarParts[]) Utils.CopyArray((Array) ^(local = ref c6a._Box75), (Array) new SolarParts[checked (c6a._Box75.Length + 1)]);
                  local = solarPartsArray;
                  c6a._Box75[checked (c6a._Box75.Length - 1)] = new SolarParts();
                  c6a._Box75[checked (c6a._Box75.Length - 1)].Table6d = num1;
                  c6a._Box75[checked (c6a._Box75.Length - 1)].Area = (double) this._House.Windows[Opening].Area;
                  c6a._Box75[checked (c6a._Box75.Length - 1)].Flux = num4;
                  c6a._Box75[checked (c6a._Box75.Length - 1)].Table6b = (double) this._House.Windows[Opening].g;
                  c6a._Box75[checked (c6a._Box75.Length - 1)].Table6c = (double) this._House.Windows[Opening].FF;
                  c6a._Box75[checked (c6a._Box75.Length - 1)].Count = this._House.Windows[Opening].Count;
                  c6a._Box75[checked (c6a._Box75.Length - 1)].Name = this._House.Windows[Opening].Name;
                  this.Solar_Month(Month, this._Calc.Solar_gains.Box75_m, (float) (num1 * (double) this._House.Windows[Opening].Area * num4) * num3 * this._House.Windows[Opening].g * this._House.Windows[Opening].FF * (float) this._House.Windows[Opening].Count);
                  c6a._Box75[checked (c6a._Box75.Length - 1)].Value = num1 * (double) this._House.Windows[Opening].Area * num4 * (double) num3 * (double) this._House.Windows[Opening].g * (double) this._House.Windows[Opening].FF * (double) this._House.Windows[Opening].Count;
                  break;
                }
                break;
              case 1409318971:
                if (Operators.CompareString(orientation, "North West", false) == 0)
                {
                  // ISSUE: variable of a reference type
                  SolarParts[]& local;
                  // ISSUE: explicit reference operation
                  SolarParts[] solarPartsArray = (SolarParts[]) Utils.CopyArray((Array) ^(local = ref c6a._Box81), (Array) new SolarParts[checked (c6a._Box81.Length + 1)]);
                  local = solarPartsArray;
                  c6a._Box81[checked (c6a._Box81.Length - 1)] = new SolarParts();
                  c6a._Box81[checked (c6a._Box81.Length - 1)].Table6d = num1;
                  c6a._Box81[checked (c6a._Box81.Length - 1)].Area = (double) this._House.Windows[Opening].Area;
                  c6a._Box81[checked (c6a._Box81.Length - 1)].Flux = num4;
                  c6a._Box81[checked (c6a._Box81.Length - 1)].Table6b = (double) this._House.Windows[Opening].g;
                  c6a._Box81[checked (c6a._Box81.Length - 1)].Table6c = (double) this._House.Windows[Opening].FF;
                  c6a._Box81[checked (c6a._Box81.Length - 1)].Count = this._House.Windows[Opening].Count;
                  c6a._Box81[checked (c6a._Box81.Length - 1)].Name = this._House.Windows[Opening].Name;
                  this.Solar_Month(Month, this._Calc.Solar_gains.Box81_m, (float) (num1 * (double) this._House.Windows[Opening].Area * num4) * num3 * this._House.Windows[Opening].g * this._House.Windows[Opening].FF * (float) this._House.Windows[Opening].Count);
                  c6a._Box81[checked (c6a._Box81.Length - 1)].Value = num1 * (double) this._House.Windows[Opening].Area * num4 * (double) num3 * (double) this._House.Windows[Opening].g * (double) this._House.Windows[Opening].FF * (double) this._House.Windows[Opening].Count;
                  break;
                }
                break;
              case 1731397980:
                if (Operators.CompareString(orientation, "East", false) == 0)
                {
                  // ISSUE: variable of a reference type
                  SolarParts[]& local;
                  // ISSUE: explicit reference operation
                  SolarParts[] solarPartsArray = (SolarParts[]) Utils.CopyArray((Array) ^(local = ref c6a._Box76), (Array) new SolarParts[checked (c6a._Box76.Length + 1)]);
                  local = solarPartsArray;
                  c6a._Box76[checked (c6a._Box76.Length - 1)] = new SolarParts();
                  c6a._Box76[checked (c6a._Box76.Length - 1)].Table6d = num1;
                  c6a._Box76[checked (c6a._Box76.Length - 1)].Area = (double) this._House.Windows[Opening].Area;
                  c6a._Box76[checked (c6a._Box76.Length - 1)].Flux = num4;
                  c6a._Box76[checked (c6a._Box76.Length - 1)].Table6b = (double) this._House.Windows[Opening].g;
                  c6a._Box76[checked (c6a._Box76.Length - 1)].Table6c = (double) this._House.Windows[Opening].FF;
                  c6a._Box76[checked (c6a._Box76.Length - 1)].Name = this._House.Windows[Opening].Name;
                  this.Solar_Month(Month, this._Calc.Solar_gains.Box76_m, (float) (num1 * (double) this._House.Windows[Opening].Area * num4) * num3 * this._House.Windows[Opening].g * this._House.Windows[Opening].FF * (float) this._House.Windows[Opening].Count);
                  c6a._Box76[checked (c6a._Box76.Length - 1)].Value = num1 * (double) this._House.Windows[Opening].Area * num4 * (double) num3 * (double) this._House.Windows[Opening].g * (double) this._House.Windows[Opening].FF * (double) this._House.Windows[Opening].Count;
                  break;
                }
                break;
              case 1734234020:
                if (Operators.CompareString(orientation, "North", false) == 0)
                {
                  // ISSUE: variable of a reference type
                  SolarParts[]& local;
                  // ISSUE: explicit reference operation
                  SolarParts[] solarPartsArray = (SolarParts[]) Utils.CopyArray((Array) ^(local = ref c6a._Box74), (Array) new SolarParts[checked (c6a._Box74.Length + 1)]);
                  local = solarPartsArray;
                  c6a._Box74[checked (c6a._Box74.Length - 1)] = new SolarParts();
                  c6a._Box74[checked (c6a._Box74.Length - 1)].Table6d = num1;
                  c6a._Box74[checked (c6a._Box74.Length - 1)].Area = (double) this._House.Windows[Opening].Area;
                  c6a._Box74[checked (c6a._Box74.Length - 1)].Flux = num4;
                  c6a._Box74[checked (c6a._Box74.Length - 1)].Table6b = (double) this._House.Windows[Opening].g;
                  c6a._Box74[checked (c6a._Box74.Length - 1)].Table6c = (double) this._House.Windows[Opening].FF;
                  c6a._Box74[checked (c6a._Box74.Length - 1)].Count = this._House.Windows[Opening].Count;
                  c6a._Box74[checked (c6a._Box74.Length - 1)].Name = this._House.Windows[Opening].Name;
                  this.Solar_Month(Month, this._Calc.Solar_gains.Box74_m, (float) (num1 * (double) this._House.Windows[Opening].Area * num4) * num3 * this._House.Windows[Opening].g * this._House.Windows[Opening].FF * (float) this._House.Windows[Opening].Count);
                  c6a._Box74[checked (c6a._Box74.Length - 1)].Value = num1 * (double) this._House.Windows[Opening].Area * num4 * (double) num3 * (double) this._House.Windows[Opening].g * (double) this._House.Windows[Opening].FF * (double) this._House.Windows[Opening].Count;
                  break;
                }
                break;
              case 1796576718:
                if (Operators.CompareString(orientation, "West", false) == 0)
                {
                  // ISSUE: variable of a reference type
                  SolarParts[]& local;
                  // ISSUE: explicit reference operation
                  SolarParts[] solarPartsArray = (SolarParts[]) Utils.CopyArray((Array) ^(local = ref c6a._Box80), (Array) new SolarParts[checked (c6a._Box80.Length + 1)]);
                  local = solarPartsArray;
                  c6a._Box80[checked (c6a._Box80.Length - 1)] = new SolarParts();
                  c6a._Box80[checked (c6a._Box80.Length - 1)].Table6d = num1;
                  c6a._Box80[checked (c6a._Box80.Length - 1)].Area = (double) this._House.Windows[Opening].Area;
                  c6a._Box80[checked (c6a._Box80.Length - 1)].Flux = num4;
                  c6a._Box80[checked (c6a._Box80.Length - 1)].Table6b = (double) this._House.Windows[Opening].g;
                  c6a._Box80[checked (c6a._Box80.Length - 1)].Table6c = (double) this._House.Windows[Opening].FF;
                  c6a._Box80[checked (c6a._Box80.Length - 1)].Count = this._House.Windows[Opening].Count;
                  c6a._Box80[checked (c6a._Box80.Length - 1)].Name = this._House.Windows[Opening].Name;
                  this.Solar_Month(Month, this._Calc.Solar_gains.Box80_m, (float) (num1 * (double) this._House.Windows[Opening].Area * num4) * num3 * this._House.Windows[Opening].g * this._House.Windows[Opening].FF * (float) this._House.Windows[Opening].Count);
                  c6a._Box80[checked (c6a._Box80.Length - 1)].Value = num1 * (double) this._House.Windows[Opening].Area * num4 * (double) num3 * (double) this._House.Windows[Opening].g * (double) this._House.Windows[Opening].FF * (double) this._House.Windows[Opening].Count;
                  break;
                }
                break;
              case 2390635792:
                if (Operators.CompareString(orientation, "Worst case", false) == 0)
                {
                  // ISSUE: variable of a reference type
                  SolarParts[]& local;
                  // ISSUE: explicit reference operation
                  SolarParts[] solarPartsArray = (SolarParts[]) Utils.CopyArray((Array) ^(local = ref c6a._Box74), (Array) new SolarParts[checked (c6a._Box74.Length + 1)]);
                  local = solarPartsArray;
                  c6a._Box74[checked (c6a._Box74.Length - 1)] = new SolarParts();
                  c6a._Box74[checked (c6a._Box74.Length - 1)].Table6d = num1;
                  c6a._Box74[checked (c6a._Box74.Length - 1)].Area = (double) this._House.Windows[Opening].Area;
                  c6a._Box74[checked (c6a._Box74.Length - 1)].Flux = num4;
                  c6a._Box74[checked (c6a._Box74.Length - 1)].Table6b = (double) this._House.Windows[Opening].g;
                  c6a._Box74[checked (c6a._Box74.Length - 1)].Table6c = (double) this._House.Windows[Opening].FF;
                  c6a._Box74[checked (c6a._Box74.Length - 1)].Count = this._House.Windows[Opening].Count;
                  c6a._Box74[checked (c6a._Box74.Length - 1)].Name = this._House.Windows[Opening].Name;
                  this.Solar_Month(Month, this._Calc.Solar_gains.Box74_m, (float) (num1 * (double) this._House.Windows[Opening].Area * num4) * num3 * this._House.Windows[Opening].g * this._House.Windows[Opening].FF * (float) this._House.Windows[Opening].Count);
                  c6a._Box74[checked (c6a._Box74.Length - 1)].Value = num1 * (double) this._House.Windows[Opening].Area * num4 * (double) num3 * (double) this._House.Windows[Opening].g * (double) this._House.Windows[Opening].FF * (double) this._House.Windows[Opening].Count;
                  break;
                }
                break;
              case 2417407149:
                if (Operators.CompareString(orientation, "South West", false) == 0)
                {
                  // ISSUE: variable of a reference type
                  SolarParts[]& local;
                  // ISSUE: explicit reference operation
                  SolarParts[] solarPartsArray = (SolarParts[]) Utils.CopyArray((Array) ^(local = ref c6a._Box79), (Array) new SolarParts[checked (c6a._Box79.Length + 1)]);
                  local = solarPartsArray;
                  c6a._Box79[checked (c6a._Box79.Length - 1)] = new SolarParts();
                  c6a._Box79[checked (c6a._Box79.Length - 1)].Table6d = num1;
                  c6a._Box79[checked (c6a._Box79.Length - 1)].Area = (double) this._House.Windows[Opening].Area;
                  c6a._Box79[checked (c6a._Box79.Length - 1)].Flux = num4;
                  c6a._Box79[checked (c6a._Box79.Length - 1)].Table6b = (double) this._House.Windows[Opening].g;
                  c6a._Box79[checked (c6a._Box79.Length - 1)].Table6c = (double) this._House.Windows[Opening].FF;
                  c6a._Box79[checked (c6a._Box79.Length - 1)].Count = this._House.Windows[Opening].Count;
                  c6a._Box79[checked (c6a._Box79.Length - 1)].Name = this._House.Windows[Opening].Name;
                  this.Solar_Month(Month, this._Calc.Solar_gains.Box79_m, (float) (num1 * (double) this._House.Windows[Opening].Area * num4) * num3 * this._House.Windows[Opening].g * this._House.Windows[Opening].FF * (float) this._House.Windows[Opening].Count);
                  c6a._Box79[checked (c6a._Box79.Length - 1)].Value = num1 * (double) this._House.Windows[Opening].Area * num4 * (double) num3 * (double) this._House.Windows[Opening].g * (double) this._House.Windows[Opening].FF * (double) this._House.Windows[Opening].Count;
                  break;
                }
                break;
              case 2853841879:
                if (Operators.CompareString(orientation, "South East", false) == 0)
                {
                  // ISSUE: variable of a reference type
                  SolarParts[]& local;
                  // ISSUE: explicit reference operation
                  SolarParts[] solarPartsArray = (SolarParts[]) Utils.CopyArray((Array) ^(local = ref c6a._Box77), (Array) new SolarParts[checked (c6a._Box77.Length + 1)]);
                  local = solarPartsArray;
                  c6a._Box77[checked (c6a._Box77.Length - 1)] = new SolarParts();
                  c6a._Box77[checked (c6a._Box77.Length - 1)].Table6d = num1;
                  c6a._Box77[checked (c6a._Box77.Length - 1)].Area = (double) this._House.Windows[Opening].Area;
                  c6a._Box77[checked (c6a._Box77.Length - 1)].Flux = num4;
                  c6a._Box77[checked (c6a._Box77.Length - 1)].Table6b = (double) this._House.Windows[Opening].g;
                  c6a._Box77[checked (c6a._Box77.Length - 1)].Table6c = (double) this._House.Windows[Opening].FF;
                  c6a._Box77[checked (c6a._Box77.Length - 1)].Count = this._House.Windows[Opening].Count;
                  c6a._Box77[checked (c6a._Box77.Length - 1)].Name = this._House.Windows[Opening].Name;
                  this.Solar_Month(Month, this._Calc.Solar_gains.Box77_m, (float) (num1 * (double) this._House.Windows[Opening].Area * num4) * num3 * this._House.Windows[Opening].g * this._House.Windows[Opening].FF * (float) this._House.Windows[Opening].Count);
                  c6a._Box77[checked (c6a._Box77.Length - 1)].Value = num1 * (double) this._House.Windows[Opening].Area * num4 * (double) num3 * (double) this._House.Windows[Opening].g * (double) this._House.Windows[Opening].FF * (double) this._House.Windows[Opening].Count;
                  break;
                }
                break;
              case 3017973530:
                if (Operators.CompareString(orientation, "South", false) == 0)
                {
                  // ISSUE: variable of a reference type
                  SolarParts[]& local;
                  // ISSUE: explicit reference operation
                  SolarParts[] solarPartsArray = (SolarParts[]) Utils.CopyArray((Array) ^(local = ref c6a._Box78), (Array) new SolarParts[checked (c6a._Box78.Length + 1)]);
                  local = solarPartsArray;
                  c6a._Box78[checked (c6a._Box78.Length - 1)] = new SolarParts();
                  c6a._Box78[checked (c6a._Box78.Length - 1)].Table6d = num1;
                  c6a._Box78[checked (c6a._Box78.Length - 1)].Area = (double) this._House.Windows[Opening].Area;
                  c6a._Box78[checked (c6a._Box78.Length - 1)].Flux = num4;
                  c6a._Box78[checked (c6a._Box78.Length - 1)].Table6b = (double) this._House.Windows[Opening].g;
                  c6a._Box78[checked (c6a._Box78.Length - 1)].Table6c = (double) this._House.Windows[Opening].FF;
                  c6a._Box78[checked (c6a._Box78.Length - 1)].Count = this._House.Windows[Opening].Count;
                  c6a._Box78[checked (c6a._Box78.Length - 1)].Name = this._House.Windows[Opening].Name;
                  this.Solar_Month(Month, this._Calc.Solar_gains.Box78_m, (float) (num1 * (double) this._House.Windows[Opening].Area * num4) * num3 * this._House.Windows[Opening].g * this._House.Windows[Opening].FF * (float) this._House.Windows[Opening].Count);
                  c6a._Box78[checked (c6a._Box78.Length - 1)].Value = num1 * (double) this._House.Windows[Opening].Area * num4 * (double) num3 * (double) this._House.Windows[Opening].g * (double) this._House.Windows[Opening].FF * (double) this._House.Windows[Opening].Count;
                  break;
                }
                break;
            }
            checked { ++Opening; }
          }
        }
        num1 = 1.0;
        if (this._House.RoofLights != null)
        {
          int num5 = checked (this._House.RoofLights.Length - 1);
          int Opening = 0;
          while (Opening <= num5)
          {
            double num6 = this.SolarFlux(Month, Opening, false);
            _6a2012 c6a = this._Add_Variable.C6a;
            // ISSUE: variable of a reference type
            SolarParts[]& local;
            // ISSUE: explicit reference operation
            SolarParts[] solarPartsArray = (SolarParts[]) Utils.CopyArray((Array) ^(local = ref c6a._Box82), (Array) new SolarParts[checked (c6a._Box82.Length + 1)]);
            local = solarPartsArray;
            c6a._Box82[checked (c6a._Box82.Length - 1)] = new SolarParts();
            c6a._Box82[checked (c6a._Box82.Length - 1)].Table6d = num1;
            c6a._Box82[checked (c6a._Box82.Length - 1)].Area = (double) this._House.RoofLights[Opening].Area;
            c6a._Box82[checked (c6a._Box82.Length - 1)].Flux = num6;
            c6a._Box82[checked (c6a._Box82.Length - 1)].Table6b = (double) this._House.RoofLights[Opening].g;
            c6a._Box82[checked (c6a._Box82.Length - 1)].Table6c = (double) this._House.RoofLights[Opening].FF;
            c6a._Box82[checked (c6a._Box82.Length - 1)].Count = this._House.RoofLights[Opening].Count;
            c6a._Box82[checked (c6a._Box82.Length - 1)].Name = this._House.RoofLights[Opening].Name;
            if (Operators.CompareString(this._House.RoofLights[Opening].UValueSource, "BFRC", false) == 0)
              this._House.RoofLights[Opening].FF = 1.111111f;
            this.Solar_Month(Month, this._Calc.Solar_gains.Box82_m, (float) (num1 * (double) this._House.RoofLights[Opening].Area * num6 * 0.9) * this._House.RoofLights[Opening].g * this._House.RoofLights[Opening].FF * (float) this._House.RoofLights[Opening].Count);
            c6a._Box82[checked (c6a._Box82.Length - 1)].Value = num1 * (double) this._House.RoofLights[Opening].Area * num6 * 0.9 * (double) this._House.RoofLights[Opening].g * (double) this._House.RoofLights[Opening].FF * (double) this._House.RoofLights[Opening].Count;
            checked { ++Opening; }
          }
        }
        checked { ++Month; }
      }
      while (Month <= 12);
      Solar_gains2012 solarGains = this._Calc.Solar_gains;
      solarGains.Box83_m.M1 = solarGains.Box74_m.M1 + solarGains.Box75_m.M1 + solarGains.Box76_m.M1 + solarGains.Box77_m.M1 + solarGains.Box78_m.M1 + solarGains.Box79_m.M1 + solarGains.Box80_m.M1 + solarGains.Box81_m.M1 + solarGains.Box82_m.M1;
      solarGains.Box83_m.M2 = solarGains.Box74_m.M2 + solarGains.Box75_m.M2 + solarGains.Box76_m.M2 + solarGains.Box77_m.M2 + solarGains.Box78_m.M2 + solarGains.Box79_m.M2 + solarGains.Box80_m.M2 + solarGains.Box81_m.M2 + solarGains.Box82_m.M2;
      solarGains.Box83_m.M3 = solarGains.Box74_m.M3 + solarGains.Box75_m.M3 + solarGains.Box76_m.M3 + solarGains.Box77_m.M3 + solarGains.Box78_m.M3 + solarGains.Box79_m.M3 + solarGains.Box80_m.M3 + solarGains.Box81_m.M3 + solarGains.Box82_m.M3;
      solarGains.Box83_m.M4 = solarGains.Box74_m.M4 + solarGains.Box75_m.M4 + solarGains.Box76_m.M4 + solarGains.Box77_m.M4 + solarGains.Box78_m.M4 + solarGains.Box79_m.M4 + solarGains.Box80_m.M4 + solarGains.Box81_m.M4 + solarGains.Box82_m.M4;
      solarGains.Box83_m.M5 = solarGains.Box74_m.M5 + solarGains.Box75_m.M5 + solarGains.Box76_m.M5 + solarGains.Box77_m.M5 + solarGains.Box78_m.M5 + solarGains.Box79_m.M5 + solarGains.Box80_m.M5 + solarGains.Box81_m.M5 + solarGains.Box82_m.M5;
      solarGains.Box83_m.M6 = solarGains.Box74_m.M6 + solarGains.Box75_m.M6 + solarGains.Box76_m.M6 + solarGains.Box77_m.M6 + solarGains.Box78_m.M6 + solarGains.Box79_m.M6 + solarGains.Box80_m.M6 + solarGains.Box81_m.M6 + solarGains.Box82_m.M6;
      solarGains.Box83_m.M7 = solarGains.Box74_m.M7 + solarGains.Box75_m.M7 + solarGains.Box76_m.M7 + solarGains.Box77_m.M7 + solarGains.Box78_m.M7 + solarGains.Box79_m.M7 + solarGains.Box80_m.M7 + solarGains.Box81_m.M7 + solarGains.Box82_m.M7;
      solarGains.Box83_m.M8 = solarGains.Box74_m.M8 + solarGains.Box75_m.M8 + solarGains.Box76_m.M8 + solarGains.Box77_m.M8 + solarGains.Box78_m.M8 + solarGains.Box79_m.M8 + solarGains.Box80_m.M8 + solarGains.Box81_m.M8 + solarGains.Box82_m.M8;
      solarGains.Box83_m.M9 = solarGains.Box74_m.M9 + solarGains.Box75_m.M9 + solarGains.Box76_m.M9 + solarGains.Box77_m.M9 + solarGains.Box78_m.M9 + solarGains.Box79_m.M9 + solarGains.Box80_m.M9 + solarGains.Box81_m.M9 + solarGains.Box82_m.M9;
      solarGains.Box83_m.M10 = solarGains.Box74_m.M10 + solarGains.Box75_m.M10 + solarGains.Box76_m.M10 + solarGains.Box77_m.M10 + solarGains.Box78_m.M10 + solarGains.Box79_m.M10 + solarGains.Box80_m.M10 + solarGains.Box81_m.M10 + solarGains.Box82_m.M10;
      solarGains.Box83_m.M11 = solarGains.Box74_m.M11 + solarGains.Box75_m.M11 + solarGains.Box76_m.M11 + solarGains.Box77_m.M11 + solarGains.Box78_m.M11 + solarGains.Box79_m.M11 + solarGains.Box80_m.M11 + solarGains.Box81_m.M11 + solarGains.Box82_m.M11;
      solarGains.Box83_m.M12 = solarGains.Box74_m.M12 + solarGains.Box75_m.M12 + solarGains.Box76_m.M12 + solarGains.Box77_m.M12 + solarGains.Box78_m.M12 + solarGains.Box79_m.M12 + solarGains.Box80_m.M12 + solarGains.Box81_m.M12 + solarGains.Box82_m.M12;
      solarGains.Box84_m.M1 = solarGains.Box83_m.M1 + this._Calc.Internal_gains.Box73_m.M1;
      solarGains.Box84_m.M2 = solarGains.Box83_m.M2 + this._Calc.Internal_gains.Box73_m.M2;
      solarGains.Box84_m.M3 = solarGains.Box83_m.M3 + this._Calc.Internal_gains.Box73_m.M3;
      solarGains.Box84_m.M4 = solarGains.Box83_m.M4 + this._Calc.Internal_gains.Box73_m.M4;
      solarGains.Box84_m.M5 = solarGains.Box83_m.M5 + this._Calc.Internal_gains.Box73_m.M5;
      solarGains.Box84_m.M6 = solarGains.Box83_m.M6 + this._Calc.Internal_gains.Box73_m.M6;
      solarGains.Box84_m.M7 = solarGains.Box83_m.M7 + this._Calc.Internal_gains.Box73_m.M7;
      solarGains.Box84_m.M8 = solarGains.Box83_m.M8 + this._Calc.Internal_gains.Box73_m.M8;
      solarGains.Box84_m.M9 = solarGains.Box83_m.M9 + this._Calc.Internal_gains.Box73_m.M9;
      solarGains.Box84_m.M10 = solarGains.Box83_m.M10 + this._Calc.Internal_gains.Box73_m.M10;
      solarGains.Box84_m.M11 = solarGains.Box83_m.M11 + this._Calc.Internal_gains.Box73_m.M11;
      solarGains.Box84_m.M12 = solarGains.Box83_m.M12 + this._Calc.Internal_gains.Box73_m.M12;
    }

    private double SolarFlux(int Month, int Opening, bool Window)
    {
      int num1 = !Window ? checked ((int) Math.Round((double) this._House.RoofLights[Opening].Pitch)) : 90;
      if (this.IsHeatDemand)
      {
        // ISSUE: variable of a compiler-generated type
        Calc2012._Closure\u0024__72\u002D0 closure720_1;
        // ISSUE: object of a compiler-generated type is created
        // ISSUE: variable of a compiler-generated type
        Calc2012._Closure\u0024__72\u002D0 closure720_2 = new Calc2012._Closure\u0024__72\u002D0(closure720_1);
        // ISSUE: reference to a compiler-generated field
        closure720_2.\u0024VB\u0024Local_area = "";
        // ISSUE: reference to a compiler-generated field
        closure720_2.\u0024VB\u0024Local_district = "";
        if (this._House.Address.PostCost != null)
        {
          string postCost = this._House.Address.PostCost;
          int index = 0;
          while (index < postCost.Length)
          {
            char ch = postCost[index];
            bool flag;
            int result;
            if (!ch.Equals((object) " ") && !(flag & !int.TryParse(Conversions.ToString(ch), out result)))
            {
              if (int.TryParse(Conversions.ToString(ch), out result))
              {
                flag = true;
                // ISSUE: reference to a compiler-generated field
                closure720_2.\u0024VB\u0024Local_district += Conversions.ToString(ch);
              }
              else
              {
                // ISSUE: reference to a compiler-generated field
                closure720_2.\u0024VB\u0024Local_area += Conversions.ToString(ch);
              }
              checked { ++index; }
            }
            else
              break;
          }
          // ISSUE: reference to a compiler-generated method
          this.RegionalURow = SAP_Module.PCDFData.PostCodeTable.Where<PCDF.RegionalData>(new Func<PCDF.RegionalData, bool>(closure720_2._Lambda\u0024__0)).SingleOrDefault<PCDF.RegionalData>();
        }
        else
          this.RegionalURow = SAP_Module.PCDFData.AppendixU.Where<PCDF.RegionalData>((Func<PCDF.RegionalData, bool>) (bb => bb.Region.ToUpper().Equals(this._House.Location.ToUpper()))).SingleOrDefault<PCDF.RegionalData>();
      }
      else if (!this.IsRHICalc)
      {
        List<PCDF.RegionalData> appendixU = SAP_Module.PCDFData.AppendixU;
        Func<PCDF.RegionalData, bool> predicate;
        // ISSUE: reference to a compiler-generated field
        if (Calc2012._Closure\u0024__.\u0024I72\u002D2 != null)
        {
          // ISSUE: reference to a compiler-generated field
          predicate = Calc2012._Closure\u0024__.\u0024I72\u002D2;
        }
        else
        {
          // ISSUE: reference to a compiler-generated field
          Calc2012._Closure\u0024__.\u0024I72\u002D2 = predicate = (Func<PCDF.RegionalData, bool>) (bb => bb.ClimateRegion.Equals(0));
        }
        this.RegionalURow = appendixU.Where<PCDF.RegionalData>(predicate).SingleOrDefault<PCDF.RegionalData>();
      }
      else
        this.RegionalURow = SAP_Module.PCDFData.AppendixU.Where<PCDF.RegionalData>((Func<PCDF.RegionalData, bool>) (bb => bb.Region.ToUpper().Equals(this._House.Location.ToUpper()))).SingleOrDefault<PCDF.RegionalData>();
      if (this.RegionalURow == null)
      {
        List<PCDF.RegionalData> appendixU = SAP_Module.PCDFData.AppendixU;
        Func<PCDF.RegionalData, bool> predicate;
        // ISSUE: reference to a compiler-generated field
        if (Calc2012._Closure\u0024__.\u0024I72\u002D4 != null)
        {
          // ISSUE: reference to a compiler-generated field
          predicate = Calc2012._Closure\u0024__.\u0024I72\u002D4;
        }
        else
        {
          // ISSUE: reference to a compiler-generated field
          Calc2012._Closure\u0024__.\u0024I72\u002D4 = predicate = (Func<PCDF.RegionalData, bool>) (bb => bb.ClimateRegion.Equals(0));
        }
        this.RegionalURow = appendixU.Where<PCDF.RegionalData>(predicate).SingleOrDefault<PCDF.RegionalData>();
      }
      float latitude = (float) this.RegionalURow.Latitude;
      int num2;
      float num3;
      switch (Month)
      {
        case 1:
          num2 = checked ((int) Math.Round(this.RegionalURow.TableU3.M1));
          num3 = (float) this.RegionalURow.SolarDeclination.M1;
          break;
        case 2:
          num2 = checked ((int) Math.Round(this.RegionalURow.TableU3.M2));
          num3 = (float) this.RegionalURow.SolarDeclination.M2;
          break;
        case 3:
          num2 = checked ((int) Math.Round(this.RegionalURow.TableU3.M3));
          num3 = (float) this.RegionalURow.SolarDeclination.M3;
          break;
        case 4:
          num2 = checked ((int) Math.Round(this.RegionalURow.TableU3.M4));
          num3 = (float) this.RegionalURow.SolarDeclination.M4;
          break;
        case 5:
          num2 = checked ((int) Math.Round(this.RegionalURow.TableU3.M5));
          num3 = (float) this.RegionalURow.SolarDeclination.M5;
          break;
        case 6:
          num2 = checked ((int) Math.Round(this.RegionalURow.TableU3.M6));
          num3 = (float) this.RegionalURow.SolarDeclination.M6;
          break;
        case 7:
          num2 = checked ((int) Math.Round(this.RegionalURow.TableU3.M7));
          num3 = (float) this.RegionalURow.SolarDeclination.M7;
          break;
        case 8:
          num2 = checked ((int) Math.Round(this.RegionalURow.TableU3.M8));
          num3 = (float) this.RegionalURow.SolarDeclination.M8;
          break;
        case 9:
          num2 = checked ((int) Math.Round(this.RegionalURow.TableU3.M9));
          num3 = (float) this.RegionalURow.SolarDeclination.M9;
          break;
        case 10:
          num2 = checked ((int) Math.Round(this.RegionalURow.TableU3.M10));
          num3 = (float) this.RegionalURow.SolarDeclination.M10;
          break;
        case 11:
          num2 = checked ((int) Math.Round(this.RegionalURow.TableU3.M11));
          num3 = (float) this.RegionalURow.SolarDeclination.M11;
          break;
        case 12:
          num2 = checked ((int) Math.Round(this.RegionalURow.TableU3.M12));
          num3 = (float) this.RegionalURow.SolarDeclination.M12;
          break;
      }
      PCDF.TableU5Constants tableU5Constants = new PCDF.TableU5Constants();
      string str = Window ? this._House.Windows[Opening].Orientation : this._House.RoofLights[Opening].Orientation;
      if (Window)
      {
        string orientation = this._House.Windows[Opening].Orientation;
        // ISSUE: reference to a compiler-generated method
        switch (\u003CPrivateImplementationDetails\u003E.ComputeStringHash(orientation))
        {
          case 105265260:
            if (Operators.CompareString(orientation, "Unspecified", false) == 0)
              goto label_56;
            else
              goto label_100;
          case 1128440633:
            if (Operators.CompareString(orientation, "North East", false) == 0)
              goto label_52;
            else
              goto label_100;
          case 1409318971:
            if (Operators.CompareString(orientation, "North West", false) == 0)
              goto label_52;
            else
              goto label_100;
          case 1731397980:
            if (Operators.CompareString(orientation, "East", false) == 0)
              goto label_56;
            else
              goto label_100;
          case 1734234020:
            if (Operators.CompareString(orientation, "North", false) == 0)
              break;
            goto label_100;
          case 1796576718:
            if (Operators.CompareString(orientation, "West", false) == 0)
              goto label_56;
            else
              goto label_100;
          case 2390635792:
            if (Operators.CompareString(orientation, "Worst case", false) == 0)
              break;
            goto label_100;
          case 2417407149:
            if (Operators.CompareString(orientation, "South West", false) == 0)
              goto label_60;
            else
              goto label_100;
          case 2853841879:
            if (Operators.CompareString(orientation, "South East", false) == 0)
              goto label_60;
            else
              goto label_100;
          case 3017973530:
            if (Operators.CompareString(orientation, "South", false) == 0)
            {
              List<PCDF.TableU5Constants> tableU5 = SAP_Module.PCDFData.TableU5;
              Func<PCDF.TableU5Constants, bool> predicate;
              // ISSUE: reference to a compiler-generated field
              if (Calc2012._Closure\u0024__.\u0024I72\u002D9 != null)
              {
                // ISSUE: reference to a compiler-generated field
                predicate = Calc2012._Closure\u0024__.\u0024I72\u002D9;
              }
              else
              {
                // ISSUE: reference to a compiler-generated field
                Calc2012._Closure\u0024__.\u0024I72\u002D9 = predicate = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("South"));
              }
              tableU5Constants = tableU5.Where<PCDF.TableU5Constants>(predicate).SingleOrDefault<PCDF.TableU5Constants>();
              goto label_100;
            }
            else
              goto label_100;
          default:
            goto label_100;
        }
        List<PCDF.TableU5Constants> tableU5_1 = SAP_Module.PCDFData.TableU5;
        Func<PCDF.TableU5Constants, bool> predicate1;
        // ISSUE: reference to a compiler-generated field
        if (Calc2012._Closure\u0024__.\u0024I72\u002D5 != null)
        {
          // ISSUE: reference to a compiler-generated field
          predicate1 = Calc2012._Closure\u0024__.\u0024I72\u002D5;
        }
        else
        {
          // ISSUE: reference to a compiler-generated field
          Calc2012._Closure\u0024__.\u0024I72\u002D5 = predicate1 = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("North"));
        }
        tableU5Constants = tableU5_1.Where<PCDF.TableU5Constants>(predicate1).SingleOrDefault<PCDF.TableU5Constants>();
        goto label_100;
label_52:
        List<PCDF.TableU5Constants> tableU5_2 = SAP_Module.PCDFData.TableU5;
        Func<PCDF.TableU5Constants, bool> predicate2;
        // ISSUE: reference to a compiler-generated field
        if (Calc2012._Closure\u0024__.\u0024I72\u002D6 != null)
        {
          // ISSUE: reference to a compiler-generated field
          predicate2 = Calc2012._Closure\u0024__.\u0024I72\u002D6;
        }
        else
        {
          // ISSUE: reference to a compiler-generated field
          Calc2012._Closure\u0024__.\u0024I72\u002D6 = predicate2 = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("NE/NW"));
        }
        tableU5Constants = tableU5_2.Where<PCDF.TableU5Constants>(predicate2).SingleOrDefault<PCDF.TableU5Constants>();
        goto label_100;
label_56:
        List<PCDF.TableU5Constants> tableU5_3 = SAP_Module.PCDFData.TableU5;
        Func<PCDF.TableU5Constants, bool> predicate3;
        // ISSUE: reference to a compiler-generated field
        if (Calc2012._Closure\u0024__.\u0024I72\u002D7 != null)
        {
          // ISSUE: reference to a compiler-generated field
          predicate3 = Calc2012._Closure\u0024__.\u0024I72\u002D7;
        }
        else
        {
          // ISSUE: reference to a compiler-generated field
          Calc2012._Closure\u0024__.\u0024I72\u002D7 = predicate3 = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("East/West"));
        }
        tableU5Constants = tableU5_3.Where<PCDF.TableU5Constants>(predicate3).SingleOrDefault<PCDF.TableU5Constants>();
        goto label_100;
label_60:
        List<PCDF.TableU5Constants> tableU5_4 = SAP_Module.PCDFData.TableU5;
        Func<PCDF.TableU5Constants, bool> predicate4;
        // ISSUE: reference to a compiler-generated field
        if (Calc2012._Closure\u0024__.\u0024I72\u002D8 != null)
        {
          // ISSUE: reference to a compiler-generated field
          predicate4 = Calc2012._Closure\u0024__.\u0024I72\u002D8;
        }
        else
        {
          // ISSUE: reference to a compiler-generated field
          Calc2012._Closure\u0024__.\u0024I72\u002D8 = predicate4 = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("SE/SW"));
        }
        tableU5Constants = tableU5_4.Where<PCDF.TableU5Constants>(predicate4).SingleOrDefault<PCDF.TableU5Constants>();
      }
      else
      {
        string orientation = this._House.RoofLights[Opening].Orientation;
        // ISSUE: reference to a compiler-generated method
        switch (\u003CPrivateImplementationDetails\u003E.ComputeStringHash(orientation))
        {
          case 105265260:
            if (Operators.CompareString(orientation, "Unspecified", false) == 0)
              goto label_87;
            else
              goto default;
          case 1128440633:
            if (Operators.CompareString(orientation, "North East", false) == 0)
              goto label_83;
            else
              goto default;
          case 1409318971:
            if (Operators.CompareString(orientation, "North West", false) == 0)
              goto label_83;
            else
              goto default;
          case 1731397980:
            if (Operators.CompareString(orientation, "East", false) == 0)
              goto label_87;
            else
              goto default;
          case 1734234020:
            if (Operators.CompareString(orientation, "North", false) == 0)
              break;
            goto default;
          case 1796576718:
            if (Operators.CompareString(orientation, "West", false) == 0)
              goto label_87;
            else
              goto default;
          case 2390635792:
            if (Operators.CompareString(orientation, "Worst case", false) == 0)
              break;
            goto default;
          case 2417407149:
            if (Operators.CompareString(orientation, "South West", false) == 0)
              goto label_91;
            else
              goto default;
          case 2853841879:
            if (Operators.CompareString(orientation, "South East", false) == 0)
              goto label_91;
            else
              goto default;
          case 3017973530:
            if (Operators.CompareString(orientation, "South", false) == 0)
            {
              List<PCDF.TableU5Constants> tableU5 = SAP_Module.PCDFData.TableU5;
              Func<PCDF.TableU5Constants, bool> predicate;
              // ISSUE: reference to a compiler-generated field
              if (Calc2012._Closure\u0024__.\u0024I72\u002D14 != null)
              {
                // ISSUE: reference to a compiler-generated field
                predicate = Calc2012._Closure\u0024__.\u0024I72\u002D14;
              }
              else
              {
                // ISSUE: reference to a compiler-generated field
                Calc2012._Closure\u0024__.\u0024I72\u002D14 = predicate = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("South"));
              }
              tableU5Constants = tableU5.Where<PCDF.TableU5Constants>(predicate).SingleOrDefault<PCDF.TableU5Constants>();
              goto default;
            }
            else
              goto default;
          default:
label_99:
            goto label_100;
        }
        List<PCDF.TableU5Constants> tableU5_5 = SAP_Module.PCDFData.TableU5;
        Func<PCDF.TableU5Constants, bool> predicate5;
        // ISSUE: reference to a compiler-generated field
        if (Calc2012._Closure\u0024__.\u0024I72\u002D10 != null)
        {
          // ISSUE: reference to a compiler-generated field
          predicate5 = Calc2012._Closure\u0024__.\u0024I72\u002D10;
        }
        else
        {
          // ISSUE: reference to a compiler-generated field
          Calc2012._Closure\u0024__.\u0024I72\u002D10 = predicate5 = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("North"));
        }
        tableU5Constants = tableU5_5.Where<PCDF.TableU5Constants>(predicate5).SingleOrDefault<PCDF.TableU5Constants>();
        goto label_99;
label_83:
        List<PCDF.TableU5Constants> tableU5_6 = SAP_Module.PCDFData.TableU5;
        Func<PCDF.TableU5Constants, bool> predicate6;
        // ISSUE: reference to a compiler-generated field
        if (Calc2012._Closure\u0024__.\u0024I72\u002D11 != null)
        {
          // ISSUE: reference to a compiler-generated field
          predicate6 = Calc2012._Closure\u0024__.\u0024I72\u002D11;
        }
        else
        {
          // ISSUE: reference to a compiler-generated field
          Calc2012._Closure\u0024__.\u0024I72\u002D11 = predicate6 = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("NE/NW"));
        }
        tableU5Constants = tableU5_6.Where<PCDF.TableU5Constants>(predicate6).SingleOrDefault<PCDF.TableU5Constants>();
        goto label_99;
label_87:
        List<PCDF.TableU5Constants> tableU5_7 = SAP_Module.PCDFData.TableU5;
        Func<PCDF.TableU5Constants, bool> predicate7;
        // ISSUE: reference to a compiler-generated field
        if (Calc2012._Closure\u0024__.\u0024I72\u002D12 != null)
        {
          // ISSUE: reference to a compiler-generated field
          predicate7 = Calc2012._Closure\u0024__.\u0024I72\u002D12;
        }
        else
        {
          // ISSUE: reference to a compiler-generated field
          Calc2012._Closure\u0024__.\u0024I72\u002D12 = predicate7 = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("East/West"));
        }
        tableU5Constants = tableU5_7.Where<PCDF.TableU5Constants>(predicate7).SingleOrDefault<PCDF.TableU5Constants>();
        goto label_99;
label_91:
        List<PCDF.TableU5Constants> tableU5_8 = SAP_Module.PCDFData.TableU5;
        Func<PCDF.TableU5Constants, bool> predicate8;
        // ISSUE: reference to a compiler-generated field
        if (Calc2012._Closure\u0024__.\u0024I72\u002D13 != null)
        {
          // ISSUE: reference to a compiler-generated field
          predicate8 = Calc2012._Closure\u0024__.\u0024I72\u002D13;
        }
        else
        {
          // ISSUE: reference to a compiler-generated field
          Calc2012._Closure\u0024__.\u0024I72\u002D13 = predicate8 = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("SE/SW"));
        }
        tableU5Constants = tableU5_8.Where<PCDF.TableU5Constants>(predicate8).SingleOrDefault<PCDF.TableU5Constants>();
        goto label_99;
      }
label_100:
      float num4 = (float) ((double) tableU5Constants.k1 * Math.Pow(Math.Sin((double) num1 * Math.PI / 360.0), 3.0) + (double) tableU5Constants.k2 * Math.Pow(Math.Sin((double) num1 * Math.PI / 360.0), 2.0) + (double) tableU5Constants.k3 * Math.Sin((double) num1 * Math.PI / 360.0));
      float num5 = (float) ((double) tableU5Constants.k4 * Math.Pow(Math.Sin((double) num1 * Math.PI / 360.0), 3.0) + (double) tableU5Constants.k5 * Math.Pow(Math.Sin((double) num1 * Math.PI / 360.0), 2.0) + (double) tableU5Constants.k6 * Math.Sin((double) num1 * Math.PI / 360.0));
      float num6 = (float) ((double) tableU5Constants.k7 * Math.Pow(Math.Sin((double) num1 * Math.PI / 360.0), 3.0) + (double) tableU5Constants.k8 * Math.Pow(Math.Sin((double) num1 * Math.PI / 360.0), 2.0) + (double) tableU5Constants.k9 * Math.Sin((double) num1 * Math.PI / 360.0) + 1.0);
      float num7 = (float) ((double) num4 * Math.Pow(Math.Cos(((double) latitude - (double) num3) * Math.PI / 180.0), 2.0) + (double) num5 * Math.Cos(((double) latitude - (double) num3) * Math.PI / 180.0)) + num6;
      return (double) num2 * (double) num7;
    }

    private void Solar_Month(int Month, Months Months, float Value)
    {
      switch (Month)
      {
        case 1:
          Months months1;
          double num1 = (months1 = Months).M1 + (double) Value;
          months1.M1 = num1;
          break;
        case 2:
          Months months2;
          double num2 = (months2 = Months).M2 + (double) Value;
          months2.M2 = num2;
          break;
        case 3:
          Months months3;
          double num3 = (months3 = Months).M3 + (double) Value;
          months3.M3 = num3;
          break;
        case 4:
          Months months4;
          double num4 = (months4 = Months).M4 + (double) Value;
          months4.M4 = num4;
          break;
        case 5:
          Months months5;
          double num5 = (months5 = Months).M5 + (double) Value;
          months5.M5 = num5;
          break;
        case 6:
          Months months6;
          double num6 = (months6 = Months).M6 + (double) Value;
          months6.M6 = num6;
          break;
        case 7:
          Months months7;
          double num7 = (months7 = Months).M7 + (double) Value;
          months7.M7 = num7;
          break;
        case 8:
          Months months8;
          double num8 = (months8 = Months).M8 + (double) Value;
          months8.M8 = num8;
          break;
        case 9:
          Months months9;
          double num9 = (months9 = Months).M9 + (double) Value;
          months9.M9 = num9;
          break;
        case 10:
          Months months10;
          double num10 = (months10 = Months).M10 + (double) Value;
          months10.M10 = num10;
          break;
        case 11:
          Months months11;
          double num11 = (months11 = Months).M11 + (double) Value;
          months11.M11 = num11;
          break;
        case 12:
          Months months12;
          double num12 = (months12 = Months).M12 + (double) Value;
          months12.M12 = num12;
          break;
      }
    }

    private void Space_Cooling_Requirements()
    {
      if (this._House.Cooling.Include)
      {
        if (!this.IsRHICalc)
        {
          List<PCDF.RegionalData> appendixU = SAP_Module.PCDFData.AppendixU;
          Func<PCDF.RegionalData, bool> predicate;
          // ISSUE: reference to a compiler-generated field
          if (Calc2012._Closure\u0024__.\u0024I74\u002D0 != null)
          {
            // ISSUE: reference to a compiler-generated field
            predicate = Calc2012._Closure\u0024__.\u0024I74\u002D0;
          }
          else
          {
            // ISSUE: reference to a compiler-generated field
            Calc2012._Closure\u0024__.\u0024I74\u002D0 = predicate = (Func<PCDF.RegionalData, bool>) (b => b.ClimateRegion.Equals(0));
          }
          this.RegionalURowCooling = appendixU.Where<PCDF.RegionalData>(predicate).SingleOrDefault<PCDF.RegionalData>();
        }
        else
        {
          // ISSUE: variable of a compiler-generated type
          Calc2012._Closure\u0024__74\u002D0 closure740_1;
          // ISSUE: object of a compiler-generated type is created
          // ISSUE: variable of a compiler-generated type
          Calc2012._Closure\u0024__74\u002D0 closure740_2 = new Calc2012._Closure\u0024__74\u002D0(closure740_1);
          // ISSUE: reference to a compiler-generated field
          closure740_2.\u0024VB\u0024Local_area = "";
          // ISSUE: reference to a compiler-generated field
          closure740_2.\u0024VB\u0024Local_district = "";
          string postCost = this._House.Address.PostCost;
          int index = 0;
          while (index < postCost.Length)
          {
            char Expression = postCost[index];
            if (!Expression.Equals(' '))
            {
              bool flag;
              if (Versioned.IsNumeric((object) Expression) | flag)
              {
                flag = true;
                // ISSUE: reference to a compiler-generated field
                closure740_2.\u0024VB\u0024Local_district += Conversions.ToString(Expression);
              }
              else
              {
                // ISSUE: reference to a compiler-generated field
                closure740_2.\u0024VB\u0024Local_area += Conversions.ToString(Expression);
              }
              checked { ++index; }
            }
            else
              break;
          }
          // ISSUE: reference to a compiler-generated method
          this.RegionalURowCooling = SAP_Module.PCDFData.PostCodeTable.Where<PCDF.RegionalData>(new Func<PCDF.RegionalData, bool>(closure740_2._Lambda\u0024__1)).SingleOrDefault<PCDF.RegionalData>();
        }
        this._Calc.Space_cooling_requirement.Box100_m.M6 = this._Calc.HeatLoss.Box39_m.M6 * (24.0 - this.RegionalURowCooling.TableU1.M6);
        this._Calc.Space_cooling_requirement.Box100_m.M7 = this._Calc.HeatLoss.Box39_m.M7 * (24.0 - this.RegionalURowCooling.TableU1.M7);
        this._Calc.Space_cooling_requirement.Box100_m.M8 = this._Calc.HeatLoss.Box39_m.M8 * (24.0 - this.RegionalURowCooling.TableU1.M8);
        Internal_gains2012 TempIntGains = new Internal_gains2012();
        Solar_gains2012 TempSolarGains = new Solar_gains2012();
        Mean_Int_Temp2012 meanIntTemp2012 = new Mean_Int_Temp2012();
        Space_heating_requirement2012 heatingRequirement2012 = new Space_heating_requirement2012();
        TempIntGains.Box66_m.M6 = 60.0 * this._Calc.Water_heating.Box42;
        TempIntGains.Box66_m.M7 = 60.0 * this._Calc.Water_heating.Box42;
        TempIntGains.Box66_m.M8 = 60.0 * this._Calc.Water_heating.Box42;
        TempIntGains.Box67_m.M6 = this._Calc.Internal_gains.AppendixL.ELm.M6 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M6);
        TempIntGains.Box67_m.M7 = this._Calc.Internal_gains.AppendixL.ELm.M7 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M7);
        TempIntGains.Box67_m.M8 = this._Calc.Internal_gains.AppendixL.ELm.M8 * 0.85 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M8);
        TempIntGains.Box68_m.M6 = this._Calc.Internal_gains.AppendixLAppliaces.EAm.M6 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M6);
        TempIntGains.Box68_m.M7 = this._Calc.Internal_gains.AppendixLAppliaces.EAm.M7 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M7);
        TempIntGains.Box68_m.M8 = this._Calc.Internal_gains.AppendixLAppliaces.EAm.M8 * 1000.0 / (24.0 * this._Calc.HeatLoss.Box41_m.M8);
        TempIntGains.Box69_m.M6 = 35.0 + 7.0 * this._Calc.Water_heating.Box42;
        TempIntGains.Box69_m.M7 = 35.0 + 7.0 * this._Calc.Water_heating.Box42;
        TempIntGains.Box69_m.M8 = 35.0 + 7.0 * this._Calc.Water_heating.Box42;
        float num1;
        float num2;
        if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0)
        {
          if (Operators.CompareString(this._House.MainHeating.Boiler.PumpHP, "Yes", false) == 0)
            num2 = num1 + 10f;
        }
        else
        {
          int sapTableCode = this._House.MainHeating.SAPTableCode;
          if (sapTableCode < 300)
          {
            if (Operators.CompareString(this._House.MainHeating.Boiler.PumpHP, "Yes", false) == 0)
              num2 = num1 + 10f;
          }
          else if (sapTableCode >= 500 && sapTableCode <= 600 && !this._House.Ventilation.MechVent.ToString().Contains("Balanced"))
            num2 = num1 + (float) (0.06 * this._Calc.Dimensions.Box5);
        }
        string mechVent = this._House.Ventilation.MechVent;
        if (Operators.CompareString(mechVent, "Positive input from outside", false) != 0)
        {
          if (Operators.CompareString(mechVent, "Balanced without heat recovery", false) == 0)
          {
            string parameters = this._House.Ventilation.Parameters;
            if (Operators.CompareString(parameters, "User defined", false) != 0)
            {
              if (Operators.CompareString(parameters, "SAP 2009", false) == 0)
                num2 += (float) (0.06 * this._Calc.Dimensions.Box5 * 2.5 * 2.0);
            }
            else if (Operators.CompareString(this._House.Ventilation.MVDetails.DuctingType, "Rigid", false) == 0)
              num2 += (float) (0.06 * this._Calc.Dimensions.Box5 * (double) this._House.Ventilation.MVDetails.SFP * 1.4);
            else
              num2 += (float) (0.06 * this._Calc.Dimensions.Box5 * (double) this._House.Ventilation.MVDetails.SFP * 1.7);
          }
        }
        else if (Operators.CompareString(this._House.Ventilation.Parameters, "SAP 2009", false) == 0)
          num2 += (float) (0.096 * this._Calc.Dimensions.Box5 * 2.5);
        if (Operators.CompareString(this._House.MainHeating.Fuel, "heating oil", false) == 0 & this._House.MainHeating.OilPump)
          num1 = num2 + 10f;
        TempIntGains.Box70_m.M6 = 0.0;
        TempIntGains.Box70_m.M7 = 0.0;
        TempIntGains.Box70_m.M8 = 0.0;
        TempIntGains.Box71_m.M6 = -40.0 * this._Calc.Water_heating.Box42;
        TempIntGains.Box71_m.M7 = -40.0 * this._Calc.Water_heating.Box42;
        TempIntGains.Box71_m.M8 = -40.0 * this._Calc.Water_heating.Box42;
        TempIntGains.Box72_m.M6 = 1000.0 * this._Calc.Water_heating.Box65_m.M6 / (this._Calc.HeatLoss.Box41_m.M6 * 24.0);
        TempIntGains.Box72_m.M7 = 1000.0 * this._Calc.Water_heating.Box65_m.M7 / (this._Calc.HeatLoss.Box41_m.M7 * 24.0);
        TempIntGains.Box72_m.M8 = 1000.0 * this._Calc.Water_heating.Box65_m.M8 / (this._Calc.HeatLoss.Box41_m.M8 * 24.0);
        TempIntGains.Box73_m.M6 = TempIntGains.Box66_m.M6 + TempIntGains.Box67_m.M6 + TempIntGains.Box68_m.M6 + TempIntGains.Box69_m.M6 + TempIntGains.Box70_m.M6 + TempIntGains.Box71_m.M6 + TempIntGains.Box72_m.M6;
        TempIntGains.Box73_m.M7 = TempIntGains.Box66_m.M7 + TempIntGains.Box67_m.M7 + TempIntGains.Box68_m.M7 + TempIntGains.Box69_m.M7 + TempIntGains.Box70_m.M7 + TempIntGains.Box71_m.M7 + TempIntGains.Box72_m.M7;
        TempIntGains.Box73_m.M8 = TempIntGains.Box66_m.M8 + TempIntGains.Box67_m.M8 + TempIntGains.Box68_m.M8 + TempIntGains.Box69_m.M8 + TempIntGains.Box70_m.M8 + TempIntGains.Box71_m.M8 + TempIntGains.Box72_m.M8;
        this.Solar_Gains_Cooling(TempSolarGains, TempIntGains);
        this._Calc.Space_cooling_requirement.Box103_m.M6 = TempSolarGains.Box84_m.M6;
        this._Calc.Space_cooling_requirement.Box103_m.M7 = TempSolarGains.Box84_m.M7;
        this._Calc.Space_cooling_requirement.Box103_m.M8 = TempSolarGains.Box84_m.M8;
        this._Calc.Space_cooling_requirement.Box101_m.M6 = this.Utilisation_Factor_Cooling(this._Calc.HeatLoss.Box39_m.M6, this._Calc.Space_cooling_requirement.Box103_m.M6, 24.0, this.RegionalURowCooling.TableU1.M6, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M6);
        this._Calc.Space_cooling_requirement.Box101_m.M7 = this.Utilisation_Factor_Cooling(this._Calc.HeatLoss.Box39_m.M7, this._Calc.Space_cooling_requirement.Box103_m.M7, 24.0, this.RegionalURowCooling.TableU1.M7, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M7);
        this._Calc.Space_cooling_requirement.Box101_m.M8 = this.Utilisation_Factor_Cooling(this._Calc.HeatLoss.Box39_m.M8, this._Calc.Space_cooling_requirement.Box103_m.M8, 24.0, this.RegionalURowCooling.TableU1.M8, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M8);
        this._Calc.Space_cooling_requirement.Box102_m.M6 = this._Calc.Space_cooling_requirement.Box100_m.M6 * this._Calc.Space_cooling_requirement.Box101_m.M6;
        this._Calc.Space_cooling_requirement.Box102_m.M7 = this._Calc.Space_cooling_requirement.Box100_m.M7 * this._Calc.Space_cooling_requirement.Box101_m.M7;
        this._Calc.Space_cooling_requirement.Box102_m.M8 = this._Calc.Space_cooling_requirement.Box100_m.M8 * this._Calc.Space_cooling_requirement.Box101_m.M8;
        this._Calc.Space_cooling_requirement.Box104_m.M6 = 0.024 * (this._Calc.Space_cooling_requirement.Box103_m.M6 - this._Calc.Space_cooling_requirement.Box102_m.M6) * this._Calc.HeatLoss.Box41_m.M6;
        this._Calc.Space_cooling_requirement.Box104_m.M7 = 0.024 * (this._Calc.Space_cooling_requirement.Box103_m.M7 - this._Calc.Space_cooling_requirement.Box102_m.M7) * this._Calc.HeatLoss.Box41_m.M7;
        this._Calc.Space_cooling_requirement.Box104_m.M8 = 0.024 * (this._Calc.Space_cooling_requirement.Box103_m.M8 - this._Calc.Space_cooling_requirement.Box102_m.M8) * this._Calc.HeatLoss.Box41_m.M8;
        meanIntTemp2012.Box85 = 21.0;
        if (this.OccupancyCalc && this.OccupancyData.LivingTempKnown)
          meanIntTemp2012.Box85 = (double) this.OccupancyData.LivingTemp;
        heatingRequirement2012.Box96_m.M6 = this.RegionalURowCooling.TableU1.M6;
        heatingRequirement2012.Box96_m.M7 = this.RegionalURowCooling.TableU1.M7;
        heatingRequirement2012.Box96_m.M8 = this.RegionalURowCooling.TableU1.M8;
        meanIntTemp2012.Box86_m.M6 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M6, TempSolarGains.Box84_m.M6, meanIntTemp2012.Box85, heatingRequirement2012.Box96_m.M6, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M6);
        meanIntTemp2012.Box86_m.M7 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M7, TempSolarGains.Box84_m.M7, meanIntTemp2012.Box85, heatingRequirement2012.Box96_m.M7, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M7);
        meanIntTemp2012.Box86_m.M8 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M8, TempSolarGains.Box84_m.M8, meanIntTemp2012.Box85, heatingRequirement2012.Box96_m.M8, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M8);
        bool flag1;
        if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 && Operators.CompareString(this._House.MainHeating.SGroup, "Micro-cogeneration (micro-CHP)", false) == 0)
          flag1 = true;
        if (this._House.MainHeating.SGroup.Contains("heat pumps"))
          flag1 = true;
        if (!flag1)
        {
          meanIntTemp2012.Box87_m.M6 = this.Mean_Temperature(this._Calc.HeatLoss.Box39_m.M6, TempSolarGains.Box84_m.M6, meanIntTemp2012.Box85, heatingRequirement2012.Box96_m.M6, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M6, meanIntTemp2012.Box86_m.M6, 1);
          meanIntTemp2012.Box87_m.M7 = this.Mean_Temperature(this._Calc.HeatLoss.Box39_m.M7, TempSolarGains.Box84_m.M7, meanIntTemp2012.Box85, heatingRequirement2012.Box96_m.M7, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M7, meanIntTemp2012.Box86_m.M7, 1);
          meanIntTemp2012.Box87_m.M8 = this.Mean_Temperature(this._Calc.HeatLoss.Box39_m.M8, TempSolarGains.Box84_m.M8, meanIntTemp2012.Box85, heatingRequirement2012.Box96_m.M8, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M8, meanIntTemp2012.Box86_m.M8, 1);
        }
        else if (this._House.MainHeating.SGroup.Contains("heat pumps"))
        {
          meanIntTemp2012.Box87_m.M6 = this.Mean_Temperature3(this._Calc.HeatLoss.Box39_m.M6, TempSolarGains.Box84_m.M6, meanIntTemp2012.Box85, heatingRequirement2012.Box96_m.M6, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M6, meanIntTemp2012.Box86_m.M6, 1, 6);
          meanIntTemp2012.Box87_m.M7 = this.Mean_Temperature3(this._Calc.HeatLoss.Box39_m.M7, TempSolarGains.Box84_m.M7, meanIntTemp2012.Box85, heatingRequirement2012.Box96_m.M7, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M7, meanIntTemp2012.Box86_m.M7, 1, 7);
          meanIntTemp2012.Box87_m.M8 = this.Mean_Temperature3(this._Calc.HeatLoss.Box39_m.M8, TempSolarGains.Box84_m.M8, meanIntTemp2012.Box85, heatingRequirement2012.Box96_m.M8, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M8, meanIntTemp2012.Box86_m.M8, 1, 8);
        }
        else
        {
          meanIntTemp2012.Box87_m.M6 = this.Mean_Temperature2(this._Calc.HeatLoss.Box39_m.M6, TempSolarGains.Box84_m.M6, meanIntTemp2012.Box85, heatingRequirement2012.Box96_m.M6, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M6, meanIntTemp2012.Box86_m.M6, 1, 6);
          meanIntTemp2012.Box87_m.M7 = this.Mean_Temperature2(this._Calc.HeatLoss.Box39_m.M7, TempSolarGains.Box84_m.M7, meanIntTemp2012.Box85, heatingRequirement2012.Box96_m.M7, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M7, meanIntTemp2012.Box86_m.M7, 1, 7);
          meanIntTemp2012.Box87_m.M8 = this.Mean_Temperature2(this._Calc.HeatLoss.Box39_m.M8, TempSolarGains.Box84_m.M8, meanIntTemp2012.Box85, heatingRequirement2012.Box96_m.M8, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M8, meanIntTemp2012.Box86_m.M8, 1, 8);
        }
        PCDF.Table4e table4e1 = Calc2012.Table4e(Conversions.ToString(this._House.MainHeating.ControlCode));
        if (table4e1 == null)
          return;
        int Control1 = checked ((int) Math.Round(Conversion.Val(table4e1.Control)));
        if (this.IsFabricEfficiency)
          Control1 = 2;
        switch (Control1)
        {
          case 1:
            meanIntTemp2012.Box88_m.M6 = 21.0 - 0.5 * this._Calc.HeatLoss.Box40_m.M6;
            meanIntTemp2012.Box88_m.M7 = 21.0 - 0.5 * this._Calc.HeatLoss.Box40_m.M7;
            meanIntTemp2012.Box88_m.M8 = 21.0 - 0.5 * this._Calc.HeatLoss.Box40_m.M8;
            break;
          case 2:
          case 3:
            meanIntTemp2012.Box88_m.M6 = 21.0 - this._Calc.HeatLoss.Box40_m.M6 + 0.085 * Math.Pow(this._Calc.HeatLoss.Box40_m.M6, 2.0);
            meanIntTemp2012.Box88_m.M7 = 21.0 - this._Calc.HeatLoss.Box40_m.M7 + 0.085 * Math.Pow(this._Calc.HeatLoss.Box40_m.M7, 2.0);
            meanIntTemp2012.Box88_m.M8 = 21.0 - this._Calc.HeatLoss.Box40_m.M8 + 0.085 * Math.Pow(this._Calc.HeatLoss.Box40_m.M8, 2.0);
            break;
        }
        meanIntTemp2012.Box89_m.M6 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M6, TempSolarGains.Box84_m.M6, meanIntTemp2012.Box88_m.M6, heatingRequirement2012.Box96_m.M6, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M6);
        meanIntTemp2012.Box89_m.M7 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M7, TempSolarGains.Box84_m.M7, meanIntTemp2012.Box88_m.M7, heatingRequirement2012.Box96_m.M7, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M7);
        meanIntTemp2012.Box89_m.M8 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M8, TempSolarGains.Box84_m.M8, meanIntTemp2012.Box88_m.M8, heatingRequirement2012.Box96_m.M8, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M8);
        if (!flag1)
        {
          meanIntTemp2012.Box90_m.M6 = this.Mean_Temperature(this._Calc.HeatLoss.Box39_m.M6, TempSolarGains.Box84_m.M6, meanIntTemp2012.Box88_m.M6, heatingRequirement2012.Box96_m.M6, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M6, meanIntTemp2012.Box89_m.M6, Control1);
          meanIntTemp2012.Box90_m.M7 = this.Mean_Temperature(this._Calc.HeatLoss.Box39_m.M7, TempSolarGains.Box84_m.M7, meanIntTemp2012.Box88_m.M7, heatingRequirement2012.Box96_m.M7, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M7, meanIntTemp2012.Box89_m.M7, Control1);
          meanIntTemp2012.Box90_m.M8 = this.Mean_Temperature(this._Calc.HeatLoss.Box39_m.M8, TempSolarGains.Box84_m.M8, meanIntTemp2012.Box88_m.M8, heatingRequirement2012.Box96_m.M8, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M8, meanIntTemp2012.Box89_m.M8, Control1);
        }
        else if (this._House.MainHeating.SGroup.Contains("heat pumps"))
        {
          meanIntTemp2012.Box90_m.M6 = this.Mean_Temperature3(this._Calc.HeatLoss.Box39_m.M6, TempSolarGains.Box84_m.M6, meanIntTemp2012.Box88_m.M5, heatingRequirement2012.Box96_m.M6, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M6, meanIntTemp2012.Box89_m.M6, Control1, 6);
          meanIntTemp2012.Box90_m.M7 = this.Mean_Temperature3(this._Calc.HeatLoss.Box39_m.M7, TempSolarGains.Box84_m.M7, meanIntTemp2012.Box88_m.M7, heatingRequirement2012.Box96_m.M7, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M7, meanIntTemp2012.Box89_m.M7, Control1, 7);
          meanIntTemp2012.Box90_m.M8 = this.Mean_Temperature3(this._Calc.HeatLoss.Box39_m.M8, TempSolarGains.Box84_m.M8, meanIntTemp2012.Box88_m.M8, heatingRequirement2012.Box96_m.M8, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M8, meanIntTemp2012.Box89_m.M8, Control1, 8);
        }
        else
        {
          meanIntTemp2012.Box90_m.M6 = this.Mean_Temperature2(this._Calc.HeatLoss.Box39_m.M6, TempSolarGains.Box84_m.M6, meanIntTemp2012.Box88_m.M5, heatingRequirement2012.Box96_m.M6, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M6, meanIntTemp2012.Box89_m.M6, Control1, 6);
          meanIntTemp2012.Box90_m.M7 = this.Mean_Temperature2(this._Calc.HeatLoss.Box39_m.M7, TempSolarGains.Box84_m.M7, meanIntTemp2012.Box88_m.M7, heatingRequirement2012.Box96_m.M7, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M7, meanIntTemp2012.Box89_m.M7, Control1, 7);
          meanIntTemp2012.Box90_m.M8 = this.Mean_Temperature2(this._Calc.HeatLoss.Box39_m.M8, TempSolarGains.Box84_m.M8, meanIntTemp2012.Box88_m.M8, heatingRequirement2012.Box96_m.M8, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M8, meanIntTemp2012.Box89_m.M8, Control1, 8);
        }
        meanIntTemp2012.Box91 = (double) this._House.LivingArea / this._Calc.Dimensions.Box4;
        if (this._House.IncludeMainHeating2)
        {
          Months months1 = new Months();
          Months months2 = new Months();
          Months months3 = new Months();
          PCDF.Table4e table4e2 = Calc2012.Table4e(Conversions.ToString(this._House.MainHeating2.ControlCode));
          if (table4e2 == null)
            return;
          int Control2 = checked ((int) Math.Round(Conversion.Val(table4e2.Control)));
          switch (Control2)
          {
            case 1:
              months1.M6 = 21.0 - 0.5 * this._Calc.HeatLoss.Box40_m.M6;
              months1.M7 = 21.0 - 0.5 * this._Calc.HeatLoss.Box40_m.M7;
              months1.M8 = 21.0 - 0.5 * this._Calc.HeatLoss.Box40_m.M8;
              break;
            case 2:
            case 3:
              months1.M6 = 21.0 - this._Calc.HeatLoss.Box40_m.M6 + 0.085 * Math.Pow(this._Calc.HeatLoss.Box40_m.M6, 2.0);
              months1.M7 = 21.0 - this._Calc.HeatLoss.Box40_m.M7 + 0.085 * Math.Pow(this._Calc.HeatLoss.Box40_m.M7, 2.0);
              months1.M8 = 21.0 - this._Calc.HeatLoss.Box40_m.M8 + 0.085 * Math.Pow(this._Calc.HeatLoss.Box40_m.M8, 2.0);
              break;
          }
          months2.M6 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M6, TempSolarGains.Box84_m.M6, months1.M6, heatingRequirement2012.Box96_m.M6, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M6);
          months2.M7 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M7, TempSolarGains.Box84_m.M7, months1.M7, heatingRequirement2012.Box96_m.M7, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M7);
          months2.M8 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M8, TempSolarGains.Box84_m.M8, months1.M8, heatingRequirement2012.Box96_m.M8, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M8);
          meanIntTemp2012.Box88_m.M6 = months1.M6;
          meanIntTemp2012.Box88_m.M7 = months1.M7;
          meanIntTemp2012.Box88_m.M8 = months1.M8;
          meanIntTemp2012.Box89_m.M6 = months2.M6;
          meanIntTemp2012.Box89_m.M7 = months2.M7;
          meanIntTemp2012.Box89_m.M8 = months2.M8;
          if (!flag1)
          {
            months3.M6 = this.Mean_Temperature(this._Calc.HeatLoss.Box39_m.M6, TempSolarGains.Box84_m.M6, months1.M6, heatingRequirement2012.Box96_m.M6, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M6, months2.M6, Control2);
            months3.M7 = this.Mean_Temperature(this._Calc.HeatLoss.Box39_m.M7, TempSolarGains.Box84_m.M7, months1.M7, heatingRequirement2012.Box96_m.M7, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M7, months2.M7, Control2);
            months3.M8 = this.Mean_Temperature(this._Calc.HeatLoss.Box39_m.M8, TempSolarGains.Box84_m.M8, months1.M8, heatingRequirement2012.Box96_m.M8, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M8, months2.M8, Control2);
          }
          else if (this._House.MainHeating.SGroup.Contains("heat pumps"))
          {
            months3.M6 = this.Mean_Temperature3(this._Calc.HeatLoss.Box39_m.M6, TempSolarGains.Box84_m.M6, months1.M5, heatingRequirement2012.Box96_m.M6, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M6, months2.M6, Control1, 6);
            months3.M7 = this.Mean_Temperature3(this._Calc.HeatLoss.Box39_m.M7, TempSolarGains.Box84_m.M7, months1.M7, heatingRequirement2012.Box96_m.M7, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M7, months2.M7, Control1, 7);
            months3.M8 = this.Mean_Temperature3(this._Calc.HeatLoss.Box39_m.M8, TempSolarGains.Box84_m.M8, months1.M8, heatingRequirement2012.Box96_m.M8, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M8, months2.M8, Control1, 8);
          }
          else
          {
            months3.M6 = this.Mean_Temperature2(this._Calc.HeatLoss.Box39_m.M6, TempSolarGains.Box84_m.M6, months1.M5, heatingRequirement2012.Box96_m.M6, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M6, months2.M6, Control1, 6);
            months3.M7 = this.Mean_Temperature2(this._Calc.HeatLoss.Box39_m.M7, TempSolarGains.Box84_m.M7, months1.M7, heatingRequirement2012.Box96_m.M7, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M7, months2.M7, Control1, 7);
            months3.M8 = this.Mean_Temperature2(this._Calc.HeatLoss.Box39_m.M8, TempSolarGains.Box84_m.M8, months1.M8, heatingRequirement2012.Box96_m.M8, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M8, months2.M8, Control1, 8);
          }
          meanIntTemp2012.Box90_m.M6 = (double) this._House.HeatFractionSec / (1.0 - meanIntTemp2012.Box91) * months3.M6 + meanIntTemp2012.Box90_m.M6 * (1.0 - (double) this._House.HeatFractionSec - meanIntTemp2012.Box91) / (1.0 - meanIntTemp2012.Box91);
          meanIntTemp2012.Box90_m.M7 = (double) this._House.HeatFractionSec / (1.0 - meanIntTemp2012.Box91) * months3.M7 + meanIntTemp2012.Box90_m.M7 * (1.0 - (double) this._House.HeatFractionSec - meanIntTemp2012.Box91) / (1.0 - meanIntTemp2012.Box91);
          meanIntTemp2012.Box90_m.M8 = (double) this._House.HeatFractionSec / (1.0 - meanIntTemp2012.Box91) * months3.M8 + meanIntTemp2012.Box90_m.M8 * (1.0 - (double) this._House.HeatFractionSec - meanIntTemp2012.Box91) / (1.0 - meanIntTemp2012.Box91);
        }
        meanIntTemp2012.Box92_m.M6 = meanIntTemp2012.Box91 * meanIntTemp2012.Box87_m.M6 + (1.0 - meanIntTemp2012.Box91) * meanIntTemp2012.Box90_m.M6;
        meanIntTemp2012.Box92_m.M7 = meanIntTemp2012.Box91 * meanIntTemp2012.Box87_m.M7 + (1.0 - meanIntTemp2012.Box91) * meanIntTemp2012.Box90_m.M7;
        meanIntTemp2012.Box92_m.M8 = meanIntTemp2012.Box91 * meanIntTemp2012.Box87_m.M8 + (1.0 - meanIntTemp2012.Box91) * meanIntTemp2012.Box90_m.M8;
        float num3 = (float) Conversion.Val(table4e1.TempAdd);
        int sapTableCode1 = this._House.MainHeating.SAPTableCode;
        if (sapTableCode1 >= 120 && sapTableCode1 <= 123 || sapTableCode1 == 192)
          num3 -= 0.1f;
        if (this._House.MainHeating.DelayedStart)
          num3 -= 0.15f;
        meanIntTemp2012.Box93_m.M6 = meanIntTemp2012.Box92_m.M6 + (double) num3;
        meanIntTemp2012.Box93_m.M7 = meanIntTemp2012.Box92_m.M7 + (double) num3;
        meanIntTemp2012.Box93_m.M8 = meanIntTemp2012.Box92_m.M8 + (double) num3;
        heatingRequirement2012.Box94_m.M6 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M6, TempSolarGains.Box84_m.M6, meanIntTemp2012.Box93_m.M6, heatingRequirement2012.Box96_m.M6, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M6);
        heatingRequirement2012.Box94_m.M7 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M7, TempSolarGains.Box84_m.M7, meanIntTemp2012.Box93_m.M7, heatingRequirement2012.Box96_m.M7, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M7);
        heatingRequirement2012.Box94_m.M8 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M8, TempSolarGains.Box84_m.M8, meanIntTemp2012.Box93_m.M8, heatingRequirement2012.Box96_m.M8, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M8);
        heatingRequirement2012.Box95_m.M6 = heatingRequirement2012.Box94_m.M6 * TempSolarGains.Box84_m.M6;
        heatingRequirement2012.Box95_m.M7 = heatingRequirement2012.Box94_m.M7 * TempSolarGains.Box84_m.M7;
        heatingRequirement2012.Box95_m.M8 = heatingRequirement2012.Box94_m.M8 * TempSolarGains.Box84_m.M8;
        heatingRequirement2012.Box97_m.M6 = this._Calc.HeatLoss.Box39_m.M6 * (meanIntTemp2012.Box93_m.M6 - heatingRequirement2012.Box96_m.M6);
        heatingRequirement2012.Box97_m.M7 = this._Calc.HeatLoss.Box39_m.M7 * (meanIntTemp2012.Box93_m.M7 - heatingRequirement2012.Box96_m.M7);
        heatingRequirement2012.Box97_m.M8 = this._Calc.HeatLoss.Box39_m.M8 * (meanIntTemp2012.Box93_m.M8 - heatingRequirement2012.Box96_m.M8);
        heatingRequirement2012.Box98_m.M6 = 0.024 * (heatingRequirement2012.Box97_m.M6 - heatingRequirement2012.Box95_m.M6) * this._Calc.HeatLoss.Box41_m.M6;
        heatingRequirement2012.Box98_m.M7 = 0.024 * (heatingRequirement2012.Box97_m.M7 - heatingRequirement2012.Box95_m.M7) * this._Calc.HeatLoss.Box41_m.M7;
        heatingRequirement2012.Box98_m.M8 = 0.024 * (heatingRequirement2012.Box97_m.M8 - heatingRequirement2012.Box95_m.M8) * this._Calc.HeatLoss.Box41_m.M8;
        if (!this.IsFabricEfficiency)
        {
          if (this._Calc.Space_cooling_requirement.Box104_m.M6 < 3.0 * heatingRequirement2012.Box98_m.M6)
            this._Calc.Space_cooling_requirement.Box104_m.M6 = 0.0;
          if (this._Calc.Space_cooling_requirement.Box104_m.M7 < 3.0 * heatingRequirement2012.Box98_m.M7)
            this._Calc.Space_cooling_requirement.Box104_m.M7 = 0.0;
          if (this._Calc.Space_cooling_requirement.Box104_m.M8 < 3.0 * heatingRequirement2012.Box98_m.M8)
            this._Calc.Space_cooling_requirement.Box104_m.M8 = 0.0;
        }
        this._Calc.Space_cooling_requirement.Box104 = this._Calc.Space_cooling_requirement.Box104_m.M6 + this._Calc.Space_cooling_requirement.Box104_m.M7 + this._Calc.Space_cooling_requirement.Box104_m.M8;
        if (this.IsFabricEfficiency)
          this._House.Cooling.Cooled_Area = Conversions.ToString(this._Calc.Dimensions.Box4);
        this._Calc.Space_cooling_requirement.Box105 = Conversions.ToDouble(this._House.Cooling.Cooled_Area) / this._Calc.Dimensions.Box4;
        this._Calc.Space_cooling_requirement.Box106_m.M6 = 0.25;
        this._Calc.Space_cooling_requirement.Box106_m.M7 = 0.25;
        this._Calc.Space_cooling_requirement.Box106_m.M8 = 0.25;
        this._Calc.Space_cooling_requirement.Box107_m.M6 = this._Calc.Space_cooling_requirement.Box104_m.M6 * this._Calc.Space_cooling_requirement.Box105 * this._Calc.Space_cooling_requirement.Box106_m.M6;
        this._Calc.Space_cooling_requirement.Box107_m.M7 = this._Calc.Space_cooling_requirement.Box104_m.M7 * this._Calc.Space_cooling_requirement.Box105 * this._Calc.Space_cooling_requirement.Box106_m.M7;
        this._Calc.Space_cooling_requirement.Box107_m.M8 = this._Calc.Space_cooling_requirement.Box104_m.M8 * this._Calc.Space_cooling_requirement.Box105 * this._Calc.Space_cooling_requirement.Box106_m.M8;
        this._Calc.Space_cooling_requirement.Box107 = this._Calc.Space_cooling_requirement.Box107_m.M6 + this._Calc.Space_cooling_requirement.Box107_m.M7 + this._Calc.Space_cooling_requirement.Box107_m.M8;
        this._Calc.Space_cooling_requirement.Box108 = this._Calc.Space_cooling_requirement.Box107 / this._Calc.Dimensions.Box4;
        if (this.IsFabricEfficiency)
          this._Calc.Fabric_Energy_Efficiency.Box109 = this._Calc.Space_heating_requirement.Box99 + this._Calc.Space_cooling_requirement.Box108;
      }
    }

    private void Solar_Gains_Cooling(
      Solar_gains2012 TempSolarGains,
      Internal_gains2012 TempIntGains)
    {
      int Month = 6;
      do
      {
        double num1;
        double num2;
        if (this._House.Windows != null)
        {
          int num3 = checked (this._House.Windows.Length - 1);
          int Opening = 0;
          while (Opening <= num3)
          {
            string overshading = this._House.Windows[Opening].Overshading;
            if (Operators.CompareString(overshading, "Heavy", false) != 0)
            {
              if (Operators.CompareString(overshading, "More than average", false) != 0)
              {
                if (Operators.CompareString(overshading, "Average or unknown", false) != 0)
                {
                  if (Operators.CompareString(overshading, "Very Little", false) == 0)
                    num1 = 1.0;
                }
                else
                  num1 = 0.9;
              }
              else
                num1 = 0.7;
            }
            else
              num1 = 0.5;
            switch (Month)
            {
              case 6:
                num2 = this.SolarFlux_Cooling(Month, Opening, true, checked ((int) Math.Round(this.RegionalURowCooling.TableU3.M6)), (float) this.RegionalURowCooling.Latitude);
                break;
              case 7:
                num2 = this.SolarFlux_Cooling(Month, Opening, true, checked ((int) Math.Round(this.RegionalURowCooling.TableU3.M7)), (float) this.RegionalURowCooling.Latitude);
                break;
              case 8:
                num2 = this.SolarFlux_Cooling(Month, Opening, true, checked ((int) Math.Round(this.RegionalURowCooling.TableU3.M8)), (float) this.RegionalURowCooling.Latitude);
                break;
            }
            if (Operators.CompareString(this._House.Windows[Opening].UValueSource, "BFRC", false) == 0)
              this._House.Windows[Opening].FF = 1.111111f;
            string orientation = this._House.Windows[Opening].Orientation;
            // ISSUE: reference to a compiler-generated method
            switch (\u003CPrivateImplementationDetails\u003E.ComputeStringHash(orientation))
            {
              case 105265260:
                if (Operators.CompareString(orientation, "Unspecified", false) == 0)
                {
                  this.Solar_Month(Month, TempSolarGains.Box76_m, (float) (num1 * (double) this._House.Windows[Opening].Area * num2 * 0.9) * this._House.Windows[Opening].g * this._House.Windows[Opening].FF * (float) this._House.Windows[Opening].Count);
                  break;
                }
                break;
              case 1128440633:
                if (Operators.CompareString(orientation, "North East", false) == 0)
                {
                  this.Solar_Month(Month, TempSolarGains.Box75_m, (float) (num1 * (double) this._House.Windows[Opening].Area * num2 * 0.9) * this._House.Windows[Opening].g * this._House.Windows[Opening].FF * (float) this._House.Windows[Opening].Count);
                  break;
                }
                break;
              case 1409318971:
                if (Operators.CompareString(orientation, "North West", false) == 0)
                {
                  this.Solar_Month(Month, TempSolarGains.Box81_m, (float) (num1 * (double) this._House.Windows[Opening].Area * num2 * 0.9) * this._House.Windows[Opening].g * this._House.Windows[Opening].FF * (float) this._House.Windows[Opening].Count);
                  break;
                }
                break;
              case 1731397980:
                if (Operators.CompareString(orientation, "East", false) == 0)
                {
                  this.Solar_Month(Month, TempSolarGains.Box76_m, (float) (num1 * (double) this._House.Windows[Opening].Area * num2 * 0.9) * this._House.Windows[Opening].g * this._House.Windows[Opening].FF * (float) this._House.Windows[Opening].Count);
                  break;
                }
                break;
              case 1734234020:
                if (Operators.CompareString(orientation, "North", false) == 0)
                {
                  this.Solar_Month(Month, TempSolarGains.Box74_m, (float) (num1 * (double) this._House.Windows[Opening].Area * num2 * 0.9) * this._House.Windows[Opening].g * this._House.Windows[Opening].FF * (float) this._House.Windows[Opening].Count);
                  break;
                }
                break;
              case 1796576718:
                if (Operators.CompareString(orientation, "West", false) == 0)
                {
                  this.Solar_Month(Month, TempSolarGains.Box80_m, (float) (num1 * (double) this._House.Windows[Opening].Area * num2 * 0.9) * this._House.Windows[Opening].g * this._House.Windows[Opening].FF * (float) this._House.Windows[Opening].Count);
                  break;
                }
                break;
              case 2417407149:
                if (Operators.CompareString(orientation, "South West", false) == 0)
                {
                  this.Solar_Month(Month, TempSolarGains.Box79_m, (float) (num1 * (double) this._House.Windows[Opening].Area * num2 * 0.9) * this._House.Windows[Opening].g * this._House.Windows[Opening].FF * (float) this._House.Windows[Opening].Count);
                  break;
                }
                break;
              case 2853841879:
                if (Operators.CompareString(orientation, "South East", false) == 0)
                {
                  this.Solar_Month(Month, TempSolarGains.Box77_m, (float) (num1 * (double) this._House.Windows[Opening].Area * num2 * 0.9) * this._House.Windows[Opening].g * this._House.Windows[Opening].FF * (float) this._House.Windows[Opening].Count);
                  break;
                }
                break;
              case 3017973530:
                if (Operators.CompareString(orientation, "South", false) == 0)
                {
                  this.Solar_Month(Month, TempSolarGains.Box78_m, (float) (num1 * (double) this._House.Windows[Opening].Area * num2 * 0.9) * this._House.Windows[Opening].g * this._House.Windows[Opening].FF * (float) this._House.Windows[Opening].Count);
                  break;
                }
                break;
            }
            checked { ++Opening; }
          }
        }
        num1 = 1.0;
        if (this._House.RoofLights != null)
        {
          int num4 = checked (this._House.RoofLights.Length - 1);
          int Opening = 0;
          while (Opening <= num4)
          {
            switch (Month)
            {
              case 6:
                num2 = this.SolarFlux_Cooling(Month, Opening, false, checked ((int) Math.Round(this.RegionalURowCooling.TableU3.M6)), (float) this.RegionalURowCooling.Latitude);
                break;
              case 7:
                num2 = this.SolarFlux_Cooling(Month, Opening, false, checked ((int) Math.Round(this.RegionalURowCooling.TableU3.M7)), (float) this.RegionalURowCooling.Latitude);
                break;
              case 8:
                num2 = this.SolarFlux_Cooling(Month, Opening, false, checked ((int) Math.Round(this.RegionalURowCooling.TableU3.M8)), (float) this.RegionalURowCooling.Latitude);
                break;
            }
            _6a2012 obj = this._Add_Variable.C6a;
            this.Solar_Month(Month, TempSolarGains.Box82_m, (float) (num1 * (double) this._House.RoofLights[Opening].Area * num2 * 0.9) * this._House.RoofLights[Opening].g * this._House.RoofLights[Opening].FF * (float) this._House.RoofLights[Opening].Count);
            obj = (_6a2012) null;
            checked { ++Opening; }
          }
        }
        checked { ++Month; }
      }
      while (Month <= 8);
      Solar_gains2012 solarGains2012 = TempSolarGains;
      solarGains2012.Box83_m.M6 = solarGains2012.Box74_m.M6 + solarGains2012.Box75_m.M6 + solarGains2012.Box76_m.M6 + solarGains2012.Box77_m.M6 + solarGains2012.Box78_m.M6 + solarGains2012.Box79_m.M6 + solarGains2012.Box80_m.M6 + solarGains2012.Box81_m.M6 + solarGains2012.Box82_m.M6;
      solarGains2012.Box83_m.M7 = solarGains2012.Box74_m.M7 + solarGains2012.Box75_m.M7 + solarGains2012.Box76_m.M7 + solarGains2012.Box77_m.M7 + solarGains2012.Box78_m.M7 + solarGains2012.Box79_m.M7 + solarGains2012.Box80_m.M7 + solarGains2012.Box81_m.M7 + solarGains2012.Box82_m.M7;
      solarGains2012.Box83_m.M8 = solarGains2012.Box74_m.M8 + solarGains2012.Box75_m.M8 + solarGains2012.Box76_m.M8 + solarGains2012.Box77_m.M8 + solarGains2012.Box78_m.M8 + solarGains2012.Box79_m.M8 + solarGains2012.Box80_m.M8 + solarGains2012.Box81_m.M8 + solarGains2012.Box82_m.M8;
      solarGains2012.Box84_m.M6 = solarGains2012.Box83_m.M6 + TempIntGains.Box73_m.M6;
      solarGains2012.Box84_m.M7 = solarGains2012.Box83_m.M7 + TempIntGains.Box73_m.M7;
      solarGains2012.Box84_m.M8 = solarGains2012.Box83_m.M8 + TempIntGains.Box73_m.M8;
    }

    private double Utilisation_Factor_Cooling(
      double H,
      double G,
      double Ti,
      double Te,
      double TMP,
      double HLP)
    {
      float num1 = (float) (1.0 + TMP / (3.6 * HLP) / 15.0);
      float num2 = (float) (H * (Ti - Te));
      float x = (float) G / num2;
      return (double) x <= 0.0 ? 1.0 : ((double) x != 1.0 ? (1.0 - Math.Pow((double) x, -(double) num1)) / (1.0 - Math.Pow((double) x, -((double) num1 + 1.0))) : (double) num1 / ((double) num1 + 1.0));
    }

    private double SolarFlux_Cooling(int Month, int Opening, bool Window, int Sh, float Phi)
    {
      int num1 = !Window ? checked ((int) Math.Round((double) this._House.RoofLights[Opening].Pitch)) : 90;
      float num2;
      switch (Month)
      {
        case 1:
          num2 = (float) this.RegionalURowCooling.SolarDeclination.M1;
          break;
        case 2:
          num2 = (float) this.RegionalURowCooling.SolarDeclination.M2;
          break;
        case 3:
          num2 = (float) this.RegionalURowCooling.SolarDeclination.M3;
          break;
        case 4:
          num2 = (float) this.RegionalURowCooling.SolarDeclination.M4;
          break;
        case 5:
          num2 = (float) this.RegionalURowCooling.SolarDeclination.M5;
          break;
        case 6:
          num2 = (float) this.RegionalURowCooling.SolarDeclination.M6;
          break;
        case 7:
          num2 = (float) this.RegionalURowCooling.SolarDeclination.M7;
          break;
        case 8:
          num2 = (float) this.RegionalURowCooling.SolarDeclination.M8;
          break;
        case 9:
          num2 = (float) this.RegionalURowCooling.SolarDeclination.M9;
          break;
        case 10:
          num2 = (float) this.RegionalURowCooling.SolarDeclination.M10;
          break;
        case 11:
          num2 = (float) this.RegionalURowCooling.SolarDeclination.M11;
          break;
        case 12:
          num2 = (float) this.RegionalURowCooling.SolarDeclination.M12;
          break;
      }
      PCDF.TableU5Constants tableU5Constants = new PCDF.TableU5Constants();
      string str = Window ? this._House.Windows[Opening].Orientation : this._House.RoofLights[Opening].Orientation;
      if (Window)
      {
        string orientation = this._House.Windows[Opening].Orientation;
        // ISSUE: reference to a compiler-generated method
        switch (\u003CPrivateImplementationDetails\u003E.ComputeStringHash(orientation))
        {
          case 105265260:
            if (Operators.CompareString(orientation, "Unspecified", false) == 0)
              goto label_32;
            else
              goto label_75;
          case 1128440633:
            if (Operators.CompareString(orientation, "North East", false) == 0)
              break;
            goto label_75;
          case 1409318971:
            if (Operators.CompareString(orientation, "North West", false) == 0)
              break;
            goto label_75;
          case 1731397980:
            if (Operators.CompareString(orientation, "East", false) == 0)
              goto label_32;
            else
              goto label_75;
          case 1734234020:
            if (Operators.CompareString(orientation, "North", false) == 0)
            {
              List<PCDF.TableU5Constants> tableU5 = SAP_Module.PCDFData.TableU5;
              Func<PCDF.TableU5Constants, bool> predicate;
              // ISSUE: reference to a compiler-generated field
              if (Calc2012._Closure\u0024__.\u0024I77\u002D0 != null)
              {
                // ISSUE: reference to a compiler-generated field
                predicate = Calc2012._Closure\u0024__.\u0024I77\u002D0;
              }
              else
              {
                // ISSUE: reference to a compiler-generated field
                Calc2012._Closure\u0024__.\u0024I77\u002D0 = predicate = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("North"));
              }
              tableU5Constants = tableU5.Where<PCDF.TableU5Constants>(predicate).SingleOrDefault<PCDF.TableU5Constants>();
              goto label_75;
            }
            else
              goto label_75;
          case 1796576718:
            if (Operators.CompareString(orientation, "West", false) == 0)
              goto label_32;
            else
              goto label_75;
          case 2417407149:
            if (Operators.CompareString(orientation, "South West", false) == 0)
              goto label_36;
            else
              goto label_75;
          case 2853841879:
            if (Operators.CompareString(orientation, "South East", false) == 0)
              goto label_36;
            else
              goto label_75;
          case 3017973530:
            if (Operators.CompareString(orientation, "South", false) == 0)
            {
              List<PCDF.TableU5Constants> tableU5 = SAP_Module.PCDFData.TableU5;
              Func<PCDF.TableU5Constants, bool> predicate;
              // ISSUE: reference to a compiler-generated field
              if (Calc2012._Closure\u0024__.\u0024I77\u002D4 != null)
              {
                // ISSUE: reference to a compiler-generated field
                predicate = Calc2012._Closure\u0024__.\u0024I77\u002D4;
              }
              else
              {
                // ISSUE: reference to a compiler-generated field
                Calc2012._Closure\u0024__.\u0024I77\u002D4 = predicate = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("South"));
              }
              tableU5Constants = tableU5.Where<PCDF.TableU5Constants>(predicate).SingleOrDefault<PCDF.TableU5Constants>();
              goto label_75;
            }
            else
              goto label_75;
          default:
            goto label_75;
        }
        List<PCDF.TableU5Constants> tableU5_1 = SAP_Module.PCDFData.TableU5;
        Func<PCDF.TableU5Constants, bool> predicate1;
        // ISSUE: reference to a compiler-generated field
        if (Calc2012._Closure\u0024__.\u0024I77\u002D1 != null)
        {
          // ISSUE: reference to a compiler-generated field
          predicate1 = Calc2012._Closure\u0024__.\u0024I77\u002D1;
        }
        else
        {
          // ISSUE: reference to a compiler-generated field
          Calc2012._Closure\u0024__.\u0024I77\u002D1 = predicate1 = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("NE/NW"));
        }
        tableU5Constants = tableU5_1.Where<PCDF.TableU5Constants>(predicate1).SingleOrDefault<PCDF.TableU5Constants>();
        goto label_75;
label_32:
        List<PCDF.TableU5Constants> tableU5_2 = SAP_Module.PCDFData.TableU5;
        Func<PCDF.TableU5Constants, bool> predicate2;
        // ISSUE: reference to a compiler-generated field
        if (Calc2012._Closure\u0024__.\u0024I77\u002D2 != null)
        {
          // ISSUE: reference to a compiler-generated field
          predicate2 = Calc2012._Closure\u0024__.\u0024I77\u002D2;
        }
        else
        {
          // ISSUE: reference to a compiler-generated field
          Calc2012._Closure\u0024__.\u0024I77\u002D2 = predicate2 = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("East/West"));
        }
        tableU5Constants = tableU5_2.Where<PCDF.TableU5Constants>(predicate2).SingleOrDefault<PCDF.TableU5Constants>();
        goto label_75;
label_36:
        List<PCDF.TableU5Constants> tableU5_3 = SAP_Module.PCDFData.TableU5;
        Func<PCDF.TableU5Constants, bool> predicate3;
        // ISSUE: reference to a compiler-generated field
        if (Calc2012._Closure\u0024__.\u0024I77\u002D3 != null)
        {
          // ISSUE: reference to a compiler-generated field
          predicate3 = Calc2012._Closure\u0024__.\u0024I77\u002D3;
        }
        else
        {
          // ISSUE: reference to a compiler-generated field
          Calc2012._Closure\u0024__.\u0024I77\u002D3 = predicate3 = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("SE/SW"));
        }
        tableU5Constants = tableU5_3.Where<PCDF.TableU5Constants>(predicate3).SingleOrDefault<PCDF.TableU5Constants>();
      }
      else
      {
        string orientation = this._House.RoofLights[Opening].Orientation;
        // ISSUE: reference to a compiler-generated method
        switch (\u003CPrivateImplementationDetails\u003E.ComputeStringHash(orientation))
        {
          case 105265260:
            if (Operators.CompareString(orientation, "Unspecified", false) == 0)
              goto label_62;
            else
              goto default;
          case 1128440633:
            if (Operators.CompareString(orientation, "North East", false) == 0)
              break;
            goto default;
          case 1409318971:
            if (Operators.CompareString(orientation, "North West", false) == 0)
              break;
            goto default;
          case 1731397980:
            if (Operators.CompareString(orientation, "East", false) == 0)
              goto label_62;
            else
              goto default;
          case 1734234020:
            if (Operators.CompareString(orientation, "North", false) == 0)
            {
              List<PCDF.TableU5Constants> tableU5 = SAP_Module.PCDFData.TableU5;
              Func<PCDF.TableU5Constants, bool> predicate;
              // ISSUE: reference to a compiler-generated field
              if (Calc2012._Closure\u0024__.\u0024I77\u002D5 != null)
              {
                // ISSUE: reference to a compiler-generated field
                predicate = Calc2012._Closure\u0024__.\u0024I77\u002D5;
              }
              else
              {
                // ISSUE: reference to a compiler-generated field
                Calc2012._Closure\u0024__.\u0024I77\u002D5 = predicate = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("North"));
              }
              tableU5Constants = tableU5.Where<PCDF.TableU5Constants>(predicate).SingleOrDefault<PCDF.TableU5Constants>();
              goto default;
            }
            else
              goto default;
          case 1796576718:
            if (Operators.CompareString(orientation, "West", false) == 0)
              goto label_62;
            else
              goto default;
          case 2417407149:
            if (Operators.CompareString(orientation, "South West", false) == 0)
              goto label_66;
            else
              goto default;
          case 2853841879:
            if (Operators.CompareString(orientation, "South East", false) == 0)
              goto label_66;
            else
              goto default;
          case 3017973530:
            if (Operators.CompareString(orientation, "South", false) == 0)
            {
              List<PCDF.TableU5Constants> tableU5 = SAP_Module.PCDFData.TableU5;
              Func<PCDF.TableU5Constants, bool> predicate;
              // ISSUE: reference to a compiler-generated field
              if (Calc2012._Closure\u0024__.\u0024I77\u002D9 != null)
              {
                // ISSUE: reference to a compiler-generated field
                predicate = Calc2012._Closure\u0024__.\u0024I77\u002D9;
              }
              else
              {
                // ISSUE: reference to a compiler-generated field
                Calc2012._Closure\u0024__.\u0024I77\u002D9 = predicate = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("South"));
              }
              tableU5Constants = tableU5.Where<PCDF.TableU5Constants>(predicate).SingleOrDefault<PCDF.TableU5Constants>();
              goto default;
            }
            else
              goto default;
          default:
label_74:
            goto label_75;
        }
        List<PCDF.TableU5Constants> tableU5_4 = SAP_Module.PCDFData.TableU5;
        Func<PCDF.TableU5Constants, bool> predicate4;
        // ISSUE: reference to a compiler-generated field
        if (Calc2012._Closure\u0024__.\u0024I77\u002D6 != null)
        {
          // ISSUE: reference to a compiler-generated field
          predicate4 = Calc2012._Closure\u0024__.\u0024I77\u002D6;
        }
        else
        {
          // ISSUE: reference to a compiler-generated field
          Calc2012._Closure\u0024__.\u0024I77\u002D6 = predicate4 = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("NE/NW"));
        }
        tableU5Constants = tableU5_4.Where<PCDF.TableU5Constants>(predicate4).SingleOrDefault<PCDF.TableU5Constants>();
        goto label_74;
label_62:
        List<PCDF.TableU5Constants> tableU5_5 = SAP_Module.PCDFData.TableU5;
        Func<PCDF.TableU5Constants, bool> predicate5;
        // ISSUE: reference to a compiler-generated field
        if (Calc2012._Closure\u0024__.\u0024I77\u002D7 != null)
        {
          // ISSUE: reference to a compiler-generated field
          predicate5 = Calc2012._Closure\u0024__.\u0024I77\u002D7;
        }
        else
        {
          // ISSUE: reference to a compiler-generated field
          Calc2012._Closure\u0024__.\u0024I77\u002D7 = predicate5 = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("East/West"));
        }
        tableU5Constants = tableU5_5.Where<PCDF.TableU5Constants>(predicate5).SingleOrDefault<PCDF.TableU5Constants>();
        goto label_74;
label_66:
        List<PCDF.TableU5Constants> tableU5_6 = SAP_Module.PCDFData.TableU5;
        Func<PCDF.TableU5Constants, bool> predicate6;
        // ISSUE: reference to a compiler-generated field
        if (Calc2012._Closure\u0024__.\u0024I77\u002D8 != null)
        {
          // ISSUE: reference to a compiler-generated field
          predicate6 = Calc2012._Closure\u0024__.\u0024I77\u002D8;
        }
        else
        {
          // ISSUE: reference to a compiler-generated field
          Calc2012._Closure\u0024__.\u0024I77\u002D8 = predicate6 = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("SE/SW"));
        }
        tableU5Constants = tableU5_6.Where<PCDF.TableU5Constants>(predicate6).SingleOrDefault<PCDF.TableU5Constants>();
        goto label_74;
      }
label_75:
      float num3 = (float) ((double) tableU5Constants.k1 * Math.Pow(Math.Sin((double) num1 * Math.PI / 360.0), 3.0) + (double) tableU5Constants.k2 * Math.Pow(Math.Sin((double) num1 * Math.PI / 360.0), 2.0) + (double) tableU5Constants.k3 * Math.Sin((double) num1 * Math.PI / 360.0));
      float num4 = (float) ((double) tableU5Constants.k4 * Math.Pow(Math.Sin((double) num1 * Math.PI / 360.0), 3.0) + (double) tableU5Constants.k5 * Math.Pow(Math.Sin((double) num1 * Math.PI / 360.0), 2.0) + (double) tableU5Constants.k6 * Math.Sin((double) num1 * Math.PI / 360.0));
      float num5 = (float) ((double) tableU5Constants.k7 * Math.Pow(Math.Sin((double) num1 * Math.PI / 360.0), 3.0) + (double) tableU5Constants.k8 * Math.Pow(Math.Sin((double) num1 * Math.PI / 360.0), 2.0) + (double) tableU5Constants.k9 * Math.Sin((double) num1 * Math.PI / 360.0) + 1.0);
      float num6 = (float) ((double) num3 * Math.Pow(Math.Cos(((double) Phi - (double) num2) * Math.PI / 180.0), 2.0) + (double) num4 * Math.Cos(((double) Phi - (double) num2) * Math.PI / 180.0)) + num5;
      return (double) Sh * (double) num6;
    }

    private void Solar_Month_Cooling(int Month, Months Months, float Value)
    {
      switch (Month)
      {
        case 1:
          Months months1;
          double num1 = (months1 = Months).M1 + (double) Value;
          months1.M1 = num1;
          break;
        case 2:
          Months months2;
          double num2 = (months2 = Months).M2 + (double) Value;
          months2.M2 = num2;
          break;
        case 3:
          Months months3;
          double num3 = (months3 = Months).M3 + (double) Value;
          months3.M3 = num3;
          break;
        case 4:
          Months months4;
          double num4 = (months4 = Months).M4 + (double) Value;
          months4.M4 = num4;
          break;
        case 5:
          Months months5;
          double num5 = (months5 = Months).M5 + (double) Value;
          months5.M5 = num5;
          break;
        case 6:
          Months months6;
          double num6 = (months6 = Months).M6 + (double) Value;
          months6.M6 = num6;
          break;
        case 7:
          Months months7;
          double num7 = (months7 = Months).M7 + (double) Value;
          months7.M7 = num7;
          break;
        case 8:
          Months months8;
          double num8 = (months8 = Months).M8 + (double) Value;
          months8.M8 = num8;
          break;
        case 9:
          Months months9;
          double num9 = (months9 = Months).M9 + (double) Value;
          months9.M9 = num9;
          break;
        case 10:
          Months months10;
          double num10 = (months10 = Months).M10 + (double) Value;
          months10.M10 = num10;
          break;
        case 11:
          Months months11;
          double num11 = (months11 = Months).M11 + (double) Value;
          months11.M11 = num11;
          break;
        case 12:
          Months months12;
          double num12 = (months12 = Months).M12 + (double) Value;
          months12.M12 = num12;
          break;
      }
    }

    private void Space_Heating()
    {
      this._Calc.Space_heating_requirement.Box94_m.M1 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M1, this._Calc.Solar_gains.Box84_m.M1, this._Calc.Mean_Int_Temp.Box93_m.M1, this._Calc.Space_heating_requirement.Box96_m.M1, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M1);
      this._Calc.Space_heating_requirement.Box94_m.M2 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M2, this._Calc.Solar_gains.Box84_m.M2, this._Calc.Mean_Int_Temp.Box93_m.M2, this._Calc.Space_heating_requirement.Box96_m.M2, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M2);
      this._Calc.Space_heating_requirement.Box94_m.M3 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M3, this._Calc.Solar_gains.Box84_m.M3, this._Calc.Mean_Int_Temp.Box93_m.M3, this._Calc.Space_heating_requirement.Box96_m.M3, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M3);
      this._Calc.Space_heating_requirement.Box94_m.M4 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M4, this._Calc.Solar_gains.Box84_m.M4, this._Calc.Mean_Int_Temp.Box93_m.M4, this._Calc.Space_heating_requirement.Box96_m.M4, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M4);
      this._Calc.Space_heating_requirement.Box94_m.M5 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M5, this._Calc.Solar_gains.Box84_m.M5, this._Calc.Mean_Int_Temp.Box93_m.M5, this._Calc.Space_heating_requirement.Box96_m.M5, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M5);
      this._Calc.Space_heating_requirement.Box94_m.M6 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M6, this._Calc.Solar_gains.Box84_m.M6, this._Calc.Mean_Int_Temp.Box93_m.M6, this._Calc.Space_heating_requirement.Box96_m.M6, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M6);
      this._Calc.Space_heating_requirement.Box94_m.M7 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M7, this._Calc.Solar_gains.Box84_m.M7, this._Calc.Mean_Int_Temp.Box93_m.M7, this._Calc.Space_heating_requirement.Box96_m.M7, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M7);
      this._Calc.Space_heating_requirement.Box94_m.M8 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M8, this._Calc.Solar_gains.Box84_m.M8, this._Calc.Mean_Int_Temp.Box93_m.M8, this._Calc.Space_heating_requirement.Box96_m.M8, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M8);
      this._Calc.Space_heating_requirement.Box94_m.M9 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M9, this._Calc.Solar_gains.Box84_m.M9, this._Calc.Mean_Int_Temp.Box93_m.M9, this._Calc.Space_heating_requirement.Box96_m.M9, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M9);
      this._Calc.Space_heating_requirement.Box94_m.M10 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M10, this._Calc.Solar_gains.Box84_m.M10, this._Calc.Mean_Int_Temp.Box93_m.M10, this._Calc.Space_heating_requirement.Box96_m.M10, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M10);
      this._Calc.Space_heating_requirement.Box94_m.M11 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M11, this._Calc.Solar_gains.Box84_m.M11, this._Calc.Mean_Int_Temp.Box93_m.M11, this._Calc.Space_heating_requirement.Box96_m.M11, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M11);
      this._Calc.Space_heating_requirement.Box94_m.M12 = this.Utilisation_Factor(this._Calc.HeatLoss.Box39_m.M12, this._Calc.Solar_gains.Box84_m.M12, this._Calc.Mean_Int_Temp.Box93_m.M12, this._Calc.Space_heating_requirement.Box96_m.M12, this._Calc.HeatLoss.Box35, this._Calc.HeatLoss.Box40_m.M12);
      this._Calc.Space_heating_requirement.Box95_m.M1 = this._Calc.Space_heating_requirement.Box94_m.M1 * this._Calc.Solar_gains.Box84_m.M1;
      this._Calc.Space_heating_requirement.Box95_m.M2 = this._Calc.Space_heating_requirement.Box94_m.M2 * this._Calc.Solar_gains.Box84_m.M2;
      this._Calc.Space_heating_requirement.Box95_m.M3 = this._Calc.Space_heating_requirement.Box94_m.M3 * this._Calc.Solar_gains.Box84_m.M3;
      this._Calc.Space_heating_requirement.Box95_m.M4 = this._Calc.Space_heating_requirement.Box94_m.M4 * this._Calc.Solar_gains.Box84_m.M4;
      this._Calc.Space_heating_requirement.Box95_m.M5 = this._Calc.Space_heating_requirement.Box94_m.M5 * this._Calc.Solar_gains.Box84_m.M5;
      this._Calc.Space_heating_requirement.Box95_m.M6 = this._Calc.Space_heating_requirement.Box94_m.M6 * this._Calc.Solar_gains.Box84_m.M6;
      this._Calc.Space_heating_requirement.Box95_m.M7 = this._Calc.Space_heating_requirement.Box94_m.M7 * this._Calc.Solar_gains.Box84_m.M7;
      this._Calc.Space_heating_requirement.Box95_m.M8 = this._Calc.Space_heating_requirement.Box94_m.M8 * this._Calc.Solar_gains.Box84_m.M8;
      this._Calc.Space_heating_requirement.Box95_m.M9 = this._Calc.Space_heating_requirement.Box94_m.M9 * this._Calc.Solar_gains.Box84_m.M9;
      this._Calc.Space_heating_requirement.Box95_m.M10 = this._Calc.Space_heating_requirement.Box94_m.M10 * this._Calc.Solar_gains.Box84_m.M10;
      this._Calc.Space_heating_requirement.Box95_m.M11 = this._Calc.Space_heating_requirement.Box94_m.M11 * this._Calc.Solar_gains.Box84_m.M11;
      this._Calc.Space_heating_requirement.Box95_m.M12 = this._Calc.Space_heating_requirement.Box94_m.M12 * this._Calc.Solar_gains.Box84_m.M12;
      this._Calc.Space_heating_requirement.Box97_m.M1 = this._Calc.HeatLoss.Box39_m.M1 * (this._Calc.Mean_Int_Temp.Box93_m.M1 - this._Calc.Space_heating_requirement.Box96_m.M1);
      this._Calc.Space_heating_requirement.Box97_m.M2 = this._Calc.HeatLoss.Box39_m.M2 * (this._Calc.Mean_Int_Temp.Box93_m.M2 - this._Calc.Space_heating_requirement.Box96_m.M2);
      this._Calc.Space_heating_requirement.Box97_m.M3 = this._Calc.HeatLoss.Box39_m.M3 * (this._Calc.Mean_Int_Temp.Box93_m.M3 - this._Calc.Space_heating_requirement.Box96_m.M3);
      this._Calc.Space_heating_requirement.Box97_m.M4 = this._Calc.HeatLoss.Box39_m.M4 * (this._Calc.Mean_Int_Temp.Box93_m.M4 - this._Calc.Space_heating_requirement.Box96_m.M4);
      this._Calc.Space_heating_requirement.Box97_m.M5 = this._Calc.HeatLoss.Box39_m.M5 * (this._Calc.Mean_Int_Temp.Box93_m.M5 - this._Calc.Space_heating_requirement.Box96_m.M5);
      this._Calc.Space_heating_requirement.Box97_m.M6 = this._Calc.HeatLoss.Box39_m.M6 * (this._Calc.Mean_Int_Temp.Box93_m.M6 - this._Calc.Space_heating_requirement.Box96_m.M6);
      this._Calc.Space_heating_requirement.Box97_m.M7 = this._Calc.HeatLoss.Box39_m.M7 * (this._Calc.Mean_Int_Temp.Box93_m.M7 - this._Calc.Space_heating_requirement.Box96_m.M7);
      this._Calc.Space_heating_requirement.Box97_m.M8 = this._Calc.HeatLoss.Box39_m.M8 * (this._Calc.Mean_Int_Temp.Box93_m.M8 - this._Calc.Space_heating_requirement.Box96_m.M8);
      this._Calc.Space_heating_requirement.Box97_m.M9 = this._Calc.HeatLoss.Box39_m.M9 * (this._Calc.Mean_Int_Temp.Box93_m.M9 - this._Calc.Space_heating_requirement.Box96_m.M9);
      this._Calc.Space_heating_requirement.Box97_m.M10 = this._Calc.HeatLoss.Box39_m.M10 * (this._Calc.Mean_Int_Temp.Box93_m.M10 - this._Calc.Space_heating_requirement.Box96_m.M10);
      this._Calc.Space_heating_requirement.Box97_m.M11 = this._Calc.HeatLoss.Box39_m.M11 * (this._Calc.Mean_Int_Temp.Box93_m.M11 - this._Calc.Space_heating_requirement.Box96_m.M11);
      this._Calc.Space_heating_requirement.Box97_m.M12 = this._Calc.HeatLoss.Box39_m.M12 * (this._Calc.Mean_Int_Temp.Box93_m.M12 - this._Calc.Space_heating_requirement.Box96_m.M12);
      this._Calc.Space_heating_requirement.Box98_m.M1 = 0.024 * (this._Calc.Space_heating_requirement.Box97_m.M1 - this._Calc.Space_heating_requirement.Box95_m.M1) * this._Calc.HeatLoss.Box41_m.M1;
      this._Calc.Space_heating_requirement.Box98_m.M2 = 0.024 * (this._Calc.Space_heating_requirement.Box97_m.M2 - this._Calc.Space_heating_requirement.Box95_m.M2) * this._Calc.HeatLoss.Box41_m.M2;
      this._Calc.Space_heating_requirement.Box98_m.M3 = 0.024 * (this._Calc.Space_heating_requirement.Box97_m.M3 - this._Calc.Space_heating_requirement.Box95_m.M3) * this._Calc.HeatLoss.Box41_m.M3;
      this._Calc.Space_heating_requirement.Box98_m.M4 = 0.024 * (this._Calc.Space_heating_requirement.Box97_m.M4 - this._Calc.Space_heating_requirement.Box95_m.M4) * this._Calc.HeatLoss.Box41_m.M4;
      this._Calc.Space_heating_requirement.Box98_m.M5 = 0.024 * (this._Calc.Space_heating_requirement.Box97_m.M5 - this._Calc.Space_heating_requirement.Box95_m.M5) * this._Calc.HeatLoss.Box41_m.M5;
      this._Calc.Space_heating_requirement.Box98_m.M6 = 0.0;
      this._Calc.Space_heating_requirement.Box98_m.M7 = 0.0;
      this._Calc.Space_heating_requirement.Box98_m.M8 = 0.0;
      this._Calc.Space_heating_requirement.Box98_m.M9 = 0.0;
      this._Calc.Space_heating_requirement.Box98_m.M10 = 0.024 * (this._Calc.Space_heating_requirement.Box97_m.M10 - this._Calc.Space_heating_requirement.Box95_m.M10) * this._Calc.HeatLoss.Box41_m.M10;
      this._Calc.Space_heating_requirement.Box98_m.M11 = 0.024 * (this._Calc.Space_heating_requirement.Box97_m.M11 - this._Calc.Space_heating_requirement.Box95_m.M11) * this._Calc.HeatLoss.Box41_m.M11;
      this._Calc.Space_heating_requirement.Box98_m.M12 = 0.024 * (this._Calc.Space_heating_requirement.Box97_m.M12 - this._Calc.Space_heating_requirement.Box95_m.M12) * this._Calc.HeatLoss.Box41_m.M12;
      float num;
      try
      {
        if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0)
        {
          if (Operators.CompareString(this._House.MainHeating.SGroup, "Gas boilers and oil boilers", false) == 0)
          {
            if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "Type", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == Conversions.ToDouble("1"))
              num = (float) (1.0 - Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "CaseLoss", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) / Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "FullOutPower", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))));
          }
        }
        else if (Operators.CompareString(this._House.MainHeating.InforSource, "Manufacturer Declaration", false) == 0)
        {
          int sapTableCode = this._House.MainHeating.SAPTableCode;
          if (sapTableCode >= 133 && sapTableCode <= 141)
            num = (float) (1.0 - (double) this._House.MainHeating.Range.CasekW / (double) this._House.MainHeating.Range.WaterkW);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        num = 0.0f;
        ProjectData.ClearProjectError();
      }
      try
      {
        if (Operators.CompareString(num.ToString(), "NaN", false) == 0)
          num = 0.0f;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      if ((double) num != 0.0 & !this.IsFabricEfficiency)
      {
        this._Calc.Space_heating_requirement.Box98_m.M1 = (double) num * this._Calc.Space_heating_requirement.Box98_m.M1;
        this._Calc.Space_heating_requirement.Box98_m.M2 = (double) num * this._Calc.Space_heating_requirement.Box98_m.M2;
        this._Calc.Space_heating_requirement.Box98_m.M3 = (double) num * this._Calc.Space_heating_requirement.Box98_m.M3;
        this._Calc.Space_heating_requirement.Box98_m.M4 = (double) num * this._Calc.Space_heating_requirement.Box98_m.M4;
        this._Calc.Space_heating_requirement.Box98_m.M5 = (double) num * this._Calc.Space_heating_requirement.Box98_m.M5;
        this._Calc.Space_heating_requirement.Box98_m.M10 = (double) num * this._Calc.Space_heating_requirement.Box98_m.M10;
        this._Calc.Space_heating_requirement.Box98_m.M11 = (double) num * this._Calc.Space_heating_requirement.Box98_m.M11;
        this._Calc.Space_heating_requirement.Box98_m.M12 = (double) num * this._Calc.Space_heating_requirement.Box98_m.M12;
      }
      this._Calc.Space_heating_requirement.Box98 = this._Calc.Space_heating_requirement.Box98_m.M1 + this._Calc.Space_heating_requirement.Box98_m.M2 + this._Calc.Space_heating_requirement.Box98_m.M3 + this._Calc.Space_heating_requirement.Box98_m.M4 + this._Calc.Space_heating_requirement.Box98_m.M5 + this._Calc.Space_heating_requirement.Box98_m.M6 + this._Calc.Space_heating_requirement.Box98_m.M7 + this._Calc.Space_heating_requirement.Box98_m.M8 + this._Calc.Space_heating_requirement.Box98_m.M9 + this._Calc.Space_heating_requirement.Box98_m.M10 + this._Calc.Space_heating_requirement.Box98_m.M11 + this._Calc.Space_heating_requirement.Box98_m.M12;
      this._Calc.Space_heating_requirement.Box99 = this._Calc.Space_heating_requirement.Box98 / this._Calc.Dimensions.Box4;
    }

    private void CHP_Calc()
    {
      this._Calc.HeatLoss.CHPCalc.DHL = this._Calc.HeatLoss.Box39 * 24.2;
      this.SEDBUKFound = (object) Calc2012.SEDBUK_CHP(this._House.MainHeating.SEDBUK);
      List<PCDF.CHP_Sub> chpSubList = this.SEDBUK_CHP_Sub(this._House.MainHeating.SEDBUK);
      if (this.SEDBUKFound == null)
        throw new ArgumentException("Item not found on SEDBUK");
      MicroCHP_Values2012 chpCalc = this._Calc.HeatLoss.CHPCalc;
      chpCalc.PSR = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "CogenPPowerTop", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * 1000.0 / chpCalc.DHL;
      object Left1 = NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "HeatingDuration", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
      if (Operators.ConditionalCompareObjectEqual(Left1, (object) "24", false))
        chpCalc.HeatingDuration = 24;
      else if (Operators.ConditionalCompareObjectEqual(Left1, (object) "16", false))
        chpCalc.HeatingDuration = 16;
      else if (Operators.ConditionalCompareObjectEqual(Left1, (object) "11", false))
        chpCalc.HeatingDuration = 11;
      else if (Operators.ConditionalCompareObjectEqual(Left1, (object) "V", false))
        chpCalc.HeatingDuration = 4;
      List<Calc2012.N8> n8List = this.Fill_Table_N8();
      MicroCHP_Values2012.SecondaryFraction heatingDuration = (MicroCHP_Values2012.SecondaryFraction) chpCalc.HeatingDuration;
      int num1 = checked (n8List.Count - 2);
      int index1 = 0;
      double variable1;
      double variable2;
      double psr1;
      double psr2;
      while (index1 <= num1)
      {
        if ((double) n8List[index1].PSR < chpCalc.PSR & (double) n8List[checked (index1 + 1)].PSR > chpCalc.PSR)
        {
          object Left2 = NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "HeatingDuration", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
          if (Operators.ConditionalCompareObjectEqual(Left2, (object) "24", false))
          {
            variable1 = (double) n8List[checked (index1 + 1)]._24;
            variable2 = (double) n8List[index1]._24;
          }
          else if (Operators.ConditionalCompareObjectEqual(Left2, (object) "16", false))
          {
            variable1 = (double) n8List[checked (index1 + 1)]._16;
            variable2 = (double) n8List[index1]._16;
          }
          else if (Operators.ConditionalCompareObjectEqual(Left2, (object) "11", false))
          {
            variable1 = (double) n8List[checked (index1 + 1)]._11;
            variable2 = (double) n8List[index1]._11;
          }
          else if (Operators.ConditionalCompareObjectEqual(Left2, (object) "V", false))
          {
            variable1 = (double) n8List[checked (index1 + 1)].Variable;
            variable2 = (double) n8List[index1].Variable;
          }
          psr1 = (double) n8List[index1].PSR;
          psr2 = (double) n8List[checked (index1 + 1)].PSR;
          break;
        }
        checked { ++index1; }
      }
      if (psr1 != 0.0)
        chpCalc.SecFraction = Math.Round(this.GiveInterloationValue(psr1, psr2, variable2, variable1, chpCalc.PSR), 3);
      int num2 = checked (chpSubList.Count - 2);
      int index2 = 0;
      double UpperValue;
      double LowerValue;
      while (index2 <= num2)
      {
        if (Conversion.Val(chpSubList[index2].PSR) < chpCalc.PSR & Conversion.Val(chpSubList[checked (index2 + 1)].PSR) > chpCalc.PSR)
        {
          variable1 = Conversions.ToDouble(chpSubList[index2].Efficiency);
          variable2 = Conversions.ToDouble(chpSubList[checked (index2 + 1)].Efficiency);
          psr1 = Conversions.ToDouble(chpSubList[index2].PSR);
          psr2 = Conversions.ToDouble(chpSubList[checked (index2 + 1)].PSR);
          UpperValue = Conversions.ToDouble(chpSubList[checked (index2 + 1)].ElecConsumed);
          LowerValue = Conversions.ToDouble(chpSubList[index2].ElecConsumed);
          break;
        }
        checked { ++index2; }
      }
      if (psr1 == 0.0)
      {
        if (chpCalc.PSR < 0.5)
          throw new ArgumentException("Micro CHP: Plant size ratio = " + Conversions.ToString(Math.Round(chpCalc.PSR, 2)) + " Is Too Small To Complete Calculation");
        throw new ArgumentException("Micro CHP: Plant size ratio = " + Conversions.ToString(Math.Round(chpCalc.PSR, 2)) + " Is Too Large To Complete Calculation");
      }
      chpCalc.nspace = (psr2 - psr1) / ((chpCalc.PSR - psr1) / variable2 + (psr2 - chpCalc.PSR) / variable1);
      chpCalc.espace = this.GiveInterloationValue(psr1, psr2, LowerValue, UpperValue, chpCalc.PSR);
      chpCalc.nsummer = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "WHEffSch3", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) != 0.0 ? (this._Calc.Water_heating.Box43 > 100.2 ? (this._Calc.Water_heating.Box43 < 199.8 ? Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "WHEffSch2", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) + (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "WHEffSch3", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) - Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "WHEffSch2", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)))) / 99.6 * (this._Calc.Water_heating.Box43 - 100.2) : Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "WHEffSch3", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)))) : Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "WHEffSch2", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)))) : Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "WHEffSch2", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
      chpCalc.esummer = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "NetElecConsumedSch3", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) != 0.0 ? (this._Calc.Water_heating.Box43 > 100.2 ? (this._Calc.Water_heating.Box43 < 199.8 ? Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "NetElecConsumedSch2", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) + (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "NetElecConsumedSch3", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) - Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "NetElecConsumedSch2", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)))) / 99.6 * (this._Calc.Water_heating.Box43 - 100.2) : Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "NetElecConsumedSch3", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)))) : Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "NetElecConsumedSch2", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)))) : Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "NetElecConsumedSch2", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
    }

    private void HP_Calc()
    {
      this._Calc.HeatLoss.HPCalc.DHL = this._Calc.HeatLoss.Box39 * 24.2;
      this.SEDBUKFound = (object) Calc2012.SEDBUK_HeatPump(this._House.MainHeating.SEDBUK);
      List<PCDF.HeatPump_Sub> heatPumpSubList = this.SEDBUK_HeatPump_Sub(this._House.MainHeating.SEDBUK);
      if (this.SEDBUKFound == null)
        throw new ArgumentException("Item not found on SEDBUK");
      HeatPumps_Values2012 hpCalc = this._Calc.HeatLoss.HPCalc;
      hpCalc.PSR = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "Max_Output", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * 1000.0 / hpCalc.DHL;
      object Left1 = NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "Heating_Duration", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
      if (Operators.ConditionalCompareObjectEqual(Left1, (object) "24", false))
        hpCalc.HeatingDuration = 24;
      else if (Operators.ConditionalCompareObjectEqual(Left1, (object) "16", false))
        hpCalc.HeatingDuration = 16;
      else if (Operators.ConditionalCompareObjectEqual(Left1, (object) "11", false))
        hpCalc.HeatingDuration = 11;
      else if (Operators.ConditionalCompareObjectEqual(Left1, (object) "V", false))
        hpCalc.HeatingDuration = 4;
      List<Calc2012.N8> n8List = this.Fill_Table_N8();
      HeatPumps_Values2012.SecondaryFraction heatingDuration = (HeatPumps_Values2012.SecondaryFraction) hpCalc.HeatingDuration;
      int num1 = checked (n8List.Count - 2);
      int index1 = 0;
      double variable;
      double LowerValue1;
      double psr;
      double UpperPSR;
      while (index1 <= num1)
      {
        if ((double) n8List[index1].PSR < hpCalc.PSR & (double) n8List[checked (index1 + 1)].PSR > hpCalc.PSR)
        {
          object Left2 = NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "Heating_Duration", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
          if (Operators.ConditionalCompareObjectEqual(Left2, (object) "24", false))
          {
            variable = (double) n8List[checked (index1 + 1)]._24;
            LowerValue1 = (double) n8List[index1]._24;
          }
          else if (Operators.ConditionalCompareObjectEqual(Left2, (object) "16", false))
          {
            variable = (double) n8List[checked (index1 + 1)]._16;
            LowerValue1 = (double) n8List[index1]._16;
          }
          else if (Operators.ConditionalCompareObjectEqual(Left2, (object) "11", false))
          {
            variable = (double) n8List[checked (index1 + 1)]._11;
            LowerValue1 = (double) n8List[index1]._11;
          }
          else if (Operators.ConditionalCompareObjectEqual(Left2, (object) "V", false))
          {
            variable = (double) n8List[checked (index1 + 1)].Variable;
            LowerValue1 = (double) n8List[index1].Variable;
          }
          psr = (double) n8List[index1].PSR;
          UpperPSR = (double) n8List[checked (index1 + 1)].PSR;
          break;
        }
        checked { ++index1; }
      }
      if (psr != 0.0)
        hpCalc.SecFraction = Math.Round(this.GiveInterloationValue(psr, UpperPSR, LowerValue1, variable, hpCalc.PSR), 3);
      double num2 = 0.0;
      int num3 = 0;
      double[] arySrc1 = new double[0];
      double[] arySrc2 = new double[0];
      double[] arySrc3 = new double[0];
      double[] arySrc4 = new double[0];
      double[] arySrc5 = new double[0];
      double[] arySrc6 = new double[0];
      double[] arySrc7 = new double[0];
      double[] arySrc8 = new double[0];
      int num4 = checked (heatPumpSubList.Count - 2);
      int index2 = 0;
      double UpperValue1;
      double LowerValue2;
      double LowerValue3;
      double UpperValue2;
      while (index2 <= num4)
      {
        if (Conversion.Val(heatPumpSubList[index2].PlantSize_Ratio) < hpCalc.PSR & Conversion.Val(heatPumpSubList[checked (index2 + 1)].PlantSize_Ratio) > hpCalc.PSR)
        {
          checked { ++num3; }
          arySrc2 = (double[]) Utils.CopyArray((Array) arySrc2, (Array) new double[checked (num3 - 1 + 1)]);
          arySrc1 = (double[]) Utils.CopyArray((Array) arySrc1, (Array) new double[checked (num3 - 1 + 1)]);
          arySrc7 = (double[]) Utils.CopyArray((Array) arySrc7, (Array) new double[checked (num3 - 1 + 1)]);
          arySrc8 = (double[]) Utils.CopyArray((Array) arySrc8, (Array) new double[checked (num3 - 1 + 1)]);
          arySrc3 = (double[]) Utils.CopyArray((Array) arySrc3, (Array) new double[checked (num3 - 1 + 1)]);
          arySrc4 = (double[]) Utils.CopyArray((Array) arySrc4, (Array) new double[checked (num3 - 1 + 1)]);
          arySrc6 = (double[]) Utils.CopyArray((Array) arySrc6, (Array) new double[checked (num3 - 1 + 1)]);
          arySrc5 = (double[]) Utils.CopyArray((Array) arySrc5, (Array) new double[checked (num3 - 1 + 1)]);
          arySrc2[checked (num3 - 1)] = Conversions.ToDouble(heatPumpSubList[index2].SpaceHeating);
          arySrc1[checked (num3 - 1)] = Conversions.ToDouble(heatPumpSubList[checked (index2 + 1)].SpaceHeating);
          arySrc7[checked (num3 - 1)] = Conversions.ToDouble(heatPumpSubList[index2].PlantSize_Ratio);
          arySrc8[checked (num3 - 1)] = Conversions.ToDouble(heatPumpSubList[checked (index2 + 1)].PlantSize_Ratio);
          arySrc3[checked (num3 - 1)] = Conversions.ToDouble(heatPumpSubList[checked (index2 + 1)].Specific_Elec_Consumed);
          arySrc4[checked (num3 - 1)] = Conversions.ToDouble(heatPumpSubList[index2].Specific_Elec_Consumed);
          arySrc6[checked (num3 - 1)] = Conversion.Val(heatPumpSubList[index2].Run_hours);
          if (!Information.IsDBNull((object) heatPumpSubList[checked (index2 + 1)].Run_hours))
            arySrc5[checked (num3 - 1)] = Conversion.Val(heatPumpSubList[checked (index2 + 1)].Run_hours);
          num2 = Conversions.ToDouble(heatPumpSubList[index2].SpaceHeating);
          LowerValue1 = Conversions.ToDouble(heatPumpSubList[checked (index2 + 1)].SpaceHeating);
          psr = Conversions.ToDouble(heatPumpSubList[index2].PlantSize_Ratio);
          UpperPSR = Conversions.ToDouble(heatPumpSubList[checked (index2 + 1)].PlantSize_Ratio);
          UpperValue1 = Conversions.ToDouble(heatPumpSubList[checked (index2 + 1)].Specific_Elec_Consumed);
          LowerValue2 = Conversions.ToDouble(heatPumpSubList[index2].Specific_Elec_Consumed);
          LowerValue3 = Conversion.Val(heatPumpSubList[index2].Run_hours);
          if (!Information.IsDBNull((object) heatPumpSubList[checked (index2 + 1)].Run_hours))
            UpperValue2 = Conversion.Val(heatPumpSubList[checked (index2 + 1)].Run_hours);
        }
        checked { ++index2; }
      }
      if (num2 == 0.0)
      {
        string heatSource = ((PCDF.HeatPump) this.SEDBUKFound).Heat_Source;
        if (Operators.CompareString(heatSource, "1", false) != 0 && Operators.CompareString(heatSource, "3", false) != 0 && Operators.CompareString(heatSource, "7", false) != 0 && Operators.CompareString(heatSource, "8", false) != 0 && Operators.CompareString(heatSource, "9", false) != 0)
          throw new ArgumentException("Heat pump: Plant size ratio = " + Conversions.ToString(Math.Round(hpCalc.PSR, 2)) + " is too large\r\nMain heating system efficiency too low");
        arySrc2 = (double[]) Utils.CopyArray((Array) arySrc2, (Array) new double[1]);
        arySrc1 = (double[]) Utils.CopyArray((Array) arySrc1, (Array) new double[1]);
        arySrc7 = (double[]) Utils.CopyArray((Array) arySrc7, (Array) new double[1]);
        arySrc8 = (double[]) Utils.CopyArray((Array) arySrc8, (Array) new double[1]);
        double[] numArray1 = (double[]) Utils.CopyArray((Array) arySrc3, (Array) new double[1]);
        double[] numArray2 = (double[]) Utils.CopyArray((Array) arySrc4, (Array) new double[1]);
        arySrc6 = (double[]) Utils.CopyArray((Array) arySrc6, (Array) new double[1]);
        arySrc5 = (double[]) Utils.CopyArray((Array) arySrc5, (Array) new double[1]);
        arySrc2[0] = Conversions.ToDouble(heatPumpSubList[checked (heatPumpSubList.Count - 1)].SpaceHeating);
        arySrc1[0] = 100.0;
        arySrc7[0] = Conversions.ToDouble(heatPumpSubList[checked (heatPumpSubList.Count - 1)].PlantSize_Ratio);
        arySrc8[0] = 4.0 * Conversion.Val(heatPumpSubList[checked (heatPumpSubList.Count - 1)].PlantSize_Ratio);
        numArray1[0] = Conversions.ToDouble(heatPumpSubList[checked (heatPumpSubList.Count - 1)].Specific_Elec_Consumed);
        numArray2[0] = Conversions.ToDouble(heatPumpSubList[checked (heatPumpSubList.Count - 1)].Specific_Elec_Consumed);
        arySrc6[0] = Conversion.Val(heatPumpSubList[checked (heatPumpSubList.Count - 1)].Run_hours);
        arySrc5[0] = Conversion.Val(heatPumpSubList[checked (heatPumpSubList.Count - 1)].Run_hours);
        num2 = Conversions.ToDouble(heatPumpSubList[checked (heatPumpSubList.Count - 1)].SpaceHeating);
        LowerValue1 = 100.0;
        psr = Conversions.ToDouble(heatPumpSubList[checked (heatPumpSubList.Count - 1)].PlantSize_Ratio);
        UpperPSR = 4.0 * Conversion.Val(heatPumpSubList[checked (heatPumpSubList.Count - 1)].PlantSize_Ratio);
        UpperValue1 = Conversions.ToDouble(heatPumpSubList[checked (heatPumpSubList.Count - 1)].Specific_Elec_Consumed);
        LowerValue2 = Conversions.ToDouble(heatPumpSubList[checked (heatPumpSubList.Count - 1)].Specific_Elec_Consumed);
        LowerValue3 = Conversion.Val(heatPumpSubList[checked (heatPumpSubList.Count - 1)].Run_hours);
        UpperValue2 = Conversion.Val(heatPumpSubList[checked (heatPumpSubList.Count - 1)].Run_hours);
        num3 = 1;
      }
      double[] numArray3 = new double[checked (num3 - 1 + 1)];
      double[] numArray4 = new double[checked (num3 - 1 + 1)];
      double[] numArray5 = new double[checked (num3 - 1 + 1)];
      double PSR;
      if (num3 > 1)
      {
        numArray3[0] = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "AirFlow1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
        numArray3[1] = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "AirFlow2", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
        try
        {
          numArray3[2] = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "AirFlow3", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        PSR = this._Calc.Dimensions.Box5 * this._Calc.Ventilation.Box23a / 3.6;
      }
      double num5 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "Heat_Source", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
      if (num5 == 4.0)
      {
        if (num3 == 1)
        {
          hpCalc.hhp = this.GiveInterloationValue(psr, UpperPSR, LowerValue3, UpperValue2, hpCalc.PSR);
          hpCalc.hhp = Math.Round(hpCalc.hhp);
        }
        else
        {
          hpCalc.hhp = 0.0;
          int num6 = checked (num3 - 1);
          int index3 = 0;
          while (index3 <= num6)
          {
            // ISSUE: variable of a reference type
            double& local;
            // ISSUE: explicit reference operation
            double num7 = ^(local = ref numArray4[index3]) + this.GiveInterloationValue(arySrc7[index3], arySrc8[index3], arySrc6[index3], arySrc5[index3], hpCalc.PSR);
            local = num7;
            checked { ++index3; }
          }
          int num8 = checked (num3 - 2);
          int index4 = 0;
          while (index4 <= num8)
          {
            if (numArray3[index4] < PSR & numArray3[checked (index4 + 1)] > PSR)
            {
              HeatPumps_Values2012 heatPumpsValues2012;
              double num9 = (heatPumpsValues2012 = hpCalc).hhp + this.GiveInterloationValue(numArray3[index4], numArray3[checked (index4 + 1)], numArray4[index4], numArray4[checked (index4 + 1)], PSR);
              heatPumpsValues2012.hhp = num9;
              break;
            }
            checked { ++index4; }
          }
          if (hpCalc.hhp == 0.0)
          {
            hpCalc.hhp = this.GiveInterloationValue(psr, UpperPSR, LowerValue3, UpperValue2, hpCalc.PSR);
            hpCalc.hhp = Math.Round(hpCalc.hhp);
          }
        }
        if (this.Products321Sub(Conversions.ToString(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "MEV_MVHR", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), Conversions.ToString(this._House.Ventilation.WetRooms)) != null)
        {
          hpCalc.ThroughPut = this._Calc.Dimensions.Box5 * this._Calc.Ventilation.Box23a / 3.6;
          hpCalc.Rhp = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "AirFlow1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) >= hpCalc.ThroughPut ? Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "AirFlow1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * 3.6 / (this._Calc.Ventilation.Box23a * this._Calc.Dimensions.Box5) : 1.0;
        }
        hpCalc.Fmv = (8760.0 - hpCalc.hhp + hpCalc.Rhp * hpCalc.hhp) / 8760.0;
      }
      else if (num5 == 5.0 || num5 != 6.0)
        ;
      if (!SAP_Module.Proj.OverRide && hpCalc.PSR < psr)
        throw new ArgumentException("Heat pump: Plant size ratio = " + Conversions.ToString(Math.Round(hpCalc.PSR, 2)) + " is too large\r\nMain heating system efficiency too low");
      hpCalc.espace = this.GiveInterloationValue(psr, UpperPSR, LowerValue2, UpperValue1, hpCalc.PSR);
      if (num3 == 1)
      {
        hpCalc.nspace = (UpperPSR - psr) / ((hpCalc.PSR - psr) / LowerValue1 + (UpperPSR - hpCalc.PSR) / num2);
      }
      else
      {
        hpCalc.nspace = 0.0;
        int num10 = checked (num3 - 1);
        int index5 = 0;
        while (index5 <= num10)
        {
          // ISSUE: variable of a reference type
          double& local;
          // ISSUE: explicit reference operation
          double num11 = ^(local = ref numArray5[index5]) + (arySrc8[index5] - arySrc7[index5]) / ((hpCalc.PSR - arySrc7[index5]) / arySrc1[index5] + (arySrc8[index5] - hpCalc.PSR) / arySrc2[index5]);
          local = num11;
          checked { ++index5; }
        }
        int num12 = checked (num3 - 2);
        int index6 = 0;
        while (index6 <= num12)
        {
          if (numArray3[index6] < PSR & numArray3[checked (index6 + 1)] > PSR)
          {
            HeatPumps_Values2012 heatPumpsValues2012;
            double num13 = (heatPumpsValues2012 = hpCalc).nspace + this.GiveInterloationValue(numArray3[index6], numArray3[checked (index6 + 1)], numArray5[index6], numArray5[checked (index6 + 1)], PSR);
            heatPumpsValues2012.nspace = num13;
            break;
          }
          checked { ++index6; }
        }
        if (hpCalc.nspace == 0.0)
          hpCalc.nspace = (UpperPSR - psr) / ((hpCalc.PSR - psr) / LowerValue1 + (UpperPSR - hpCalc.PSR) / num2);
      }
      if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "WHEffSch3", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 0.0)
      {
        hpCalc.nsummer = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "WHEffSch2", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
        if (hpCalc.nsummer == 0.0)
          hpCalc.nsummer = 100.0;
      }
      else
        hpCalc.nsummer = this._Calc.Water_heating.Box43 > 100.2 ? (this._Calc.Water_heating.Box43 < 199.8 ? Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "WHEffSch2", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) + (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "WHEffSch3", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) - Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "WHEffSch2", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)))) / 99.6 * (this._Calc.Water_heating.Box43 - 100.2) : Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "WHEffSch3", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)))) : Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "WHEffSch2", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
      hpCalc.esummer = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "NetElecConsumedSch3", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) != 0.0 ? (this._Calc.Water_heating.Box43 > 100.2 ? (this._Calc.Water_heating.Box43 < 199.8 ? Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "NetElecConsumedSch2", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) + (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "NetElecConsumedSch3", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) - Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "NetElecConsumedSch2", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)))) / 99.6 * (this._Calc.Water_heating.Box43 - 100.2) : Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "NetElecConsumedSch3", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)))) : Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "NetElecConsumedSch2", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)))) : Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "NetElecConsumedSch2", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
      hpCalc.nspace = 0.95 * hpCalc.nspace;
    }

    private void HP_WaterOnly_Calc()
    {
      object Instance = (object) Calc2012.SEDBUK_HeatPump(this._House.MainHeating2.SEDBUK);
      if (Instance == null)
        throw new ArgumentException("Item not found on SEDBUK");
      if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(Instance, (System.Type) null, "WHEffSch3", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 0.0)
      {
        this._Calc.HeatLoss.HPCalc.nsummer = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(Instance, (System.Type) null, "WHEffSch2", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
        if (this._Calc.HeatLoss.HPCalc.nsummer != 0.0)
          return;
        this._Calc.HeatLoss.HPCalc.nsummer = 100.0;
      }
      else
        this._Calc.HeatLoss.HPCalc.nsummer = this._Calc.Water_heating.Box43 > 100.2 ? (this._Calc.Water_heating.Box43 < 199.8 ? Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(Instance, (System.Type) null, "WHEffSch2", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) + (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(Instance, (System.Type) null, "WHEffSch3", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) - Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(Instance, (System.Type) null, "WHEffSch2", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)))) / 99.6 * (this._Calc.Water_heating.Box43 - 100.2) : Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(Instance, (System.Type) null, "WHEffSch3", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)))) : Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(Instance, (System.Type) null, "WHEffSch2", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
    }

    private void WindTurbine()
    {
      List<Calc2012.M1> source = new List<Calc2012.M1>();
      this._Calc.Renewable.WindTurbine = new WindTurbine2012[1];
      this._Calc.Renewable.WindTurbine[0] = new WindTurbine2012();
      this._Calc.Energy_Requirements_9a.Box234_Count = 1;
      checked { ++this._Calc.Fuel_costs_10a.Box252_Count; }
      this._Calc.Actual_costs_10a.Box252_Count = checked (this._Calc.Fuel_costs_10a.Box252_Count + 1);
      checked { ++this._Calc.CO2_Emissions_12a.Box269_Count; }
      checked { ++this._Calc.Primary_Energy_13a.Box269_Count; }
      this._Calc.Energy_Requirements_9b.Box334_Count = 1;
      this._Calc.Fuel_costs_10b.Box352_Count = checked (this._Calc.Fuel_costs_10a.Box252_Count + 1);
      this._Calc.Actual_costs_10b.Box352_Count = checked (this._Calc.Fuel_costs_10a.Box252_Count + 1);
      this._Calc.CO2_Emissions_12b.Box380_Count = checked (this._Calc.CO2_Emissions_12a.Box269_Count + 1);
      this._Calc.Primary_Energy_13b.Box380_Count = checked (this._Calc.Primary_Energy_13a.Box269_Count + 1);
      source.Add(new Calc2012.M1()
      {
        Terrain = "Dense Urban",
        Height = 10f,
        CF = 0.56f
      });
      source.Add(new Calc2012.M1()
      {
        Terrain = "Dense Urban",
        Height = 5f,
        CF = 0.51f
      });
      source.Add(new Calc2012.M1()
      {
        Terrain = "Dense Urban",
        Height = 2f,
        CF = 0.4f
      });
      source.Add(new Calc2012.M1()
      {
        Terrain = "Dense Urban",
        Height = 0.0f,
        CF = 0.28f
      });
      source.Add(new Calc2012.M1()
      {
        Terrain = "Low rise urban / suburban",
        Height = 6f,
        CF = 0.67f
      });
      source.Add(new Calc2012.M1()
      {
        Terrain = "Low rise urban / suburban",
        Height = 4f,
        CF = 0.61f
      });
      source.Add(new Calc2012.M1()
      {
        Terrain = "Low rise urban / suburban",
        Height = 2f,
        CF = 0.53f
      });
      source.Add(new Calc2012.M1()
      {
        Terrain = "Low rise urban / suburban",
        Height = 0.0f,
        CF = 0.39f
      });
      source.Add(new Calc2012.M1()
      {
        Terrain = "Rural",
        Height = 12f,
        CF = 1f
      });
      source.Add(new Calc2012.M1()
      {
        Terrain = "Rural",
        Height = 7f,
        CF = 0.94f
      });
      source.Add(new Calc2012.M1()
      {
        Terrain = "Rural",
        Height = 2f,
        CF = 0.86f
      });
      source.Add(new Calc2012.M1()
      {
        Terrain = "Rural",
        Height = 0.0f,
        CF = 0.82f
      });
      List<Calc2012.M1> list = source.Where<Calc2012.M1>((Func<Calc2012.M1, bool>) (b => Operators.CompareString(b.Terrain.ToUpper(), this._House.Terrain.ToUpper(), false) == 0)).ToList<Calc2012.M1>();
      if (Conversion.Val(this._House.Renewable.WindTurbine.WHeight) <= 0.0)
        this._Calc.Renewable.WindTurbine[0].CF = (double) list[checked (list.Count - 1)].CF;
      if (Conversion.Val(this._House.Renewable.WindTurbine.WHeight) >= (double) list[0].Height)
        this._Calc.Renewable.WindTurbine[0].CF = (double) list[0].CF;
      if (this._Calc.Renewable.WindTurbine[0].CF == 0.0)
      {
        int num = checked (list.Count - 1);
        int index = 0;
        while (index <= num)
        {
          if (Conversion.Val(this._House.Renewable.WindTurbine.WHeight) <= (double) list[index].Height & Conversion.Val(this._House.Renewable.WindTurbine.WHeight) > (double) list[checked (index + 1)].Height)
          {
            float cf1 = list[index].CF;
            float cf2 = list[checked (index + 1)].CF;
            this._Calc.Renewable.WindTurbine[0].CF = (double) cf2 + ((double) cf1 - (double) cf2) * (Conversion.Val(this._House.Renewable.WindTurbine.WHeight) - (double) list[checked (index + 1)].Height) / ((double) list[index].Height - (double) list[checked (index + 1)].Height);
            break;
          }
          checked { ++index; }
        }
      }
      this._Calc.Renewable.WindTurbine[0].A = Math.PI / 4.0 * Math.Pow(Conversions.ToDouble(this._House.Renewable.WindTurbine.WRDiameter), 2.0);
      this._Calc.Renewable.WindTurbine[0].PA = 49.0 / 80.0 * Math.Pow(5.0 * this._Calc.Renewable.WindTurbine[0].CF, 3.0);
      this._Calc.Renewable.WindTurbine[0].Pwind = 0.24 * this._Calc.Renewable.WindTurbine[0].A * this._Calc.Renewable.WindTurbine[0].PA;
      this._Calc.Renewable.WindTurbine[0].Ewind = (double) this._House.Renewable.WindTurbine.WNumber * this._Calc.Renewable.WindTurbine[0].Pwind * 1.9 * 8766.0 * 0.001;
      string electricityTariff = this._House.MainHeating.ElectricityTariff;
      float num1;
      float num2;
      if (Operators.CompareString(electricityTariff, "10-hour tariff", false) != 0)
      {
        if (Operators.CompareString(electricityTariff, "7-hour tariff", false) == 0)
        {
          num1 = (float) (0.7 * (0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price")) + 0.3 * this.FuelCost("electricity sold to grid", 1, "Price"));
          num2 = (float) (0.7 * (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price")) + 0.3 * this.FuelCost("electricity sold to grid", 0, "Price"));
        }
        else
        {
          num1 = (float) (0.7 * this.FuelCost(this.GetElectricityType(0), 1, "Price") + 0.3 * this.FuelCost("electricity sold to grid", 1, "Price"));
          num2 = (float) (0.7 * this.FuelCost(this.GetElectricityType(0), 0, "Price") + 0.3 * this.FuelCost("electricity sold to grid", 0, "Price"));
        }
      }
      else
      {
        num1 = (float) (0.7 * (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price")) + 0.3 * this.FuelCost("electricity sold to grid", 1, "Price"));
        num2 = (float) (0.7 * (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price")) + 0.3 * this.FuelCost("electricity sold to grid", 0, "Price"));
      }
      if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0)
      {
        this._Calc.Energy_Requirements_9a.set_Box234_Parts(0, -this._Calc.Renewable.WindTurbine[0].Ewind);
      }
      else
      {
        switch (this._House.MainHeating.SAPTableCode)
        {
          case 306:
          case 307:
          case 308:
          case 309:
          case 310:
            this._Calc.Energy_Requirements_9b.set_Box334_Parts(0, -this._Calc.Renewable.WindTurbine[0].Ewind);
            break;
          default:
            this._Calc.Energy_Requirements_9a.set_Box234_Parts(0, -this._Calc.Renewable.WindTurbine[0].Ewind);
            break;
        }
      }
      if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0)
      {
        this._Calc.Fuel_costs_10a.set_Box252_Prices(checked (this._Calc.Fuel_costs_10a.Box252_Prices.Length - 1), (double) num1);
        this._Calc.Fuel_costs_10a.set_Box252_Costs(checked (this._Calc.Fuel_costs_10a.Box252_Costs.Length - 1), (double) num1 * this._Calc.Energy_Requirements_9a.Box234 * 0.01);
        this._Calc.Actual_costs_10a.set_Box252_Prices(checked (this._Calc.Actual_costs_10a.Box252_Prices.Length - 1), (double) num2);
        this._Calc.Actual_costs_10a.set_Box252_Costs(checked (this._Calc.Actual_costs_10a.Box252_Costs.Length - 1), (double) num2 * this._Calc.Energy_Requirements_9a.Box234 * 0.01);
        this._Calc.CO2_Emissions_12a.set_Box269_EFactors(checked (this._Calc.CO2_Emissions_12a.Box269_EFactors.Length - 1), this.FuelCost("electricity displaced from grid", 1, "Emissions"));
        this._Calc.CO2_Emissions_12a.Box269_Emissions[checked (this._Calc.CO2_Emissions_12a.Box269_Emissions.Length - 1)] = this._Calc.Energy_Requirements_9a.Box234 * this._Calc.CO2_Emissions_12a.get_Box269_EFactors(checked (this._Calc.CO2_Emissions_12a.Box269_EFactors.Length - 1));
        this._Calc.Primary_Energy_13a.set_Box269_EFactors(checked (this._Calc.Primary_Energy_13a.Box269_EFactors.Length - 1), this.FuelCost("electricity displaced from grid", 1, "Energy"));
        this._Calc.Primary_Energy_13a.Box269_Emissions[checked (this._Calc.Primary_Energy_13a.Box269_Emissions.Length - 1)] = this._Calc.Energy_Requirements_9a.Box234 * this._Calc.Primary_Energy_13a.get_Box269_EFactors(checked (this._Calc.Primary_Energy_13a.Box269_EFactors.Length - 1));
      }
      else
      {
        switch (this._House.MainHeating.SAPTableCode)
        {
          case 306:
          case 307:
          case 308:
          case 309:
          case 310:
            this._Calc.Fuel_costs_10b.set_Box352_Prices(checked (this._Calc.Fuel_costs_10b.Box352_Prices.Length - 1), (double) num1);
            this._Calc.Fuel_costs_10b.set_Box352_Costs(checked (this._Calc.Fuel_costs_10b.Box352_Costs.Length - 1), (double) num1 * this._Calc.Energy_Requirements_9b.Box334 * 0.01);
            this._Calc.Actual_costs_10b.set_Box352_Prices(checked (this._Calc.Actual_costs_10b.Box352_Prices.Length - 1), (double) num2);
            this._Calc.Actual_costs_10b.set_Box352_Costs(checked (this._Calc.Actual_costs_10b.Box352_Costs.Length - 1), (double) num2 * this._Calc.Energy_Requirements_9b.Box334 * 0.01);
            this._Calc.CO2_Emissions_12b.set_Box380_EFactors(checked (this._Calc.CO2_Emissions_12b.Box380_EFactors.Length - 1), this.FuelCost("electricity displaced from grid", 1, "Emissions"));
            this._Calc.CO2_Emissions_12b.Box380_Emissions[checked (this._Calc.CO2_Emissions_12b.Box380_Emissions.Length - 1)] = this._Calc.Energy_Requirements_9b.Box334 * this._Calc.CO2_Emissions_12b.get_Box380_EFactors(checked (this._Calc.CO2_Emissions_12b.Box380_EFactors.Length - 1));
            this._Calc.Primary_Energy_13b.set_Box380_EFactors(checked (this._Calc.Primary_Energy_13b.Box380_EFactors.Length - 1), this.FuelCost("electricity displaced from grid", 1, "Energy"));
            this._Calc.Primary_Energy_13b.set_Box380_Energy(checked (this._Calc.Primary_Energy_13b.Box380_Energy.Length - 1), this._Calc.Energy_Requirements_9b.Box334 * this._Calc.Primary_Energy_13b.get_Box380_EFactors(checked (this._Calc.Primary_Energy_13b.Box380_EFactors.Length - 1)));
            break;
          default:
            this._Calc.Fuel_costs_10a.set_Box252_Prices(checked (this._Calc.Fuel_costs_10a.Box252_Prices.Length - 1), (double) num1);
            this._Calc.Fuel_costs_10a.set_Box252_Costs(checked (this._Calc.Fuel_costs_10a.Box252_Costs.Length - 1), (double) num1 * this._Calc.Energy_Requirements_9a.Box234 * 0.01);
            this._Calc.Actual_costs_10a.set_Box252_Prices(checked (this._Calc.Actual_costs_10a.Box252_Prices.Length - 1), (double) num2);
            this._Calc.Actual_costs_10a.set_Box252_Costs(checked (this._Calc.Actual_costs_10a.Box252_Costs.Length - 1), (double) num2 * this._Calc.Energy_Requirements_9a.Box234 * 0.01);
            this._Calc.CO2_Emissions_12a.set_Box269_EFactors(checked (this._Calc.CO2_Emissions_12a.Box269_EFactors.Length - 1), this.FuelCost("electricity displaced from grid", 1, "Emissions"));
            this._Calc.CO2_Emissions_12a.Box269_Emissions[checked (this._Calc.CO2_Emissions_12a.Box269_Emissions.Length - 1)] = this._Calc.Energy_Requirements_9a.Box234 * this._Calc.CO2_Emissions_12a.get_Box269_EFactors(checked (this._Calc.CO2_Emissions_12a.Box269_EFactors.Length - 1));
            this._Calc.Primary_Energy_13a.set_Box269_EFactors(checked (this._Calc.Primary_Energy_13a.Box269_EFactors.Length - 1), this.FuelCost("electricity displaced from grid", 1, "Energy"));
            this._Calc.Primary_Energy_13a.Box269_Emissions[checked (this._Calc.Primary_Energy_13a.Box269_Emissions.Length - 1)] = this._Calc.Energy_Requirements_9a.Box234 * this._Calc.Primary_Energy_13a.get_Box269_EFactors(checked (this._Calc.Primary_Energy_13a.Box269_EFactors.Length - 1));
            break;
        }
      }
      this._Add_Variable._EnergySaving.Wind = new Values();
      this._Add_Variable._EnergySaving.Wind.Energy = this._Calc.Renewable.WindTurbine[0].Ewind;
      this._Add_Variable._EnergySaving.Wind.Cost = (double) num1;
      this._Add_Variable._EnergySaving.Wind.Emissions = this.FuelCost("electricity displaced from grid", 1, "Emissions");
      this._Add_Variable._EnergySaving.Wind.PrimaryEnergy = this.FuelCost("electricity displaced from grid", 1, "Energy");
    }

    private double RadiationCalc(string Orientation, string Tilt, bool solar)
    {
      this.MonthlyRadiationValues = new List<Calc2012.RadiationValues>();
      PCDF.RegionalData regionalUrow = this.RegionalURow;
      int num1 = 1;
      double num2;
      do
      {
        string Left = Tilt;
        int num3;
        if (Operators.CompareString(Left, "Horizontal", false) != 0)
        {
          if (Operators.CompareString(Left, "30°", false) != 0)
          {
            if (Operators.CompareString(Left, "45°", false) != 0)
            {
              if (Operators.CompareString(Left, "60°", false) != 0)
              {
                if (Operators.CompareString(Left, "Vertical", false) == 0)
                  num3 = 90;
              }
              else
                num3 = 60;
            }
            else
              num3 = 45;
          }
          else
            num3 = 30;
        }
        else
          num3 = 0;
        float latitude = (float) regionalUrow.Latitude;
        int num4;
        float num5;
        int num6;
        switch (num1)
        {
          case 1:
            num4 = checked ((int) Math.Round(regionalUrow.TableU3.M1));
            num5 = (float) regionalUrow.SolarDeclination.M1;
            num6 = 31;
            break;
          case 2:
            num4 = checked ((int) Math.Round(regionalUrow.TableU3.M2));
            num5 = (float) regionalUrow.SolarDeclination.M2;
            num6 = 28;
            break;
          case 3:
            num4 = checked ((int) Math.Round(regionalUrow.TableU3.M3));
            num5 = (float) regionalUrow.SolarDeclination.M3;
            num6 = 31;
            break;
          case 4:
            num4 = checked ((int) Math.Round(regionalUrow.TableU3.M4));
            num5 = (float) regionalUrow.SolarDeclination.M4;
            num6 = 30;
            break;
          case 5:
            num4 = checked ((int) Math.Round(regionalUrow.TableU3.M5));
            num5 = (float) regionalUrow.SolarDeclination.M5;
            num6 = 31;
            break;
          case 6:
            num4 = checked ((int) Math.Round(regionalUrow.TableU3.M6));
            num5 = (float) regionalUrow.SolarDeclination.M6;
            num6 = 30;
            break;
          case 7:
            num4 = checked ((int) Math.Round(regionalUrow.TableU3.M7));
            num5 = (float) regionalUrow.SolarDeclination.M7;
            num6 = 31;
            break;
          case 8:
            num4 = checked ((int) Math.Round(regionalUrow.TableU3.M8));
            num5 = (float) regionalUrow.SolarDeclination.M8;
            num6 = 31;
            break;
          case 9:
            num4 = checked ((int) Math.Round(regionalUrow.TableU3.M9));
            num5 = (float) regionalUrow.SolarDeclination.M9;
            num6 = 30;
            break;
          case 10:
            num4 = checked ((int) Math.Round(regionalUrow.TableU3.M10));
            num5 = (float) regionalUrow.SolarDeclination.M10;
            num6 = 31;
            break;
          case 11:
            num4 = checked ((int) Math.Round(regionalUrow.TableU3.M11));
            num5 = (float) regionalUrow.SolarDeclination.M11;
            num6 = 30;
            break;
          case 12:
            num4 = checked ((int) Math.Round(regionalUrow.TableU3.M12));
            num5 = (float) regionalUrow.SolarDeclination.M12;
            num6 = 31;
            break;
        }
        float num7;
        if ((uint) Operators.CompareString(Tilt, "Horizontal", false) > 0U)
        {
          PCDF.TableU5Constants tableU5Constants = new PCDF.TableU5Constants();
          string str = Orientation;
          // ISSUE: reference to a compiler-generated method
          switch (\u003CPrivateImplementationDetails\u003E.ComputeStringHash(str))
          {
            case 105265260:
              if (Operators.CompareString(str, "Unspecified", false) == 0)
                goto label_46;
              else
                goto default;
            case 912749504:
              if (Operators.CompareString(str, "SE/SW", false) == 0)
                goto label_50;
              else
                goto default;
            case 1128440633:
              if (Operators.CompareString(str, "North East", false) == 0)
                break;
              goto default;
            case 1409318971:
              if (Operators.CompareString(str, "North West", false) == 0)
                break;
              goto default;
            case 1682370166:
              if (Operators.CompareString(str, "NE/NW", false) == 0)
                break;
              goto default;
            case 1731397980:
              if (Operators.CompareString(str, "East", false) == 0)
                goto label_46;
              else
                goto default;
            case 1734234020:
              if (Operators.CompareString(str, "North", false) == 0)
              {
                List<PCDF.TableU5Constants> tableU5 = SAP_Module.PCDFData.TableU5;
                Func<PCDF.TableU5Constants, bool> predicate;
                // ISSUE: reference to a compiler-generated field
                if (Calc2012._Closure\u0024__.\u0024I84\u002D0 != null)
                {
                  // ISSUE: reference to a compiler-generated field
                  predicate = Calc2012._Closure\u0024__.\u0024I84\u002D0;
                }
                else
                {
                  // ISSUE: reference to a compiler-generated field
                  Calc2012._Closure\u0024__.\u0024I84\u002D0 = predicate = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("North"));
                }
                tableU5Constants = tableU5.Where<PCDF.TableU5Constants>(predicate).SingleOrDefault<PCDF.TableU5Constants>();
                goto default;
              }
              else
                goto default;
            case 1796576718:
              if (Operators.CompareString(str, "West", false) == 0)
                goto label_46;
              else
                goto default;
            case 2417407149:
              if (Operators.CompareString(str, "South West", false) == 0)
                goto label_50;
              else
                goto default;
            case 2853841879:
              if (Operators.CompareString(str, "South East", false) == 0)
                goto label_50;
              else
                goto default;
            case 3017973530:
              if (Operators.CompareString(str, "South", false) == 0)
              {
                List<PCDF.TableU5Constants> tableU5 = SAP_Module.PCDFData.TableU5;
                Func<PCDF.TableU5Constants, bool> predicate;
                // ISSUE: reference to a compiler-generated field
                if (Calc2012._Closure\u0024__.\u0024I84\u002D4 != null)
                {
                  // ISSUE: reference to a compiler-generated field
                  predicate = Calc2012._Closure\u0024__.\u0024I84\u002D4;
                }
                else
                {
                  // ISSUE: reference to a compiler-generated field
                  Calc2012._Closure\u0024__.\u0024I84\u002D4 = predicate = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("South"));
                }
                tableU5Constants = tableU5.Where<PCDF.TableU5Constants>(predicate).SingleOrDefault<PCDF.TableU5Constants>();
                goto default;
              }
              else
                goto default;
            case 4260797214:
              if (Operators.CompareString(str, "E/W", false) == 0)
                goto label_46;
              else
                goto default;
            default:
label_58:
              float num8 = (float) ((double) tableU5Constants.k1 * Math.Pow(Math.Sin((double) num3 * Math.PI / 360.0), 3.0) + (double) tableU5Constants.k2 * Math.Pow(Math.Sin((double) num3 * Math.PI / 360.0), 2.0) + (double) tableU5Constants.k3 * Math.Sin((double) num3 * Math.PI / 360.0));
              float num9 = (float) ((double) tableU5Constants.k4 * Math.Pow(Math.Sin((double) num3 * Math.PI / 360.0), 3.0) + (double) tableU5Constants.k5 * Math.Pow(Math.Sin((double) num3 * Math.PI / 360.0), 2.0) + (double) tableU5Constants.k6 * Math.Sin((double) num3 * Math.PI / 360.0));
              float num10 = (float) ((double) tableU5Constants.k7 * Math.Pow(Math.Sin((double) num3 * Math.PI / 360.0), 3.0) + (double) tableU5Constants.k8 * Math.Pow(Math.Sin((double) num3 * Math.PI / 360.0), 2.0) + (double) tableU5Constants.k9 * Math.Sin((double) num3 * Math.PI / 360.0) + 1.0);
              num7 = (float) ((double) num8 * Math.Pow(Math.Cos(((double) latitude - (double) num5) * Math.PI / 180.0), 2.0) + (double) num9 * Math.Cos(((double) latitude - (double) num5) * Math.PI / 180.0)) + num10;
              goto label_60;
          }
          List<PCDF.TableU5Constants> tableU5_1 = SAP_Module.PCDFData.TableU5;
          Func<PCDF.TableU5Constants, bool> predicate1;
          // ISSUE: reference to a compiler-generated field
          if (Calc2012._Closure\u0024__.\u0024I84\u002D1 != null)
          {
            // ISSUE: reference to a compiler-generated field
            predicate1 = Calc2012._Closure\u0024__.\u0024I84\u002D1;
          }
          else
          {
            // ISSUE: reference to a compiler-generated field
            Calc2012._Closure\u0024__.\u0024I84\u002D1 = predicate1 = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("NE/NW"));
          }
          tableU5Constants = tableU5_1.Where<PCDF.TableU5Constants>(predicate1).SingleOrDefault<PCDF.TableU5Constants>();
          goto label_58;
label_46:
          List<PCDF.TableU5Constants> tableU5_2 = SAP_Module.PCDFData.TableU5;
          Func<PCDF.TableU5Constants, bool> predicate2;
          // ISSUE: reference to a compiler-generated field
          if (Calc2012._Closure\u0024__.\u0024I84\u002D2 != null)
          {
            // ISSUE: reference to a compiler-generated field
            predicate2 = Calc2012._Closure\u0024__.\u0024I84\u002D2;
          }
          else
          {
            // ISSUE: reference to a compiler-generated field
            Calc2012._Closure\u0024__.\u0024I84\u002D2 = predicate2 = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("East/West"));
          }
          tableU5Constants = tableU5_2.Where<PCDF.TableU5Constants>(predicate2).SingleOrDefault<PCDF.TableU5Constants>();
          goto label_58;
label_50:
          List<PCDF.TableU5Constants> tableU5_3 = SAP_Module.PCDFData.TableU5;
          Func<PCDF.TableU5Constants, bool> predicate3;
          // ISSUE: reference to a compiler-generated field
          if (Calc2012._Closure\u0024__.\u0024I84\u002D3 != null)
          {
            // ISSUE: reference to a compiler-generated field
            predicate3 = Calc2012._Closure\u0024__.\u0024I84\u002D3;
          }
          else
          {
            // ISSUE: reference to a compiler-generated field
            Calc2012._Closure\u0024__.\u0024I84\u002D3 = predicate3 = (Func<PCDF.TableU5Constants, bool>) (bb => bb.Orientation.Equals("SE/SW"));
          }
          tableU5Constants = tableU5_3.Where<PCDF.TableU5Constants>(predicate3).SingleOrDefault<PCDF.TableU5Constants>();
          goto label_58;
        }
        else
          num7 = 1f;
label_60:
        num2 += (double) num4 * (double) num7 * (double) num6;
        this.MonthlyRadiationValues.Add(new Calc2012.RadiationValues()
        {
          kWh = 0.024f * (float) num4 * num7 * (float) num6,
          InclinedRad = num7 * (float) num4
        });
        checked { ++num1; }
      }
      while (num1 <= 12);
      List<Calc2012.RadiationValues> monthlyRadiationValues = this.MonthlyRadiationValues;
      Func<Calc2012.RadiationValues, float> selector;
      // ISSUE: reference to a compiler-generated field
      if (Calc2012._Closure\u0024__.\u0024I84\u002D5 != null)
      {
        // ISSUE: reference to a compiler-generated field
        selector = Calc2012._Closure\u0024__.\u0024I84\u002D5;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Calc2012._Closure\u0024__.\u0024I84\u002D5 = selector = (Func<Calc2012.RadiationValues, float>) (item => item.kWh);
      }
      float num11 = monthlyRadiationValues.Sum<Calc2012.RadiationValues>(selector);
      try
      {
        foreach (Calc2012.RadiationValues monthlyRadiationValue in this.MonthlyRadiationValues)
          monthlyRadiationValue.fm = 8.76f * monthlyRadiationValue.InclinedRad / num11;
      }
      finally
      {
        List<Calc2012.RadiationValues>.Enumerator enumerator;
        enumerator.Dispose();
      }
      return 0.024 * num2;
    }

    private void Photocoltaic()
    {
      float num1 = 0.0f;
      this._Calc.Energy_Requirements_9a.Box233_Count = this._House.Renewable.Photovoltaic.Photovoltaics.Length;
      checked { ++this._Calc.Fuel_costs_10a.Box252_Count; }
      this._Calc.Actual_costs_10a.Box252_Count = checked (this._Calc.Fuel_costs_10a.Box252_Count + 1);
      checked { ++this._Calc.CO2_Emissions_12a.Box269_Count; }
      checked { ++this._Calc.Primary_Energy_13a.Box269_Count; }
      this._Calc.Energy_Requirements_9b.Box333_Count = this._House.Renewable.Photovoltaic.Photovoltaics.Length;
      this._Calc.Fuel_costs_10b.Box352_Count = checked (this._Calc.Fuel_costs_10a.Box252_Count + 1);
      this._Calc.Actual_costs_10b.Box352_Count = checked (this._Calc.Fuel_costs_10a.Box252_Count + 1);
      this._Calc.CO2_Emissions_12b.Box380_Count = checked (this._Calc.CO2_Emissions_12a.Box269_Count + 1);
      this._Calc.Primary_Energy_13b.Box380_Count = checked (this._Calc.Primary_Energy_13a.Box269_Count + 1);
      string electricityTariff = this._House.MainHeating.ElectricityTariff;
      float num2;
      float num3;
      if (Operators.CompareString(electricityTariff, "10-hour tariff", false) != 0)
      {
        if (Operators.CompareString(electricityTariff, "7-hour tariff", false) != 0)
        {
          if (Operators.CompareString(electricityTariff, "24-hour tariff", false) == 0)
          {
            num2 = (float) (0.5 * this.FuelCost("standard tariff", 1, "Price") + 0.5 * this.FuelCost("electricity sold to grid", 1, "Price"));
            num3 = (float) (0.5 * this.FuelCost("standard tariff", 0, "Price") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
          }
          else
          {
            num2 = (float) (0.5 * this.FuelCost(this.GetElectricityType(0), 1, "Price") + 0.5 * this.FuelCost("electricity sold to grid", 1, "Price"));
            num3 = (float) (0.5 * this.FuelCost(this.GetElectricityType(0), 0, "Price") + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
          }
        }
        else
        {
          num2 = (float) (0.5 * (0.9 * this.FuelCost("7-hour tariff (on-peak)", 1, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 1, "Price")) + 0.5 * this.FuelCost("electricity sold to grid", 1, "Price"));
          num3 = (float) (0.5 * (0.9 * this.FuelCost("7-hour tariff (on-peak)", 0, "Price") + 0.1 * this.FuelCost("7-hour tariff (off-peak)", 0, "Price")) + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
        }
      }
      else
      {
        num2 = (float) (0.5 * (0.8 * this.FuelCost("10-hour tariff (on-peak)", 1, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 1, "Price")) + 0.5 * this.FuelCost("electricity sold to grid", 1, "Price"));
        num3 = (float) (0.5 * (0.8 * this.FuelCost("10-hour tariff (on-peak)", 0, "Price") + 0.2 * this.FuelCost("10-hour tariff (off-peak)", 0, "Price")) + 0.5 * this.FuelCost("electricity sold to grid", 0, "Price"));
      }
      this._Calc.Renewable.Photovoltaic = new Photovoltaic2012[checked (this._House.Renewable.Photovoltaic.Photovoltaics.Length - 1 + 1)];
      int num4 = checked (this._House.Renewable.Photovoltaic.Photovoltaics.Length - 1);
      int index = 0;
      while (index <= num4)
      {
        this._Calc.Renewable.Photovoltaic[index] = new Photovoltaic2012();
        this._Calc.Renewable.Photovoltaic[index].PeakPower = (double) this._House.Renewable.Photovoltaic.Photovoltaics[index].PPower;
        this._Calc.Renewable.Photovoltaic[index].Radiation = this.RadiationCalc(this._House.Renewable.Photovoltaic.Photovoltaics[index].PCOrientation, this._House.Renewable.Photovoltaic.Photovoltaics[index].PTilt, false);
        string povershading = this._House.Renewable.Photovoltaic.Photovoltaics[index].POvershading;
        if (Operators.CompareString(povershading, "Heavy", false) != 0)
        {
          if (Operators.CompareString(povershading, "Significant", false) != 0)
          {
            if (Operators.CompareString(povershading, "Modest", false) != 0)
            {
              if (Operators.CompareString(povershading, "None or very little", false) == 0)
                this._Calc.Renewable.Photovoltaic[index].Overshading = 1.0;
            }
            else
              this._Calc.Renewable.Photovoltaic[index].Overshading = 0.8;
          }
          else
            this._Calc.Renewable.Photovoltaic[index].Overshading = 0.65;
        }
        else
          this._Calc.Renewable.Photovoltaic[index].Overshading = 0.5;
        this._Calc.Renewable.Photovoltaic[index].ElectricityProduced = 0.8 * this._Calc.Renewable.Photovoltaic[index].PeakPower * this._Calc.Renewable.Photovoltaic[index].Radiation * this._Calc.Renewable.Photovoltaic[index].Overshading;
        if (string.IsNullOrEmpty(this._House.Renewable.Photovoltaic.Photovoltaics[index].FlatConnection))
          this._House.Renewable.Photovoltaic.Photovoltaics[index].FlatConnection = "";
        switch (this._House.MainHeating.SAPTableCode)
        {
          case 306:
          case 307:
          case 308:
          case 309:
          case 310:
            this._Calc.Energy_Requirements_9b.set_Box333_Parts(index, -this._Calc.Renewable.Photovoltaic[index].ElectricityProduced);
            if (!this._House.Renewable.Photovoltaic.Photovoltaics[index].FlatConnection.Equals("PV output goes to all flats in proportion to floor area"))
            {
              num1 += (float) this._Calc.Energy_Requirements_9b.get_Box333_Parts(index);
              break;
            }
            break;
          default:
            this._Calc.Energy_Requirements_9a.set_Box233_Parts(index, -this._Calc.Renewable.Photovoltaic[index].ElectricityProduced);
            if (!this._House.Renewable.Photovoltaic.Photovoltaics[index].FlatConnection.Equals("PV output goes to all flats in proportion to floor area"))
            {
              num1 += (float) this._Calc.Energy_Requirements_9a.get_Box233_Parts(index);
              break;
            }
            break;
        }
        checked { ++index; }
      }
      switch (this._House.MainHeating.SAPTableCode)
      {
        case 306:
        case 307:
        case 308:
        case 309:
        case 310:
          this._Calc.Fuel_costs_10b.set_Box352_Prices(checked (this._Calc.Fuel_costs_10b.Box352_Prices.Length - 1), (double) num2);
          this._Calc.Fuel_costs_10b.set_Box352_Costs(checked (this._Calc.Fuel_costs_10b.Box352_Costs.Length - 1), (double) num2 * (double) num1 * 0.01);
          this._Calc.Actual_costs_10b.set_Box352_Prices(checked (this._Calc.Actual_costs_10b.Box352_Prices.Length - 1), (double) num3);
          this._Calc.Actual_costs_10b.set_Box352_Costs(checked (this._Calc.Actual_costs_10b.Box352_Costs.Length - 1), (double) num3 * (double) num1 * 0.01);
          this._Calc.CO2_Emissions_12b.set_Box380_EFactors(checked (this._Calc.CO2_Emissions_12b.Box380_EFactors.Length - 1), this.FuelCost("electricity displaced from grid", 1, "Emissions"));
          this._Calc.CO2_Emissions_12b.Box380_Emissions[checked (this._Calc.CO2_Emissions_12b.Box380_Emissions.Length - 1)] = this._Calc.Energy_Requirements_9b.Box333 * this._Calc.CO2_Emissions_12b.get_Box380_EFactors(checked (this._Calc.CO2_Emissions_12b.Box380_EFactors.Length - 1));
          this._Calc.Primary_Energy_13b.set_Box380_EFactors(checked (this._Calc.Primary_Energy_13b.Box380_EFactors.Length - 1), this.FuelCost("electricity displaced from grid", 1, "Energy"));
          this._Calc.Primary_Energy_13b.set_Box380_Energy(checked (this._Calc.Primary_Energy_13b.Box380_Energy.Length - 1), this._Calc.Energy_Requirements_9b.Box333 * this._Calc.Primary_Energy_13b.get_Box380_EFactors(checked (this._Calc.Primary_Energy_13b.Box380_EFactors.Length - 1)));
          break;
        default:
          this._Calc.Fuel_costs_10a.set_Box252_Prices(checked (this._Calc.Fuel_costs_10a.Box252_Prices.Length - 1), (double) num2);
          this._Calc.Fuel_costs_10a.set_Box252_Costs(checked (this._Calc.Fuel_costs_10a.Box252_Costs.Length - 1), (double) num2 * (double) num1 * 0.01);
          this._Calc.Actual_costs_10a.set_Box252_Prices(checked (this._Calc.Actual_costs_10a.Box252_Prices.Length - 1), (double) num3);
          this._Calc.Actual_costs_10a.set_Box252_Costs(checked (this._Calc.Actual_costs_10a.Box252_Costs.Length - 1), (double) num3 * (double) num1 * 0.01);
          this._Calc.CO2_Emissions_12a.set_Box269_EFactors(checked (this._Calc.CO2_Emissions_12a.Box269_EFactors.Length - 1), this.FuelCost("electricity displaced from grid", 1, "Emissions"));
          this._Calc.CO2_Emissions_12a.Box269_Emissions[checked (this._Calc.CO2_Emissions_12a.Box269_Emissions.Length - 1)] = this._Calc.Energy_Requirements_9a.Box233 * this._Calc.CO2_Emissions_12a.get_Box269_EFactors(checked (this._Calc.CO2_Emissions_12a.Box269_EFactors.Length - 1));
          this._Calc.Primary_Energy_13a.set_Box269_EFactors(checked (this._Calc.Primary_Energy_13a.Box269_EFactors.Length - 1), this.FuelCost("electricity displaced from grid", 1, "Energy"));
          this._Calc.Primary_Energy_13a.Box269_Emissions[checked (this._Calc.Primary_Energy_13a.Box269_Emissions.Length - 1)] = this._Calc.Energy_Requirements_9a.Box233 * this._Calc.Primary_Energy_13a.get_Box269_EFactors(checked (this._Calc.Primary_Energy_13a.Box269_EFactors.Length - 1));
          break;
      }
    }

    private void AppendixF()
    {
      this._Calc.Energy_Requirements_9a.AppendixF.Cmax = 91.0 / 625.0 * (double) this._House.Water.Cylinder.Volume * ((double) this._House.Water.CPSUTemp - 48.0);
      this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M1 = (this._Calc.HeatLoss.Box39_m.M1 * this._Calc.Mean_Int_Temp.Box93_m.M1 - this._Calc.Energy_Requirements_9a.AppendixF.Cmax + 1000.0 * this._Calc.Water_heating.Box45_m.M1 / (24.0 * this._Calc.HeatLoss.Box41_m.M1) - this._Calc.Space_heating_requirement.Box95_m.M1) / this._Calc.HeatLoss.Box39_m.M1;
      this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M2 = (this._Calc.HeatLoss.Box39_m.M2 * this._Calc.Mean_Int_Temp.Box93_m.M2 - this._Calc.Energy_Requirements_9a.AppendixF.Cmax + 1000.0 * this._Calc.Water_heating.Box45_m.M2 / (24.0 * this._Calc.HeatLoss.Box41_m.M2) - this._Calc.Space_heating_requirement.Box95_m.M2) / this._Calc.HeatLoss.Box39_m.M2;
      this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M3 = (this._Calc.HeatLoss.Box39_m.M3 * this._Calc.Mean_Int_Temp.Box93_m.M3 - this._Calc.Energy_Requirements_9a.AppendixF.Cmax + 1000.0 * this._Calc.Water_heating.Box45_m.M3 / (24.0 * this._Calc.HeatLoss.Box41_m.M3) - this._Calc.Space_heating_requirement.Box95_m.M3) / this._Calc.HeatLoss.Box39_m.M3;
      this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M4 = (this._Calc.HeatLoss.Box39_m.M4 * this._Calc.Mean_Int_Temp.Box93_m.M4 - this._Calc.Energy_Requirements_9a.AppendixF.Cmax + 1000.0 * this._Calc.Water_heating.Box45_m.M4 / (24.0 * this._Calc.HeatLoss.Box41_m.M4) - this._Calc.Space_heating_requirement.Box95_m.M4) / this._Calc.HeatLoss.Box39_m.M4;
      this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M5 = (this._Calc.HeatLoss.Box39_m.M5 * this._Calc.Mean_Int_Temp.Box93_m.M5 - this._Calc.Energy_Requirements_9a.AppendixF.Cmax + 1000.0 * this._Calc.Water_heating.Box45_m.M5 / (24.0 * this._Calc.HeatLoss.Box41_m.M5) - this._Calc.Space_heating_requirement.Box95_m.M5) / this._Calc.HeatLoss.Box39_m.M5;
      this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M6 = (this._Calc.HeatLoss.Box39_m.M6 * this._Calc.Mean_Int_Temp.Box93_m.M6 - this._Calc.Energy_Requirements_9a.AppendixF.Cmax + 1000.0 * this._Calc.Water_heating.Box45_m.M6 / (24.0 * this._Calc.HeatLoss.Box41_m.M6) - this._Calc.Space_heating_requirement.Box95_m.M6) / this._Calc.HeatLoss.Box39_m.M6;
      this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M7 = (this._Calc.HeatLoss.Box39_m.M7 * this._Calc.Mean_Int_Temp.Box93_m.M7 - this._Calc.Energy_Requirements_9a.AppendixF.Cmax + 1000.0 * this._Calc.Water_heating.Box45_m.M7 / (24.0 * this._Calc.HeatLoss.Box41_m.M7) - this._Calc.Space_heating_requirement.Box95_m.M7) / this._Calc.HeatLoss.Box39_m.M7;
      this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M8 = (this._Calc.HeatLoss.Box39_m.M8 * this._Calc.Mean_Int_Temp.Box93_m.M8 - this._Calc.Energy_Requirements_9a.AppendixF.Cmax + 1000.0 * this._Calc.Water_heating.Box45_m.M8 / (24.0 * this._Calc.HeatLoss.Box41_m.M8) - this._Calc.Space_heating_requirement.Box95_m.M8) / this._Calc.HeatLoss.Box39_m.M8;
      this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M9 = (this._Calc.HeatLoss.Box39_m.M9 * this._Calc.Mean_Int_Temp.Box93_m.M9 - this._Calc.Energy_Requirements_9a.AppendixF.Cmax + 1000.0 * this._Calc.Water_heating.Box45_m.M9 / (24.0 * this._Calc.HeatLoss.Box41_m.M9) - this._Calc.Space_heating_requirement.Box95_m.M9) / this._Calc.HeatLoss.Box39_m.M9;
      this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M10 = (this._Calc.HeatLoss.Box39_m.M10 * this._Calc.Mean_Int_Temp.Box93_m.M10 - this._Calc.Energy_Requirements_9a.AppendixF.Cmax + 1000.0 * this._Calc.Water_heating.Box45_m.M10 / (24.0 * this._Calc.HeatLoss.Box41_m.M10) - this._Calc.Space_heating_requirement.Box95_m.M10) / this._Calc.HeatLoss.Box39_m.M10;
      this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M11 = (this._Calc.HeatLoss.Box39_m.M11 * this._Calc.Mean_Int_Temp.Box93_m.M11 - this._Calc.Energy_Requirements_9a.AppendixF.Cmax + 1000.0 * this._Calc.Water_heating.Box45_m.M11 / (24.0 * this._Calc.HeatLoss.Box41_m.M11) - this._Calc.Space_heating_requirement.Box95_m.M11) / this._Calc.HeatLoss.Box39_m.M11;
      this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M12 = (this._Calc.HeatLoss.Box39_m.M12 * this._Calc.Mean_Int_Temp.Box93_m.M12 - this._Calc.Energy_Requirements_9a.AppendixF.Cmax + 1000.0 * this._Calc.Water_heating.Box45_m.M12 / (24.0 * this._Calc.HeatLoss.Box41_m.M12) - this._Calc.Space_heating_requirement.Box95_m.M12) / this._Calc.HeatLoss.Box39_m.M12;
      this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M1 = this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M1 - 4.5 != 0.0 ? 0.024 * this._Calc.HeatLoss.Box39_m.M1 * this._Calc.HeatLoss.Box41_m.M1 * (this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M1 - 4.5) / (1.0 - Math.Exp(-(this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M1 - 4.5))) : 0.024 * this._Calc.HeatLoss.Box39_m.M1 * this._Calc.HeatLoss.Box41_m.M1;
      this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M2 = this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M2 - 5.0 != 0.0 ? 0.024 * this._Calc.HeatLoss.Box39_m.M2 * this._Calc.HeatLoss.Box41_m.M2 * (this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M2 - 5.0) / (1.0 - Math.Exp(-(this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M2 - 5.0))) : 0.024 * this._Calc.HeatLoss.Box39_m.M2 * this._Calc.HeatLoss.Box41_m.M2;
      this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M3 = this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M3 - 6.8 != 0.0 ? 0.024 * this._Calc.HeatLoss.Box39_m.M3 * this._Calc.HeatLoss.Box41_m.M3 * (this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M3 - 6.8) / (1.0 - Math.Exp(-(this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M3 - 6.8))) : 0.024 * this._Calc.HeatLoss.Box39_m.M3 * this._Calc.HeatLoss.Box41_m.M3;
      this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M4 = this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M4 - 8.7 != 0.0 ? 0.024 * this._Calc.HeatLoss.Box39_m.M4 * this._Calc.HeatLoss.Box41_m.M4 * (this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M4 - 8.7) / (1.0 - Math.Exp(-(this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M4 - 8.7))) : 0.024 * this._Calc.HeatLoss.Box39_m.M4 * this._Calc.HeatLoss.Box41_m.M4;
      this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M5 = this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M5 - 11.7 != 0.0 ? 0.024 * this._Calc.HeatLoss.Box39_m.M5 * this._Calc.HeatLoss.Box41_m.M5 * (this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M5 - 11.7) / (1.0 - Math.Exp(-(this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M5 - 11.7))) : 0.024 * this._Calc.HeatLoss.Box39_m.M5 * this._Calc.HeatLoss.Box41_m.M5;
      this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M6 = this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M6 - 14.6 != 0.0 ? 0.024 * this._Calc.HeatLoss.Box39_m.M6 * this._Calc.HeatLoss.Box41_m.M6 * (this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M6 - 14.6) / (1.0 - Math.Exp(-(this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M6 - 14.6))) : 0.024 * this._Calc.HeatLoss.Box39_m.M6 * this._Calc.HeatLoss.Box41_m.M6;
      this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M7 = this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M7 - 16.9 != 0.0 ? 0.024 * this._Calc.HeatLoss.Box39_m.M7 * this._Calc.HeatLoss.Box41_m.M7 * (this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M7 - 16.9) / (1.0 - Math.Exp(-(this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M7 - 16.9))) : 0.024 * this._Calc.HeatLoss.Box39_m.M7 * this._Calc.HeatLoss.Box41_m.M7;
      this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M8 = this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M8 - 16.9 != 0.0 ? 0.024 * this._Calc.HeatLoss.Box39_m.M8 * this._Calc.HeatLoss.Box41_m.M8 * (this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M8 - 16.9) / (1.0 - Math.Exp(-(this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M8 - 16.9))) : 0.024 * this._Calc.HeatLoss.Box39_m.M8 * this._Calc.HeatLoss.Box41_m.M8;
      this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M9 = this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M9 - 14.3 != 0.0 ? 0.024 * this._Calc.HeatLoss.Box39_m.M9 * this._Calc.HeatLoss.Box41_m.M9 * (this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M9 - 14.3) / (1.0 - Math.Exp(-(this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M9 - 14.3))) : 0.024 * this._Calc.HeatLoss.Box39_m.M9 * this._Calc.HeatLoss.Box41_m.M9;
      this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M10 = this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M10 - 10.8 != 0.0 ? 0.024 * this._Calc.HeatLoss.Box39_m.M10 * this._Calc.HeatLoss.Box41_m.M10 * (this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M10 - 10.8) / (1.0 - Math.Exp(-(this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M10 - 10.8))) : 0.024 * this._Calc.HeatLoss.Box39_m.M10 * this._Calc.HeatLoss.Box41_m.M10;
      this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M11 = this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M11 - 7.0 != 0.0 ? 0.024 * this._Calc.HeatLoss.Box39_m.M11 * this._Calc.HeatLoss.Box41_m.M11 * (this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M11 - 7.0) / (1.0 - Math.Exp(-(this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M11 - 7.0))) : 0.024 * this._Calc.HeatLoss.Box39_m.M11 * this._Calc.HeatLoss.Box41_m.M11;
      this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M12 = this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M12 - 4.9 != 0.0 ? 0.024 * this._Calc.HeatLoss.Box39_m.M12 * this._Calc.HeatLoss.Box41_m.M12 * (this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M12 - 4.9) / (1.0 - Math.Exp(-(this._Calc.Energy_Requirements_9a.AppendixF.Tmin.M12 - 4.9))) : 0.024 * this._Calc.HeatLoss.Box39_m.M12 * this._Calc.HeatLoss.Box41_m.M12;
      this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M1 = this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M1 / (this._Calc.Space_heating_requirement.Box98_m.M1 + this._Calc.Water_heating.Box45_m.M1);
      this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M2 = this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M2 / (this._Calc.Space_heating_requirement.Box98_m.M2 + this._Calc.Water_heating.Box45_m.M2);
      this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M3 = this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M3 / (this._Calc.Space_heating_requirement.Box98_m.M3 + this._Calc.Water_heating.Box45_m.M3);
      this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M4 = this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M4 / (this._Calc.Space_heating_requirement.Box98_m.M4 + this._Calc.Water_heating.Box45_m.M4);
      this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M5 = this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M5 / (this._Calc.Space_heating_requirement.Box98_m.M5 + this._Calc.Water_heating.Box45_m.M5);
      this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M6 = this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M6 / (this._Calc.Space_heating_requirement.Box98_m.M6 + this._Calc.Water_heating.Box45_m.M6);
      this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M7 = this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M7 / (this._Calc.Space_heating_requirement.Box98_m.M7 + this._Calc.Water_heating.Box45_m.M7);
      this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M8 = this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M8 / (this._Calc.Space_heating_requirement.Box98_m.M8 + this._Calc.Water_heating.Box45_m.M8);
      this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M9 = this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M9 / (this._Calc.Space_heating_requirement.Box98_m.M9 + this._Calc.Water_heating.Box45_m.M9);
      this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M10 = this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M10 / (this._Calc.Space_heating_requirement.Box98_m.M10 + this._Calc.Water_heating.Box45_m.M10);
      this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M11 = this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M11 / (this._Calc.Space_heating_requirement.Box98_m.M11 + this._Calc.Water_heating.Box45_m.M11);
      this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M12 = this._Calc.Energy_Requirements_9a.AppendixF.Eon_peak.M12 / (this._Calc.Space_heating_requirement.Box98_m.M12 + this._Calc.Water_heating.Box45_m.M12);
      this._Calc.Energy_Requirements_9a.AppendixF.Flow.M1 = 1.0 - this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M1;
      this._Calc.Energy_Requirements_9a.AppendixF.Flow.M2 = 1.0 - this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M2;
      this._Calc.Energy_Requirements_9a.AppendixF.Flow.M3 = 1.0 - this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M3;
      this._Calc.Energy_Requirements_9a.AppendixF.Flow.M4 = 1.0 - this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M4;
      this._Calc.Energy_Requirements_9a.AppendixF.Flow.M5 = 1.0 - this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M5;
      this._Calc.Energy_Requirements_9a.AppendixF.Flow.M6 = 1.0 - this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M6;
      this._Calc.Energy_Requirements_9a.AppendixF.Flow.M7 = 1.0 - this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M7;
      this._Calc.Energy_Requirements_9a.AppendixF.Flow.M8 = 1.0 - this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M8;
      this._Calc.Energy_Requirements_9a.AppendixF.Flow.M9 = 1.0 - this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M9;
      this._Calc.Energy_Requirements_9a.AppendixF.Flow.M10 = 1.0 - this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M10;
      this._Calc.Energy_Requirements_9a.AppendixF.Flow.M11 = 1.0 - this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M11;
      this._Calc.Energy_Requirements_9a.AppendixF.Flow.M12 = 1.0 - this._Calc.Energy_Requirements_9a.AppendixF.Fhigh.M12;
    }

    private double GetMechVentElecAmount()
    {
      string mechVent1 = this._House.Ventilation.MechVent;
      double mechVentElecAmount;
      if (Operators.CompareString(mechVent1, "Centralised whole house extract", false) != 0 && Operators.CompareString(mechVent1, "Decentralised whole house extract", false) != 0)
      {
        if (Operators.CompareString(mechVent1, "Balanced without heat recovery", false) != 0 && Operators.CompareString(mechVent1, "Balanced with heat recovery", false) != 0)
        {
          if (Operators.CompareString(mechVent1, "Positive input from outside", false) == 0)
          {
            string parameters = this._House.Ventilation.Parameters;
            if (Operators.CompareString(parameters, "SAP 2012", false) != 0)
            {
              if (Operators.CompareString(parameters, "User defined", false) == 0)
                mechVentElecAmount = Operators.CompareString(this._House.Ventilation.MVDetails.DuctingType, "Rigid", false) != 0 ? (!this._House.Ventilation.ApprovedScheme ? (double) this._House.Ventilation.MVDetails.SFP * 1.45 * 1.22 * this._Calc.Dimensions.Box5 : (double) this._House.Ventilation.MVDetails.SFP * 2.5 * 1.22 * this._Calc.Dimensions.Box5) : (!this._House.Ventilation.ApprovedScheme ? (double) this._House.Ventilation.MVDetails.SFP * 1.3 * 1.22 * this._Calc.Dimensions.Box5 : (double) this._House.Ventilation.MVDetails.SFP * 2.5 * 1.22 * this._Calc.Dimensions.Box5);
            }
            else
              mechVentElecAmount = 2.44 * this._Calc.Dimensions.Box5;
          }
        }
        else
        {
          string parameters = this._House.Ventilation.Parameters;
          if (Operators.CompareString(parameters, "SAP 2012", false) != 0)
          {
            if (Operators.CompareString(parameters, "Database", false) != 0)
            {
              if (Operators.CompareString(parameters, "User defined", false) == 0)
              {
                float num;
                if (this._House.Ventilation.ApprovedScheme)
                {
                  PCDF.InUseMech inUseMech = this.InUseMech("3");
                  num = (uint) Operators.CompareString(this._House.Ventilation.MVDetails.DuctingType, "Flexible", false) <= 0U ? (float) Conversion.Val(inUseMech.FlexibleDuctsAdj2) : (float) Conversion.Val(inUseMech.RigidDuctsAdj2);
                }
                else
                  num = Operators.CompareString(this._House.Ventilation.MVDetails.DuctingType, "Flexible", false) == 0 ? 1.7f : 1.4f;
                mechVentElecAmount = (double) this._House.Ventilation.MVDetails.SFP * 2.44 * this._Calc.Ventilation.Box23a * this._Calc.Dimensions.Box5 * (double) num;
              }
            }
            else
            {
              object Instance = (object) this.Products321(Conversions.ToString(this._House.Ventilation.ProductID));
              PCDF.Products321_Sub products321Sub = this.Products321Sub(Conversions.ToString(this._House.Ventilation.ProductID), Conversions.ToString(this._House.Ventilation.WetRooms));
              if (products321Sub == null)
                throw new ArgumentException("Wet room input Error", Conversions.ToString(this._House.Ventilation.WetRooms));
              float num;
              if (this._House.Ventilation.ApprovedScheme)
              {
                PCDF.InUseMech inUseMech = this.InUseMech("3");
                num = !Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(Instance, (System.Type) null, "DuctingType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 2, false) ? (float) Conversion.Val(inUseMech.FlexibleDuctsAdj2) : (float) Conversion.Val(inUseMech.RigidDuctsAdj2);
              }
              else
              {
                object Left = NewLateBinding.LateGet(Instance, (System.Type) null, "DuctingType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
                if (Operators.ConditionalCompareObjectEqual(Left, (object) 1, false))
                  num = 1.7f;
                else if (Operators.ConditionalCompareObjectEqual(Left, (object) 2, false))
                  num = 1.4f;
              }
              mechVentElecAmount = Conversion.Val(products321Sub.SFP) * 2.44 * this._Calc.Ventilation.Box23a * this._Calc.Dimensions.Box5 * (double) num;
            }
          }
          else
            mechVentElecAmount = 12.2 * this._Calc.Ventilation.Box23a * this._Calc.Dimensions.Box5;
        }
      }
      else
      {
        string parameters = this._House.Ventilation.Parameters;
        if (Operators.CompareString(parameters, "SAP 2012", false) != 0)
        {
          if (Operators.CompareString(parameters, "User defined", false) != 0)
          {
            if (Operators.CompareString(parameters, "Database", false) == 0)
            {
              string mechVent2 = this._House.Ventilation.MechVent;
              if (Operators.CompareString(mechVent2, "Balanced with heat recovery", false) != 0 && Operators.CompareString(mechVent2, "Centralised whole house extract", false) != 0)
              {
                if (Operators.CompareString(mechVent2, "Decentralised whole house extract", false) == 0)
                {
                  object Instance = (object) this.Products322(Conversions.ToString(this._House.Ventilation.ProductID));
                  float num1;
                  if (this._House.Ventilation.ApprovedScheme)
                  {
                    PCDF.InUseMech inUseMech = this.InUseMech("2");
                    float num2 = !Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(Instance, (System.Type) null, "DuctingType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 2, false) ? (float) Conversion.Val(inUseMech.FlexibleDuctsAdj2) : (float) Conversion.Val(inUseMech.RigidDuctsAdj2);
                    num1 = (float) (((double) this._House.Ventilation.Decentralised.KSPF1 * 13.0 * (double) num2 * (double) this._House.Ventilation.Decentralised.KTP1 + (double) this._House.Ventilation.Decentralised.KSPF2 * 13.0 * (double) num2 * (double) this._House.Ventilation.Decentralised.KTP2 + (double) this._House.Ventilation.Decentralised.KSPF3 * 13.0 * Conversion.Val(inUseMech.NoDuctsAdj2) * (double) this._House.Ventilation.Decentralised.KTP3 + (double) this._House.Ventilation.Decentralised.OSPF1 * 8.0 * (double) num2 * (double) this._House.Ventilation.Decentralised.OTP1 + (double) this._House.Ventilation.Decentralised.OSPF2 * 8.0 * (double) num2 * (double) this._House.Ventilation.Decentralised.OTP2 + (double) this._House.Ventilation.Decentralised.OSPF3 * 8.0 * Conversion.Val(inUseMech.NoDuctsAdj2) * (double) this._House.Ventilation.Decentralised.OTP3) / (((double) this._House.Ventilation.Decentralised.KTP1 + (double) this._House.Ventilation.Decentralised.KTP2 + (double) this._House.Ventilation.Decentralised.KTP3) * 13.0 + ((double) this._House.Ventilation.Decentralised.OTP1 + (double) this._House.Ventilation.Decentralised.OTP2 + (double) this._House.Ventilation.Decentralised.OTP3) * 8.0));
                  }
                  else
                  {
                    float num3 = !Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(Instance, (System.Type) null, "DuctingType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) "2", false) ? 1.45f : 1.3f;
                    num1 = (float) (((double) this._House.Ventilation.Decentralised.KSPF1 * 13.0 * (double) num3 * (double) this._House.Ventilation.Decentralised.KTP1 + (double) this._House.Ventilation.Decentralised.KSPF2 * 13.0 * (double) num3 * (double) this._House.Ventilation.Decentralised.KTP2 + (double) this._House.Ventilation.Decentralised.KSPF3 * 13.0 * 1.15 * (double) this._House.Ventilation.Decentralised.KTP3 + (double) this._House.Ventilation.Decentralised.OSPF1 * 8.0 * (double) num3 * (double) this._House.Ventilation.Decentralised.OTP1 + (double) this._House.Ventilation.Decentralised.OSPF2 * 8.0 * (double) num3 * (double) this._House.Ventilation.Decentralised.OTP2 + (double) this._House.Ventilation.Decentralised.OSPF3 * 8.0 * 1.15 * (double) this._House.Ventilation.Decentralised.OTP3) / (((double) this._House.Ventilation.Decentralised.KTP1 + (double) this._House.Ventilation.Decentralised.KTP2 + (double) this._House.Ventilation.Decentralised.KTP3) * 13.0 + ((double) this._House.Ventilation.Decentralised.OTP1 + (double) this._House.Ventilation.Decentralised.OTP2 + (double) this._House.Ventilation.Decentralised.OTP3) * 8.0));
                  }
                  mechVentElecAmount = 1.22 * (double) num1 * this._Calc.Dimensions.Box5;
                }
              }
              else
              {
                float num = !Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet((object) this.Products321(Conversions.ToString(this._House.Ventilation.ProductID)), (System.Type) null, "DuctingType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) "2", false) ? (!this._House.Ventilation.ApprovedScheme ? 1.7f : 1.6f) : (!this._House.Ventilation.ApprovedScheme ? 1.4f : 1.3f);
                float single = Conversions.ToSingle((this.Products321Sub(Conversions.ToString(this._House.Ventilation.ProductID), Conversions.ToString(this._House.Ventilation.WetRooms)) ?? throw new ArgumentException("Wet room input Error", Conversions.ToString(this._House.Ventilation.WetRooms))).SFP);
                mechVentElecAmount = 1.22 * (double) single * this._Calc.Dimensions.Box5 * (double) num;
                if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 && this._House.MainHeating.SGroup.Contains("heat pumps") && Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "Heat_Source", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 4.0)
                  mechVentElecAmount = this._Calc.Dimensions.Box5 * (double) single * (double) num * this._Calc.Ventilation.Box23a * this._Calc.HeatLoss.HPCalc.Rhp * (8760.0 - this._Calc.HeatLoss.HPCalc.hhp) / 3600.0;
              }
            }
          }
          else if (Operators.CompareString(this._House.Ventilation.MechVent, "Decentralised whole house extract", false) == 0)
          {
            float num4;
            if (this._House.Ventilation.ApprovedScheme)
            {
              PCDF.InUseMech inUseMech = this.InUseMech("2");
              float num5 = Operators.CompareString(this._House.Ventilation.MVDetails.DuctingType, "Rigid", false) != 0 ? (float) Conversion.Val(inUseMech.FlexibleDuctsAdj2) : (float) Conversion.Val(inUseMech.RigidDuctsAdj2);
              num4 = (float) (((double) this._House.Ventilation.Decentralised.KSPF1 * 13.0 * (double) num5 * (double) this._House.Ventilation.Decentralised.KTP1 + (double) this._House.Ventilation.Decentralised.KSPF2 * 13.0 * (double) num5 * (double) this._House.Ventilation.Decentralised.KTP2 + (double) this._House.Ventilation.Decentralised.KSPF3 * 13.0 * Conversion.Val(inUseMech.NoDuctsAdj2) * (double) this._House.Ventilation.Decentralised.KTP3 + (double) this._House.Ventilation.Decentralised.OSPF1 * 8.0 * (double) num5 * (double) this._House.Ventilation.Decentralised.OTP1 + (double) this._House.Ventilation.Decentralised.OSPF2 * 8.0 * (double) num5 * (double) this._House.Ventilation.Decentralised.OTP2 + (double) this._House.Ventilation.Decentralised.OSPF3 * 8.0 * Conversion.Val(inUseMech.NoDuctsAdj2) * (double) this._House.Ventilation.Decentralised.OTP3) / (((double) this._House.Ventilation.Decentralised.KTP1 + (double) this._House.Ventilation.Decentralised.KTP2 + (double) this._House.Ventilation.Decentralised.KTP3) * 13.0 + ((double) this._House.Ventilation.Decentralised.OTP1 + (double) this._House.Ventilation.Decentralised.OTP2 + (double) this._House.Ventilation.Decentralised.OTP3) * 8.0));
            }
            else
            {
              float num6 = Operators.CompareString(this._House.Ventilation.MVDetails.DuctingType, "Rigid", false) != 0 ? 1.45f : 1.3f;
              num4 = (float) (((double) this._House.Ventilation.Decentralised.KSPF1 * 13.0 * (double) num6 * (double) this._House.Ventilation.Decentralised.KTP1 + (double) this._House.Ventilation.Decentralised.KSPF2 * 13.0 * (double) num6 * (double) this._House.Ventilation.Decentralised.KTP2 + (double) this._House.Ventilation.Decentralised.KSPF3 * 13.0 * 1.15 * (double) this._House.Ventilation.Decentralised.KTP3 + (double) this._House.Ventilation.Decentralised.OSPF1 * 8.0 * (double) num6 * (double) this._House.Ventilation.Decentralised.OTP1 + (double) this._House.Ventilation.Decentralised.OSPF2 * 8.0 * (double) num6 * (double) this._House.Ventilation.Decentralised.OTP2 + (double) this._House.Ventilation.Decentralised.OSPF3 * 8.0 * 1.15 * (double) this._House.Ventilation.Decentralised.OTP3) / (((double) this._House.Ventilation.Decentralised.KTP1 + (double) this._House.Ventilation.Decentralised.KTP2 + (double) this._House.Ventilation.Decentralised.KTP3) * 13.0 + ((double) this._House.Ventilation.Decentralised.OTP1 + (double) this._House.Ventilation.Decentralised.OTP2 + (double) this._House.Ventilation.Decentralised.OTP3) * 8.0));
            }
            mechVentElecAmount = 1.22 * (double) num4 * this._Calc.Dimensions.Box5;
          }
          else if (Operators.CompareString(this._House.Ventilation.MechVent, "Centralised whole house extract", false) == 0)
          {
            float num;
            if (this._House.Ventilation.ApprovedScheme)
            {
              PCDF.InUseMech inUseMech = this.InUseMech("1");
              num = Operators.CompareString(this._House.Ventilation.MVDetails.DuctingType, "Rigid", false) != 0 ? (float) Conversion.Val(inUseMech.FlexibleDuctsAdj2) : (float) Conversion.Val(inUseMech.RigidDuctsAdj2);
            }
            else
              num = Operators.CompareString(this._House.Ventilation.MVDetails.DuctingType, "Rigid", false) != 0 ? 1.7f : 1.4f;
            mechVentElecAmount = 1.22 * (double) (this._House.Ventilation.MVDetails.SFP * num) * this._Calc.Dimensions.Box5;
          }
        }
        else
          mechVentElecAmount = 2.44 * this._Calc.Dimensions.Box5;
      }
      return mechVentElecAmount;
    }

    private void Ventilation()
    {
      if (this.IsHeatDemand)
      {
        // ISSUE: variable of a compiler-generated type
        Calc2012._Closure\u0024__90\u002D0 closure900_1;
        // ISSUE: object of a compiler-generated type is created
        // ISSUE: variable of a compiler-generated type
        Calc2012._Closure\u0024__90\u002D0 closure900_2 = new Calc2012._Closure\u0024__90\u002D0(closure900_1);
        // ISSUE: reference to a compiler-generated field
        closure900_2.\u0024VB\u0024Local_area = "";
        // ISSUE: reference to a compiler-generated field
        closure900_2.\u0024VB\u0024Local_district = "";
        if (this._House.Address.PostCost != null)
        {
          string postCost = this._House.Address.PostCost;
          int index = 0;
          while (index < postCost.Length)
          {
            char ch = postCost[index];
            bool flag;
            int result;
            if (!ch.Equals((object) " ") && !(flag & !int.TryParse(Conversions.ToString(ch), out result)))
            {
              if (int.TryParse(Conversions.ToString(ch), out result))
              {
                flag = true;
                // ISSUE: reference to a compiler-generated field
                closure900_2.\u0024VB\u0024Local_district += Conversions.ToString(ch);
              }
              else
              {
                // ISSUE: reference to a compiler-generated field
                closure900_2.\u0024VB\u0024Local_area += Conversions.ToString(ch);
              }
              checked { ++index; }
            }
            else
              break;
          }
          // ISSUE: reference to a compiler-generated method
          this.RegionalURow = SAP_Module.PCDFData.PostCodeTable.Where<PCDF.RegionalData>(new Func<PCDF.RegionalData, bool>(closure900_2._Lambda\u0024__0)).SingleOrDefault<PCDF.RegionalData>();
        }
        else
          this.RegionalURow = SAP_Module.PCDFData.AppendixU.Where<PCDF.RegionalData>((Func<PCDF.RegionalData, bool>) (b => b.Region.ToUpper().Equals(this._House.Location.ToUpper()))).SingleOrDefault<PCDF.RegionalData>();
      }
      else if (!this.IsRHICalc)
      {
        List<PCDF.RegionalData> appendixU = SAP_Module.PCDFData.AppendixU;
        Func<PCDF.RegionalData, bool> predicate;
        // ISSUE: reference to a compiler-generated field
        if (Calc2012._Closure\u0024__.\u0024I90\u002D2 != null)
        {
          // ISSUE: reference to a compiler-generated field
          predicate = Calc2012._Closure\u0024__.\u0024I90\u002D2;
        }
        else
        {
          // ISSUE: reference to a compiler-generated field
          Calc2012._Closure\u0024__.\u0024I90\u002D2 = predicate = (Func<PCDF.RegionalData, bool>) (b => b.ClimateRegion.Equals(0));
        }
        this.RegionalURow = appendixU.Where<PCDF.RegionalData>(predicate).SingleOrDefault<PCDF.RegionalData>();
      }
      else
        this.RegionalURow = SAP_Module.PCDFData.AppendixU.Where<PCDF.RegionalData>((Func<PCDF.RegionalData, bool>) (bb => bb.Region.ToUpper().Equals(this._House.Location.ToUpper()))).SingleOrDefault<PCDF.RegionalData>();
      if (this.RegionalURow == null)
      {
        List<PCDF.RegionalData> appendixU = SAP_Module.PCDFData.AppendixU;
        Func<PCDF.RegionalData, bool> predicate;
        // ISSUE: reference to a compiler-generated field
        if (Calc2012._Closure\u0024__.\u0024I90\u002D4 != null)
        {
          // ISSUE: reference to a compiler-generated field
          predicate = Calc2012._Closure\u0024__.\u0024I90\u002D4;
        }
        else
        {
          // ISSUE: reference to a compiler-generated field
          Calc2012._Closure\u0024__.\u0024I90\u002D4 = predicate = (Func<PCDF.RegionalData, bool>) (b => b.ClimateRegion.Equals(0));
        }
        this.RegionalURow = appendixU.Where<PCDF.RegionalData>(predicate).SingleOrDefault<PCDF.RegionalData>();
      }
      this._Calc.Ventilation.Box22_m.M1 = this.RegionalURow.TableU2.M1;
      this._Calc.Ventilation.Box22_m.M2 = this.RegionalURow.TableU2.M2;
      this._Calc.Ventilation.Box22_m.M3 = this.RegionalURow.TableU2.M3;
      this._Calc.Ventilation.Box22_m.M4 = this.RegionalURow.TableU2.M4;
      this._Calc.Ventilation.Box22_m.M5 = this.RegionalURow.TableU2.M5;
      this._Calc.Ventilation.Box22_m.M6 = this.RegionalURow.TableU2.M6;
      this._Calc.Ventilation.Box22_m.M7 = this.RegionalURow.TableU2.M7;
      this._Calc.Ventilation.Box22_m.M8 = this.RegionalURow.TableU2.M8;
      this._Calc.Ventilation.Box22_m.M9 = this.RegionalURow.TableU2.M9;
      this._Calc.Ventilation.Box22_m.M10 = this.RegionalURow.TableU2.M10;
      this._Calc.Ventilation.Box22_m.M11 = this.RegionalURow.TableU2.M11;
      this._Calc.Ventilation.Box22_m.M12 = this.RegionalURow.TableU2.M12;
      if (this._House.Renewable.Special.Special != null && this._House.Renewable.Special.Include)
      {
        int num = checked (this._House.Renewable.Special.Special.Length - 1);
        int index = 0;
        while (index <= num)
        {
          if (this._House.Renewable.Special.Special[index].IncludeMonthly)
          {
            this._Calc.Ventilation.Box25_m.M1 = (double) this._House.Renewable.Special.Special[index].M1;
            this._Calc.Ventilation.Box25_m.M2 = (double) this._House.Renewable.Special.Special[index].M2;
            this._Calc.Ventilation.Box25_m.M3 = (double) this._House.Renewable.Special.Special[index].M3;
            this._Calc.Ventilation.Box25_m.M4 = (double) this._House.Renewable.Special.Special[index].M4;
            this._Calc.Ventilation.Box25_m.M5 = (double) this._House.Renewable.Special.Special[index].M5;
            this._Calc.Ventilation.Box25_m.M6 = (double) this._House.Renewable.Special.Special[index].M6;
            this._Calc.Ventilation.Box25_m.M7 = (double) this._House.Renewable.Special.Special[index].M7;
            this._Calc.Ventilation.Box25_m.M8 = (double) this._House.Renewable.Special.Special[index].M8;
            this._Calc.Ventilation.Box25_m.M9 = (double) this._House.Renewable.Special.Special[index].M9;
            this._Calc.Ventilation.Box25_m.M10 = (double) this._House.Renewable.Special.Special[index].M10;
            this._Calc.Ventilation.Box25_m.M11 = (double) this._House.Renewable.Special.Special[index].M11;
            this._Calc.Ventilation.Box25_m.M12 = (double) this._House.Renewable.Special.Special[index].M12;
            string mechVent = this._House.Ventilation.MechVent;
            if (Operators.CompareString(mechVent, "Natural ventilation", false) == 0 || Operators.CompareString(mechVent, "Positive input from loft", false) == 0)
              return;
            this._Calc.Ventilation.Box23a = 0.5;
            return;
          }
          checked { ++index; }
        }
      }
      this._Calc.Ventilation.Box6a = (double) checked (this._House.Ventilation.Chimneys * 40);
      this._Calc.Ventilation.Box6b = (double) checked (this._House.Ventilation.Flues * 20);
      this._Calc.Ventilation.Box7a = (double) checked (this._House.Ventilation.Fans * 10);
      this._Calc.Ventilation.Box7b = (double) checked (this._House.Ventilation.Vents * 10);
      this._Calc.Ventilation.Box7c = (double) checked (this._House.Ventilation.Fires * 40);
      this._Calc.Ventilation.Box8 = (this._Calc.Ventilation.Box6a + this._Calc.Ventilation.Box6b + this._Calc.Ventilation.Box7a + this._Calc.Ventilation.Box7b + this._Calc.Ventilation.Box7c) / this._Calc.Dimensions.Box5;
      string pressure = this._House.Ventilation.Pressure;
      if (Operators.CompareString(pressure, "Calculated", false) != 0)
      {
        if (Operators.CompareString(pressure, "Assumed", false) != 0)
        {
          if (Operators.CompareString(pressure, "As built", false) != 0)
          {
            if (Operators.CompareString(pressure, "As designed", false) == 0)
            {
              this._Calc.Ventilation.Box17 = (double) this._House.Ventilation.DesignAir;
              this._Calc.Ventilation.Box18 = this._Calc.Ventilation.Box17 / 20.0 + this._Calc.Ventilation.Box8;
            }
          }
          else
          {
            this._Calc.Ventilation.Box17 = (double) this._House.Ventilation.MeasuredAir;
            if (this._House.Ventilation.AveragePerm)
            {
              Ventilation2012 ventilation;
              double num = (ventilation = this._Calc.Ventilation).Box17 + 2.0;
              ventilation.Box17 = num;
            }
            this._Calc.Ventilation.Box18 = this._Calc.Ventilation.Box17 / 20.0 + this._Calc.Ventilation.Box8;
          }
        }
        else
        {
          this._Calc.Ventilation.Box17 = (double) this._House.Ventilation.AssumedAir;
          this._Calc.Ventilation.Box18 = this._Calc.Ventilation.Box17 / 20.0 + this._Calc.Ventilation.Box8;
        }
      }
      else
      {
        if (this._House.MaxStoreys == 0)
          this._House.MaxStoreys = this._House.Dims.Length;
        this._Calc.Ventilation.Box9 = (double) this._House.MaxStoreys;
        this._Calc.Ventilation.Box10 = (this._Calc.Ventilation.Box9 - 1.0) * 0.1;
        this._Calc.Ventilation.Box11 = Operators.CompareString(this._House.Ventilation.Infiltration.Construction, "Masonary", false) != 0 ? 0.25 : 0.35;
        string floor = this._House.Ventilation.Infiltration.Floor;
        if (Operators.CompareString(floor, "Non timber floor", false) != 0)
        {
          if (Operators.CompareString(floor, "Suspended timber floor - Unsealed", false) != 0)
          {
            if (Operators.CompareString(floor, "Suspended timber floor - Sealed", false) == 0)
              this._Calc.Ventilation.Box12 = 0.1;
          }
          else
            this._Calc.Ventilation.Box12 = 0.2;
        }
        else
          this._Calc.Ventilation.Box12 = 0.0;
        this._Calc.Ventilation.Box13 = Operators.CompareString(this._House.Ventilation.Infiltration.Lobby, "No Draught Lobby", false) != 0 ? 0.0 : 0.05;
        this._Calc.Ventilation.Box14 = (double) this._House.Ventilation.Infiltration.DraguthP;
        this._Calc.Ventilation.Box15 = 0.25 - 0.2 * this._Calc.Ventilation.Box14 / 100.0;
        this._Calc.Ventilation.Box16 = this._Calc.Ventilation.Box8 + this._Calc.Ventilation.Box10 + this._Calc.Ventilation.Box11 + this._Calc.Ventilation.Box12 + this._Calc.Ventilation.Box13 + this._Calc.Ventilation.Box15;
        this._Calc.Ventilation.Box18 = this._Calc.Ventilation.Box16;
      }
      this._Calc.Ventilation.Box19 = (double) this._House.Ventilation.Shelter;
      this._Calc.Ventilation.Box20 = 1.0 - 0.075 * this._Calc.Ventilation.Box19;
      this._Calc.Ventilation.Box21 = this._Calc.Ventilation.Box18 * this._Calc.Ventilation.Box20;
      this._Calc.Ventilation.Box22 = this._Calc.Ventilation.Box22_m.M1 + this._Calc.Ventilation.Box22_m.M2 + this._Calc.Ventilation.Box22_m.M3 + this._Calc.Ventilation.Box22_m.M4 + this._Calc.Ventilation.Box22_m.M5 + this._Calc.Ventilation.Box22_m.M6 + this._Calc.Ventilation.Box22_m.M7 + this._Calc.Ventilation.Box22_m.M8 + this._Calc.Ventilation.Box22_m.M9 + this._Calc.Ventilation.Box22_m.M10 + this._Calc.Ventilation.Box22_m.M11 + this._Calc.Ventilation.Box22_m.M12;
      this._Calc.Ventilation.Box22a_m.M1 = this._Calc.Ventilation.Box22_m.M1 / 4.0;
      this._Calc.Ventilation.Box22a_m.M2 = this._Calc.Ventilation.Box22_m.M2 / 4.0;
      this._Calc.Ventilation.Box22a_m.M3 = this._Calc.Ventilation.Box22_m.M3 / 4.0;
      this._Calc.Ventilation.Box22a_m.M4 = this._Calc.Ventilation.Box22_m.M4 / 4.0;
      this._Calc.Ventilation.Box22a_m.M5 = this._Calc.Ventilation.Box22_m.M5 / 4.0;
      this._Calc.Ventilation.Box22a_m.M6 = this._Calc.Ventilation.Box22_m.M6 / 4.0;
      this._Calc.Ventilation.Box22a_m.M7 = this._Calc.Ventilation.Box22_m.M7 / 4.0;
      this._Calc.Ventilation.Box22a_m.M8 = this._Calc.Ventilation.Box22_m.M8 / 4.0;
      this._Calc.Ventilation.Box22a_m.M9 = this._Calc.Ventilation.Box22_m.M9 / 4.0;
      this._Calc.Ventilation.Box22a_m.M10 = this._Calc.Ventilation.Box22_m.M10 / 4.0;
      this._Calc.Ventilation.Box22a_m.M11 = this._Calc.Ventilation.Box22_m.M11 / 4.0;
      this._Calc.Ventilation.Box22a_m.M12 = this._Calc.Ventilation.Box22_m.M12 / 4.0;
      this._Calc.Ventilation.Box22a = this._Calc.Ventilation.Box22a_m.M1 + this._Calc.Ventilation.Box22a_m.M2 + this._Calc.Ventilation.Box22a_m.M3 + this._Calc.Ventilation.Box22a_m.M4 + this._Calc.Ventilation.Box22a_m.M5 + this._Calc.Ventilation.Box22a_m.M6 + this._Calc.Ventilation.Box22a_m.M7 + this._Calc.Ventilation.Box22a_m.M8 + this._Calc.Ventilation.Box22a_m.M9 + this._Calc.Ventilation.Box22a_m.M10 + this._Calc.Ventilation.Box22a_m.M11 + this._Calc.Ventilation.Box22a_m.M12;
      this._Calc.Ventilation.Box22b_m.M1 = this._Calc.Ventilation.Box22a_m.M1 * this._Calc.Ventilation.Box21;
      this._Calc.Ventilation.Box22b_m.M2 = this._Calc.Ventilation.Box22a_m.M2 * this._Calc.Ventilation.Box21;
      this._Calc.Ventilation.Box22b_m.M3 = this._Calc.Ventilation.Box22a_m.M3 * this._Calc.Ventilation.Box21;
      this._Calc.Ventilation.Box22b_m.M4 = this._Calc.Ventilation.Box22a_m.M4 * this._Calc.Ventilation.Box21;
      this._Calc.Ventilation.Box22b_m.M5 = this._Calc.Ventilation.Box22a_m.M5 * this._Calc.Ventilation.Box21;
      this._Calc.Ventilation.Box22b_m.M6 = this._Calc.Ventilation.Box22a_m.M6 * this._Calc.Ventilation.Box21;
      this._Calc.Ventilation.Box22b_m.M7 = this._Calc.Ventilation.Box22a_m.M7 * this._Calc.Ventilation.Box21;
      this._Calc.Ventilation.Box22b_m.M8 = this._Calc.Ventilation.Box22a_m.M8 * this._Calc.Ventilation.Box21;
      this._Calc.Ventilation.Box22b_m.M9 = this._Calc.Ventilation.Box22a_m.M9 * this._Calc.Ventilation.Box21;
      this._Calc.Ventilation.Box22b_m.M10 = this._Calc.Ventilation.Box22a_m.M10 * this._Calc.Ventilation.Box21;
      this._Calc.Ventilation.Box22b_m.M11 = this._Calc.Ventilation.Box22a_m.M11 * this._Calc.Ventilation.Box21;
      this._Calc.Ventilation.Box22b_m.M12 = this._Calc.Ventilation.Box22a_m.M12 * this._Calc.Ventilation.Box21;
      this._Calc.Ventilation.Box22b = this._Calc.Ventilation.Box22b_m.M1 + this._Calc.Ventilation.Box22b_m.M2 + this._Calc.Ventilation.Box22b_m.M3 + this._Calc.Ventilation.Box22b_m.M4 + this._Calc.Ventilation.Box22b_m.M5 + this._Calc.Ventilation.Box22b_m.M6 + this._Calc.Ventilation.Box22b_m.M7 + this._Calc.Ventilation.Box22b_m.M8 + this._Calc.Ventilation.Box22b_m.M9 + this._Calc.Ventilation.Box22b_m.M10 + this._Calc.Ventilation.Box22b_m.M11 + this._Calc.Ventilation.Box22b_m.M12;
      string mechVent1 = this._House.Ventilation.MechVent;
      if (Operators.CompareString(mechVent1, "Natural ventilation", false) != 0 && Operators.CompareString(mechVent1, "Positive input from loft", false) != 0)
        this._Calc.Ventilation.Box23a = 0.5;
      if (this._Calc.Ventilation.Box23b == 0.0)
        this._Calc.Ventilation.Box23b = this._Calc.Ventilation.Box23a;
      string mechVent2 = this._House.Ventilation.MechVent;
      // ISSUE: reference to a compiler-generated method
      switch (\u003CPrivateImplementationDetails\u003E.ComputeStringHash(mechVent2))
      {
        case 625191264:
          if (Operators.CompareString(mechVent2, "Balanced without heat recovery", false) == 0)
          {
            this._Calc.Ventilation.Box24b_m.M1 = this._Calc.Ventilation.Box22b_m.M1 + this._Calc.Ventilation.Box23b;
            this._Calc.Ventilation.Box24b_m.M2 = this._Calc.Ventilation.Box22b_m.M2 + this._Calc.Ventilation.Box23b;
            this._Calc.Ventilation.Box24b_m.M3 = this._Calc.Ventilation.Box22b_m.M3 + this._Calc.Ventilation.Box23b;
            this._Calc.Ventilation.Box24b_m.M4 = this._Calc.Ventilation.Box22b_m.M4 + this._Calc.Ventilation.Box23b;
            this._Calc.Ventilation.Box24b_m.M5 = this._Calc.Ventilation.Box22b_m.M5 + this._Calc.Ventilation.Box23b;
            this._Calc.Ventilation.Box24b_m.M6 = this._Calc.Ventilation.Box22b_m.M6 + this._Calc.Ventilation.Box23b;
            this._Calc.Ventilation.Box24b_m.M7 = this._Calc.Ventilation.Box22b_m.M7 + this._Calc.Ventilation.Box23b;
            this._Calc.Ventilation.Box24b_m.M8 = this._Calc.Ventilation.Box22b_m.M8 + this._Calc.Ventilation.Box23b;
            this._Calc.Ventilation.Box24b_m.M9 = this._Calc.Ventilation.Box22b_m.M9 + this._Calc.Ventilation.Box23b;
            this._Calc.Ventilation.Box24b_m.M10 = this._Calc.Ventilation.Box22b_m.M10 + this._Calc.Ventilation.Box23b;
            this._Calc.Ventilation.Box24b_m.M11 = this._Calc.Ventilation.Box22b_m.M11 + this._Calc.Ventilation.Box23b;
            this._Calc.Ventilation.Box24b_m.M12 = this._Calc.Ventilation.Box22b_m.M12 + this._Calc.Ventilation.Box23b;
            this._Calc.Ventilation.Box25_m.M1 = this._Calc.Ventilation.Box24b_m.M1;
            this._Calc.Ventilation.Box25_m.M2 = this._Calc.Ventilation.Box24b_m.M2;
            this._Calc.Ventilation.Box25_m.M3 = this._Calc.Ventilation.Box24b_m.M3;
            this._Calc.Ventilation.Box25_m.M4 = this._Calc.Ventilation.Box24b_m.M4;
            this._Calc.Ventilation.Box25_m.M5 = this._Calc.Ventilation.Box24b_m.M5;
            this._Calc.Ventilation.Box25_m.M6 = this._Calc.Ventilation.Box24b_m.M6;
            this._Calc.Ventilation.Box25_m.M7 = this._Calc.Ventilation.Box24b_m.M7;
            this._Calc.Ventilation.Box25_m.M8 = this._Calc.Ventilation.Box24b_m.M8;
            this._Calc.Ventilation.Box25_m.M9 = this._Calc.Ventilation.Box24b_m.M9;
            this._Calc.Ventilation.Box25_m.M10 = this._Calc.Ventilation.Box24b_m.M10;
            this._Calc.Ventilation.Box25_m.M11 = this._Calc.Ventilation.Box24b_m.M11;
            this._Calc.Ventilation.Box25_m.M12 = this._Calc.Ventilation.Box24b_m.M12;
            goto default;
          }
          else
            goto default;
        case 918396964:
          if (Operators.CompareString(mechVent2, "Decentralised whole house extract", false) == 0)
            break;
          goto default;
        case 1101494137:
          if (Operators.CompareString(mechVent2, "Centralised whole house extract", false) == 0)
            break;
          goto default;
        case 2533751361:
          if (Operators.CompareString(mechVent2, "Positive input from loft", false) == 0)
            goto label_84;
          else
            goto default;
        case 3225008057:
          if (Operators.CompareString(mechVent2, "Positive input from outside", false) == 0)
            break;
          goto default;
        case 3236691049:
          if (Operators.CompareString(mechVent2, "Natural ventilation", false) == 0)
            goto label_84;
          else
            goto default;
        case 3255421954:
          if (Operators.CompareString(mechVent2, "Balanced with heat recovery", false) == 0)
          {
            string parameters = this._House.Ventilation.Parameters;
            if (Operators.CompareString(parameters, "SAP 2012", false) != 0)
            {
              if (Operators.CompareString(parameters, "User defined", false) != 0)
              {
                if (Operators.CompareString(parameters, "Database", false) == 0)
                {
                  this._Calc.Ventilation.Box23c = Conversion.Val(this.Products321Sub(Conversions.ToString(this._House.Ventilation.ProductID), Conversions.ToString(this._House.Ventilation.WetRooms)).HeatExchangerEfficiency);
                  if (Operators.CompareString(this._House.Ventilation.DuctType, "Insulation", false) == 0)
                  {
                    if (this._House.Ventilation.ApprovedScheme)
                      this._Calc.Ventilation.Box23c *= Conversion.Val(this.InUseMech("3").InsulatedDuctsAdj2);
                    else
                      this._Calc.Ventilation.Box23c *= 0.85;
                  }
                  else if (this._House.Ventilation.ApprovedScheme)
                    this._Calc.Ventilation.Box23c *= Conversion.Val(this.InUseMech("3").UninsulatedDuctsAdj2);
                  else
                    this._Calc.Ventilation.Box23c *= 0.7;
                }
              }
              else
              {
                this._Calc.Ventilation.Box23c = (double) this._House.Ventilation.MVDetails.HEE;
                if (Operators.CompareString(this._House.Ventilation.DuctType, "Insulation", false) == 0)
                {
                  if (this._House.Ventilation.ApprovedScheme)
                    this._Calc.Ventilation.Box23c *= Conversion.Val(this.InUseMech("3").InsulatedDuctsAdj2);
                  else
                    this._Calc.Ventilation.Box23c *= 0.85;
                }
                else if (this._House.Ventilation.ApprovedScheme)
                  this._Calc.Ventilation.Box23c *= Conversion.Val(this.InUseMech("3").UninsulatedDuctsAdj2);
                else
                  this._Calc.Ventilation.Box23c *= 0.7;
              }
            }
            else
            {
              this._Calc.Ventilation.Box23c = 66.0;
              this._Calc.Ventilation.Box23c *= 0.7;
            }
            this._Calc.Ventilation.Box24a_m.M1 = this._Calc.Ventilation.Box22b_m.M1 + this._Calc.Ventilation.Box23b * (1.0 - this._Calc.Ventilation.Box23c / 100.0);
            this._Calc.Ventilation.Box24a_m.M2 = this._Calc.Ventilation.Box22b_m.M2 + this._Calc.Ventilation.Box23b * (1.0 - this._Calc.Ventilation.Box23c / 100.0);
            this._Calc.Ventilation.Box24a_m.M3 = this._Calc.Ventilation.Box22b_m.M3 + this._Calc.Ventilation.Box23b * (1.0 - this._Calc.Ventilation.Box23c / 100.0);
            this._Calc.Ventilation.Box24a_m.M4 = this._Calc.Ventilation.Box22b_m.M4 + this._Calc.Ventilation.Box23b * (1.0 - this._Calc.Ventilation.Box23c / 100.0);
            this._Calc.Ventilation.Box24a_m.M5 = this._Calc.Ventilation.Box22b_m.M5 + this._Calc.Ventilation.Box23b * (1.0 - this._Calc.Ventilation.Box23c / 100.0);
            this._Calc.Ventilation.Box24a_m.M6 = this._Calc.Ventilation.Box22b_m.M6 + this._Calc.Ventilation.Box23b * (1.0 - this._Calc.Ventilation.Box23c / 100.0);
            this._Calc.Ventilation.Box24a_m.M7 = this._Calc.Ventilation.Box22b_m.M7 + this._Calc.Ventilation.Box23b * (1.0 - this._Calc.Ventilation.Box23c / 100.0);
            this._Calc.Ventilation.Box24a_m.M8 = this._Calc.Ventilation.Box22b_m.M8 + this._Calc.Ventilation.Box23b * (1.0 - this._Calc.Ventilation.Box23c / 100.0);
            this._Calc.Ventilation.Box24a_m.M9 = this._Calc.Ventilation.Box22b_m.M9 + this._Calc.Ventilation.Box23b * (1.0 - this._Calc.Ventilation.Box23c / 100.0);
            this._Calc.Ventilation.Box24a_m.M10 = this._Calc.Ventilation.Box22b_m.M10 + this._Calc.Ventilation.Box23b * (1.0 - this._Calc.Ventilation.Box23c / 100.0);
            this._Calc.Ventilation.Box24a_m.M11 = this._Calc.Ventilation.Box22b_m.M11 + this._Calc.Ventilation.Box23b * (1.0 - this._Calc.Ventilation.Box23c / 100.0);
            this._Calc.Ventilation.Box24a_m.M12 = this._Calc.Ventilation.Box22b_m.M12 + this._Calc.Ventilation.Box23b * (1.0 - this._Calc.Ventilation.Box23c / 100.0);
            this._Calc.Ventilation.Box25_m.M1 = this._Calc.Ventilation.Box24a_m.M1;
            this._Calc.Ventilation.Box25_m.M2 = this._Calc.Ventilation.Box24a_m.M2;
            this._Calc.Ventilation.Box25_m.M3 = this._Calc.Ventilation.Box24a_m.M3;
            this._Calc.Ventilation.Box25_m.M4 = this._Calc.Ventilation.Box24a_m.M4;
            this._Calc.Ventilation.Box25_m.M5 = this._Calc.Ventilation.Box24a_m.M5;
            this._Calc.Ventilation.Box25_m.M6 = this._Calc.Ventilation.Box24a_m.M6;
            this._Calc.Ventilation.Box25_m.M7 = this._Calc.Ventilation.Box24a_m.M7;
            this._Calc.Ventilation.Box25_m.M8 = this._Calc.Ventilation.Box24a_m.M8;
            this._Calc.Ventilation.Box25_m.M9 = this._Calc.Ventilation.Box24a_m.M9;
            this._Calc.Ventilation.Box25_m.M10 = this._Calc.Ventilation.Box24a_m.M10;
            this._Calc.Ventilation.Box25_m.M11 = this._Calc.Ventilation.Box24a_m.M11;
            this._Calc.Ventilation.Box25_m.M12 = this._Calc.Ventilation.Box24a_m.M12;
            goto default;
          }
          else
            goto default;
        default:
label_85:
          return;
      }
      this._Calc.Ventilation.Box24c_m.M1 = this._Calc.Ventilation.Box22b_m.M1 >= 0.5 * this._Calc.Ventilation.Box23b ? this._Calc.Ventilation.Box22b_m.M1 + 0.5 * this._Calc.Ventilation.Box23b : this._Calc.Ventilation.Box23b;
      this._Calc.Ventilation.Box24c_m.M2 = this._Calc.Ventilation.Box22b_m.M2 >= 0.5 * this._Calc.Ventilation.Box23b ? this._Calc.Ventilation.Box22b_m.M2 + 0.5 * this._Calc.Ventilation.Box23b : this._Calc.Ventilation.Box23b;
      this._Calc.Ventilation.Box24c_m.M3 = this._Calc.Ventilation.Box22b_m.M3 >= 0.5 * this._Calc.Ventilation.Box23b ? this._Calc.Ventilation.Box22b_m.M3 + 0.5 * this._Calc.Ventilation.Box23b : this._Calc.Ventilation.Box23b;
      this._Calc.Ventilation.Box24c_m.M4 = this._Calc.Ventilation.Box22b_m.M4 >= 0.5 * this._Calc.Ventilation.Box23b ? this._Calc.Ventilation.Box22b_m.M4 + 0.5 * this._Calc.Ventilation.Box23b : this._Calc.Ventilation.Box23b;
      this._Calc.Ventilation.Box24c_m.M5 = this._Calc.Ventilation.Box22b_m.M5 >= 0.5 * this._Calc.Ventilation.Box23b ? this._Calc.Ventilation.Box22b_m.M5 + 0.5 * this._Calc.Ventilation.Box23b : this._Calc.Ventilation.Box23b;
      this._Calc.Ventilation.Box24c_m.M6 = this._Calc.Ventilation.Box22b_m.M6 >= 0.5 * this._Calc.Ventilation.Box23b ? this._Calc.Ventilation.Box22b_m.M6 + 0.5 * this._Calc.Ventilation.Box23b : this._Calc.Ventilation.Box23b;
      this._Calc.Ventilation.Box24c_m.M7 = this._Calc.Ventilation.Box22b_m.M7 >= 0.5 * this._Calc.Ventilation.Box23b ? this._Calc.Ventilation.Box22b_m.M7 + 0.5 * this._Calc.Ventilation.Box23b : this._Calc.Ventilation.Box23b;
      this._Calc.Ventilation.Box24c_m.M8 = this._Calc.Ventilation.Box22b_m.M8 >= 0.5 * this._Calc.Ventilation.Box23b ? this._Calc.Ventilation.Box22b_m.M8 + 0.5 * this._Calc.Ventilation.Box23b : this._Calc.Ventilation.Box23b;
      this._Calc.Ventilation.Box24c_m.M9 = this._Calc.Ventilation.Box22b_m.M9 >= 0.5 * this._Calc.Ventilation.Box23b ? this._Calc.Ventilation.Box22b_m.M9 + 0.5 * this._Calc.Ventilation.Box23b : this._Calc.Ventilation.Box23b;
      this._Calc.Ventilation.Box24c_m.M10 = this._Calc.Ventilation.Box22b_m.M10 >= 0.5 * this._Calc.Ventilation.Box23b ? this._Calc.Ventilation.Box22b_m.M10 + 0.5 * this._Calc.Ventilation.Box23b : this._Calc.Ventilation.Box23b;
      this._Calc.Ventilation.Box24c_m.M11 = this._Calc.Ventilation.Box22b_m.M11 >= 0.5 * this._Calc.Ventilation.Box23b ? this._Calc.Ventilation.Box22b_m.M11 + 0.5 * this._Calc.Ventilation.Box23b : this._Calc.Ventilation.Box23b;
      this._Calc.Ventilation.Box24c_m.M12 = this._Calc.Ventilation.Box22b_m.M12 >= 0.5 * this._Calc.Ventilation.Box23b ? this._Calc.Ventilation.Box22b_m.M12 + 0.5 * this._Calc.Ventilation.Box23b : this._Calc.Ventilation.Box23b;
      this._Calc.Ventilation.Box25_m.M1 = this._Calc.Ventilation.Box24c_m.M1;
      this._Calc.Ventilation.Box25_m.M2 = this._Calc.Ventilation.Box24c_m.M2;
      this._Calc.Ventilation.Box25_m.M3 = this._Calc.Ventilation.Box24c_m.M3;
      this._Calc.Ventilation.Box25_m.M4 = this._Calc.Ventilation.Box24c_m.M4;
      this._Calc.Ventilation.Box25_m.M5 = this._Calc.Ventilation.Box24c_m.M5;
      this._Calc.Ventilation.Box25_m.M6 = this._Calc.Ventilation.Box24c_m.M6;
      this._Calc.Ventilation.Box25_m.M7 = this._Calc.Ventilation.Box24c_m.M7;
      this._Calc.Ventilation.Box25_m.M8 = this._Calc.Ventilation.Box24c_m.M8;
      this._Calc.Ventilation.Box25_m.M9 = this._Calc.Ventilation.Box24c_m.M9;
      this._Calc.Ventilation.Box25_m.M10 = this._Calc.Ventilation.Box24c_m.M10;
      this._Calc.Ventilation.Box25_m.M11 = this._Calc.Ventilation.Box24c_m.M11;
      this._Calc.Ventilation.Box25_m.M12 = this._Calc.Ventilation.Box24c_m.M12;
      goto label_85;
label_84:
      this._Calc.Ventilation.Box24d_m.M1 = this._Calc.Ventilation.Box22b_m.M1 < 1.0 ? 0.5 + 0.5 * Math.Pow(this._Calc.Ventilation.Box22b_m.M1, 2.0) : this._Calc.Ventilation.Box22b_m.M1;
      this._Calc.Ventilation.Box24d_m.M2 = this._Calc.Ventilation.Box22b_m.M2 < 1.0 ? 0.5 + 0.5 * Math.Pow(this._Calc.Ventilation.Box22b_m.M2, 2.0) : this._Calc.Ventilation.Box22b_m.M2;
      this._Calc.Ventilation.Box24d_m.M3 = this._Calc.Ventilation.Box22b_m.M3 < 1.0 ? 0.5 + 0.5 * Math.Pow(this._Calc.Ventilation.Box22b_m.M3, 2.0) : this._Calc.Ventilation.Box22b_m.M3;
      this._Calc.Ventilation.Box24d_m.M4 = this._Calc.Ventilation.Box22b_m.M4 < 1.0 ? 0.5 + 0.5 * Math.Pow(this._Calc.Ventilation.Box22b_m.M4, 2.0) : this._Calc.Ventilation.Box22b_m.M4;
      this._Calc.Ventilation.Box24d_m.M5 = this._Calc.Ventilation.Box22b_m.M5 < 1.0 ? 0.5 + 0.5 * Math.Pow(this._Calc.Ventilation.Box22b_m.M5, 2.0) : this._Calc.Ventilation.Box22b_m.M5;
      this._Calc.Ventilation.Box24d_m.M6 = this._Calc.Ventilation.Box22b_m.M6 < 1.0 ? 0.5 + 0.5 * Math.Pow(this._Calc.Ventilation.Box22b_m.M6, 2.0) : this._Calc.Ventilation.Box22b_m.M6;
      this._Calc.Ventilation.Box24d_m.M7 = this._Calc.Ventilation.Box22b_m.M7 < 1.0 ? 0.5 + 0.5 * Math.Pow(this._Calc.Ventilation.Box22b_m.M7, 2.0) : this._Calc.Ventilation.Box22b_m.M7;
      this._Calc.Ventilation.Box24d_m.M8 = this._Calc.Ventilation.Box22b_m.M8 < 1.0 ? 0.5 + 0.5 * Math.Pow(this._Calc.Ventilation.Box22b_m.M8, 2.0) : this._Calc.Ventilation.Box22b_m.M8;
      this._Calc.Ventilation.Box24d_m.M9 = this._Calc.Ventilation.Box22b_m.M9 < 1.0 ? 0.5 + 0.5 * Math.Pow(this._Calc.Ventilation.Box22b_m.M9, 2.0) : this._Calc.Ventilation.Box22b_m.M9;
      this._Calc.Ventilation.Box24d_m.M10 = this._Calc.Ventilation.Box22b_m.M10 < 1.0 ? 0.5 + 0.5 * Math.Pow(this._Calc.Ventilation.Box22b_m.M10, 2.0) : this._Calc.Ventilation.Box22b_m.M10;
      this._Calc.Ventilation.Box24d_m.M11 = this._Calc.Ventilation.Box22b_m.M11 < 1.0 ? 0.5 + 0.5 * Math.Pow(this._Calc.Ventilation.Box22b_m.M11, 2.0) : this._Calc.Ventilation.Box22b_m.M11;
      this._Calc.Ventilation.Box24d_m.M12 = this._Calc.Ventilation.Box22b_m.M12 < 1.0 ? 0.5 + 0.5 * Math.Pow(this._Calc.Ventilation.Box22b_m.M12, 2.0) : this._Calc.Ventilation.Box22b_m.M12;
      this._Calc.Ventilation.Box25_m.M1 = this._Calc.Ventilation.Box24d_m.M1;
      this._Calc.Ventilation.Box25_m.M2 = this._Calc.Ventilation.Box24d_m.M2;
      this._Calc.Ventilation.Box25_m.M3 = this._Calc.Ventilation.Box24d_m.M3;
      this._Calc.Ventilation.Box25_m.M4 = this._Calc.Ventilation.Box24d_m.M4;
      this._Calc.Ventilation.Box25_m.M5 = this._Calc.Ventilation.Box24d_m.M5;
      this._Calc.Ventilation.Box25_m.M6 = this._Calc.Ventilation.Box24d_m.M6;
      this._Calc.Ventilation.Box25_m.M7 = this._Calc.Ventilation.Box24d_m.M7;
      this._Calc.Ventilation.Box25_m.M8 = this._Calc.Ventilation.Box24d_m.M8;
      this._Calc.Ventilation.Box25_m.M9 = this._Calc.Ventilation.Box24d_m.M9;
      this._Calc.Ventilation.Box25_m.M10 = this._Calc.Ventilation.Box24d_m.M10;
      this._Calc.Ventilation.Box25_m.M11 = this._Calc.Ventilation.Box24d_m.M11;
      this._Calc.Ventilation.Box25_m.M12 = this._Calc.Ventilation.Box24d_m.M12;
      goto label_85;
    }

    private void Water_Heating()
    {
      bool flag1 = true;
      SAP_Module.Dwelling dwelling1 = new SAP_Module.Dwelling();
      SAP_Module.Dwelling dwelling2;
      if (this.OccupancyCalc)
      {
        dwelling2 = this.OriginalSAPDwelling;
        if (this.OccupancyData.IsStandard)
          this.OccupancyData.NoOfOccupants = this._Calc.Dimensions.Box4 > 13.9 ? (float) Math.Round(1.0 + 1.76 * (1.0 - Math.Exp(-0.000349 * Math.Pow(this._Calc.Dimensions.Box4 - 13.9, 2.0))) + 0.0013 * (this._Calc.Dimensions.Box4 - 13.9)) : 1f;
        this._Calc.Water_heating.Box42 = (double) this.OccupancyData.NoOfOccupants;
      }
      else
      {
        dwelling2 = this._House;
        this._Calc.Water_heating.Box42 = this._Calc.Dimensions.Box4 > 13.9 ? 1.0 + 1.76 * (1.0 - Math.Exp(-0.000349 * Math.Pow(this._Calc.Dimensions.Box4 - 13.9, 2.0))) + 0.0013 * (this._Calc.Dimensions.Box4 - 13.9) : 1.0;
      }
      if (this.OccupancyCalc | this.StandardOccupancyCalc)
        this.OccupancyData.Eother((float) this._Calc.Dimensions.Box4);
      if (this.OccupancyCalc | this.StandardOccupancyCalc)
      {
        double num1;
        switch (this.OccupancyData.ShowerType)
        {
          case OccupancyClass.ShowerTypeCode.None:
          case OccupancyClass.ShowerTypeCode.Electric:
            num1 = 0.0;
            break;
          case OccupancyClass.ShowerTypeCode.Mixer:
            num1 = !this.IsCombi() ? 28.8 : 44.4;
            break;
          case OccupancyClass.ShowerTypeCode.Pumped:
            num1 = 43.5;
            break;
          default:
            num1 = 18.7;
            break;
        }
        double num2;
        if ((uint) this.OccupancyData.ShowerType > 0U)
          num2 = (!this.OccupancyData.ShowersPerDayKnown ? 0.45 * this._Calc.Water_heating.Box42 + 0.65 : this.OccupancyData.ShowersPerDay) * num1;
        double num3 = (!this.OccupancyData.BathsPerDayKnown ? (this.OccupancyData.ShowerType != OccupancyClass.ShowerTypeCode.None ? 0.13 * this._Calc.Water_heating.Box42 + 0.19 : 0.35 * this._Calc.Water_heating.Box42 + 0.5) : this.OccupancyData.BathsPerDay) * 50.8;
        double num4 = 9.8 * this._Calc.Water_heating.Box42 + 14.0;
        this._Calc.Water_heating.Box43 = num2 + num3 + num4;
      }
      else
        this._Calc.Water_heating.Box43 = 25.0 * this._Calc.Water_heating.Box42 + 36.0;
      if (Operators.CompareString(dwelling2.MainHeating.InforSource, "Boiler Database", false) == 0)
      {
        if (Operators.CompareString(dwelling2.MainHeating.SGroup, "Micro-cogeneration (micro-CHP)", false) == 0)
          this.CHP_Calc();
        if (dwelling2.MainHeating.SGroup.Contains("heat pumps"))
          this.HP_Calc();
      }
      if (Operators.CompareString(dwelling2.MainHeating2.InforSource, "Boiler Database", false) == 0 && dwelling2.MainHeating2.SGroup.Contains("heat pumps") && dwelling2.MainHeating2.HPOnly.HotWaterOnlyHP)
        this.HP_WaterOnly_Calc();
      if (dwelling2.LessThan125Litre)
        this._Calc.Water_heating.Box43 *= 0.95;
      this._Calc.Water_heating.Box44_m.M1 = 1.1 * this._Calc.Water_heating.Box43;
      this._Calc.Water_heating.Box44_m.M2 = 1.06 * this._Calc.Water_heating.Box43;
      this._Calc.Water_heating.Box44_m.M3 = 1.02 * this._Calc.Water_heating.Box43;
      this._Calc.Water_heating.Box44_m.M4 = 0.98 * this._Calc.Water_heating.Box43;
      this._Calc.Water_heating.Box44_m.M5 = 0.94 * this._Calc.Water_heating.Box43;
      this._Calc.Water_heating.Box44_m.M6 = 0.9 * this._Calc.Water_heating.Box43;
      this._Calc.Water_heating.Box44_m.M7 = 0.9 * this._Calc.Water_heating.Box43;
      this._Calc.Water_heating.Box44_m.M8 = 0.94 * this._Calc.Water_heating.Box43;
      this._Calc.Water_heating.Box44_m.M9 = 0.98 * this._Calc.Water_heating.Box43;
      this._Calc.Water_heating.Box44_m.M10 = 1.02 * this._Calc.Water_heating.Box43;
      this._Calc.Water_heating.Box44_m.M11 = 1.06 * this._Calc.Water_heating.Box43;
      this._Calc.Water_heating.Box44_m.M12 = 1.1 * this._Calc.Water_heating.Box43;
      this._Calc.Water_heating.Box44 = this._Calc.Water_heating.Box44_m.M1 + this._Calc.Water_heating.Box44_m.M2 + this._Calc.Water_heating.Box44_m.M3 + this._Calc.Water_heating.Box44_m.M4 + this._Calc.Water_heating.Box44_m.M5 + this._Calc.Water_heating.Box44_m.M6 + this._Calc.Water_heating.Box44_m.M7 + this._Calc.Water_heating.Box44_m.M8 + this._Calc.Water_heating.Box44_m.M9 + this._Calc.Water_heating.Box44_m.M10 + this._Calc.Water_heating.Box44_m.M11 + this._Calc.Water_heating.Box44_m.M12;
      this._Calc.Water_heating.Box45_m.M1 = 4.18 * this._Calc.Water_heating.Box44_m.M1 * this._Calc.HeatLoss.Box41_m.M1 * 41.2 / 3600.0;
      this._Calc.Water_heating.Box45_m.M2 = 4.18 * this._Calc.Water_heating.Box44_m.M2 * this._Calc.HeatLoss.Box41_m.M2 * 41.4 / 3600.0;
      this._Calc.Water_heating.Box45_m.M3 = 4.18 * this._Calc.Water_heating.Box44_m.M3 * this._Calc.HeatLoss.Box41_m.M3 * 40.1 / 3600.0;
      this._Calc.Water_heating.Box45_m.M4 = 4.18 * this._Calc.Water_heating.Box44_m.M4 * this._Calc.HeatLoss.Box41_m.M4 * 37.6 / 3600.0;
      this._Calc.Water_heating.Box45_m.M5 = 4.18 * this._Calc.Water_heating.Box44_m.M5 * this._Calc.HeatLoss.Box41_m.M5 * 36.4 / 3600.0;
      this._Calc.Water_heating.Box45_m.M6 = 4.18 * this._Calc.Water_heating.Box44_m.M6 * this._Calc.HeatLoss.Box41_m.M6 * 33.9 / 3600.0;
      this._Calc.Water_heating.Box45_m.M7 = 4.18 * this._Calc.Water_heating.Box44_m.M7 * this._Calc.HeatLoss.Box41_m.M7 * 30.4 / 3600.0;
      this._Calc.Water_heating.Box45_m.M8 = 4.18 * this._Calc.Water_heating.Box44_m.M8 * this._Calc.HeatLoss.Box41_m.M8 * 33.4 / 3600.0;
      this._Calc.Water_heating.Box45_m.M9 = 4.18 * this._Calc.Water_heating.Box44_m.M9 * this._Calc.HeatLoss.Box41_m.M9 * 33.5 / 3600.0;
      this._Calc.Water_heating.Box45_m.M10 = 4.18 * this._Calc.Water_heating.Box44_m.M10 * this._Calc.HeatLoss.Box41_m.M10 * 36.3 / 3600.0;
      this._Calc.Water_heating.Box45_m.M11 = 4.18 * this._Calc.Water_heating.Box44_m.M11 * this._Calc.HeatLoss.Box41_m.M11 * 39.4 / 3600.0;
      this._Calc.Water_heating.Box45_m.M12 = 4.18 * this._Calc.Water_heating.Box44_m.M12 * this._Calc.HeatLoss.Box41_m.M12 * 39.9 / 3600.0;
      this._Calc.Water_heating.Box45 = this._Calc.Water_heating.Box45_m.M1 + this._Calc.Water_heating.Box45_m.M2 + this._Calc.Water_heating.Box45_m.M3 + this._Calc.Water_heating.Box45_m.M4 + this._Calc.Water_heating.Box45_m.M5 + this._Calc.Water_heating.Box45_m.M6 + this._Calc.Water_heating.Box45_m.M7 + this._Calc.Water_heating.Box45_m.M8 + this._Calc.Water_heating.Box45_m.M9 + this._Calc.Water_heating.Box45_m.M10 + this._Calc.Water_heating.Box45_m.M11 + this._Calc.Water_heating.Box45_m.M12;
      string Type = "";
      int systemRef = dwelling2.Water.SystemRef;
      bool flag2;
      bool flag3;
      int num5;
      switch (systemRef)
      {
        case 901:
          if (Operators.CompareString(dwelling2.MainHeating.InforSource, "Boiler Database", false) == 0)
          {
            if (Operators.CompareString(dwelling2.MainHeating.SEDBUK, "", false) != 0)
            {
              if (Operators.CompareString(dwelling2.MainHeating.SGroup, "Gas boilers and oil boilers", false) == 0)
              {
                this.SEDBUKFound = (object) Calc2012.SEDBUK(dwelling2.MainHeating.SEDBUK);
                if (this.SEDBUKFound != null)
                {
                  object Left = NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "MainType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
                  if (Operators.ConditionalCompareObjectEqual(Left, (object) 2, false))
                  {
                    if (Information.IsDBNull(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "KpHtFac", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))))
                      NewLateBinding.LateSet(this.SEDBUKFound, (System.Type) null, "KpHtFac", new object[1]
                      {
                        (object) 0
                      }, (string[]) null, (System.Type[]) null);
                    if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "KpHtFac", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) != 0.0)
                    {
                      this._Calc.Water_heating.Box60 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "KpHtTmr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) != 1.0 ? 900.0 : 600.0;
                    }
                    else
                    {
                      flag2 = true;
                      this._Calc.Water_heating.Box60 = 600.0;
                    }
                    if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StrType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) != 0.0)
                    {
                      if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StrVol", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) >= 55.0)
                        this._Calc.Water_heating.Box60 = 0.0;
                      else if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StrVol", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) >= 15.0)
                        this._Calc.Water_heating.Box60 = 600.0 - (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StrVol", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) - 15.0) * 15.0;
                      if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StrVol", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) >= 15.0)
                        this.Calc_Box47to55(false, true);
                    }
                  }
                  else if (Operators.ConditionalCompareObjectEqual(Left, (object) 3, false))
                    this.Calc_Box47to55(false, true);
                  else if (Operators.ConditionalCompareObjectEqual(Left, (object) 1, false))
                  {
                    this.Calc_Box47to55(false, false);
                    Type = "Cylinder";
                  }
                  goto label_146;
                }
                else
                  goto label_146;
              }
              else if (Operators.CompareString(dwelling2.MainHeating.SGroup, "Micro-cogeneration (micro-CHP)", false) == 0)
              {
                if (this.SEDBUKFound != null && Operators.ConditionalCompareObjectNotEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "HWVessel", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 1, false))
                {
                  this.Calc_Box47to55(false, false);
                  Type = "Cylinder";
                  goto label_146;
                }
                else
                  goto label_146;
              }
              else if (Operators.CompareString(dwelling2.MainHeating.SGroup, "Solid fuel boilers", false) == 0)
              {
                this.SEDBUKFound = (object) this.SEDBUK_Solid(dwelling2.MainHeating.SEDBUK);
                if (this.SEDBUKFound != null)
                {
                  this.Calc_Box47to55(false, false);
                  Type = "Cylinder";
                  goto label_146;
                }
                else
                  goto label_146;
              }
              else if (dwelling2.MainHeating.SGroup.Contains("heat pumps"))
              {
                if (this.SEDBUKFound != null)
                {
                  if (Operators.ConditionalCompareObjectNotEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "HWVessel", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) "1", false))
                  {
                    this.Calc_Box47to55(false, false);
                    Type = "Cylinder";
                  }
                  else
                  {
                    this._Calc.Water_heating.Box47 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "VesselHeat_Loss", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
                    this._Calc.Water_heating.Box48 = 0.54;
                    this._Calc.Water_heating.Box49 = this._Calc.Water_heating.Box47 * this._Calc.Water_heating.Box48;
                    this._Calc.Water_heating.Box55 = this._Calc.Water_heating.Box49;
                    this._Calc.Water_heating.Box56_m.M1 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M1;
                    this._Calc.Water_heating.Box56_m.M2 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M2;
                    this._Calc.Water_heating.Box56_m.M3 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M3;
                    this._Calc.Water_heating.Box56_m.M4 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M4;
                    this._Calc.Water_heating.Box56_m.M5 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M5;
                    this._Calc.Water_heating.Box56_m.M6 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M6;
                    this._Calc.Water_heating.Box56_m.M7 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M7;
                    this._Calc.Water_heating.Box56_m.M8 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M8;
                    this._Calc.Water_heating.Box56_m.M9 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M9;
                    this._Calc.Water_heating.Box56_m.M10 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M10;
                    this._Calc.Water_heating.Box56_m.M11 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M11;
                    this._Calc.Water_heating.Box56_m.M12 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M12;
                  }
                  goto label_146;
                }
                else
                  goto label_146;
              }
              else if (Operators.CompareString(dwelling2.MainHeating.HGroup, "Community heating schemes", false) == 0)
              {
                flag3 = true;
                this.Calc_Box47to55(true, false);
                Type = "Comm";
                goto label_146;
              }
              else
                goto label_146;
            }
            else
              goto label_146;
          }
          else
          {
            int sapTableCode1 = dwelling2.MainHeating.SAPTableCode;
            if (sapTableCode1 == 101 || sapTableCode1 == 102 || sapTableCode1 == 105 || sapTableCode1 == 106 || sapTableCode1 == 109 || sapTableCode1 == 110 || sapTableCode1 == 111 || sapTableCode1 == 114 || sapTableCode1 == 115 || sapTableCode1 == 116 || sapTableCode1 == 117 || sapTableCode1 == 119 || sapTableCode1 == 120 || sapTableCode1 == 121 || sapTableCode1 == 122 || sapTableCode1 == 123 || sapTableCode1 == 124 || sapTableCode1 == 125 || sapTableCode1 == 126 || sapTableCode1 == (int) sbyte.MaxValue || sapTableCode1 == 131 || sapTableCode1 == 132 || sapTableCode1 == 133 || sapTableCode1 == 134 || sapTableCode1 == 135 || sapTableCode1 == 136 || sapTableCode1 == 137 || sapTableCode1 == 138 || sapTableCode1 == 139 || sapTableCode1 == 140 || sapTableCode1 == 141 || sapTableCode1 >= 151 && sapTableCode1 <= 230 || sapTableCode1 >= 501 && sapTableCode1 <= 514 || sapTableCode1 >= 520 && sapTableCode1 <= 527)
            {
              this.Calc_Box47to55(false, false);
              int sapTableCode2 = dwelling2.MainHeating.SAPTableCode;
              if ((sapTableCode2 < 120 || sapTableCode2 > 123) && (sapTableCode2 < 190 || sapTableCode2 > 200))
                Type = "Cylinder";
            }
            else if (sapTableCode1 == 103 || sapTableCode1 == 104 || sapTableCode1 == 107 || sapTableCode1 == 108 || sapTableCode1 == 112 || sapTableCode1 == 113 || sapTableCode1 == 118 || sapTableCode1 == 128 || sapTableCode1 == 129 || sapTableCode1 == 130)
            {
              string combiType = dwelling2.Water.CombiType;
              if (Operators.CompareString(combiType, "Storage combi boiler, primary store", false) == 0 || Operators.CompareString(combiType, "Storage combi boiler, secondary store", false) == 0)
              {
                this.Calc_Box47to55(false, false);
                if ((double) dwelling2.Water.Cylinder.Volume < 50.0)
                  this._Calc.Water_heating.Box60 = 600.0 - ((double) dwelling2.Water.Cylinder.Volume - 15.0) * 15.0;
              }
              else if (dwelling2.WaterOnlyHeatPump)
              {
                this.Calc_Box47to55(false, false);
                if ((double) dwelling2.Water.Cylinder.Volume < 50.0)
                  this._Calc.Water_heating.Box60 = 600.0 - ((double) dwelling2.Water.Cylinder.Volume - 15.0) * 15.0;
              }
              else if (dwelling2.MainHeating.Boiler.IncludeKeepHot)
              {
                this._Calc.Water_heating.Box60 = !dwelling2.MainHeating.Boiler.KeepHotTimed ? 900.0 : 600.0;
              }
              else
              {
                this._Calc.Water_heating.Box60 = 600.0;
                flag2 = true;
              }
            }
            else if (sapTableCode1 >= 306 && sapTableCode1 <= 310)
            {
              flag3 = true;
              this.Calc_Box47to55(true, false);
              Type = "Comm";
            }
            else if (sapTableCode1 == 636 || sapTableCode1 == 604)
            {
              this.Calc_Box47to55(false, false);
              int sapTableCode3 = dwelling2.MainHeating.SAPTableCode;
              if ((sapTableCode3 < 120 || sapTableCode3 > 123) && (sapTableCode3 < 190 || sapTableCode3 > 200))
                Type = "Cylinder";
            }
            goto label_146;
          }
        case 902:
          switch (dwelling2.SecHeating.SAPTableCode)
          {
            case 602:
            case 604:
            case 606:
            case 622:
            case 624:
            case 632:
            case 634:
            case 636:
              this.Calc_Box47to55(false, false);
              Type = "Cylinder";
              goto label_146;
            default:
              goto label_146;
          }
        case 903:
          num5 = 1;
          break;
        case 914:
          if (Operators.CompareString(dwelling2.MainHeating2.InforSource, "Boiler Database", false) == 0)
          {
            if (Operators.CompareString(dwelling2.MainHeating2.SEDBUK, "", false) != 0)
            {
              if (Operators.CompareString(dwelling2.MainHeating2.SGroup, "Gas boilers and oil boilers", false) == 0)
              {
                this.SEDBUKFound2 = (object) Calc2012.SEDBUK(dwelling2.MainHeating2.SEDBUK);
                if (this.SEDBUKFound2 != null)
                {
                  object Left = NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "MainType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
                  if (Operators.ConditionalCompareObjectEqual(Left, (object) 2, false))
                  {
                    if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "KpHtFac", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) != 0.0)
                    {
                      this._Calc.Water_heating.Box60 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "KpHtTmr", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) != 1.0 ? 900.0 : 600.0;
                    }
                    else
                    {
                      flag2 = true;
                      this._Calc.Water_heating.Box60 = 600.0;
                    }
                    if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "StrType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) != 0.0)
                    {
                      if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "StrVol", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) >= 55.0)
                        this._Calc.Water_heating.Box60 = 0.0;
                      else if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "StrVol", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) >= 15.0)
                        this._Calc.Water_heating.Box60 = 600.0 - (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "StrVol", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) - 15.0) * 15.0;
                      if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "StrVol", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) >= 15.0)
                        this.Calc_Box47to55(false, true);
                    }
                  }
                  else if (Operators.ConditionalCompareObjectEqual(Left, (object) 3, false))
                    this.Calc_Box47to55(false, true);
                  else if (Operators.ConditionalCompareObjectEqual(Left, (object) 1, false))
                  {
                    this.Calc_Box47to55(false, false);
                    Type = "Cylinder";
                  }
                  goto label_146;
                }
                else
                  goto label_146;
              }
              else if (Operators.CompareString(dwelling2.MainHeating2.InforSource, "Boiler Database", false) == 0)
              {
                if (dwelling2.MainHeating2.SGroup.Contains("heat pumps") && this.SEDBUKFound2 != null)
                {
                  if (Operators.ConditionalCompareObjectNotEqual(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "HWVessel", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) "1", false))
                  {
                    this.Calc_Box47to55(false, false);
                    Type = "Cylinder";
                  }
                  else
                  {
                    this._Calc.Water_heating.Box47 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "VesselHeat_Loss", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
                    this._Calc.Water_heating.Box48 = 0.54;
                    this._Calc.Water_heating.Box49 = this._Calc.Water_heating.Box47 * this._Calc.Water_heating.Box48;
                    this._Calc.Water_heating.Box55 = this._Calc.Water_heating.Box49;
                    this._Calc.Water_heating.Box56_m.M1 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M1;
                    this._Calc.Water_heating.Box56_m.M2 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M2;
                    this._Calc.Water_heating.Box56_m.M3 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M3;
                    this._Calc.Water_heating.Box56_m.M4 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M4;
                    this._Calc.Water_heating.Box56_m.M5 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M5;
                    this._Calc.Water_heating.Box56_m.M6 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M6;
                    this._Calc.Water_heating.Box56_m.M7 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M7;
                    this._Calc.Water_heating.Box56_m.M8 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M8;
                    this._Calc.Water_heating.Box56_m.M9 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M9;
                    this._Calc.Water_heating.Box56_m.M10 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M10;
                    this._Calc.Water_heating.Box56_m.M11 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M11;
                    this._Calc.Water_heating.Box56_m.M12 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M12;
                  }
                  goto label_146;
                }
                else
                  goto label_146;
              }
              else if (Operators.CompareString(dwelling2.MainHeating2.SGroup, "Solid fuel boilers", false) == 0)
              {
                this.SEDBUKFound2 = (object) this.SEDBUK_Solid(dwelling2.MainHeating2.SEDBUK);
                if (this.SEDBUKFound2 != null)
                {
                  this.Calc_Box47to55(false, false);
                  Type = "Cylinder";
                }
                goto label_146;
              }
              else
                goto label_146;
            }
            else
              goto label_146;
          }
          else
          {
            int sapTableCode4 = dwelling2.MainHeating2.SAPTableCode;
            if (sapTableCode4 == 101 || sapTableCode4 == 102 || sapTableCode4 == 105 || sapTableCode4 == 106 || sapTableCode4 == 109 || sapTableCode4 == 110 || sapTableCode4 == 111 || sapTableCode4 == 114 || sapTableCode4 == 115 || sapTableCode4 == 116 || sapTableCode4 == 117 || sapTableCode4 == 119 || sapTableCode4 == 120 || sapTableCode4 == 121 || sapTableCode4 == 122 || sapTableCode4 == 123 || sapTableCode4 == 124 || sapTableCode4 == 125 || sapTableCode4 == 126 || sapTableCode4 == (int) sbyte.MaxValue || sapTableCode4 == 131 || sapTableCode4 == 132 || sapTableCode4 == 133 || sapTableCode4 == 134 || sapTableCode4 == 135 || sapTableCode4 == 136 || sapTableCode4 == 137 || sapTableCode4 == 138 || sapTableCode4 == 139 || sapTableCode4 == 140 || sapTableCode4 == 141 || sapTableCode4 >= 151 && sapTableCode4 <= 230 || sapTableCode4 >= 501 && sapTableCode4 <= 514 || sapTableCode4 >= 521 && sapTableCode4 <= 527)
            {
              this.Calc_Box47to55(false, false);
              int sapTableCode5 = dwelling2.MainHeating2.SAPTableCode;
              if ((sapTableCode5 < 120 || sapTableCode5 > 123) && (sapTableCode5 < 190 || sapTableCode5 > 200))
                Type = "Cylinder";
            }
            else if (sapTableCode4 == 103 || sapTableCode4 == 104 || sapTableCode4 == 107 || sapTableCode4 == 108 || sapTableCode4 == 112 || sapTableCode4 == 113 || sapTableCode4 == 118 || sapTableCode4 == 128 || sapTableCode4 == 129 || sapTableCode4 == 130)
            {
              string combiType = dwelling2.Water.CombiType;
              if (Operators.CompareString(combiType, "Storage combi boiler, primary store", false) == 0 || Operators.CompareString(combiType, "Storage combi boiler, secondary store", false) == 0)
              {
                this.Calc_Box47to55(false, false);
                if ((double) dwelling2.Water.Cylinder.Volume < 50.0)
                  this._Calc.Water_heating.Box60 = 600.0 - ((double) dwelling2.Water.Cylinder.Volume - 15.0) * 15.0;
              }
              else if (dwelling2.MainHeating2.Boiler.IncludeKeepHot)
              {
                this._Calc.Water_heating.Box60 = !dwelling2.MainHeating2.Boiler.KeepHotTimed ? 900.0 : 600.0;
              }
              else
              {
                this._Calc.Water_heating.Box60 = 600.0;
                flag2 = true;
              }
            }
            else if (sapTableCode4 >= 306 && sapTableCode4 <= 310)
            {
              flag3 = true;
              this.Calc_Box47to55(true, false);
              Type = "Comm";
            }
            else if (sapTableCode4 == 636 || sapTableCode4 == 604)
            {
              this.Calc_Box47to55(false, false);
              int sapTableCode6 = dwelling2.MainHeating2.SAPTableCode;
              if ((sapTableCode6 < 120 || sapTableCode6 > 123) && (sapTableCode6 < 190 || sapTableCode6 > 200))
                Type = "Cylinder";
            }
            goto label_146;
          }
        default:
          num5 = systemRef == 999 ? 1 : 0;
          break;
      }
      if (num5 != 0)
        this.Calc_Box47to55(false, false);
      else if (systemRef == 907 || systemRef == 909)
        flag1 = false;
      else if (systemRef >= 911 && systemRef <= 931)
      {
        this.Calc_Box47to55(false, false);
        Type = "Cylinder";
      }
      else if (systemRef == 950 || systemRef == 951 || systemRef == 952)
      {
        this.Calc_Box47to55(true, false);
        Type = "Comm";
      }
label_146:
      if (flag1 & !this.IsFabricEfficiency)
      {
        this._Calc.Water_heating.Box46_m.M1 = 0.15 * this._Calc.Water_heating.Box45_m.M1;
        this._Calc.Water_heating.Box46_m.M2 = 0.15 * this._Calc.Water_heating.Box45_m.M2;
        this._Calc.Water_heating.Box46_m.M3 = 0.15 * this._Calc.Water_heating.Box45_m.M3;
        this._Calc.Water_heating.Box46_m.M4 = 0.15 * this._Calc.Water_heating.Box45_m.M4;
        this._Calc.Water_heating.Box46_m.M5 = 0.15 * this._Calc.Water_heating.Box45_m.M5;
        this._Calc.Water_heating.Box46_m.M6 = 0.15 * this._Calc.Water_heating.Box45_m.M6;
        this._Calc.Water_heating.Box46_m.M7 = 0.15 * this._Calc.Water_heating.Box45_m.M7;
        this._Calc.Water_heating.Box46_m.M8 = 0.15 * this._Calc.Water_heating.Box45_m.M8;
        this._Calc.Water_heating.Box46_m.M9 = 0.15 * this._Calc.Water_heating.Box45_m.M9;
        this._Calc.Water_heating.Box46_m.M10 = 0.15 * this._Calc.Water_heating.Box45_m.M10;
        this._Calc.Water_heating.Box46_m.M11 = 0.15 * this._Calc.Water_heating.Box45_m.M11;
        this._Calc.Water_heating.Box46_m.M12 = 0.15 * this._Calc.Water_heating.Box45_m.M12;
      }
      if (dwelling2.Water.WWHRS.Include)
        this.Calc_WWHRS();
      bool flag4;
      if (dwelling2.Water.Solar.Inlcude)
      {
        this.Calc_Solar();
        if (!dwelling2.Water.Solar.SolarSeperate)
          flag4 = true;
      }
      if (this.SEDBUKFound != null && this.SEDBUKFound is PCDF.SEDBUK)
      {
        if (NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "SubType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null) == null)
          NewLateBinding.LateSet(this.SEDBUKFound, (System.Type) null, "SubType", new object[1]
          {
            (object) ""
          }, (string[]) null, (System.Type[]) null);
        if (((PCDF.SEDBUK) this.SEDBUKFound).SubType.Equals("1") & !this.ForFGHRSCalc & !this.IsForRhiCalc & (uint) Operators.CompareString(((PCDF.SEDBUK) this.SEDBUKFound).SubTypeIndex, "0", false) > 0U && this._House.Water.SystemRef == 901)
        {
          this._House.Water.FGHRS.Include = true;
          this._House.Water.FGHRS.IndexNo = ((PCDF.SEDBUK) this.SEDBUKFound).SubTypeIndex;
          dwelling2.Water.FGHRS.Include = true;
          dwelling2.Water.FGHRS.IndexNo = ((PCDF.SEDBUK) this.SEDBUKFound).SubTypeIndex;
        }
      }
      if (dwelling2.Water.FGHRS.Include)
        this.Calc_FGHRS();
      bool flag5;
      if (this.IsHeatDemand & !this.IsRHICalc)
        flag5 = true;
      double num6 = 0.0;
      if (this._House.Water.WWHRS.Include)
      {
        PCDF.WWHRS wwhrs1 = SAP_Module.PCDFData.WWHRSs.Where<PCDF.WWHRS>((Func<PCDF.WWHRS, bool>) (b => b.ID.Equals(this._House.Water.WWHRS.Systems[0].SystemsRef))).SingleOrDefault<PCDF.WWHRS>();
        if (wwhrs1 != null && wwhrs1.InstantaneousStorage.Equals("2") && (double) this._House.Water.WWHRS.Systems[0].DedicatedStorage != 0.0)
          num6 += (double) this._House.Water.WWHRS.Systems[0].DedicatedStorage;
        if (!string.IsNullOrEmpty(this._House.Water.WWHRS.Systems[1].SystemsRef))
        {
          PCDF.WWHRS wwhrs2 = SAP_Module.PCDFData.WWHRSs.Where<PCDF.WWHRS>((Func<PCDF.WWHRS, bool>) (b => b.ID.Equals(this._House.Water.WWHRS.Systems[1].SystemsRef))).SingleOrDefault<PCDF.WWHRS>();
          if (wwhrs2 != null && wwhrs2.InstantaneousStorage.Equals("2") && (double) this._House.Water.WWHRS.Systems[1].DedicatedStorage != 0.0)
            num6 += (double) this._House.Water.WWHRS.Systems[0].DedicatedStorage;
        }
      }
      if (flag4 & !flag5)
      {
        this._Calc.Water_heating.Box57_m.M1 = this._Calc.Water_heating.Box56_m.M1 * ((double) dwelling2.Water.Cylinder.Volume - this._Calc.Water_heating.Solar.H11) / (double) dwelling2.Water.Cylinder.Volume;
        this._Calc.Water_heating.Box57_m.M2 = this._Calc.Water_heating.Box56_m.M2 * ((double) dwelling2.Water.Cylinder.Volume - this._Calc.Water_heating.Solar.H11) / (double) dwelling2.Water.Cylinder.Volume;
        this._Calc.Water_heating.Box57_m.M3 = this._Calc.Water_heating.Box56_m.M3 * ((double) dwelling2.Water.Cylinder.Volume - this._Calc.Water_heating.Solar.H11) / (double) dwelling2.Water.Cylinder.Volume;
        this._Calc.Water_heating.Box57_m.M4 = this._Calc.Water_heating.Box56_m.M4 * ((double) dwelling2.Water.Cylinder.Volume - this._Calc.Water_heating.Solar.H11) / (double) dwelling2.Water.Cylinder.Volume;
        this._Calc.Water_heating.Box57_m.M5 = this._Calc.Water_heating.Box56_m.M5 * ((double) dwelling2.Water.Cylinder.Volume - this._Calc.Water_heating.Solar.H11) / (double) dwelling2.Water.Cylinder.Volume;
        this._Calc.Water_heating.Box57_m.M6 = this._Calc.Water_heating.Box56_m.M6 * ((double) dwelling2.Water.Cylinder.Volume - this._Calc.Water_heating.Solar.H11) / (double) dwelling2.Water.Cylinder.Volume;
        this._Calc.Water_heating.Box57_m.M7 = this._Calc.Water_heating.Box56_m.M7 * ((double) dwelling2.Water.Cylinder.Volume - this._Calc.Water_heating.Solar.H11) / (double) dwelling2.Water.Cylinder.Volume;
        this._Calc.Water_heating.Box57_m.M8 = this._Calc.Water_heating.Box56_m.M8 * ((double) dwelling2.Water.Cylinder.Volume - this._Calc.Water_heating.Solar.H11) / (double) dwelling2.Water.Cylinder.Volume;
        this._Calc.Water_heating.Box57_m.M9 = this._Calc.Water_heating.Box56_m.M9 * ((double) dwelling2.Water.Cylinder.Volume - this._Calc.Water_heating.Solar.H11) / (double) dwelling2.Water.Cylinder.Volume;
        this._Calc.Water_heating.Box57_m.M10 = this._Calc.Water_heating.Box56_m.M10 * ((double) dwelling2.Water.Cylinder.Volume - this._Calc.Water_heating.Solar.H11) / (double) dwelling2.Water.Cylinder.Volume;
        this._Calc.Water_heating.Box57_m.M11 = this._Calc.Water_heating.Box56_m.M11 * ((double) dwelling2.Water.Cylinder.Volume - this._Calc.Water_heating.Solar.H11) / (double) dwelling2.Water.Cylinder.Volume;
        this._Calc.Water_heating.Box57_m.M12 = this._Calc.Water_heating.Box56_m.M12 * ((double) dwelling2.Water.Cylinder.Volume - this._Calc.Water_heating.Solar.H11) / (double) dwelling2.Water.Cylinder.Volume;
      }
      else if (num6 > 0.0 & (double) dwelling2.Water.Cylinder.Volume != 0.0)
      {
        this._Calc.Water_heating.Box57_m.M1 = this._Calc.Water_heating.Box56_m.M1 * ((double) dwelling2.Water.Cylinder.Volume - num6) / (double) dwelling2.Water.Cylinder.Volume;
        this._Calc.Water_heating.Box57_m.M2 = this._Calc.Water_heating.Box56_m.M2 * ((double) dwelling2.Water.Cylinder.Volume - num6) / (double) dwelling2.Water.Cylinder.Volume;
        this._Calc.Water_heating.Box57_m.M3 = this._Calc.Water_heating.Box56_m.M3 * ((double) dwelling2.Water.Cylinder.Volume - num6) / (double) dwelling2.Water.Cylinder.Volume;
        this._Calc.Water_heating.Box57_m.M4 = this._Calc.Water_heating.Box56_m.M4 * ((double) dwelling2.Water.Cylinder.Volume - num6) / (double) dwelling2.Water.Cylinder.Volume;
        this._Calc.Water_heating.Box57_m.M5 = this._Calc.Water_heating.Box56_m.M5 * ((double) dwelling2.Water.Cylinder.Volume - num6) / (double) dwelling2.Water.Cylinder.Volume;
        this._Calc.Water_heating.Box57_m.M6 = this._Calc.Water_heating.Box56_m.M6 * ((double) dwelling2.Water.Cylinder.Volume - num6) / (double) dwelling2.Water.Cylinder.Volume;
        this._Calc.Water_heating.Box57_m.M7 = this._Calc.Water_heating.Box56_m.M7 * ((double) dwelling2.Water.Cylinder.Volume - num6) / (double) dwelling2.Water.Cylinder.Volume;
        this._Calc.Water_heating.Box57_m.M8 = this._Calc.Water_heating.Box56_m.M8 * ((double) dwelling2.Water.Cylinder.Volume - num6) / (double) dwelling2.Water.Cylinder.Volume;
        this._Calc.Water_heating.Box57_m.M9 = this._Calc.Water_heating.Box56_m.M9 * ((double) dwelling2.Water.Cylinder.Volume - num6) / (double) dwelling2.Water.Cylinder.Volume;
        this._Calc.Water_heating.Box57_m.M10 = this._Calc.Water_heating.Box56_m.M10 * ((double) dwelling2.Water.Cylinder.Volume - num6) / (double) dwelling2.Water.Cylinder.Volume;
        this._Calc.Water_heating.Box57_m.M11 = this._Calc.Water_heating.Box56_m.M11 * ((double) dwelling2.Water.Cylinder.Volume - num6) / (double) dwelling2.Water.Cylinder.Volume;
        this._Calc.Water_heating.Box57_m.M12 = this._Calc.Water_heating.Box56_m.M12 * ((double) dwelling2.Water.Cylinder.Volume - num6) / (double) dwelling2.Water.Cylinder.Volume;
      }
      else
      {
        this._Calc.Water_heating.Box57_m.M1 = this._Calc.Water_heating.Box56_m.M1;
        this._Calc.Water_heating.Box57_m.M2 = this._Calc.Water_heating.Box56_m.M2;
        this._Calc.Water_heating.Box57_m.M3 = this._Calc.Water_heating.Box56_m.M3;
        this._Calc.Water_heating.Box57_m.M4 = this._Calc.Water_heating.Box56_m.M4;
        this._Calc.Water_heating.Box57_m.M5 = this._Calc.Water_heating.Box56_m.M5;
        this._Calc.Water_heating.Box57_m.M6 = this._Calc.Water_heating.Box56_m.M6;
        this._Calc.Water_heating.Box57_m.M7 = this._Calc.Water_heating.Box56_m.M7;
        this._Calc.Water_heating.Box57_m.M8 = this._Calc.Water_heating.Box56_m.M8;
        this._Calc.Water_heating.Box57_m.M9 = this._Calc.Water_heating.Box56_m.M9;
        this._Calc.Water_heating.Box57_m.M10 = this._Calc.Water_heating.Box56_m.M10;
        this._Calc.Water_heating.Box57_m.M11 = this._Calc.Water_heating.Box56_m.M11;
        this._Calc.Water_heating.Box57_m.M12 = this._Calc.Water_heating.Box56_m.M12;
      }
      if (dwelling2.WaterOnlyHeatPump & !dwelling2.MainHeating2.HPOnly.HotWaterHP_Integral)
        Type = "Cylinder";
      if (!string.IsNullOrEmpty(Type) & !this.IsFabricEfficiency)
      {
        this._Calc.Water_heating.Box59_m.M1 = this.Calc_Box59(Type, checked ((int) Math.Round(this._Calc.HeatLoss.Box41_m.M1)), false);
        this._Calc.Water_heating.Box59_m.M2 = this.Calc_Box59(Type, checked ((int) Math.Round(this._Calc.HeatLoss.Box41_m.M2)), false);
        this._Calc.Water_heating.Box59_m.M3 = this.Calc_Box59(Type, checked ((int) Math.Round(this._Calc.HeatLoss.Box41_m.M3)), false);
        this._Calc.Water_heating.Box59_m.M4 = this.Calc_Box59(Type, checked ((int) Math.Round(this._Calc.HeatLoss.Box41_m.M4)), false);
        this._Calc.Water_heating.Box59_m.M5 = this.Calc_Box59(Type, checked ((int) Math.Round(this._Calc.HeatLoss.Box41_m.M5)), false);
        if (!dwelling2.Water.Cylinder.SummerImmersion)
        {
          this._Calc.Water_heating.Box59_m.M6 = this.Calc_Box59(Type, checked ((int) Math.Round(this._Calc.HeatLoss.Box41_m.M6)), true);
          this._Calc.Water_heating.Box59_m.M7 = this.Calc_Box59(Type, checked ((int) Math.Round(this._Calc.HeatLoss.Box41_m.M7)), true);
          this._Calc.Water_heating.Box59_m.M8 = this.Calc_Box59(Type, checked ((int) Math.Round(this._Calc.HeatLoss.Box41_m.M8)), true);
          this._Calc.Water_heating.Box59_m.M9 = this.Calc_Box59(Type, checked ((int) Math.Round(this._Calc.HeatLoss.Box41_m.M9)), true);
        }
        if (Operators.CompareString(dwelling2.Water.Cylinder.HPImmersion, "Yes", false) == 0 && (double) dwelling2.Water.Cylinder.Volume != 0.0)
        {
          this._Calc.Water_heating.Box59_m.M6 = 0.0;
          this._Calc.Water_heating.Box59_m.M7 = 0.0;
          this._Calc.Water_heating.Box59_m.M8 = 0.0;
          this._Calc.Water_heating.Box59_m.M9 = 0.0;
        }
        this._Calc.Water_heating.Box59_m.M10 = this.Calc_Box59(Type, checked ((int) Math.Round(this._Calc.HeatLoss.Box41_m.M10)), false);
        this._Calc.Water_heating.Box59_m.M11 = this.Calc_Box59(Type, checked ((int) Math.Round(this._Calc.HeatLoss.Box41_m.M11)), false);
        this._Calc.Water_heating.Box59_m.M12 = this.Calc_Box59(Type, checked ((int) Math.Round(this._Calc.HeatLoss.Box41_m.M12)), false);
      }
      if (!flag5 && dwelling2.Water.Solar.Inlcude & dwelling2.Water.Cylinder.Thermostat)
      {
        this._Calc.Water_heating.Box59_m.M1 *= 1.0;
        this._Calc.Water_heating.Box59_m.M2 *= 1.0;
        this._Calc.Water_heating.Box59_m.M3 *= 0.94;
        this._Calc.Water_heating.Box59_m.M4 *= 0.7;
        this._Calc.Water_heating.Box59_m.M5 *= 0.45;
        if (!dwelling2.Water.Cylinder.SummerImmersion)
        {
          this._Calc.Water_heating.Box59_m.M6 *= 0.44;
          this._Calc.Water_heating.Box59_m.M7 *= 0.44;
          this._Calc.Water_heating.Box59_m.M8 *= 0.48;
          this._Calc.Water_heating.Box59_m.M9 *= 0.76;
        }
        this._Calc.Water_heating.Box59_m.M10 *= 0.94;
        this._Calc.Water_heating.Box59_m.M11 *= 1.0;
        this._Calc.Water_heating.Box59_m.M12 *= 1.0;
      }
      if (!this._MissBox61)
      {
        if (flag2)
        {
          this._Calc.Water_heating.Box61_m.M1 = this._Calc.Water_heating.Box44_m.M1 >= 100.0 ? this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M1 : this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M1 * this._Calc.Water_heating.Box44_m.M1 / 100.0;
          this._Calc.Water_heating.Box61_m.M2 = this._Calc.Water_heating.Box44_m.M2 >= 100.0 ? this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M2 : this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M2 * this._Calc.Water_heating.Box44_m.M2 / 100.0;
          this._Calc.Water_heating.Box61_m.M3 = this._Calc.Water_heating.Box44_m.M3 >= 100.0 ? this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M3 : this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M3 * this._Calc.Water_heating.Box44_m.M3 / 100.0;
          this._Calc.Water_heating.Box61_m.M4 = this._Calc.Water_heating.Box44_m.M4 >= 100.0 ? this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M4 : this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M4 * this._Calc.Water_heating.Box44_m.M4 / 100.0;
          this._Calc.Water_heating.Box61_m.M5 = this._Calc.Water_heating.Box44_m.M5 >= 100.0 ? this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M5 : this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M5 * this._Calc.Water_heating.Box44_m.M5 / 100.0;
          this._Calc.Water_heating.Box61_m.M6 = this._Calc.Water_heating.Box44_m.M6 >= 100.0 ? this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M6 : this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M6 * this._Calc.Water_heating.Box44_m.M6 / 100.0;
          this._Calc.Water_heating.Box61_m.M7 = this._Calc.Water_heating.Box44_m.M7 >= 100.0 ? this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M7 : this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M7 * this._Calc.Water_heating.Box44_m.M7 / 100.0;
          this._Calc.Water_heating.Box61_m.M8 = this._Calc.Water_heating.Box44_m.M8 >= 100.0 ? this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M8 : this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M8 * this._Calc.Water_heating.Box44_m.M8 / 100.0;
          this._Calc.Water_heating.Box61_m.M9 = this._Calc.Water_heating.Box44_m.M9 >= 100.0 ? this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M9 : this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M9 * this._Calc.Water_heating.Box44_m.M9 / 100.0;
          this._Calc.Water_heating.Box61_m.M10 = this._Calc.Water_heating.Box44_m.M10 >= 100.0 ? this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M10 : this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M10 * this._Calc.Water_heating.Box44_m.M10 / 100.0;
          this._Calc.Water_heating.Box61_m.M11 = this._Calc.Water_heating.Box44_m.M11 >= 100.0 ? this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M11 : this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M11 * this._Calc.Water_heating.Box44_m.M11 / 100.0;
          this._Calc.Water_heating.Box61_m.M12 = this._Calc.Water_heating.Box44_m.M12 >= 100.0 ? this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M12 : this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M12 * this._Calc.Water_heating.Box44_m.M12 / 100.0;
          if (this.SEDBUKFound != null & this.SEDBUKFound is PCDF.SEDBUK)
          {
            if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "SeperateDHWTests", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 1.0)
            {
              this._Calc.Water_heating.Box61_m.M1 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M1;
              this._Calc.Water_heating.Box61_m.M2 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M2;
              this._Calc.Water_heating.Box61_m.M3 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M3;
              this._Calc.Water_heating.Box61_m.M4 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M4;
              this._Calc.Water_heating.Box61_m.M5 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M5;
              this._Calc.Water_heating.Box61_m.M6 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M6;
              this._Calc.Water_heating.Box61_m.M7 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M7;
              this._Calc.Water_heating.Box61_m.M8 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M8;
              this._Calc.Water_heating.Box61_m.M9 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M9;
              this._Calc.Water_heating.Box61_m.M10 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M10;
              this._Calc.Water_heating.Box61_m.M11 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M11;
              this._Calc.Water_heating.Box61_m.M12 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M12;
            }
            if (Operators.CompareString(((PCDF.SEDBUK) this.SEDBUKFound).SubType, "0", false) == 0 & !this._House.Water.FGHRS.Include)
            {
              if (this._Calc.Water_heating.Box44_m.M1 < 100.0)
              {
                Months box61M;
                double num7 = (box61M = this._Calc.Water_heating.Box61_m).M1 + this._Calc.Water_heating.Box45_m.M1 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1) * this._Calc.Water_heating.Box44_m.M1 / 100.0;
                box61M.M1 = num7;
              }
              else
              {
                Months box61M;
                double num8 = (box61M = this._Calc.Water_heating.Box61_m).M1 + this._Calc.Water_heating.Box45_m.M1 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1);
                box61M.M1 = num8;
              }
              if (this._Calc.Water_heating.Box44_m.M2 < 100.0)
              {
                Months box61M;
                double num9 = (box61M = this._Calc.Water_heating.Box61_m).M2 + this._Calc.Water_heating.Box45_m.M2 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1) * this._Calc.Water_heating.Box44_m.M2 / 100.0;
                box61M.M2 = num9;
              }
              else
              {
                Months box61M;
                double num10 = (box61M = this._Calc.Water_heating.Box61_m).M2 + this._Calc.Water_heating.Box45_m.M2 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1);
                box61M.M2 = num10;
              }
              if (this._Calc.Water_heating.Box44_m.M3 < 100.0)
              {
                Months box61M;
                double num11 = (box61M = this._Calc.Water_heating.Box61_m).M3 + this._Calc.Water_heating.Box45_m.M3 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1) * this._Calc.Water_heating.Box44_m.M3 / 100.0;
                box61M.M3 = num11;
              }
              else
              {
                Months box61M;
                double num12 = (box61M = this._Calc.Water_heating.Box61_m).M3 + this._Calc.Water_heating.Box45_m.M3 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1);
                box61M.M3 = num12;
              }
              if (this._Calc.Water_heating.Box44_m.M4 < 100.0)
              {
                Months box61M;
                double num13 = (box61M = this._Calc.Water_heating.Box61_m).M4 + this._Calc.Water_heating.Box45_m.M4 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1) * this._Calc.Water_heating.Box44_m.M4 / 100.0;
                box61M.M4 = num13;
              }
              else
              {
                Months box61M;
                double num14 = (box61M = this._Calc.Water_heating.Box61_m).M4 + this._Calc.Water_heating.Box45_m.M4 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1);
                box61M.M4 = num14;
              }
              if (this._Calc.Water_heating.Box44_m.M5 < 100.0)
              {
                Months box61M;
                double num15 = (box61M = this._Calc.Water_heating.Box61_m).M5 + this._Calc.Water_heating.Box45_m.M5 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1) * this._Calc.Water_heating.Box44_m.M5 / 100.0;
                box61M.M5 = num15;
              }
              else
              {
                Months box61M;
                double num16 = (box61M = this._Calc.Water_heating.Box61_m).M5 + this._Calc.Water_heating.Box45_m.M5 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1);
                box61M.M5 = num16;
              }
              if (this._Calc.Water_heating.Box44_m.M6 < 100.0)
              {
                Months box61M;
                double num17 = (box61M = this._Calc.Water_heating.Box61_m).M6 + this._Calc.Water_heating.Box45_m.M6 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1) * this._Calc.Water_heating.Box44_m.M6 / 100.0;
                box61M.M6 = num17;
              }
              else
              {
                Months box61M;
                double num18 = (box61M = this._Calc.Water_heating.Box61_m).M6 + this._Calc.Water_heating.Box45_m.M6 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1);
                box61M.M6 = num18;
              }
              if (this._Calc.Water_heating.Box44_m.M7 < 100.0)
              {
                Months box61M;
                double num19 = (box61M = this._Calc.Water_heating.Box61_m).M7 + this._Calc.Water_heating.Box45_m.M7 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1) * this._Calc.Water_heating.Box44_m.M7 / 100.0;
                box61M.M7 = num19;
              }
              else
              {
                Months box61M;
                double num20 = (box61M = this._Calc.Water_heating.Box61_m).M7 + this._Calc.Water_heating.Box45_m.M7 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1);
                box61M.M7 = num20;
              }
              if (this._Calc.Water_heating.Box44_m.M8 < 100.0)
              {
                Months box61M;
                double num21 = (box61M = this._Calc.Water_heating.Box61_m).M8 + this._Calc.Water_heating.Box45_m.M8 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1) * this._Calc.Water_heating.Box44_m.M8 / 100.0;
                box61M.M8 = num21;
              }
              else
              {
                Months box61M;
                double num22 = (box61M = this._Calc.Water_heating.Box61_m).M8 + this._Calc.Water_heating.Box45_m.M8 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1);
                box61M.M8 = num22;
              }
              if (this._Calc.Water_heating.Box44_m.M9 < 100.0)
              {
                Months box61M;
                double num23 = (box61M = this._Calc.Water_heating.Box61_m).M9 + this._Calc.Water_heating.Box45_m.M9 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1) * this._Calc.Water_heating.Box44_m.M9 / 100.0;
                box61M.M9 = num23;
              }
              else
              {
                Months box61M;
                double num24 = (box61M = this._Calc.Water_heating.Box61_m).M9 + this._Calc.Water_heating.Box45_m.M9 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1);
                box61M.M9 = num24;
              }
              if (this._Calc.Water_heating.Box44_m.M10 < 100.0)
              {
                Months box61M;
                double num25 = (box61M = this._Calc.Water_heating.Box61_m).M10 + this._Calc.Water_heating.Box45_m.M10 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1) * this._Calc.Water_heating.Box44_m.M10 / 100.0;
                box61M.M10 = num25;
              }
              else
              {
                Months box61M;
                double num26 = (box61M = this._Calc.Water_heating.Box61_m).M10 + this._Calc.Water_heating.Box45_m.M10 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1);
                box61M.M10 = num26;
              }
              if (this._Calc.Water_heating.Box44_m.M11 < 100.0)
              {
                Months box61M;
                double num27 = (box61M = this._Calc.Water_heating.Box61_m).M11 + this._Calc.Water_heating.Box45_m.M11 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1) * this._Calc.Water_heating.Box44_m.M11 / 100.0;
                box61M.M11 = num27;
              }
              else
              {
                Months box61M;
                double num28 = (box61M = this._Calc.Water_heating.Box61_m).M11 + this._Calc.Water_heating.Box45_m.M11 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1);
                box61M.M11 = num28;
              }
              if (this._Calc.Water_heating.Box44_m.M12 < 100.0)
              {
                Months box61M;
                double num29 = (box61M = this._Calc.Water_heating.Box61_m).M12 + this._Calc.Water_heating.Box45_m.M12 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1) * this._Calc.Water_heating.Box44_m.M12 / 100.0;
                box61M.M12 = num29;
              }
              else
              {
                Months box61M;
                double num30 = (box61M = this._Calc.Water_heating.Box61_m).M12 + this._Calc.Water_heating.Box45_m.M12 * Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1);
                box61M.M12 = num30;
              }
            }
          }
        }
        else
        {
          this._Calc.Water_heating.Box61_m.M1 = this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M1;
          this._Calc.Water_heating.Box61_m.M2 = this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M2;
          this._Calc.Water_heating.Box61_m.M3 = this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M3;
          this._Calc.Water_heating.Box61_m.M4 = this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M4;
          this._Calc.Water_heating.Box61_m.M5 = this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M5;
          this._Calc.Water_heating.Box61_m.M6 = this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M6;
          this._Calc.Water_heating.Box61_m.M7 = this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M7;
          this._Calc.Water_heating.Box61_m.M8 = this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M8;
          this._Calc.Water_heating.Box61_m.M9 = this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M9;
          this._Calc.Water_heating.Box61_m.M10 = this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M10;
          this._Calc.Water_heating.Box61_m.M11 = this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M11;
          this._Calc.Water_heating.Box61_m.M12 = this._Calc.Water_heating.Box60 / 365.0 * this._Calc.HeatLoss.Box41_m.M12;
        }
        this.SetBox61_FGHRS();
        this.Box61_Seperate_Tests();
      }
      if (this.IsFabricEfficiency)
      {
        this._Calc.Water_heating.Box61_m.M1 = 0.0;
        this._Calc.Water_heating.Box61_m.M2 = 0.0;
        this._Calc.Water_heating.Box61_m.M3 = 0.0;
        this._Calc.Water_heating.Box61_m.M4 = 0.0;
        this._Calc.Water_heating.Box61_m.M5 = 0.0;
        this._Calc.Water_heating.Box61_m.M6 = 0.0;
        this._Calc.Water_heating.Box61_m.M7 = 0.0;
        this._Calc.Water_heating.Box61_m.M8 = 0.0;
        this._Calc.Water_heating.Box61_m.M9 = 0.0;
        this._Calc.Water_heating.Box61_m.M10 = 0.0;
        this._Calc.Water_heating.Box61_m.M11 = 0.0;
        this._Calc.Water_heating.Box61_m.M12 = 0.0;
      }
      this._Calc.Water_heating.Box62_m.M1 = 0.85 * this._Calc.Water_heating.Box45_m.M1 + this._Calc.Water_heating.Box46_m.M1 + this._Calc.Water_heating.Box57_m.M1 + this._Calc.Water_heating.Box59_m.M1 + this._Calc.Water_heating.Box61_m.M1;
      this._Calc.Water_heating.Box62_m.M2 = 0.85 * this._Calc.Water_heating.Box45_m.M2 + this._Calc.Water_heating.Box46_m.M2 + this._Calc.Water_heating.Box57_m.M2 + this._Calc.Water_heating.Box59_m.M2 + this._Calc.Water_heating.Box61_m.M2;
      this._Calc.Water_heating.Box62_m.M3 = 0.85 * this._Calc.Water_heating.Box45_m.M3 + this._Calc.Water_heating.Box46_m.M3 + this._Calc.Water_heating.Box57_m.M3 + this._Calc.Water_heating.Box59_m.M3 + this._Calc.Water_heating.Box61_m.M3;
      this._Calc.Water_heating.Box62_m.M4 = 0.85 * this._Calc.Water_heating.Box45_m.M4 + this._Calc.Water_heating.Box46_m.M4 + this._Calc.Water_heating.Box57_m.M4 + this._Calc.Water_heating.Box59_m.M4 + this._Calc.Water_heating.Box61_m.M4;
      this._Calc.Water_heating.Box62_m.M5 = 0.85 * this._Calc.Water_heating.Box45_m.M5 + this._Calc.Water_heating.Box46_m.M5 + this._Calc.Water_heating.Box57_m.M5 + this._Calc.Water_heating.Box59_m.M5 + this._Calc.Water_heating.Box61_m.M5;
      this._Calc.Water_heating.Box62_m.M6 = 0.85 * this._Calc.Water_heating.Box45_m.M6 + this._Calc.Water_heating.Box46_m.M6 + this._Calc.Water_heating.Box57_m.M6 + this._Calc.Water_heating.Box59_m.M6 + this._Calc.Water_heating.Box61_m.M6;
      this._Calc.Water_heating.Box62_m.M7 = 0.85 * this._Calc.Water_heating.Box45_m.M7 + this._Calc.Water_heating.Box46_m.M7 + this._Calc.Water_heating.Box57_m.M7 + this._Calc.Water_heating.Box59_m.M7 + this._Calc.Water_heating.Box61_m.M7;
      this._Calc.Water_heating.Box62_m.M8 = 0.85 * this._Calc.Water_heating.Box45_m.M8 + this._Calc.Water_heating.Box46_m.M8 + this._Calc.Water_heating.Box57_m.M8 + this._Calc.Water_heating.Box59_m.M8 + this._Calc.Water_heating.Box61_m.M8;
      this._Calc.Water_heating.Box62_m.M9 = 0.85 * this._Calc.Water_heating.Box45_m.M9 + this._Calc.Water_heating.Box46_m.M9 + this._Calc.Water_heating.Box57_m.M9 + this._Calc.Water_heating.Box59_m.M9 + this._Calc.Water_heating.Box61_m.M9;
      this._Calc.Water_heating.Box62_m.M10 = 0.85 * this._Calc.Water_heating.Box45_m.M10 + this._Calc.Water_heating.Box46_m.M10 + this._Calc.Water_heating.Box57_m.M10 + this._Calc.Water_heating.Box59_m.M10 + this._Calc.Water_heating.Box61_m.M10;
      this._Calc.Water_heating.Box62_m.M11 = 0.85 * this._Calc.Water_heating.Box45_m.M11 + this._Calc.Water_heating.Box46_m.M11 + this._Calc.Water_heating.Box57_m.M11 + this._Calc.Water_heating.Box59_m.M11 + this._Calc.Water_heating.Box61_m.M11;
      this._Calc.Water_heating.Box62_m.M12 = 0.85 * this._Calc.Water_heating.Box45_m.M12 + this._Calc.Water_heating.Box46_m.M12 + this._Calc.Water_heating.Box57_m.M12 + this._Calc.Water_heating.Box59_m.M12 + this._Calc.Water_heating.Box61_m.M12;
      if (dwelling2.Water.Cylinder.SummerImmersion)
      {
        this._Calc.Water_heating.Box64_m.M1 = this._Calc.Water_heating.Box62_m.M1 + this._Calc.Water_heating.Box63_m.M1;
        this._Calc.Water_heating.Box64_m.M2 = this._Calc.Water_heating.Box62_m.M2 + this._Calc.Water_heating.Box63_m.M2;
        this._Calc.Water_heating.Box64_m.M3 = this._Calc.Water_heating.Box62_m.M3 + this._Calc.Water_heating.Box63_m.M3;
        this._Calc.Water_heating.Box64_m.M4 = this._Calc.Water_heating.Box62_m.M4 + this._Calc.Water_heating.Box63_m.M4;
        this._Calc.Water_heating.Box64_m.M5 = this._Calc.Water_heating.Box62_m.M5 + this._Calc.Water_heating.Box63_m.M5;
        this._Calc.Water_heating.Box64_mImm.M6 = this._Calc.Water_heating.Box62_m.M6 + this._Calc.Water_heating.Box63_m.M6;
        this._Calc.Water_heating.Box64_mImm.M7 = this._Calc.Water_heating.Box62_m.M7 + this._Calc.Water_heating.Box63_m.M7;
        this._Calc.Water_heating.Box64_mImm.M8 = this._Calc.Water_heating.Box62_m.M8 + this._Calc.Water_heating.Box63_m.M8;
        this._Calc.Water_heating.Box64_mImm.M9 = this._Calc.Water_heating.Box62_m.M9 + this._Calc.Water_heating.Box63_m.M9;
        if (dwelling2.Water.WWHRS.Include)
        {
          Months box64MImm1;
          double num31 = (box64MImm1 = this._Calc.Water_heating.Box64_mImm).M6 + this._Calc.Water_heating.WWHRS.Sm.M6;
          box64MImm1.M6 = num31;
          Months box64MImm2;
          double num32 = (box64MImm2 = this._Calc.Water_heating.Box64_mImm).M7 + this._Calc.Water_heating.WWHRS.Sm.M7;
          box64MImm2.M7 = num32;
          Months box64MImm3;
          double num33 = (box64MImm3 = this._Calc.Water_heating.Box64_mImm).M8 + this._Calc.Water_heating.WWHRS.Sm.M8;
          box64MImm3.M8 = num33;
          Months box64MImm4;
          double num34 = (box64MImm4 = this._Calc.Water_heating.Box64_mImm).M9 + this._Calc.Water_heating.WWHRS.Sm.M9;
          box64MImm4.M9 = num34;
        }
        this._Calc.Water_heating.Box64_m.M10 = this._Calc.Water_heating.Box62_m.M10 + this._Calc.Water_heating.Box63_m.M10;
        this._Calc.Water_heating.Box64_m.M11 = this._Calc.Water_heating.Box62_m.M11 + this._Calc.Water_heating.Box63_m.M11;
        this._Calc.Water_heating.Box64_m.M12 = this._Calc.Water_heating.Box62_m.M12 + this._Calc.Water_heating.Box63_m.M12;
      }
      else if (Operators.CompareString(dwelling2.Water.Cylinder.HPImmersion, "Yes", false) == 0)
      {
        this._Calc.Water_heating.Box64_m.M1 = this._Calc.Water_heating.Box62_m.M1 + this._Calc.Water_heating.Box63_m.M1;
        this._Calc.Water_heating.Box64_m.M2 = this._Calc.Water_heating.Box62_m.M2 + this._Calc.Water_heating.Box63_m.M2;
        this._Calc.Water_heating.Box64_m.M3 = this._Calc.Water_heating.Box62_m.M3 + this._Calc.Water_heating.Box63_m.M3;
        this._Calc.Water_heating.Box64_m.M4 = this._Calc.Water_heating.Box62_m.M4 + this._Calc.Water_heating.Box63_m.M4;
        this._Calc.Water_heating.Box64_m.M5 = this._Calc.Water_heating.Box62_m.M5 + this._Calc.Water_heating.Box63_m.M5;
        this._Calc.Water_heating.Box64_mImm.M6 = this._Calc.Water_heating.Box62_m.M6 + this._Calc.Water_heating.Box63_m.M6;
        this._Calc.Water_heating.Box64_mImm.M7 = this._Calc.Water_heating.Box62_m.M7 + this._Calc.Water_heating.Box63_m.M7;
        this._Calc.Water_heating.Box64_mImm.M8 = this._Calc.Water_heating.Box62_m.M8 + this._Calc.Water_heating.Box63_m.M8;
        this._Calc.Water_heating.Box64_mImm.M9 = this._Calc.Water_heating.Box62_m.M9 + this._Calc.Water_heating.Box63_m.M9;
        this._Calc.Water_heating.Box64_m.M10 = this._Calc.Water_heating.Box62_m.M10 + this._Calc.Water_heating.Box63_m.M10;
        this._Calc.Water_heating.Box64_m.M11 = this._Calc.Water_heating.Box62_m.M11 + this._Calc.Water_heating.Box63_m.M11;
        this._Calc.Water_heating.Box64_m.M12 = this._Calc.Water_heating.Box62_m.M12 + this._Calc.Water_heating.Box63_m.M12;
      }
      else
      {
        this._Calc.Water_heating.Box64_m.M1 = this._Calc.Water_heating.Box62_m.M1 + this._Calc.Water_heating.Box63_m.M1;
        this._Calc.Water_heating.Box64_m.M2 = this._Calc.Water_heating.Box62_m.M2 + this._Calc.Water_heating.Box63_m.M2;
        this._Calc.Water_heating.Box64_m.M3 = this._Calc.Water_heating.Box62_m.M3 + this._Calc.Water_heating.Box63_m.M3;
        this._Calc.Water_heating.Box64_m.M4 = this._Calc.Water_heating.Box62_m.M4 + this._Calc.Water_heating.Box63_m.M4;
        this._Calc.Water_heating.Box64_m.M5 = this._Calc.Water_heating.Box62_m.M5 + this._Calc.Water_heating.Box63_m.M5;
        this._Calc.Water_heating.Box64_m.M6 = this._Calc.Water_heating.Box62_m.M6 + this._Calc.Water_heating.Box63_m.M6;
        this._Calc.Water_heating.Box64_m.M7 = this._Calc.Water_heating.Box62_m.M7 + this._Calc.Water_heating.Box63_m.M7;
        this._Calc.Water_heating.Box64_m.M8 = this._Calc.Water_heating.Box62_m.M8 + this._Calc.Water_heating.Box63_m.M8;
        this._Calc.Water_heating.Box64_m.M9 = this._Calc.Water_heating.Box62_m.M9 + this._Calc.Water_heating.Box63_m.M9;
        this._Calc.Water_heating.Box64_m.M10 = this._Calc.Water_heating.Box62_m.M10 + this._Calc.Water_heating.Box63_m.M10;
        this._Calc.Water_heating.Box64_m.M11 = this._Calc.Water_heating.Box62_m.M11 + this._Calc.Water_heating.Box63_m.M11;
        this._Calc.Water_heating.Box64_m.M12 = this._Calc.Water_heating.Box62_m.M12 + this._Calc.Water_heating.Box63_m.M12;
      }
      if (dwelling2.Water.WWHRS.Include)
      {
        Months box64M1;
        double num35 = (box64M1 = this._Calc.Water_heating.Box64_m).M1 + this._Calc.Water_heating.WWHRS.Sm.M1;
        box64M1.M1 = num35;
        Months box64M2;
        double num36 = (box64M2 = this._Calc.Water_heating.Box64_m).M2 + this._Calc.Water_heating.WWHRS.Sm.M2;
        box64M2.M2 = num36;
        Months box64M3;
        double num37 = (box64M3 = this._Calc.Water_heating.Box64_m).M3 + this._Calc.Water_heating.WWHRS.Sm.M3;
        box64M3.M3 = num37;
        Months box64M4;
        double num38 = (box64M4 = this._Calc.Water_heating.Box64_m).M4 + this._Calc.Water_heating.WWHRS.Sm.M4;
        box64M4.M4 = num38;
        Months box64M5;
        double num39 = (box64M5 = this._Calc.Water_heating.Box64_m).M5 + this._Calc.Water_heating.WWHRS.Sm.M5;
        box64M5.M5 = num39;
        Months box64M6;
        double num40 = (box64M6 = this._Calc.Water_heating.Box64_m).M6 + this._Calc.Water_heating.WWHRS.Sm.M6;
        box64M6.M6 = num40;
        Months box64M7;
        double num41 = (box64M7 = this._Calc.Water_heating.Box64_m).M7 + this._Calc.Water_heating.WWHRS.Sm.M7;
        box64M7.M7 = num41;
        Months box64M8;
        double num42 = (box64M8 = this._Calc.Water_heating.Box64_m).M8 + this._Calc.Water_heating.WWHRS.Sm.M8;
        box64M8.M8 = num42;
        Months box64M9;
        double num43 = (box64M9 = this._Calc.Water_heating.Box64_m).M9 + this._Calc.Water_heating.WWHRS.Sm.M9;
        box64M9.M9 = num43;
        Months box64M10;
        double num44 = (box64M10 = this._Calc.Water_heating.Box64_m).M10 + this._Calc.Water_heating.WWHRS.Sm.M10;
        box64M10.M10 = num44;
        Months box64M11;
        double num45 = (box64M11 = this._Calc.Water_heating.Box64_m).M11 + this._Calc.Water_heating.WWHRS.Sm.M11;
        box64M11.M11 = num45;
        Months box64M12;
        double num46 = (box64M12 = this._Calc.Water_heating.Box64_m).M12 + this._Calc.Water_heating.WWHRS.Sm.M12;
        box64M12.M12 = num46;
      }
      if (dwelling2.Water.FGHRS.Include)
      {
        Months box64M13;
        double num47 = (box64M13 = this._Calc.Water_heating.Box64_m).M1 + this._Calc.Water_heating.FGHRS.Sm.M1;
        box64M13.M1 = num47;
        Months box64M14;
        double num48 = (box64M14 = this._Calc.Water_heating.Box64_m).M2 + this._Calc.Water_heating.FGHRS.Sm.M2;
        box64M14.M2 = num48;
        Months box64M15;
        double num49 = (box64M15 = this._Calc.Water_heating.Box64_m).M3 + this._Calc.Water_heating.FGHRS.Sm.M3;
        box64M15.M3 = num49;
        Months box64M16;
        double num50 = (box64M16 = this._Calc.Water_heating.Box64_m).M4 + this._Calc.Water_heating.FGHRS.Sm.M4;
        box64M16.M4 = num50;
        Months box64M17;
        double num51 = (box64M17 = this._Calc.Water_heating.Box64_m).M5 + this._Calc.Water_heating.FGHRS.Sm.M5;
        box64M17.M5 = num51;
        Months box64M18;
        double num52 = (box64M18 = this._Calc.Water_heating.Box64_m).M6 + this._Calc.Water_heating.FGHRS.Sm.M6;
        box64M18.M6 = num52;
        Months box64M19;
        double num53 = (box64M19 = this._Calc.Water_heating.Box64_m).M7 + this._Calc.Water_heating.FGHRS.Sm.M7;
        box64M19.M7 = num53;
        Months box64M20;
        double num54 = (box64M20 = this._Calc.Water_heating.Box64_m).M8 + this._Calc.Water_heating.FGHRS.Sm.M8;
        box64M20.M8 = num54;
        Months box64M21;
        double num55 = (box64M21 = this._Calc.Water_heating.Box64_m).M9 + this._Calc.Water_heating.FGHRS.Sm.M9;
        box64M21.M9 = num55;
        Months box64M22;
        double num56 = (box64M22 = this._Calc.Water_heating.Box64_m).M10 + this._Calc.Water_heating.FGHRS.Sm.M10;
        box64M22.M10 = num56;
        Months box64M23;
        double num57 = (box64M23 = this._Calc.Water_heating.Box64_m).M11 + this._Calc.Water_heating.FGHRS.Sm.M11;
        box64M23.M11 = num57;
        Months box64M24;
        double num58 = (box64M24 = this._Calc.Water_heating.Box64_m).M12 + this._Calc.Water_heating.FGHRS.Sm.M12;
        box64M24.M12 = num58;
      }
      if (this._Calc.Water_heating.Box64_m.M1 < 0.0)
        this._Calc.Water_heating.Box64_m.M1 = 0.0;
      if (this._Calc.Water_heating.Box64_m.M2 < 0.0)
        this._Calc.Water_heating.Box64_m.M2 = 0.0;
      if (this._Calc.Water_heating.Box64_m.M3 < 0.0)
        this._Calc.Water_heating.Box64_m.M3 = 0.0;
      if (this._Calc.Water_heating.Box64_m.M4 < 0.0)
        this._Calc.Water_heating.Box64_m.M4 = 0.0;
      if (this._Calc.Water_heating.Box64_m.M5 < 0.0)
        this._Calc.Water_heating.Box64_m.M5 = 0.0;
      if (this._Calc.Water_heating.Box64_m.M6 < 0.0)
        this._Calc.Water_heating.Box64_m.M6 = 0.0;
      if (this._Calc.Water_heating.Box64_m.M7 < 0.0)
        this._Calc.Water_heating.Box64_m.M7 = 0.0;
      if (this._Calc.Water_heating.Box64_m.M8 < 0.0)
        this._Calc.Water_heating.Box64_m.M8 = 0.0;
      if (this._Calc.Water_heating.Box64_m.M9 < 0.0)
        this._Calc.Water_heating.Box64_m.M9 = 0.0;
      if (this._Calc.Water_heating.Box64_m.M10 < 0.0)
        this._Calc.Water_heating.Box64_m.M10 = 0.0;
      if (this._Calc.Water_heating.Box64_m.M11 < 0.0)
        this._Calc.Water_heating.Box64_m.M11 = 0.0;
      if (this._Calc.Water_heating.Box64_m.M12 < 0.0)
        this._Calc.Water_heating.Box64_m.M12 = 0.0;
      if (this._Calc.Water_heating.Box64_mImm.M1 < 0.0)
        this._Calc.Water_heating.Box64_mImm.M1 = 0.0;
      if (this._Calc.Water_heating.Box64_mImm.M2 < 0.0)
        this._Calc.Water_heating.Box64_mImm.M2 = 0.0;
      if (this._Calc.Water_heating.Box64_mImm.M3 < 0.0)
        this._Calc.Water_heating.Box64_mImm.M3 = 0.0;
      if (this._Calc.Water_heating.Box64_mImm.M4 < 0.0)
        this._Calc.Water_heating.Box64_mImm.M4 = 0.0;
      if (this._Calc.Water_heating.Box64_mImm.M5 < 0.0)
        this._Calc.Water_heating.Box64_mImm.M5 = 0.0;
      if (this._Calc.Water_heating.Box64_mImm.M6 < 0.0)
        this._Calc.Water_heating.Box64_mImm.M6 = 0.0;
      if (this._Calc.Water_heating.Box64_mImm.M7 < 0.0)
        this._Calc.Water_heating.Box64_mImm.M7 = 0.0;
      if (this._Calc.Water_heating.Box64_mImm.M8 < 0.0)
        this._Calc.Water_heating.Box64_mImm.M8 = 0.0;
      if (this._Calc.Water_heating.Box64_mImm.M9 < 0.0)
        this._Calc.Water_heating.Box64_mImm.M9 = 0.0;
      if (this._Calc.Water_heating.Box64_mImm.M10 < 0.0)
        this._Calc.Water_heating.Box64_mImm.M10 = 0.0;
      if (this._Calc.Water_heating.Box64_mImm.M11 < 0.0)
        this._Calc.Water_heating.Box64_mImm.M11 = 0.0;
      if (this._Calc.Water_heating.Box64_mImm.M12 < 0.0)
        this._Calc.Water_heating.Box64_mImm.M12 = 0.0;
      this._Calc.Water_heating.Box64 = this._Calc.Water_heating.Box64_m.M1 + this._Calc.Water_heating.Box64_m.M2 + this._Calc.Water_heating.Box64_m.M3 + this._Calc.Water_heating.Box64_m.M4 + this._Calc.Water_heating.Box64_m.M5 + this._Calc.Water_heating.Box64_m.M6 + this._Calc.Water_heating.Box64_m.M7 + this._Calc.Water_heating.Box64_m.M8 + this._Calc.Water_heating.Box64_m.M9 + this._Calc.Water_heating.Box64_m.M10 + this._Calc.Water_heating.Box64_m.M11 + this._Calc.Water_heating.Box64_m.M12;
      this._Calc.Water_heating.Box64Imm = this._Calc.Water_heating.Box64_mImm.M1 + this._Calc.Water_heating.Box64_mImm.M2 + this._Calc.Water_heating.Box64_mImm.M3 + this._Calc.Water_heating.Box64_mImm.M4 + this._Calc.Water_heating.Box64_mImm.M5 + this._Calc.Water_heating.Box64_mImm.M6 + this._Calc.Water_heating.Box64_mImm.M7 + this._Calc.Water_heating.Box64_mImm.M8 + this._Calc.Water_heating.Box64_mImm.M9 + this._Calc.Water_heating.Box64_mImm.M10 + this._Calc.Water_heating.Box64_mImm.M11 + this._Calc.Water_heating.Box64_mImm.M12;
      if (!dwelling2.Water.Cylinder.InHeatedSpace & (double) dwelling2.Water.Cylinder.Volume != 0.0)
      {
        this._Calc.Water_heating.Box65_m.M1 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M1 + this._Calc.Water_heating.Box61_m.M1) + 0.8 * (this._Calc.Water_heating.Box46_m.M1 + this._Calc.Water_heating.Box59_m.M1);
        this._Calc.Water_heating.Box65_m.M2 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M2 + this._Calc.Water_heating.Box61_m.M2) + 0.8 * (this._Calc.Water_heating.Box46_m.M2 + this._Calc.Water_heating.Box59_m.M2);
        this._Calc.Water_heating.Box65_m.M3 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M3 + this._Calc.Water_heating.Box61_m.M3) + 0.8 * (this._Calc.Water_heating.Box46_m.M3 + this._Calc.Water_heating.Box59_m.M3);
        this._Calc.Water_heating.Box65_m.M4 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M4 + this._Calc.Water_heating.Box61_m.M4) + 0.8 * (this._Calc.Water_heating.Box46_m.M4 + this._Calc.Water_heating.Box59_m.M4);
        this._Calc.Water_heating.Box65_m.M5 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M5 + this._Calc.Water_heating.Box61_m.M5) + 0.8 * (this._Calc.Water_heating.Box46_m.M5 + this._Calc.Water_heating.Box59_m.M5);
        this._Calc.Water_heating.Box65_m.M6 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M6 + this._Calc.Water_heating.Box61_m.M6) + 0.8 * (this._Calc.Water_heating.Box46_m.M6 + this._Calc.Water_heating.Box59_m.M6);
        this._Calc.Water_heating.Box65_m.M7 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M7 + this._Calc.Water_heating.Box61_m.M7) + 0.8 * (this._Calc.Water_heating.Box46_m.M7 + this._Calc.Water_heating.Box59_m.M7);
        this._Calc.Water_heating.Box65_m.M8 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M8 + this._Calc.Water_heating.Box61_m.M8) + 0.8 * (this._Calc.Water_heating.Box46_m.M8 + this._Calc.Water_heating.Box59_m.M8);
        this._Calc.Water_heating.Box65_m.M9 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M9 + this._Calc.Water_heating.Box61_m.M9) + 0.8 * (this._Calc.Water_heating.Box46_m.M9 + this._Calc.Water_heating.Box59_m.M9);
        this._Calc.Water_heating.Box65_m.M10 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M10 + this._Calc.Water_heating.Box61_m.M10) + 0.8 * (this._Calc.Water_heating.Box46_m.M10 + this._Calc.Water_heating.Box59_m.M10);
        this._Calc.Water_heating.Box65_m.M11 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M11 + this._Calc.Water_heating.Box61_m.M11) + 0.8 * (this._Calc.Water_heating.Box46_m.M11 + this._Calc.Water_heating.Box59_m.M11);
        this._Calc.Water_heating.Box65_m.M12 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M12 + this._Calc.Water_heating.Box61_m.M12) + 0.8 * (this._Calc.Water_heating.Box46_m.M12 + this._Calc.Water_heating.Box59_m.M12);
      }
      else
      {
        this._Calc.Water_heating.Box65_m.M1 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M1 + this._Calc.Water_heating.Box61_m.M1) + 0.8 * (this._Calc.Water_heating.Box46_m.M1 + this._Calc.Water_heating.Box57_m.M1 + this._Calc.Water_heating.Box59_m.M1);
        this._Calc.Water_heating.Box65_m.M2 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M2 + this._Calc.Water_heating.Box61_m.M2) + 0.8 * (this._Calc.Water_heating.Box46_m.M2 + this._Calc.Water_heating.Box57_m.M2 + this._Calc.Water_heating.Box59_m.M2);
        this._Calc.Water_heating.Box65_m.M3 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M3 + this._Calc.Water_heating.Box61_m.M3) + 0.8 * (this._Calc.Water_heating.Box46_m.M3 + this._Calc.Water_heating.Box57_m.M3 + this._Calc.Water_heating.Box59_m.M3);
        this._Calc.Water_heating.Box65_m.M4 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M4 + this._Calc.Water_heating.Box61_m.M4) + 0.8 * (this._Calc.Water_heating.Box46_m.M4 + this._Calc.Water_heating.Box57_m.M4 + this._Calc.Water_heating.Box59_m.M4);
        this._Calc.Water_heating.Box65_m.M5 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M5 + this._Calc.Water_heating.Box61_m.M5) + 0.8 * (this._Calc.Water_heating.Box46_m.M5 + this._Calc.Water_heating.Box57_m.M5 + this._Calc.Water_heating.Box59_m.M5);
        this._Calc.Water_heating.Box65_m.M6 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M6 + this._Calc.Water_heating.Box61_m.M6) + 0.8 * (this._Calc.Water_heating.Box46_m.M6 + this._Calc.Water_heating.Box57_m.M6 + this._Calc.Water_heating.Box59_m.M6);
        this._Calc.Water_heating.Box65_m.M7 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M7 + this._Calc.Water_heating.Box61_m.M7) + 0.8 * (this._Calc.Water_heating.Box46_m.M7 + this._Calc.Water_heating.Box57_m.M7 + this._Calc.Water_heating.Box59_m.M7);
        this._Calc.Water_heating.Box65_m.M8 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M8 + this._Calc.Water_heating.Box61_m.M8) + 0.8 * (this._Calc.Water_heating.Box46_m.M8 + this._Calc.Water_heating.Box57_m.M8 + this._Calc.Water_heating.Box59_m.M8);
        this._Calc.Water_heating.Box65_m.M9 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M9 + this._Calc.Water_heating.Box61_m.M9) + 0.8 * (this._Calc.Water_heating.Box46_m.M9 + this._Calc.Water_heating.Box57_m.M9 + this._Calc.Water_heating.Box59_m.M9);
        this._Calc.Water_heating.Box65_m.M10 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M10 + this._Calc.Water_heating.Box61_m.M10) + 0.8 * (this._Calc.Water_heating.Box46_m.M10 + this._Calc.Water_heating.Box57_m.M10 + this._Calc.Water_heating.Box59_m.M10);
        this._Calc.Water_heating.Box65_m.M11 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M11 + this._Calc.Water_heating.Box61_m.M11) + 0.8 * (this._Calc.Water_heating.Box46_m.M11 + this._Calc.Water_heating.Box57_m.M11 + this._Calc.Water_heating.Box59_m.M11);
        this._Calc.Water_heating.Box65_m.M12 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M12 + this._Calc.Water_heating.Box61_m.M12) + 0.8 * (this._Calc.Water_heating.Box46_m.M12 + this._Calc.Water_heating.Box57_m.M12 + this._Calc.Water_heating.Box59_m.M12);
      }
      if (!(Operators.CompareString(dwelling2.MainHeating.InforSource, "Boiler Database", false) == 0 & dwelling2.Water.SystemRef == 901 | Operators.CompareString(dwelling2.MainHeating2.InforSource, "Boiler Database", false) == 0 & dwelling2.Water.SystemRef == 914))
        return;
      SAP_Module.MainHeating mainHeating;
      object objectValue;
      if (Operators.CompareString(dwelling2.MainHeating.InforSource, "Boiler Database", false) == 0 & dwelling2.Water.SystemRef == 901)
      {
        mainHeating = dwelling2.MainHeating;
        objectValue = RuntimeHelpers.GetObjectValue(this.SEDBUKFound);
      }
      else
      {
        mainHeating = dwelling2.MainHeating2;
        objectValue = RuntimeHelpers.GetObjectValue(this.SEDBUKFound2);
      }
      if (mainHeating.SGroup.ToLower().Contains("heat pumps"))
      {
        if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue, (System.Type) null, "HWvessel", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 3.0)
        {
          this._Calc.HeatLoss.HPCalc.nsummer = 0.6 * this._Calc.HeatLoss.HPCalc.nsummer;
          this._Calc.HeatLoss.HPCalc.esummer = 0.6 * this._Calc.HeatLoss.HPCalc.esummer;
        }
        else if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue, (System.Type) null, "HWvessel", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 2.0)
        {
          bool flag6 = false;
          if (!this._House.Water.Cylinder.HPExchanger.Equals(0.0f) && Math.Round((double) this._House.Water.Cylinder.HPExchanger - Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue, (System.Type) null, "VesselHeat_Exchanger", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))), 4) < 0.0)
            flag6 = true;
          if ((double) dwelling2.Water.Cylinder.Volume < Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue, (System.Type) null, "VesselVol", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))))
            flag6 = true;
          if ((this._Calc.Water_heating.Box48 != 0.0 ? this._Calc.Water_heating.Box48 : this._Calc.Water_heating.Box50 * this._Calc.Water_heating.Box51 * this._Calc.Water_heating.Box52) > Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue, (System.Type) null, "VesselHeat_Loss", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))))
            flag6 = true;
          if (flag6)
          {
            this._Calc.HeatLoss.HPCalc.nsummer = 0.6 * this._Calc.HeatLoss.HPCalc.nsummer;
            this._Calc.HeatLoss.HPCalc.esummer = 0.6 * this._Calc.HeatLoss.HPCalc.esummer;
          }
          else
          {
            this._Calc.HeatLoss.HPCalc.nsummer = 0.95 * this._Calc.HeatLoss.HPCalc.nsummer;
            this._Calc.HeatLoss.HPCalc.esummer = 0.95 * this._Calc.HeatLoss.HPCalc.esummer;
          }
        }
        else
        {
          this._Calc.HeatLoss.HPCalc.nsummer = 0.95 * this._Calc.HeatLoss.HPCalc.nsummer;
          this._Calc.HeatLoss.HPCalc.esummer = 0.95 * this._Calc.HeatLoss.HPCalc.esummer;
        }
        if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue, (System.Type) null, "ServiceProvision", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 1.0 && this._Calc.HeatLoss.HPCalc.nsummer < 100.0)
          this._Calc.HeatLoss.HPCalc.nsummer = 100.0;
        if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(objectValue, (System.Type) null, "HWvessel", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) "1", false))
        {
          this._Calc.Water_heating.Box65_m.M1 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M1 + this._Calc.Water_heating.Box61_m.M1) + 0.8 * (this._Calc.Water_heating.Box46_m.M1 + this._Calc.Water_heating.Box59_m.M1);
          this._Calc.Water_heating.Box65_m.M2 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M2 + this._Calc.Water_heating.Box61_m.M2) + 0.8 * (this._Calc.Water_heating.Box46_m.M2 + this._Calc.Water_heating.Box59_m.M2);
          this._Calc.Water_heating.Box65_m.M3 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M3 + this._Calc.Water_heating.Box61_m.M3) + 0.8 * (this._Calc.Water_heating.Box46_m.M3 + this._Calc.Water_heating.Box59_m.M3);
          this._Calc.Water_heating.Box65_m.M4 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M4 + this._Calc.Water_heating.Box61_m.M4) + 0.8 * (this._Calc.Water_heating.Box46_m.M4 + this._Calc.Water_heating.Box59_m.M4);
          this._Calc.Water_heating.Box65_m.M5 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M5 + this._Calc.Water_heating.Box61_m.M5) + 0.8 * (this._Calc.Water_heating.Box46_m.M5 + this._Calc.Water_heating.Box59_m.M5);
          this._Calc.Water_heating.Box65_m.M6 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M6 + this._Calc.Water_heating.Box61_m.M6) + 0.8 * (this._Calc.Water_heating.Box46_m.M6 + this._Calc.Water_heating.Box59_m.M6);
          this._Calc.Water_heating.Box65_m.M7 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M7 + this._Calc.Water_heating.Box61_m.M7) + 0.8 * (this._Calc.Water_heating.Box46_m.M7 + this._Calc.Water_heating.Box59_m.M7);
          this._Calc.Water_heating.Box65_m.M8 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M8 + this._Calc.Water_heating.Box61_m.M8) + 0.8 * (this._Calc.Water_heating.Box46_m.M8 + this._Calc.Water_heating.Box59_m.M8);
          this._Calc.Water_heating.Box65_m.M9 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M9 + this._Calc.Water_heating.Box61_m.M9) + 0.8 * (this._Calc.Water_heating.Box46_m.M9 + this._Calc.Water_heating.Box59_m.M9);
          this._Calc.Water_heating.Box65_m.M10 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M10 + this._Calc.Water_heating.Box61_m.M10) + 0.8 * (this._Calc.Water_heating.Box46_m.M10 + this._Calc.Water_heating.Box59_m.M10);
          this._Calc.Water_heating.Box65_m.M11 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M11 + this._Calc.Water_heating.Box61_m.M11) + 0.8 * (this._Calc.Water_heating.Box46_m.M11 + this._Calc.Water_heating.Box59_m.M11);
          this._Calc.Water_heating.Box65_m.M12 = 0.25 * (0.85 * this._Calc.Water_heating.Box45_m.M12 + this._Calc.Water_heating.Box61_m.M12) + 0.8 * (this._Calc.Water_heating.Box46_m.M12 + this._Calc.Water_heating.Box59_m.M12);
        }
      }
    }

    private bool IsCombi()
    {
      if (this._House.Water.SystemRef == 901)
      {
        if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0)
        {
          string sgroup = this._House.MainHeating.SGroup;
          if (Operators.CompareString(sgroup, "Heat pumps", false) == 0 || Operators.CompareString(sgroup, "Solid fuel boilers", false) == 0 || Operators.CompareString(sgroup, "Micro-cogeneration (micro-CHP)", false) == 0)
            return false;
          this.SEDBUKFound = (object) Calc2012.SEDBUK(this._House.MainHeating.SEDBUK);
          return Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "MainType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 2, false);
        }
        switch (this._House.MainHeating.SAPTableCode)
        {
          case 103:
          case 104:
          case 107:
          case 108:
          case 112:
          case 113:
          case 118:
          case 128:
          case 129:
          case 130:
            return true;
          default:
            return false;
        }
      }
      else
      {
        if (this._House.Water.SystemRef != 914)
          return false;
        if (Operators.CompareString(this._House.MainHeating2.InforSource, "Boiler Database", false) == 0)
        {
          string sgroup = this._House.MainHeating2.SGroup;
          if (Operators.CompareString(sgroup, "Heat pumps", false) == 0 || Operators.CompareString(sgroup, "Solid fuel boilers", false) == 0 || Operators.CompareString(sgroup, "Micro-cogeneration (micro-CHP)", false) == 0)
            return false;
          this.SEDBUKFound = (object) Calc2012.SEDBUK(this._House.MainHeating2.SEDBUK);
          return Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "MainType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 2, false);
        }
        switch (this._House.MainHeating2.SAPTableCode)
        {
          case 103:
          case 104:
          case 107:
          case 108:
          case 112:
          case 113:
          case 118:
          case 128:
          case 129:
          case 130:
            return true;
          default:
            return false;
        }
      }
    }

    private void SetBox61_FGHRS()
    {
      if (!this._House.Water.FGHRS.Include)
        return;
      PCDF.FGHRS fghrs;
      try
      {
        fghrs = this.FGHRS(this._House.Water.FGHRS.IndexNo);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        if (fghrs != null && Operators.CompareString(fghrs.HeatStore, "3", false) == 0)
        {
          double num = Conversion.Val(fghrs.HeatStoreTV);
          if (num >= 60.0)
          {
            this._Calc.Water_heating.Box61_m.M1 = 0.0;
            this._Calc.Water_heating.Box61_m.M2 = 0.0;
            this._Calc.Water_heating.Box61_m.M3 = 0.0;
            this._Calc.Water_heating.Box61_m.M4 = 0.0;
            this._Calc.Water_heating.Box61_m.M5 = 0.0;
            this._Calc.Water_heating.Box61_m.M6 = 0.0;
            this._Calc.Water_heating.Box61_m.M7 = 0.0;
            this._Calc.Water_heating.Box61_m.M8 = 0.0;
            this._Calc.Water_heating.Box61_m.M9 = 0.0;
            this._Calc.Water_heating.Box61_m.M10 = 0.0;
            this._Calc.Water_heating.Box61_m.M11 = 0.0;
            this._Calc.Water_heating.Box61_m.M12 = 0.0;
          }
          else
          {
            this._Calc.Water_heating.Box61_m.M1 = this._Calc.Water_heating.Box44_m.M1 >= 100.0 ? (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M1 : (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M1 * this._Calc.Water_heating.Box44_m.M1 / 100.0;
            this._Calc.Water_heating.Box61_m.M2 = this._Calc.Water_heating.Box44_m.M2 >= 100.0 ? (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M2 : (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M2 * this._Calc.Water_heating.Box44_m.M2 / 100.0;
            this._Calc.Water_heating.Box61_m.M3 = this._Calc.Water_heating.Box44_m.M3 >= 100.0 ? (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M3 : (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M3 * this._Calc.Water_heating.Box44_m.M3 / 100.0;
            this._Calc.Water_heating.Box61_m.M4 = this._Calc.Water_heating.Box44_m.M4 >= 100.0 ? (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M4 : (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M4 * this._Calc.Water_heating.Box44_m.M4 / 100.0;
            this._Calc.Water_heating.Box61_m.M5 = this._Calc.Water_heating.Box44_m.M5 >= 100.0 ? (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M5 : (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M5 * this._Calc.Water_heating.Box44_m.M5 / 100.0;
            this._Calc.Water_heating.Box61_m.M6 = this._Calc.Water_heating.Box44_m.M6 >= 100.0 ? (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M6 : (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M6 * this._Calc.Water_heating.Box44_m.M6 / 100.0;
            this._Calc.Water_heating.Box61_m.M7 = this._Calc.Water_heating.Box44_m.M7 >= 100.0 ? (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M7 : (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M7 * this._Calc.Water_heating.Box44_m.M7 / 100.0;
            this._Calc.Water_heating.Box61_m.M8 = this._Calc.Water_heating.Box44_m.M8 >= 100.0 ? (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M8 : (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M8 * this._Calc.Water_heating.Box44_m.M8 / 100.0;
            this._Calc.Water_heating.Box61_m.M9 = this._Calc.Water_heating.Box44_m.M9 >= 100.0 ? (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M9 : (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M9 * this._Calc.Water_heating.Box44_m.M9 / 100.0;
            this._Calc.Water_heating.Box61_m.M10 = this._Calc.Water_heating.Box44_m.M10 >= 100.0 ? (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M10 : (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M10 * this._Calc.Water_heating.Box44_m.M10 / 100.0;
            this._Calc.Water_heating.Box61_m.M11 = this._Calc.Water_heating.Box44_m.M11 >= 100.0 ? (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M11 : (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M11 * this._Calc.Water_heating.Box44_m.M11 / 100.0;
            this._Calc.Water_heating.Box61_m.M12 = this._Calc.Water_heating.Box44_m.M12 >= 100.0 ? (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M12 : (this._Calc.Water_heating.Box60 - (num - 15.0) * 15.0) / 365.0 * this._Calc.HeatLoss.Box41_m.M12 * this._Calc.Water_heating.Box44_m.M12 / 100.0;
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void Calc_FGHRS()
    {
      FGHRS2012 fghrs1 = this._Calc.Water_heating.FGHRS;
      Calc2012 calc2012 = new Calc2012()
      {
        ForFGHRSCalc = true
      };
      calc2012.OccupancyCalc = this.OccupancyCalc;
      calc2012.StandardOccupancyCalc = this.StandardOccupancyCalc;
      calc2012.OccupancyData = this.OccupancyData;
      if (this.OccupancyCalc | this.StandardOccupancyCalc)
        calc2012.IsRHICalc = true;
      calc2012.IsRHICalc = this.IsRHICalc;
      calc2012.IsHeatDemand = this.IsHeatDemand;
      SAP_Module.Dwelling dwelling1 = new SAP_Module.Dwelling();
      SAP_Module.Dwelling dwelling2 = this.CopyDwelling(this._House);
      dwelling2.Water.FGHRS.Include = false;
      PCDF.FGHRS fghrs2 = this.FGHRS(this._House.Water.FGHRS.IndexNo);
      List<PCDF.FGHRS_Sub> fghrsSubList = this.FGHRS_Sub(this._House.Water.FGHRS.IndexNo);
      if (fghrs2 == null)
        return;
      if (Operators.CompareString(fghrs2.HeatStore, "3", false) == 0)
      {
        calc2012.DontRedimIt = true;
        calc2012._Calc.Water_heating.Box47 = Conversion.Val(fghrs2.HeatStoreLR);
        calc2012._Calc.Water_heating.Box48 = 0.54;
        calc2012._Calc.Water_heating.Box55 = calc2012._Calc.Water_heating.Box47 * calc2012._Calc.Water_heating.Box48;
        calc2012._Calc.Water_heating.Box60 = 600.0;
        calc2012._Calc.Water_heating.Box56_m.M1 = calc2012._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M1;
        calc2012._Calc.Water_heating.Box56_m.M2 = calc2012._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M2;
        calc2012._Calc.Water_heating.Box56_m.M3 = calc2012._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M3;
        calc2012._Calc.Water_heating.Box56_m.M4 = calc2012._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M4;
        calc2012._Calc.Water_heating.Box56_m.M5 = calc2012._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M5;
        calc2012._Calc.Water_heating.Box56_m.M6 = calc2012._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M6;
        calc2012._Calc.Water_heating.Box56_m.M7 = calc2012._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M7;
        calc2012._Calc.Water_heating.Box56_m.M8 = calc2012._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M8;
        calc2012._Calc.Water_heating.Box56_m.M9 = calc2012._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M9;
        calc2012._Calc.Water_heating.Box56_m.M10 = calc2012._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M10;
        calc2012._Calc.Water_heating.Box56_m.M11 = calc2012._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M11;
        calc2012._Calc.Water_heating.Box56_m.M12 = calc2012._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M12;
        this.SetBox61_FGHRS();
        calc2012._Calc.Water_heating.Box61_m.M1 = this._Calc.Water_heating.Box61_m.M1;
        calc2012._Calc.Water_heating.Box61_m.M2 = this._Calc.Water_heating.Box61_m.M2;
        calc2012._Calc.Water_heating.Box61_m.M3 = this._Calc.Water_heating.Box61_m.M3;
        calc2012._Calc.Water_heating.Box61_m.M4 = this._Calc.Water_heating.Box61_m.M4;
        calc2012._Calc.Water_heating.Box61_m.M5 = this._Calc.Water_heating.Box61_m.M5;
        calc2012._Calc.Water_heating.Box61_m.M6 = this._Calc.Water_heating.Box61_m.M6;
        calc2012._Calc.Water_heating.Box61_m.M7 = this._Calc.Water_heating.Box61_m.M7;
        calc2012._Calc.Water_heating.Box61_m.M8 = this._Calc.Water_heating.Box61_m.M8;
        calc2012._Calc.Water_heating.Box61_m.M9 = this._Calc.Water_heating.Box61_m.M9;
        calc2012._Calc.Water_heating.Box61_m.M10 = this._Calc.Water_heating.Box61_m.M10;
        calc2012._Calc.Water_heating.Box61_m.M11 = this._Calc.Water_heating.Box61_m.M11;
        calc2012._Calc.Water_heating.Box61_m.M12 = this._Calc.Water_heating.Box61_m.M12;
        calc2012._MissBox61 = true;
      }
      bool flag1;
      if (this.CalcAssessmentLZCPlease)
      {
        flag1 = true;
        this.CalcAssessmentLZCPlease = false;
      }
      if (this.DTER)
        calc2012.DTER = true;
      calc2012.OriginalSAPDwelling = dwelling2;
      calc2012.Dwelling = dwelling2;
      if (flag1)
        this.CalcAssessmentLZCPlease = true;
      bool flag2;
      bool flag3;
      if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0)
      {
        if (Operators.CompareString(this._House.MainHeating.SGroup, "Gas boilers and oil boilers", false) == 0)
        {
          string mainType = ((PCDF.SEDBUK) this.SEDBUKFound).MainType;
          if (Operators.CompareString(mainType, Conversions.ToString(2), false) == 0)
          {
            if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "KpHtFac", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) != 0.0)
              fghrs1.HasStore = true;
            if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StrType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) != 0.0)
            {
              fghrs1.HasStore = true;
              flag2 = true;
              fghrs1.Vk = Conversions.ToDouble(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StrVol", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
            }
            if (!fghrs1.HasStore)
              flag3 = true;
          }
          else if (Operators.CompareString(mainType, Conversions.ToString(3), false) == 0)
          {
            fghrs1.HasStore = true;
            flag2 = true;
          }
          else if (Operators.CompareString(mainType, Conversions.ToString(1), false) == 0)
          {
            fghrs1.HasStore = true;
            if (this._House.Water.SystemRef == 901)
            {
              flag2 = true;
              fghrs1.Vk = (double) this._House.Water.Cylinder.Volume;
            }
          }
        }
      }
      else
      {
        int sapTableCode = this._House.MainHeating.SAPTableCode;
        if (sapTableCode == 101 || sapTableCode == 102 || sapTableCode == 105 || sapTableCode == 106 || sapTableCode == 109 || sapTableCode == 110 || sapTableCode == 111 || sapTableCode == 114 || sapTableCode == 115 || sapTableCode == 116 || sapTableCode == 117 || sapTableCode == 119 || sapTableCode == 120 || sapTableCode == 121 || sapTableCode == 122 || sapTableCode == 123 || sapTableCode == 124 || sapTableCode == 125 || sapTableCode == 126 || sapTableCode == (int) sbyte.MaxValue || sapTableCode == 131 || sapTableCode == 132 || sapTableCode == 133 || sapTableCode == 134 || sapTableCode == 135 || sapTableCode == 136 || sapTableCode == 137 || sapTableCode == 138 || sapTableCode == 139 || sapTableCode == 140 || sapTableCode == 141 || sapTableCode >= 151 && sapTableCode <= 230 || sapTableCode >= 501 && sapTableCode <= 514 || sapTableCode >= 521 && sapTableCode <= 527)
        {
          fghrs1.HasStore = true;
          flag2 = true;
          if ((double) this._House.Water.Cylinder.Volume > 0.0)
            fghrs1.Vk = (double) this._House.Water.Cylinder.Volume;
        }
        else if (sapTableCode == 103 || sapTableCode == 104 || sapTableCode == 107 || sapTableCode == 108 || sapTableCode == 112 || sapTableCode == 113 || sapTableCode == 118 || sapTableCode == 128 || sapTableCode == 129 || sapTableCode == 130)
        {
          string combiType = this._House.Water.CombiType;
          if (Operators.CompareString(combiType, "Storage combi boiler, primary store", false) == 0 || Operators.CompareString(combiType, "Storage combi boiler, secondary store", false) == 0)
            fghrs1.HasStore = true;
          else if (this._House.MainHeating.Boiler.IncludeKeepHot)
            fghrs1.HasStore = true;
        }
      }
      if (!(Operators.CompareString(fghrs2.HeatStore, "2", false) == 0 & !flag2 & !flag3))
        ;
      if (fghrs2 != null)
      {
        fghrs1.Kf1 = Conversion.Val(fghrs2.DirectUHR);
        fghrs1.Kf2 = Conversion.Val(fghrs2.DirectTHR);
        fghrs1.Qhw_m.M1 = this._Calc.Water_heating.Box45_m.M1 + this._Calc.Water_heating.WWHRS.Sm.M1 + this._Calc.Water_heating.Box63_m.M1;
        fghrs1.Qhw_m.M2 = this._Calc.Water_heating.Box45_m.M2 + this._Calc.Water_heating.WWHRS.Sm.M2 + this._Calc.Water_heating.Box63_m.M2;
        fghrs1.Qhw_m.M3 = this._Calc.Water_heating.Box45_m.M3 + this._Calc.Water_heating.WWHRS.Sm.M3 + this._Calc.Water_heating.Box63_m.M3;
        fghrs1.Qhw_m.M4 = this._Calc.Water_heating.Box45_m.M4 + this._Calc.Water_heating.WWHRS.Sm.M4 + this._Calc.Water_heating.Box63_m.M4;
        fghrs1.Qhw_m.M5 = this._Calc.Water_heating.Box45_m.M5 + this._Calc.Water_heating.WWHRS.Sm.M5 + this._Calc.Water_heating.Box63_m.M5;
        fghrs1.Qhw_m.M6 = this._Calc.Water_heating.Box45_m.M6 + this._Calc.Water_heating.WWHRS.Sm.M6 + this._Calc.Water_heating.Box63_m.M6;
        fghrs1.Qhw_m.M7 = this._Calc.Water_heating.Box45_m.M7 + this._Calc.Water_heating.WWHRS.Sm.M7 + this._Calc.Water_heating.Box63_m.M7;
        fghrs1.Qhw_m.M8 = this._Calc.Water_heating.Box45_m.M8 + this._Calc.Water_heating.WWHRS.Sm.M8 + this._Calc.Water_heating.Box63_m.M8;
        fghrs1.Qhw_m.M9 = this._Calc.Water_heating.Box45_m.M9 + this._Calc.Water_heating.WWHRS.Sm.M9 + this._Calc.Water_heating.Box63_m.M9;
        fghrs1.Qhw_m.M10 = this._Calc.Water_heating.Box45_m.M10 + this._Calc.Water_heating.WWHRS.Sm.M10 + this._Calc.Water_heating.Box63_m.M10;
        fghrs1.Qhw_m.M11 = this._Calc.Water_heating.Box45_m.M11 + this._Calc.Water_heating.WWHRS.Sm.M11 + this._Calc.Water_heating.Box63_m.M11;
        fghrs1.Qhw_m.M12 = this._Calc.Water_heating.Box45_m.M12 + this._Calc.Water_heating.WWHRS.Sm.M12 + this._Calc.Water_heating.Box63_m.M12;
        if (Operators.CompareString(fghrs2.HeatStore, "1", false) != 0)
        {
          if (Operators.CompareString(fghrs2.HeatStore, "3", false) == 0)
          {
            fghrs1.HasStore = true;
            flag3 = false;
            flag2 = true;
          }
          string str1;
          string str2;
          string str3;
          if (fghrs1.HasStore)
          {
            str1 = "CoefficientA2";
            str2 = "CoefficientB2";
            str3 = "CoefficientC2";
          }
          else
          {
            str1 = "CoefficientA1";
            str2 = "CoefficientB1";
            str3 = "CoefficientC1";
          }
          if (Operators.CompareString(fghrs2.HeatStore, "3", false) == 0)
          {
            fghrs1.Vk = Conversions.ToDouble(fghrs2.HeatStoreTV);
            fghrs1.StoreVolume = fghrs1.Vk;
          }
          fghrs1.Qsp_m.M1 = calc2012._Calc.Space_heating_requirement.Box98_m.M1 * calc2012._Calc.Energy_Requirements_9a.Box204;
          fghrs1.Qsp_m.M2 = calc2012._Calc.Space_heating_requirement.Box98_m.M2 * calc2012._Calc.Energy_Requirements_9a.Box204;
          fghrs1.Qsp_m.M3 = calc2012._Calc.Space_heating_requirement.Box98_m.M3 * calc2012._Calc.Energy_Requirements_9a.Box204;
          fghrs1.Qsp_m.M4 = calc2012._Calc.Space_heating_requirement.Box98_m.M4 * calc2012._Calc.Energy_Requirements_9a.Box204;
          fghrs1.Qsp_m.M5 = calc2012._Calc.Space_heating_requirement.Box98_m.M5 * calc2012._Calc.Energy_Requirements_9a.Box204;
          fghrs1.Qsp_m.M6 = calc2012._Calc.Space_heating_requirement.Box98_m.M6 * calc2012._Calc.Energy_Requirements_9a.Box204;
          fghrs1.Qsp_m.M7 = calc2012._Calc.Space_heating_requirement.Box98_m.M7 * calc2012._Calc.Energy_Requirements_9a.Box204;
          fghrs1.Qsp_m.M8 = calc2012._Calc.Space_heating_requirement.Box98_m.M8 * calc2012._Calc.Energy_Requirements_9a.Box204;
          fghrs1.Qsp_m.M9 = calc2012._Calc.Space_heating_requirement.Box98_m.M9 * calc2012._Calc.Energy_Requirements_9a.Box204;
          fghrs1.Qsp_m.M10 = calc2012._Calc.Space_heating_requirement.Box98_m.M10 * calc2012._Calc.Energy_Requirements_9a.Box204;
          fghrs1.Qsp_m.M11 = calc2012._Calc.Space_heating_requirement.Box98_m.M11 * calc2012._Calc.Energy_Requirements_9a.Box204;
          fghrs1.Qsp_m.M12 = calc2012._Calc.Space_heating_requirement.Box98_m.M12 * calc2012._Calc.Energy_Requirements_9a.Box204;
          int num = checked (fghrsSubList.Count - 2);
          int index = 0;
          while (index <= num)
          {
            if (fghrs1.Qsp_m.M1 >= Conversion.Val(fghrsSubList[index].SpaceHR) & fghrs1.Qsp_m.M1 < Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR))
            {
              fghrs1.Qsp1_m.M1 = Conversion.Val(fghrsSubList[index].SpaceHR);
              fghrs1.Qsp2_m.M1 = Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR);
              fghrs1.aLow.M1 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientA2) : Conversion.Val(fghrsSubList[index].CoefficientA1);
              fghrs1.bLow.M1 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientB2) : Conversion.Val(fghrsSubList[index].CoefficientB1);
              fghrs1.cLow.M1 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientC2) : Conversion.Val(fghrsSubList[index].CoefficientC1);
              fghrs1.aUpp.M1 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA1);
              fghrs1.bUpp.M1 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB1);
              fghrs1.cUpp.M1 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC1);
            }
            if (fghrs1.Qsp_m.M2 >= Conversion.Val(fghrsSubList[index].SpaceHR) & fghrs1.Qsp_m.M2 < Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR))
            {
              fghrs1.Qsp1_m.M2 = Conversion.Val(fghrsSubList[index].SpaceHR);
              fghrs1.Qsp2_m.M2 = Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR);
              fghrs1.aLow.M2 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientA2) : Conversion.Val(fghrsSubList[index].CoefficientA1);
              fghrs1.bLow.M2 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientB2) : Conversion.Val(fghrsSubList[index].CoefficientB1);
              fghrs1.cLow.M2 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientC2) : Conversion.Val(fghrsSubList[index].CoefficientC1);
              fghrs1.aUpp.M2 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA1);
              fghrs1.bUpp.M2 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB1);
              fghrs1.cUpp.M2 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC1);
            }
            if (fghrs1.Qsp_m.M3 >= Conversion.Val(fghrsSubList[index].SpaceHR) & fghrs1.Qsp_m.M3 < Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR))
            {
              fghrs1.Qsp1_m.M3 = Conversion.Val(fghrsSubList[index].SpaceHR);
              fghrs1.Qsp2_m.M3 = Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR);
              fghrs1.aLow.M3 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientA2) : Conversion.Val(fghrsSubList[index].CoefficientA1);
              fghrs1.bLow.M3 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientB2) : Conversion.Val(fghrsSubList[index].CoefficientB1);
              fghrs1.cLow.M3 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientC2) : Conversion.Val(fghrsSubList[index].CoefficientC1);
              fghrs1.aUpp.M3 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA1);
              fghrs1.bUpp.M3 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB1);
              fghrs1.cUpp.M3 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC1);
            }
            if (fghrs1.Qsp_m.M4 >= Conversion.Val(fghrsSubList[index].SpaceHR) & fghrs1.Qsp_m.M4 < Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR))
            {
              fghrs1.Qsp1_m.M4 = Conversion.Val(fghrsSubList[index].SpaceHR);
              fghrs1.Qsp2_m.M4 = Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR);
              fghrs1.aLow.M4 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientA2) : Conversion.Val(fghrsSubList[index].CoefficientA1);
              fghrs1.bLow.M4 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientB2) : Conversion.Val(fghrsSubList[index].CoefficientB1);
              fghrs1.cLow.M4 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientC2) : Conversion.Val(fghrsSubList[index].CoefficientC1);
              fghrs1.aUpp.M4 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA1);
              fghrs1.bUpp.M4 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB1);
              fghrs1.cUpp.M4 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC1);
            }
            if (fghrs1.Qsp_m.M5 >= Conversion.Val(fghrsSubList[index].SpaceHR) & fghrs1.Qsp_m.M5 < Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR))
            {
              fghrs1.Qsp1_m.M5 = Conversion.Val(fghrsSubList[index].SpaceHR);
              fghrs1.Qsp2_m.M5 = Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR);
              fghrs1.aLow.M5 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientA2) : Conversion.Val(fghrsSubList[index].CoefficientA1);
              fghrs1.bLow.M5 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientB2) : Conversion.Val(fghrsSubList[index].CoefficientB1);
              fghrs1.cLow.M5 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientC2) : Conversion.Val(fghrsSubList[index].CoefficientC1);
              fghrs1.aUpp.M5 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA1);
              fghrs1.bUpp.M5 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB1);
              fghrs1.cUpp.M5 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC1);
            }
            if (fghrs1.Qsp_m.M6 >= Conversion.Val(fghrsSubList[index].SpaceHR) & fghrs1.Qsp_m.M6 < Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR))
            {
              fghrs1.Qsp1_m.M6 = Conversion.Val(fghrsSubList[index].SpaceHR);
              fghrs1.Qsp2_m.M6 = Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR);
              fghrs1.aLow.M6 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientA2) : Conversion.Val(fghrsSubList[index].CoefficientA1);
              fghrs1.bLow.M6 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientB2) : Conversion.Val(fghrsSubList[index].CoefficientB1);
              fghrs1.cLow.M6 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientC2) : Conversion.Val(fghrsSubList[index].CoefficientC1);
              fghrs1.aUpp.M6 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA1);
              fghrs1.bUpp.M6 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB1);
              fghrs1.cUpp.M6 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC1);
            }
            if (fghrs1.Qsp_m.M7 >= Conversion.Val(fghrsSubList[index].SpaceHR) & fghrs1.Qsp_m.M7 < Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR))
            {
              fghrs1.Qsp1_m.M7 = Conversion.Val(fghrsSubList[index].SpaceHR);
              fghrs1.Qsp2_m.M7 = Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR);
              fghrs1.aLow.M7 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientA2) : Conversion.Val(fghrsSubList[index].CoefficientA1);
              fghrs1.bLow.M7 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientB2) : Conversion.Val(fghrsSubList[index].CoefficientB1);
              fghrs1.cLow.M7 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientC2) : Conversion.Val(fghrsSubList[index].CoefficientC1);
              fghrs1.aUpp.M7 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA1);
              fghrs1.bUpp.M7 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB1);
              fghrs1.cUpp.M7 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC1);
            }
            if (fghrs1.Qsp_m.M8 >= Conversion.Val(fghrsSubList[index].SpaceHR) & fghrs1.Qsp_m.M8 < Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR))
            {
              fghrs1.Qsp1_m.M8 = Conversion.Val(fghrsSubList[index].SpaceHR);
              fghrs1.Qsp2_m.M8 = Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR);
              fghrs1.aLow.M8 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientA2) : Conversion.Val(fghrsSubList[index].CoefficientA1);
              fghrs1.bLow.M8 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientB2) : Conversion.Val(fghrsSubList[index].CoefficientB1);
              fghrs1.cLow.M8 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientC2) : Conversion.Val(fghrsSubList[index].CoefficientC1);
              fghrs1.aUpp.M8 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA1);
              fghrs1.bUpp.M8 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB1);
              fghrs1.cUpp.M8 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC1);
            }
            if (fghrs1.Qsp_m.M9 >= Conversion.Val(fghrsSubList[index].SpaceHR) & fghrs1.Qsp_m.M9 < Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR))
            {
              fghrs1.Qsp1_m.M9 = Conversion.Val(fghrsSubList[index].SpaceHR);
              fghrs1.Qsp2_m.M9 = Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR);
              fghrs1.aLow.M9 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientA2) : Conversion.Val(fghrsSubList[index].CoefficientA1);
              fghrs1.bLow.M9 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientB2) : Conversion.Val(fghrsSubList[index].CoefficientB1);
              fghrs1.cLow.M9 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientC2) : Conversion.Val(fghrsSubList[index].CoefficientC1);
              fghrs1.aUpp.M9 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA1);
              fghrs1.bUpp.M9 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB1);
              fghrs1.cUpp.M9 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC1);
            }
            if (fghrs1.Qsp_m.M10 >= Conversion.Val(fghrsSubList[index].SpaceHR) & fghrs1.Qsp_m.M10 < Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR))
            {
              fghrs1.Qsp1_m.M10 = Conversion.Val(fghrsSubList[index].SpaceHR);
              fghrs1.Qsp2_m.M10 = Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR);
              fghrs1.aLow.M10 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientA2) : Conversion.Val(fghrsSubList[index].CoefficientA1);
              fghrs1.bLow.M10 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientB2) : Conversion.Val(fghrsSubList[index].CoefficientB1);
              fghrs1.cLow.M10 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientC2) : Conversion.Val(fghrsSubList[index].CoefficientC1);
              fghrs1.aUpp.M10 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA1);
              fghrs1.bUpp.M10 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB1);
              fghrs1.cUpp.M10 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC1);
            }
            if (fghrs1.Qsp_m.M11 >= Conversion.Val(fghrsSubList[index].SpaceHR) & fghrs1.Qsp_m.M11 < Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR))
            {
              fghrs1.Qsp1_m.M11 = Conversion.Val(fghrsSubList[index].SpaceHR);
              fghrs1.Qsp2_m.M11 = Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR);
              fghrs1.aLow.M11 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientA2) : Conversion.Val(fghrsSubList[index].CoefficientA1);
              fghrs1.bLow.M11 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientB2) : Conversion.Val(fghrsSubList[index].CoefficientB1);
              fghrs1.cLow.M11 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientC2) : Conversion.Val(fghrsSubList[index].CoefficientC1);
              fghrs1.aUpp.M11 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA1);
              fghrs1.bUpp.M11 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB1);
              fghrs1.cUpp.M11 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC1);
            }
            if (fghrs1.Qsp_m.M12 >= Conversion.Val(fghrsSubList[index].SpaceHR) & fghrs1.Qsp_m.M12 < Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR))
            {
              fghrs1.Qsp1_m.M12 = Conversion.Val(fghrsSubList[index].SpaceHR);
              fghrs1.Qsp2_m.M12 = Conversion.Val(fghrsSubList[checked (index + 1)].SpaceHR);
              fghrs1.aLow.M12 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientA2) : Conversion.Val(fghrsSubList[index].CoefficientA1);
              fghrs1.bLow.M12 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientB2) : Conversion.Val(fghrsSubList[index].CoefficientB1);
              fghrs1.cLow.M12 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[index].CoefficientC2) : Conversion.Val(fghrsSubList[index].CoefficientC1);
              fghrs1.aUpp.M12 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientA1);
              fghrs1.bUpp.M12 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientB1);
              fghrs1.cUpp.M12 = this._Calc.Water_heating.FGHRS.HasStore ? Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC2) : Conversion.Val(fghrsSubList[checked (index + 1)].CoefficientC1);
            }
            checked { ++index; }
          }
          fghrs1.SavingsLower_m.M1 = fghrs1.Qhw_m.M1 >= 80.0 ? (fghrs1.Qhw_m.M1 <= 309.0 ? fghrs1.aLow.M1 * Math.Log(fghrs1.Qhw_m.M1) + fghrs1.bLow.M1 * fghrs1.Qhw_m.M1 + fghrs1.cLow.M1 : fghrs1.aLow.M1 * Math.Log(309.0) + fghrs1.bLow.M1 * 309.0 + fghrs1.cLow.M1) : (fghrs1.aLow.M1 * Math.Log(80.0) + fghrs1.bLow.M1 * 80.0 + fghrs1.cLow.M1) * fghrs1.Qhw_m.M1 / 80.0;
          fghrs1.SavingsLower_m.M2 = fghrs1.Qhw_m.M2 >= 80.0 ? (fghrs1.Qhw_m.M2 <= 309.0 ? fghrs1.aLow.M2 * Math.Log(fghrs1.Qhw_m.M2) + fghrs1.bLow.M2 * fghrs1.Qhw_m.M2 + fghrs1.cLow.M2 : fghrs1.aLow.M2 * Math.Log(309.0) + fghrs1.bLow.M2 * 309.0 + fghrs1.cLow.M2) : (fghrs1.aLow.M2 * Math.Log(80.0) + fghrs1.bLow.M2 * 80.0 + fghrs1.cLow.M2) * fghrs1.Qhw_m.M2 / 80.0;
          fghrs1.SavingsLower_m.M3 = fghrs1.Qhw_m.M3 >= 80.0 ? (fghrs1.Qhw_m.M3 <= 309.0 ? fghrs1.aLow.M3 * Math.Log(fghrs1.Qhw_m.M3) + fghrs1.bLow.M3 * fghrs1.Qhw_m.M3 + fghrs1.cLow.M3 : fghrs1.aLow.M3 * Math.Log(309.0) + fghrs1.bLow.M3 * 309.0 + fghrs1.cLow.M3) : (fghrs1.aLow.M3 * Math.Log(80.0) + fghrs1.bLow.M3 * 80.0 + fghrs1.cLow.M3) * fghrs1.Qhw_m.M3 / 80.0;
          fghrs1.SavingsLower_m.M4 = fghrs1.Qhw_m.M4 >= 80.0 ? (fghrs1.Qhw_m.M4 <= 309.0 ? fghrs1.aLow.M4 * Math.Log(fghrs1.Qhw_m.M4) + fghrs1.bLow.M4 * fghrs1.Qhw_m.M4 + fghrs1.cLow.M4 : fghrs1.aLow.M4 * Math.Log(309.0) + fghrs1.bLow.M4 * 309.0 + fghrs1.cLow.M4) : (fghrs1.aLow.M4 * Math.Log(80.0) + fghrs1.bLow.M4 * 80.0 + fghrs1.cLow.M4) * fghrs1.Qhw_m.M4 / 80.0;
          fghrs1.SavingsLower_m.M5 = fghrs1.Qhw_m.M5 >= 80.0 ? (fghrs1.Qhw_m.M5 <= 309.0 ? fghrs1.aLow.M5 * Math.Log(fghrs1.Qhw_m.M5) + fghrs1.bLow.M5 * fghrs1.Qhw_m.M5 + fghrs1.cLow.M5 : fghrs1.aLow.M5 * Math.Log(309.0) + fghrs1.bLow.M5 * 309.0 + fghrs1.cLow.M5) : (fghrs1.aLow.M5 * Math.Log(80.0) + fghrs1.bLow.M5 * 80.0 + fghrs1.cLow.M5) * fghrs1.Qhw_m.M5 / 80.0;
          fghrs1.SavingsLower_m.M6 = fghrs1.Qhw_m.M6 >= 80.0 ? (fghrs1.Qhw_m.M6 <= 309.0 ? fghrs1.aLow.M6 * Math.Log(fghrs1.Qhw_m.M6) + fghrs1.bLow.M6 * fghrs1.Qhw_m.M6 + fghrs1.cLow.M6 : fghrs1.aLow.M6 * Math.Log(309.0) + fghrs1.bLow.M6 * 309.0 + fghrs1.cLow.M6) : (fghrs1.aLow.M6 * Math.Log(80.0) + fghrs1.bLow.M6 * 80.0 + fghrs1.cLow.M6) * fghrs1.Qhw_m.M6 / 80.0;
          fghrs1.SavingsLower_m.M7 = fghrs1.Qhw_m.M7 >= 80.0 ? (fghrs1.Qhw_m.M7 <= 309.0 ? fghrs1.aLow.M7 * Math.Log(fghrs1.Qhw_m.M7) + fghrs1.bLow.M7 * fghrs1.Qhw_m.M7 + fghrs1.cLow.M7 : fghrs1.aLow.M7 * Math.Log(309.0) + fghrs1.bLow.M7 * 309.0 + fghrs1.cLow.M7) : (fghrs1.aLow.M7 * Math.Log(80.0) + fghrs1.bLow.M7 * 80.0 + fghrs1.cLow.M7) * fghrs1.Qhw_m.M7 / 80.0;
          fghrs1.SavingsLower_m.M8 = fghrs1.Qhw_m.M8 >= 80.0 ? (fghrs1.Qhw_m.M8 <= 309.0 ? fghrs1.aLow.M8 * Math.Log(fghrs1.Qhw_m.M8) + fghrs1.bLow.M8 * fghrs1.Qhw_m.M8 + fghrs1.cLow.M8 : fghrs1.aLow.M8 * Math.Log(309.0) + fghrs1.bLow.M8 * 309.0 + fghrs1.cLow.M8) : (fghrs1.aLow.M8 * Math.Log(80.0) + fghrs1.bLow.M8 * 80.0 + fghrs1.cLow.M8) * fghrs1.Qhw_m.M8 / 80.0;
          fghrs1.SavingsLower_m.M9 = fghrs1.Qhw_m.M9 >= 80.0 ? (fghrs1.Qhw_m.M9 <= 309.0 ? fghrs1.aLow.M9 * Math.Log(fghrs1.Qhw_m.M9) + fghrs1.bLow.M9 * fghrs1.Qhw_m.M9 + fghrs1.cLow.M9 : fghrs1.aLow.M9 * Math.Log(309.0) + fghrs1.bLow.M9 * 309.0 + fghrs1.cLow.M9) : (fghrs1.aLow.M9 * Math.Log(80.0) + fghrs1.bLow.M9 * 80.0 + fghrs1.cLow.M9) * fghrs1.Qhw_m.M9 / 80.0;
          fghrs1.SavingsLower_m.M10 = fghrs1.Qhw_m.M10 >= 80.0 ? (fghrs1.Qhw_m.M10 <= 309.0 ? fghrs1.aLow.M10 * Math.Log(fghrs1.Qhw_m.M10) + fghrs1.bLow.M10 * fghrs1.Qhw_m.M10 + fghrs1.cLow.M10 : fghrs1.aLow.M10 * Math.Log(309.0) + fghrs1.bLow.M10 * 309.0 + fghrs1.cLow.M10) : (fghrs1.aLow.M10 * Math.Log(80.0) + fghrs1.bLow.M10 * 80.0 + fghrs1.cLow.M10) * fghrs1.Qhw_m.M10 / 80.0;
          fghrs1.SavingsLower_m.M11 = fghrs1.Qhw_m.M11 >= 80.0 ? (fghrs1.Qhw_m.M11 <= 309.0 ? fghrs1.aLow.M11 * Math.Log(fghrs1.Qhw_m.M11) + fghrs1.bLow.M11 * fghrs1.Qhw_m.M11 + fghrs1.cLow.M11 : fghrs1.aLow.M11 * Math.Log(309.0) + fghrs1.bLow.M11 * 309.0 + fghrs1.cLow.M11) : (fghrs1.aLow.M11 * Math.Log(80.0) + fghrs1.bLow.M11 * 80.0 + fghrs1.cLow.M11) * fghrs1.Qhw_m.M11 / 80.0;
          fghrs1.SavingsLower_m.M12 = fghrs1.Qhw_m.M12 >= 80.0 ? (fghrs1.Qhw_m.M1 <= 309.0 ? fghrs1.aLow.M12 * Math.Log(fghrs1.Qhw_m.M12) + fghrs1.bLow.M12 * fghrs1.Qhw_m.M12 + fghrs1.cLow.M12 : fghrs1.aLow.M12 * Math.Log(309.0) + fghrs1.bLow.M12 * 309.0 + fghrs1.cLow.M12) : (fghrs1.aLow.M12 * Math.Log(80.0) + fghrs1.bLow.M12 * 80.0 + fghrs1.cLow.M12) * fghrs1.Qhw_m.M12 / 80.0;
          fghrs1.SavingsUpper_m.M1 = fghrs1.Qhw_m.M1 >= 80.0 ? (fghrs1.Qhw_m.M1 <= 309.0 ? fghrs1.aUpp.M1 * Math.Log(fghrs1.Qhw_m.M1) + fghrs1.bUpp.M1 * fghrs1.Qhw_m.M1 + fghrs1.cUpp.M1 : fghrs1.aUpp.M1 * Math.Log(309.0) + fghrs1.bUpp.M1 * 309.0 + fghrs1.cUpp.M1) : (fghrs1.aUpp.M1 * Math.Log(80.0) + fghrs1.bUpp.M1 * 80.0 + fghrs1.cUpp.M1) * fghrs1.Qhw_m.M1 / 80.0;
          fghrs1.SavingsUpper_m.M2 = fghrs1.Qhw_m.M2 >= 80.0 ? (fghrs1.Qhw_m.M2 <= 309.0 ? fghrs1.aUpp.M2 * Math.Log(fghrs1.Qhw_m.M2) + fghrs1.bUpp.M2 * fghrs1.Qhw_m.M2 + fghrs1.cUpp.M2 : fghrs1.aUpp.M2 * Math.Log(309.0) + fghrs1.bUpp.M2 * 309.0 + fghrs1.cUpp.M2) : (fghrs1.aUpp.M2 * Math.Log(80.0) + fghrs1.bUpp.M2 * 80.0 + fghrs1.cUpp.M2) * fghrs1.Qhw_m.M2 / 80.0;
          fghrs1.SavingsUpper_m.M3 = fghrs1.Qhw_m.M3 >= 80.0 ? (fghrs1.Qhw_m.M3 <= 309.0 ? fghrs1.aUpp.M3 * Math.Log(fghrs1.Qhw_m.M3) + fghrs1.bUpp.M3 * fghrs1.Qhw_m.M3 + fghrs1.cUpp.M3 : fghrs1.aUpp.M3 * Math.Log(309.0) + fghrs1.bUpp.M3 * 309.0 + fghrs1.cUpp.M3) : (fghrs1.aUpp.M3 * Math.Log(80.0) + fghrs1.bUpp.M3 * 80.0 + fghrs1.cUpp.M3) * fghrs1.Qhw_m.M3 / 80.0;
          fghrs1.SavingsUpper_m.M4 = fghrs1.Qhw_m.M4 >= 80.0 ? (fghrs1.Qhw_m.M4 <= 309.0 ? fghrs1.aUpp.M4 * Math.Log(fghrs1.Qhw_m.M4) + fghrs1.bUpp.M4 * fghrs1.Qhw_m.M4 + fghrs1.cUpp.M4 : fghrs1.aUpp.M4 * Math.Log(309.0) + fghrs1.bUpp.M4 * 309.0 + fghrs1.cUpp.M4) : (fghrs1.aUpp.M4 * Math.Log(80.0) + fghrs1.bUpp.M4 * 80.0 + fghrs1.cUpp.M4) * fghrs1.Qhw_m.M4 / 80.0;
          fghrs1.SavingsUpper_m.M5 = fghrs1.Qhw_m.M5 >= 80.0 ? (fghrs1.Qhw_m.M5 <= 309.0 ? fghrs1.aUpp.M5 * Math.Log(fghrs1.Qhw_m.M5) + fghrs1.bUpp.M5 * fghrs1.Qhw_m.M5 + fghrs1.cUpp.M5 : fghrs1.aUpp.M5 * Math.Log(309.0) + fghrs1.bUpp.M5 * 309.0 + fghrs1.cUpp.M5) : (fghrs1.aUpp.M5 * Math.Log(80.0) + fghrs1.bUpp.M5 * 80.0 + fghrs1.cUpp.M5) * fghrs1.Qhw_m.M5 / 80.0;
          fghrs1.SavingsUpper_m.M6 = fghrs1.Qhw_m.M6 >= 80.0 ? (fghrs1.Qhw_m.M6 <= 309.0 ? fghrs1.aUpp.M6 * Math.Log(fghrs1.Qhw_m.M6) + fghrs1.bUpp.M6 * fghrs1.Qhw_m.M6 + fghrs1.cUpp.M6 : fghrs1.aUpp.M6 * Math.Log(309.0) + fghrs1.bUpp.M6 * 309.0 + fghrs1.cUpp.M6) : (fghrs1.aUpp.M6 * Math.Log(80.0) + fghrs1.bUpp.M6 * 80.0 + fghrs1.cUpp.M6) * fghrs1.Qhw_m.M6 / 80.0;
          fghrs1.SavingsUpper_m.M7 = fghrs1.Qhw_m.M7 >= 80.0 ? (fghrs1.Qhw_m.M7 <= 309.0 ? fghrs1.aUpp.M7 * Math.Log(fghrs1.Qhw_m.M7) + fghrs1.bUpp.M7 * fghrs1.Qhw_m.M7 + fghrs1.cUpp.M7 : fghrs1.aUpp.M7 * Math.Log(309.0) + fghrs1.bUpp.M7 * 309.0 + fghrs1.cUpp.M7) : (fghrs1.aUpp.M7 * Math.Log(80.0) + fghrs1.bUpp.M7 * 80.0 + fghrs1.cUpp.M7) * fghrs1.Qhw_m.M7 / 80.0;
          fghrs1.SavingsUpper_m.M8 = fghrs1.Qhw_m.M8 >= 80.0 ? (fghrs1.Qhw_m.M8 <= 309.0 ? fghrs1.aUpp.M8 * Math.Log(fghrs1.Qhw_m.M8) + fghrs1.bUpp.M8 * fghrs1.Qhw_m.M8 + fghrs1.cUpp.M8 : fghrs1.aUpp.M8 * Math.Log(309.0) + fghrs1.bUpp.M8 * 309.0 + fghrs1.cUpp.M8) : (fghrs1.aUpp.M8 * Math.Log(80.0) + fghrs1.bUpp.M8 * 80.0 + fghrs1.cUpp.M8) * fghrs1.Qhw_m.M8 / 80.0;
          fghrs1.SavingsUpper_m.M9 = fghrs1.Qhw_m.M9 >= 80.0 ? (fghrs1.Qhw_m.M9 <= 309.0 ? fghrs1.aUpp.M9 * Math.Log(fghrs1.Qhw_m.M9) + fghrs1.bUpp.M9 * fghrs1.Qhw_m.M9 + fghrs1.cUpp.M9 : fghrs1.aUpp.M9 * Math.Log(309.0) + fghrs1.bUpp.M9 * 309.0 + fghrs1.cUpp.M9) : (fghrs1.aUpp.M9 * Math.Log(80.0) + fghrs1.bUpp.M9 * 80.0 + fghrs1.cUpp.M9) * fghrs1.Qhw_m.M9 / 80.0;
          fghrs1.SavingsUpper_m.M10 = fghrs1.Qhw_m.M10 >= 80.0 ? (fghrs1.Qhw_m.M10 <= 309.0 ? fghrs1.aUpp.M10 * Math.Log(fghrs1.Qhw_m.M10) + fghrs1.bUpp.M10 * fghrs1.Qhw_m.M10 + fghrs1.cUpp.M10 : fghrs1.aUpp.M10 * Math.Log(309.0) + fghrs1.bUpp.M10 * 309.0 + fghrs1.cUpp.M10) : (fghrs1.aUpp.M10 * Math.Log(80.0) + fghrs1.bUpp.M10 * 80.0 + fghrs1.cUpp.M10) * fghrs1.Qhw_m.M10 / 80.0;
          fghrs1.SavingsUpper_m.M11 = fghrs1.Qhw_m.M11 >= 80.0 ? (fghrs1.Qhw_m.M11 <= 309.0 ? fghrs1.aUpp.M11 * Math.Log(fghrs1.Qhw_m.M11) + fghrs1.bUpp.M11 * fghrs1.Qhw_m.M11 + fghrs1.cUpp.M11 : fghrs1.aUpp.M11 * Math.Log(309.0) + fghrs1.bUpp.M11 * 309.0 + fghrs1.cUpp.M11) : (fghrs1.aUpp.M11 * Math.Log(80.0) + fghrs1.bUpp.M11 * 80.0 + fghrs1.cUpp.M11) * fghrs1.Qhw_m.M11 / 80.0;
          fghrs1.SavingsUpper_m.M12 = fghrs1.Qhw_m.M12 >= 80.0 ? (fghrs1.Qhw_m.M1 <= 309.0 ? fghrs1.aUpp.M12 * Math.Log(fghrs1.Qhw_m.M12) + fghrs1.bUpp.M12 * fghrs1.Qhw_m.M12 + fghrs1.cUpp.M12 : fghrs1.aUpp.M12 * Math.Log(309.0) + fghrs1.bUpp.M12 * 309.0 + fghrs1.cUpp.M12) : (fghrs1.aUpp.M12 * Math.Log(80.0) + fghrs1.bUpp.M12 * 80.0 + fghrs1.cUpp.M12) * fghrs1.Qhw_m.M12 / 80.0;
          fghrs1.S0_m.M1 = fghrs1.SavingsLower_m.M1 + (fghrs1.Qsp_m.M1 - fghrs1.Qsp1_m.M1) * (fghrs1.SavingsUpper_m.M1 - fghrs1.SavingsLower_m.M1) / (fghrs1.Qsp2_m.M1 - fghrs1.Qsp1_m.M1);
          fghrs1.S0_m.M2 = fghrs1.SavingsLower_m.M2 + (fghrs1.Qsp_m.M2 - fghrs1.Qsp1_m.M2) * (fghrs1.SavingsUpper_m.M2 - fghrs1.SavingsLower_m.M2) / (fghrs1.Qsp2_m.M2 - fghrs1.Qsp1_m.M2);
          fghrs1.S0_m.M3 = fghrs1.SavingsLower_m.M3 + (fghrs1.Qsp_m.M3 - fghrs1.Qsp1_m.M3) * (fghrs1.SavingsUpper_m.M3 - fghrs1.SavingsLower_m.M3) / (fghrs1.Qsp2_m.M3 - fghrs1.Qsp1_m.M3);
          fghrs1.S0_m.M4 = fghrs1.SavingsLower_m.M4 + (fghrs1.Qsp_m.M4 - fghrs1.Qsp1_m.M4) * (fghrs1.SavingsUpper_m.M4 - fghrs1.SavingsLower_m.M4) / (fghrs1.Qsp2_m.M4 - fghrs1.Qsp1_m.M4);
          fghrs1.S0_m.M5 = fghrs1.SavingsLower_m.M5 + (fghrs1.Qsp_m.M5 - fghrs1.Qsp1_m.M5) * (fghrs1.SavingsUpper_m.M5 - fghrs1.SavingsLower_m.M5) / (fghrs1.Qsp2_m.M5 - fghrs1.Qsp1_m.M5);
          fghrs1.S0_m.M6 = fghrs1.SavingsLower_m.M6 + (fghrs1.Qsp_m.M6 - fghrs1.Qsp1_m.M6) * (fghrs1.SavingsUpper_m.M6 - fghrs1.SavingsLower_m.M6) / (fghrs1.Qsp2_m.M6 - fghrs1.Qsp1_m.M6);
          fghrs1.S0_m.M7 = fghrs1.SavingsLower_m.M7 + (fghrs1.Qsp_m.M7 - fghrs1.Qsp1_m.M7) * (fghrs1.SavingsUpper_m.M7 - fghrs1.SavingsLower_m.M7) / (fghrs1.Qsp2_m.M7 - fghrs1.Qsp1_m.M7);
          fghrs1.S0_m.M8 = fghrs1.SavingsLower_m.M8 + (fghrs1.Qsp_m.M8 - fghrs1.Qsp1_m.M8) * (fghrs1.SavingsUpper_m.M8 - fghrs1.SavingsLower_m.M8) / (fghrs1.Qsp2_m.M8 - fghrs1.Qsp1_m.M8);
          fghrs1.S0_m.M9 = fghrs1.SavingsLower_m.M9 + (fghrs1.Qsp_m.M9 - fghrs1.Qsp1_m.M9) * (fghrs1.SavingsUpper_m.M9 - fghrs1.SavingsLower_m.M9) / (fghrs1.Qsp2_m.M9 - fghrs1.Qsp1_m.M9);
          fghrs1.S0_m.M10 = fghrs1.SavingsLower_m.M10 + (fghrs1.Qsp_m.M10 - fghrs1.Qsp1_m.M10) * (fghrs1.SavingsUpper_m.M10 - fghrs1.SavingsLower_m.M10) / (fghrs1.Qsp2_m.M10 - fghrs1.Qsp1_m.M10);
          fghrs1.S0_m.M11 = fghrs1.SavingsLower_m.M11 + (fghrs1.Qsp_m.M11 - fghrs1.Qsp1_m.M11) * (fghrs1.SavingsUpper_m.M11 - fghrs1.SavingsLower_m.M11) / (fghrs1.Qsp2_m.M11 - fghrs1.Qsp1_m.M11);
          fghrs1.S0_m.M12 = fghrs1.SavingsLower_m.M12 + (fghrs1.Qsp_m.M12 - fghrs1.Qsp1_m.M12) * (fghrs1.SavingsUpper_m.M12 - fghrs1.SavingsLower_m.M12) / (fghrs1.Qsp2_m.M12 - fghrs1.Qsp1_m.M12);
          if (fghrs1.Qhw_m.M1 < 0.0)
            fghrs1.S0_m.M1 = 0.0;
          if (fghrs1.Qhw_m.M2 < 0.0)
            fghrs1.S0_m.M2 = 0.0;
          if (fghrs1.Qhw_m.M3 < 0.0)
            fghrs1.S0_m.M3 = 0.0;
          if (fghrs1.Qhw_m.M4 < 0.0)
            fghrs1.S0_m.M4 = 0.0;
          if (fghrs1.Qhw_m.M5 < 0.0)
            fghrs1.S0_m.M5 = 0.0;
          if (fghrs1.Qhw_m.M6 < 0.0)
            fghrs1.S0_m.M6 = 0.0;
          if (fghrs1.Qhw_m.M7 < 0.0)
            fghrs1.S0_m.M7 = 0.0;
          if (fghrs1.Qhw_m.M8 < 0.0)
            fghrs1.S0_m.M8 = 0.0;
          if (fghrs1.Qhw_m.M9 < 0.0)
            fghrs1.S0_m.M9 = 0.0;
          if (fghrs1.Qhw_m.M10 < 0.0)
            fghrs1.S0_m.M10 = 0.0;
          if (fghrs1.Qhw_m.M11 < 0.0)
            fghrs1.S0_m.M11 = 0.0;
          if (fghrs1.Qhw_m.M12 < 0.0)
            fghrs1.S0_m.M12 = 0.0;
          if (fghrs1.S0_m.M1 < 0.0)
            fghrs1.S0_m.M1 = 0.0;
          if (fghrs1.S0_m.M2 < 0.0)
            fghrs1.S0_m.M2 = 0.0;
          if (fghrs1.S0_m.M3 < 0.0)
            fghrs1.S0_m.M3 = 0.0;
          if (fghrs1.S0_m.M4 < 0.0)
            fghrs1.S0_m.M4 = 0.0;
          if (fghrs1.S0_m.M5 < 0.0)
            fghrs1.S0_m.M5 = 0.0;
          if (fghrs1.S0_m.M6 < 0.0)
            fghrs1.S0_m.M6 = 0.0;
          if (fghrs1.S0_m.M7 < 0.0)
            fghrs1.S0_m.M7 = 0.0;
          if (fghrs1.S0_m.M8 < 0.0)
            fghrs1.S0_m.M8 = 0.0;
          if (fghrs1.S0_m.M9 < 0.0)
            fghrs1.S0_m.M9 = 0.0;
          if (fghrs1.S0_m.M10 < 0.0)
            fghrs1.S0_m.M10 = 0.0;
          if (fghrs1.S0_m.M11 < 0.0)
            fghrs1.S0_m.M11 = 0.0;
          if (fghrs1.S0_m.M12 < 0.0)
            fghrs1.S0_m.M12 = 0.0;
          if (flag3)
          {
            fghrs1.Sm.M1 = fghrs1.S0_m.M1;
            fghrs1.Sm.M2 = fghrs1.S0_m.M2;
            fghrs1.Sm.M3 = fghrs1.S0_m.M3;
            fghrs1.Sm.M4 = fghrs1.S0_m.M4;
            fghrs1.Sm.M5 = fghrs1.S0_m.M5;
            fghrs1.Sm.M6 = fghrs1.S0_m.M6;
            fghrs1.Sm.M7 = fghrs1.S0_m.M7;
            fghrs1.Sm.M8 = fghrs1.S0_m.M8;
            fghrs1.Sm.M9 = fghrs1.S0_m.M9;
            fghrs1.Sm.M10 = fghrs1.S0_m.M10;
            fghrs1.Sm.M11 = fghrs1.S0_m.M11;
            fghrs1.Sm.M12 = fghrs1.S0_m.M12;
            fghrs1.Sm.M1 = -fghrs1.Sm.M1;
            fghrs1.Sm.M2 = -fghrs1.Sm.M2;
            fghrs1.Sm.M3 = -fghrs1.Sm.M3;
            fghrs1.Sm.M4 = -fghrs1.Sm.M4;
            fghrs1.Sm.M5 = -fghrs1.Sm.M5;
            fghrs1.Sm.M6 = -fghrs1.Sm.M6;
            fghrs1.Sm.M7 = -fghrs1.Sm.M7;
            fghrs1.Sm.M8 = -fghrs1.Sm.M8;
            fghrs1.Sm.M9 = -fghrs1.Sm.M9;
            fghrs1.Sm.M10 = -fghrs1.Sm.M10;
            fghrs1.Sm.M11 = -fghrs1.Sm.M11;
            fghrs1.Sm.M12 = -fghrs1.Sm.M12;
          }
          else
          {
            if (flag2 | Operators.CompareString(fghrs2.HeatStore, "2", false) == 0)
            {
              double vk = fghrs1.Vk;
              if (vk >= 144.0)
                fghrs1.Kn = 0.0;
              else if (vk >= 75.0 && vk <= 143.999999)
                fghrs1.Kn = 0.48 - fghrs1.Vk / 300.0;
              else if (vk >= 15.001 && vk <= 74.999999)
                fghrs1.Kn = 477.0 / 400.0 - 0.77 * fghrs1.Vk / 60.0;
              else if (vk <= 15.0)
                fghrs1.Kn = 1.0;
              fghrs1.Sm.M1 = fghrs1.S0_m.M1 + 0.5 * fghrs1.Kf2 * (calc2012._Calc.Water_heating.Box56_m.M1 + calc2012._Calc.Water_heating.Box59_m.M1 + calc2012._Calc.Water_heating.Box61_m.M1 - (1.0 - fghrs1.Kn) * fghrs1.Qhw_m.M1);
              fghrs1.Sm.M2 = fghrs1.S0_m.M2 + 0.5 * fghrs1.Kf2 * (calc2012._Calc.Water_heating.Box56_m.M2 + calc2012._Calc.Water_heating.Box59_m.M2 + calc2012._Calc.Water_heating.Box61_m.M2 - (1.0 - fghrs1.Kn) * fghrs1.Qhw_m.M2);
              fghrs1.Sm.M3 = fghrs1.S0_m.M3 + 0.5 * fghrs1.Kf2 * (calc2012._Calc.Water_heating.Box56_m.M3 + calc2012._Calc.Water_heating.Box59_m.M3 + calc2012._Calc.Water_heating.Box61_m.M3 - (1.0 - fghrs1.Kn) * fghrs1.Qhw_m.M3);
              fghrs1.Sm.M4 = fghrs1.S0_m.M4 + 0.5 * fghrs1.Kf2 * (calc2012._Calc.Water_heating.Box56_m.M4 + calc2012._Calc.Water_heating.Box59_m.M4 + calc2012._Calc.Water_heating.Box61_m.M4 - (1.0 - fghrs1.Kn) * fghrs1.Qhw_m.M4);
              fghrs1.Sm.M5 = fghrs1.S0_m.M5 + 0.5 * fghrs1.Kf2 * (calc2012._Calc.Water_heating.Box56_m.M5 + calc2012._Calc.Water_heating.Box59_m.M5 + calc2012._Calc.Water_heating.Box61_m.M5 - (1.0 - fghrs1.Kn) * fghrs1.Qhw_m.M5);
              fghrs1.Sm.M6 = fghrs1.S0_m.M6 + 0.5 * fghrs1.Kf2 * (calc2012._Calc.Water_heating.Box56_m.M6 + calc2012._Calc.Water_heating.Box59_m.M6 + calc2012._Calc.Water_heating.Box61_m.M6 - (1.0 - fghrs1.Kn) * fghrs1.Qhw_m.M6);
              fghrs1.Sm.M7 = fghrs1.S0_m.M7 + 0.5 * fghrs1.Kf2 * (calc2012._Calc.Water_heating.Box56_m.M7 + calc2012._Calc.Water_heating.Box59_m.M7 + calc2012._Calc.Water_heating.Box61_m.M7 - (1.0 - fghrs1.Kn) * fghrs1.Qhw_m.M7);
              fghrs1.Sm.M8 = fghrs1.S0_m.M8 + 0.5 * fghrs1.Kf2 * (calc2012._Calc.Water_heating.Box56_m.M8 + calc2012._Calc.Water_heating.Box59_m.M8 + calc2012._Calc.Water_heating.Box61_m.M8 - (1.0 - fghrs1.Kn) * fghrs1.Qhw_m.M8);
              fghrs1.Sm.M9 = fghrs1.S0_m.M9 + 0.5 * fghrs1.Kf2 * (calc2012._Calc.Water_heating.Box56_m.M9 + calc2012._Calc.Water_heating.Box59_m.M9 + calc2012._Calc.Water_heating.Box61_m.M9 - (1.0 - fghrs1.Kn) * fghrs1.Qhw_m.M9);
              fghrs1.Sm.M10 = fghrs1.S0_m.M10 + 0.5 * fghrs1.Kf2 * (calc2012._Calc.Water_heating.Box56_m.M10 + calc2012._Calc.Water_heating.Box59_m.M10 + calc2012._Calc.Water_heating.Box61_m.M10 - (1.0 - fghrs1.Kn) * fghrs1.Qhw_m.M10);
              fghrs1.Sm.M11 = fghrs1.S0_m.M11 + 0.5 * fghrs1.Kf2 * (calc2012._Calc.Water_heating.Box56_m.M11 + calc2012._Calc.Water_heating.Box59_m.M11 + calc2012._Calc.Water_heating.Box61_m.M11 - (1.0 - fghrs1.Kn) * fghrs1.Qhw_m.M11);
              fghrs1.Sm.M12 = fghrs1.S0_m.M12 + 0.5 * fghrs1.Kf2 * (calc2012._Calc.Water_heating.Box56_m.M12 + calc2012._Calc.Water_heating.Box59_m.M12 + calc2012._Calc.Water_heating.Box61_m.M12 - (1.0 - fghrs1.Kn) * fghrs1.Qhw_m.M12);
              if (fghrs1.Qhw_m.M1 < 0.0)
                fghrs1.Sm.M1 = 0.0;
              if (fghrs1.Qhw_m.M2 < 0.0)
                fghrs1.Sm.M2 = 0.0;
              if (fghrs1.Qhw_m.M3 < 0.0)
                fghrs1.Sm.M3 = 0.0;
              if (fghrs1.Qhw_m.M4 < 0.0)
                fghrs1.Sm.M4 = 0.0;
              if (fghrs1.Qhw_m.M5 < 0.0)
                fghrs1.Sm.M5 = 0.0;
              if (fghrs1.Qhw_m.M6 < 0.0)
                fghrs1.Sm.M6 = 0.0;
              if (fghrs1.Qhw_m.M7 < 0.0)
                fghrs1.Sm.M7 = 0.0;
              if (fghrs1.Qhw_m.M8 < 0.0)
                fghrs1.Sm.M8 = 0.0;
              if (fghrs1.Qhw_m.M9 < 0.0)
                fghrs1.Sm.M9 = 0.0;
              if (fghrs1.Qhw_m.M10 < 0.0)
                fghrs1.Sm.M10 = 0.0;
              if (fghrs1.Qhw_m.M11 < 0.0)
                fghrs1.Sm.M11 = 0.0;
              if (fghrs1.Qhw_m.M12 < 0.0)
                fghrs1.Sm.M12 = 0.0;
              fghrs1.Sm.M1 = -fghrs1.Sm.M1;
              fghrs1.Sm.M2 = -fghrs1.Sm.M2;
              fghrs1.Sm.M3 = -fghrs1.Sm.M3;
              fghrs1.Sm.M4 = -fghrs1.Sm.M4;
              fghrs1.Sm.M5 = -fghrs1.Sm.M5;
              fghrs1.Sm.M6 = -fghrs1.Sm.M6;
              fghrs1.Sm.M7 = -fghrs1.Sm.M7;
              fghrs1.Sm.M8 = -fghrs1.Sm.M8;
              fghrs1.Sm.M9 = -fghrs1.Sm.M9;
              fghrs1.Sm.M10 = -fghrs1.Sm.M10;
              fghrs1.Sm.M11 = -fghrs1.Sm.M11;
              fghrs1.Sm.M12 = -fghrs1.Sm.M12;
            }
            bool flag4;
            if (!flag4)
              ;
          }
        }
        if (Operators.CompareString(fghrs2.HeatStore, "3", false) == 0)
        {
          this._Calc.Water_heating.Box47 = Conversion.Val(fghrs2.HeatStoreLR);
          this._Calc.Water_heating.Box48 = 0.54;
          this._Calc.Water_heating.Box55 = this._Calc.Water_heating.Box47 * this._Calc.Water_heating.Box48;
          if (Conversion.Val(fghrs2.PhotovoltaicModule) == 1.0)
          {
            fghrs1.Photo_Solar_Input.G1 = (double) this._House.Water.FGHRS.PV.PPower;
            fghrs1.Photo_Solar_Input.G2 = this.RadiationCalc(this._House.Water.FGHRS.PV.PCOrientation, this._House.Water.FGHRS.PV.PTilt, false);
            string povershading = this._House.Water.FGHRS.PV.POvershading;
            if (Operators.CompareString(povershading, "Heavy", false) != 0)
            {
              if (Operators.CompareString(povershading, "Significant", false) != 0)
              {
                if (Operators.CompareString(povershading, "Modest", false) != 0)
                {
                  if (Operators.CompareString(povershading, "None or very little", false) == 0)
                    fghrs1.Photo_Solar_Input.G3 = 1.0;
                }
                else
                  fghrs1.Photo_Solar_Input.G3 = 0.8;
              }
              else
                fghrs1.Photo_Solar_Input.G3 = 0.65;
            }
            else
              fghrs1.Photo_Solar_Input.G3 = 0.5;
            fghrs1.Photo_Solar_Input.G4 = Conversion.Val(fghrs2.CableLoss);
            fghrs1.Photo_Solar_Input.G5 = 0.84 * fghrs1.Photo_Solar_Input.G1 * fghrs1.Photo_Solar_Input.G2 * fghrs1.Photo_Solar_Input.G3 * (1.0 - fghrs1.Photo_Solar_Input.G4);
            fghrs1.Photo_Solar_Input.G6 = fghrs1.Photo_Solar_Input.G5 / this._Calc.Water_heating.Box45;
            if (fghrs1.Photo_Solar_Input.G6 > 0.0)
              fghrs1.Photo_Solar_Input.G7 = 1.0 - Math.Exp(-1.0 / fghrs1.Photo_Solar_Input.G6);
            fghrs1.Photo_Solar_Input.G8 = Conversion.Val(fghrs2.HeatStoreTV);
            fghrs1.Photo_Solar_Input.G9 = fghrs1.Photo_Solar_Input.G8 * 0.76;
            fghrs1.Photo_Solar_Input.G10 = this._Calc.Water_heating.Box43;
            fghrs1.Photo_Solar_Input.G11 = fghrs1.Photo_Solar_Input.G9 / fghrs1.Photo_Solar_Input.G10;
            fghrs1.Photo_Solar_Input.G12 = 1.0 + 0.2 * Math.Log(fghrs1.Photo_Solar_Input.G11);
            fghrs1.Photo_Solar_Input.Qs = fghrs1.Photo_Solar_Input.G12 * fghrs1.Photo_Solar_Input.G5 * fghrs1.Photo_Solar_Input.G7;
            fghrs1.Photo_Solar_Input.Qs_m.M1 = -fghrs1.Photo_Solar_Input.Qs * (double) this.MonthlyRadiationValues[0].fm * this._Calc.HeatLoss.Box41_m.M1 / 365.0;
            fghrs1.Photo_Solar_Input.Qs_m.M2 = -fghrs1.Photo_Solar_Input.Qs * (double) this.MonthlyRadiationValues[1].fm * this._Calc.HeatLoss.Box41_m.M2 / 365.0;
            fghrs1.Photo_Solar_Input.Qs_m.M3 = -fghrs1.Photo_Solar_Input.Qs * (double) this.MonthlyRadiationValues[2].fm * this._Calc.HeatLoss.Box41_m.M3 / 365.0;
            fghrs1.Photo_Solar_Input.Qs_m.M4 = -fghrs1.Photo_Solar_Input.Qs * (double) this.MonthlyRadiationValues[3].fm * this._Calc.HeatLoss.Box41_m.M4 / 365.0;
            fghrs1.Photo_Solar_Input.Qs_m.M5 = -fghrs1.Photo_Solar_Input.Qs * (double) this.MonthlyRadiationValues[4].fm * this._Calc.HeatLoss.Box41_m.M5 / 365.0;
            fghrs1.Photo_Solar_Input.Qs_m.M6 = -fghrs1.Photo_Solar_Input.Qs * (double) this.MonthlyRadiationValues[5].fm * this._Calc.HeatLoss.Box41_m.M6 / 365.0;
            fghrs1.Photo_Solar_Input.Qs_m.M7 = -fghrs1.Photo_Solar_Input.Qs * (double) this.MonthlyRadiationValues[6].fm * this._Calc.HeatLoss.Box41_m.M7 / 365.0;
            fghrs1.Photo_Solar_Input.Qs_m.M8 = -fghrs1.Photo_Solar_Input.Qs * (double) this.MonthlyRadiationValues[7].fm * this._Calc.HeatLoss.Box41_m.M8 / 365.0;
            fghrs1.Photo_Solar_Input.Qs_m.M9 = -fghrs1.Photo_Solar_Input.Qs * (double) this.MonthlyRadiationValues[8].fm * this._Calc.HeatLoss.Box41_m.M9 / 365.0;
            fghrs1.Photo_Solar_Input.Qs_m.M10 = -fghrs1.Photo_Solar_Input.Qs * (double) this.MonthlyRadiationValues[9].fm * this._Calc.HeatLoss.Box41_m.M10 / 365.0;
            fghrs1.Photo_Solar_Input.Qs_m.M11 = -fghrs1.Photo_Solar_Input.Qs * (double) this.MonthlyRadiationValues[10].fm * this._Calc.HeatLoss.Box41_m.M11 / 365.0;
            fghrs1.Photo_Solar_Input.Qs_m.M12 = -fghrs1.Photo_Solar_Input.Qs * (double) this.MonthlyRadiationValues[11].fm * this._Calc.HeatLoss.Box41_m.M12 / 365.0;
            Months box63M1;
            double num1 = (box63M1 = this._Calc.Water_heating.Box63_m).M1 + fghrs1.Photo_Solar_Input.Qs_m.M1;
            box63M1.M1 = num1;
            Months box63M2;
            double num2 = (box63M2 = this._Calc.Water_heating.Box63_m).M2 + fghrs1.Photo_Solar_Input.Qs_m.M2;
            box63M2.M2 = num2;
            Months box63M3;
            double num3 = (box63M3 = this._Calc.Water_heating.Box63_m).M3 + fghrs1.Photo_Solar_Input.Qs_m.M3;
            box63M3.M3 = num3;
            Months box63M4;
            double num4 = (box63M4 = this._Calc.Water_heating.Box63_m).M4 + fghrs1.Photo_Solar_Input.Qs_m.M4;
            box63M4.M4 = num4;
            Months box63M5;
            double num5 = (box63M5 = this._Calc.Water_heating.Box63_m).M5 + fghrs1.Photo_Solar_Input.Qs_m.M5;
            box63M5.M5 = num5;
            Months box63M6;
            double num6 = (box63M6 = this._Calc.Water_heating.Box63_m).M6 + fghrs1.Photo_Solar_Input.Qs_m.M6;
            box63M6.M6 = num6;
            Months box63M7;
            double num7 = (box63M7 = this._Calc.Water_heating.Box63_m).M7 + fghrs1.Photo_Solar_Input.Qs_m.M7;
            box63M7.M7 = num7;
            Months box63M8;
            double num8 = (box63M8 = this._Calc.Water_heating.Box63_m).M8 + fghrs1.Photo_Solar_Input.Qs_m.M8;
            box63M8.M8 = num8;
            Months box63M9;
            double num9 = (box63M9 = this._Calc.Water_heating.Box63_m).M9 + fghrs1.Photo_Solar_Input.Qs_m.M9;
            box63M9.M9 = num9;
            Months box63M10;
            double num10 = (box63M10 = this._Calc.Water_heating.Box63_m).M10 + fghrs1.Photo_Solar_Input.Qs_m.M10;
            box63M10.M10 = num10;
            Months box63M11;
            double num11 = (box63M11 = this._Calc.Water_heating.Box63_m).M11 + fghrs1.Photo_Solar_Input.Qs_m.M11;
            box63M11.M11 = num11;
            Months box63M12;
            double num12 = (box63M12 = this._Calc.Water_heating.Box63_m).M12 + fghrs1.Photo_Solar_Input.Qs_m.M12;
            box63M12.M12 = num12;
          }
          this._Calc.Water_heating.Box56_m.M1 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M1;
          this._Calc.Water_heating.Box56_m.M2 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M2;
          this._Calc.Water_heating.Box56_m.M3 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M3;
          this._Calc.Water_heating.Box56_m.M4 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M4;
          this._Calc.Water_heating.Box56_m.M5 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M5;
          this._Calc.Water_heating.Box56_m.M6 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M6;
          this._Calc.Water_heating.Box56_m.M7 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M7;
          this._Calc.Water_heating.Box56_m.M8 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M8;
          this._Calc.Water_heating.Box56_m.M9 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M9;
          this._Calc.Water_heating.Box56_m.M10 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M10;
          this._Calc.Water_heating.Box56_m.M11 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M11;
          this._Calc.Water_heating.Box56_m.M12 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M12;
        }
      }
    }

    private string SEDBUKFull(string SEDBUKRef)
    {
      string str = "";
      switch (SEDBUKRef.Length)
      {
        case 1:
          if ((uint) Operators.CompareString(SEDBUKRef, "0", false) > 0U)
          {
            str = "00000" + SEDBUKRef;
            break;
          }
          break;
        case 2:
          str = "0000" + SEDBUKRef;
          break;
        case 3:
          str = "000" + SEDBUKRef;
          break;
        case 4:
          str = "00" + SEDBUKRef;
          break;
        case 5:
          str = "0" + SEDBUKRef;
          break;
        default:
          str = SEDBUKRef;
          break;
      }
      return str;
    }

    private void GetUppAndLowerSavings(
      ref Months savingsUpper,
      ref Months savingsLower,
      Months aLow,
      Months aUpp,
      Months Qhw,
      Months bLow,
      Months bUpp,
      Months cLow,
      Months cUpp)
    {
      List<double> list1 = this.MonthsToList(savingsUpper);
      List<double> list2 = this.MonthsToList(savingsLower);
      List<double> list3 = this.MonthsToList(aLow);
      List<double> list4 = this.MonthsToList(aUpp);
      List<double> list5 = this.MonthsToList(Qhw);
      List<double> list6 = this.MonthsToList(bLow);
      List<double> list7 = this.MonthsToList(bUpp);
      List<double> list8 = this.MonthsToList(cLow);
      List<double> list9 = this.MonthsToList(cUpp);
      int index = 0;
      do
      {
        if (list5[index] < 80.0)
        {
          list2[index] = (list3[index] * Math.Log(80.0) + list6[index] * 80.0 + list8[index]) * list5[index] / 80.0;
          list1[index] = (list4[index] * Math.Log(80.0) + list7[index] * 80.0 + list9[index]) * list5[index] / 80.0;
        }
        else if (list5[index] > 309.0)
        {
          list2[index] = list3[index] * Math.Log(309.0) + list6[index] * 309.0 + list8[index];
          list1[index] = list4[index] * Math.Log(309.0) + list7[index] * 309.0 + list9[index];
        }
        else
        {
          list2[index] = list3[index] * Math.Log(list5[index]) + list6[index] * list5[index] + list8[index];
          list1[index] = list4[index] * Math.Log(list5[index]) + list7[index] * list5[index] + list9[index];
        }
        checked { ++index; }
      }
      while (index <= 11);
      savingsUpper = this.ListToMonth(list1);
      savingsLower = this.ListToMonth(list2);
    }

    public List<double> MonthsToList(Months monthData) => new List<double>()
    {
      monthData.M1,
      monthData.M2,
      monthData.M3,
      monthData.M4,
      monthData.M5,
      monthData.M6,
      monthData.M7,
      monthData.M8,
      monthData.M9,
      monthData.M10,
      monthData.M11,
      monthData.M12
    };

    public Months ListToMonth(List<double> listData) => new Months()
    {
      M1 = listData[0],
      M2 = listData[1],
      M3 = listData[2],
      M4 = listData[3],
      M5 = listData[4],
      M6 = listData[5],
      M7 = listData[6],
      M8 = listData[7],
      M9 = listData[8],
      M10 = listData[9],
      M11 = listData[10],
      M12 = listData[11]
    };

    private double Calc_Box59(string Type, int Nm, bool _summer)
    {
      SAP_Module.Dwelling dwelling1 = new SAP_Module.Dwelling();
      SAP_Module.Dwelling dwelling2 = !this.OccupancyCalc ? this._House : this.OriginalSAPDwelling;
      float num1 = 0.0f;
      float num2 = 0.0f;
      string Left = Type;
      if (Operators.CompareString(Left, "Cylinder", false) != 0)
      {
        if (Operators.CompareString(Left, "Comm", false) == 0)
        {
          num1 = 1f;
          num2 = 3f;
        }
      }
      else
      {
        if (dwelling2.Water.Cylinder.PipeWorkInsulated)
        {
          string workInsulationType = dwelling2.Water.Cylinder.PipeWorkInsulationType;
          if (Operators.CompareString(workInsulationType, "First 1m from cylinder insulated", false) != 0)
          {
            if (Operators.CompareString(workInsulationType, "All accessible pipework insulated", false) != 0)
            {
              if (Operators.CompareString(workInsulationType, "Fully insulated primary pipework", false) == 0)
                num1 = 1f;
            }
            else
              num1 = 0.3f;
          }
          else
            num1 = 0.1f;
        }
        else
          num1 = 0.0f;
        num2 = !_summer ? (dwelling2.Water.Cylinder.Thermostat ? (!dwelling2.Water.Cylinder.Timed ? 5f : 3f) : 11f) : 3f;
      }
      return (double) checked (Nm * 14) * ((0.0091 * (double) num1 + 0.0245 * (1.0 - (double) num1)) * (double) num2 + 0.0263);
    }

    private void Calc_Box47to55(bool Community, bool SEDBUKStorageCombi)
    {
      this._SEDBUKStorageCombi = SEDBUKStorageCombi;
      if (this.IsFabricEfficiency)
        return;
      SAP_Module.Dwelling dwelling1 = new SAP_Module.Dwelling();
      SAP_Module.Dwelling dwelling2 = !this.OccupancyCalc ? this._House : this.OriginalSAPDwelling;
      if (dwelling2.Water.Cylinder.ManuSpecified)
      {
        this._Calc.Water_heating.Box48 = (double) dwelling2.Water.Cylinder.DeclaredLoss;
        this._Calc.Water_heating.Box49 = this.Calc_Table2b(1, Community);
        this._Calc.Water_heating.Box50 = this._Calc.Water_heating.Box48 * this._Calc.Water_heating.Box49;
        this._Calc.Water_heating.Box55 = this._Calc.Water_heating.Box50;
      }
      else
      {
        object Instance = (object) null;
        if (dwelling2.Water.SystemRef == 901)
          Instance = RuntimeHelpers.GetObjectValue(this.SEDBUKFound);
        else if (dwelling2.Water.SystemRef == 914)
          Instance = RuntimeHelpers.GetObjectValue(this.SEDBUKFound2);
        if (SEDBUKStorageCombi & Instance != null)
        {
          this._Calc.Water_heating.Box50 = Conversions.ToDouble(NewLateBinding.LateGet(Instance, (System.Type) null, "StrVol", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
          this._Calc.Water_heating.Box51 = Conversions.ToDouble(Operators.AddObject((object) 0.005, Operators.DivideObject((object) 0.55, Operators.AddObject(NewLateBinding.LateGet(Instance, (System.Type) null, "StrInsThk", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 4))));
        }
        else if (Community & !dwelling2.Water.HWSComm.CylinderInDwelling)
        {
          this._Calc.Water_heating.Box50 = 110.0;
          this._Calc.Water_heating.Box51 = 0.0152;
        }
        else
        {
          this._Calc.Water_heating.Box50 = (double) this._House.Water.Cylinder.Volume;
          this._Calc.Water_heating.Box51 = dwelling2.MainHeating.SAPTableCode != 192 ? (Operators.CompareString(dwelling2.Water.Cylinder.Insulation, "Factory", false) != 0 ? 0.005 + 1.76 / ((double) this._House.Water.Cylinder.InsThick + 12.8) : 0.005 + 0.55 / ((double) this._House.Water.Cylinder.InsThick + 4.0)) : 0.022;
        }
        this._Calc.Water_heating.Box52 = this._Calc.Water_heating.Box50 != 0.0 ? Math.Pow(120.0 / this._Calc.Water_heating.Box50, 1.0 / 3.0) : 0.0;
        this._Calc.Water_heating.Box53 = this.Calc_Table2b(2, Community);
        this._Calc.Water_heating.Box54 = this._Calc.Water_heating.Box50 * this._Calc.Water_heating.Box51 * this._Calc.Water_heating.Box52 * this._Calc.Water_heating.Box53;
        this._Calc.Water_heating.Box55 = this._Calc.Water_heating.Box54;
        if (Instance != null & (this._House.Water.SystemRef == 901 | this._House.Water.SystemRef == 914) && Instance is PCDF.SEDBUK && !string.IsNullOrEmpty(((PCDF.SEDBUK) Instance).SeperateDHWTests) && ((PCDF.SEDBUK) Instance).SeperateDHWTests.Equals("2"))
          this._Calc.Water_heating.Box55 = Conversion.Val(((PCDF.SEDBUK) Instance).StoLossF2);
      }
      this._Calc.Water_heating.Box56_m.M1 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M1;
      this._Calc.Water_heating.Box56_m.M2 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M2;
      this._Calc.Water_heating.Box56_m.M3 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M3;
      this._Calc.Water_heating.Box56_m.M4 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M4;
      this._Calc.Water_heating.Box56_m.M5 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M5;
      this._Calc.Water_heating.Box56_m.M6 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M6;
      this._Calc.Water_heating.Box56_m.M7 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M7;
      this._Calc.Water_heating.Box56_m.M8 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M8;
      this._Calc.Water_heating.Box56_m.M9 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M9;
      this._Calc.Water_heating.Box56_m.M10 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M10;
      this._Calc.Water_heating.Box56_m.M11 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M11;
      this._Calc.Water_heating.Box56_m.M12 = this._Calc.Water_heating.Box55 * this._Calc.HeatLoss.Box41_m.M12;
    }

    private double Calc_Table2b(int Type, bool Community)
    {
      int systemRef = this._House.Water.SystemRef;
      double num1;
      int num2;
      switch (systemRef)
      {
        case 901:
          double num3;
          if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0)
          {
            if (Operators.CompareString(this._House.MainHeating.SGroup, "Gas boilers and oil boilers", false) == 0)
            {
              if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "MainType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 2, false))
              {
                if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StrType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 1, false))
                {
                  num1 = !Operators.ConditionalCompareObjectGreaterEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StrVol", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 115, false) ? Conversions.ToDouble(Operators.AddObject((object) 2.54, Operators.MultiplyObject((object) 0.00682, Operators.SubtractObject((object) 115, NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StrVol", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))))) : 2.54;
                  goto label_93;
                }
                else if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StrType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 2, false))
                {
                  num1 = !Operators.ConditionalCompareObjectGreaterEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StrVol", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 115, false) ? Conversions.ToDouble(Operators.AddObject((object) 1.86, Operators.MultiplyObject((object) 0.00496, Operators.SubtractObject((object) 115, NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StrVol", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))))) : 1.86;
                  goto label_93;
                }
              }
              if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "MainType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 3, false))
              {
                num3 = 1.08;
                if (this._House.Water.Cylinder.Timed)
                  num3 *= 0.81;
                if ((uint) Operators.CompareString(this._House.Water.Thermal.Location, "In an airing cupboard", false) > 0U & this._House.Water.Thermal.Location != null)
                  num3 *= 1.1;
              }
              if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "MainType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 1, false))
              {
                if (this._House.Water.Thermal.Include)
                {
                  num3 = !this._House.Water.Cylinder.ManuSpecified ? 1.08 : 0.89;
                  if (this._House.Water.Cylinder.Timed)
                    num3 *= 0.81;
                  if ((uint) Operators.CompareString(this._House.Water.Thermal.Location, "In an airing cupboard", false) > 0U)
                    num3 *= 1.1;
                }
                else
                {
                  num3 = 0.6;
                  if (!Community)
                  {
                    if (!this._House.Water.Cylinder.Thermostat)
                      num3 *= 1.3;
                    if (this._House.Water.Cylinder.Timed)
                      num3 *= 0.9;
                  }
                }
              }
            }
            else if (Operators.CompareString(this._House.MainHeating.SGroup, "Micro-cogeneration (micro-CHP)", false) == 0)
            {
              num3 = 0.6;
              if (!Community)
              {
                if (!this._House.Water.Cylinder.Thermostat)
                  num3 *= 1.3;
                if (this._House.Water.Cylinder.Timed)
                  num3 *= 0.9;
              }
            }
            else if (this._House.MainHeating.SGroup.Contains("heat pumps"))
            {
              num3 = 0.6;
              if (!Community)
              {
                if (!this._House.Water.Cylinder.Thermostat)
                  num3 *= 1.3;
                if (this._House.Water.Cylinder.Timed)
                  num3 *= 0.9;
              }
            }
            else if (Operators.CompareString(this._House.MainHeating.SGroup, "Solid fuel boilers", false) == 0)
            {
              num3 = 0.6;
              if (!Community)
              {
                if (!this._House.Water.Cylinder.Thermostat)
                  num3 *= 1.3;
                if (this._House.Water.Cylinder.Timed)
                  num3 *= 0.9;
              }
            }
            else if (Operators.CompareString(this._House.MainHeating.HGroup, "Community heating schemes", false) == 0)
            {
              num1 = 0.6;
              goto label_93;
            }
          }
          else
          {
            int sapTableCode = this._House.MainHeating.SAPTableCode;
            if (sapTableCode == 192)
              num3 = this._House.Water.Cylinder.ManuSpecified ? 1.09 + 0.012 * ((double) this._House.Water.CPSUTemp - 85.0) : 1.0;
            else if (sapTableCode >= 120 && sapTableCode <= 123)
            {
              num3 = !this._House.Water.Cylinder.ManuSpecified ? 1.08 : 0.89;
              if (this._House.Water.Cylinder.Timed)
                num3 *= 0.81;
              if ((uint) Operators.CompareString(this._House.Water.Thermal.Location, "In an airing cupboard", false) > 0U)
                num3 *= 1.1;
            }
            else if (this._House.Water.Thermal.Include)
            {
              num3 = !this._House.Water.Cylinder.ManuSpecified ? 1.08 : 0.89;
              if (this._House.Water.Cylinder.Timed)
                num3 *= 0.81;
              if ((uint) Operators.CompareString(this._House.Water.Thermal.Location, "In an airing cupboard", false) > 0U)
                num3 *= 1.1;
            }
            else if (Operators.CompareString(this._House.Water.CombiType, "Storage combi boiler, primary store", false) == 0)
            {
              num1 = (double) this._House.Water.Cylinder.Volume < 115.0 ? 2.54 + 0.00682 * (115.0 - (double) this._House.Water.Cylinder.Volume) : 2.54;
              goto label_93;
            }
            else if (Operators.CompareString(this._House.Water.CombiType, "Storage combi boiler, secondary store", false) == 0)
            {
              num1 = (double) this._House.Water.Cylinder.Volume < 115.0 ? 1.86 + 0.00496 * (115.0 - (double) this._House.Water.Cylinder.Volume) : 1.86;
              goto label_93;
            }
            else
            {
              num3 = 0.6;
              if (!Community)
              {
                if (!this._House.Water.Cylinder.Thermostat)
                  num3 *= 1.3;
                if (this._House.Water.Cylinder.Timed)
                  num3 *= 0.9;
              }
            }
          }
          num1 = num3;
          goto label_93;
        case 902:
          double num4 = 0.6;
          if (!this._House.Water.Cylinder.Thermostat)
            num4 *= 1.3;
          if (this._House.Water.Cylinder.Timed)
            num4 *= 0.9;
          num1 = num4;
          goto label_93;
        case 903:
          num2 = 1;
          break;
        default:
          num2 = systemRef == 999 ? 1 : 0;
          break;
      }
      if (num2 != 0)
        num1 = 0.6;
      else if (systemRef >= 911 && systemRef <= 931)
      {
        double num5 = 0.6;
        if (!this._House.Water.Cylinder.Thermostat)
          num5 *= 1.3;
        if (this._House.Water.Cylinder.Timed)
          num5 *= 0.9;
        num1 = num5;
      }
      else if (systemRef == 950 || systemRef == 951 || systemRef == 952)
        num1 = 0.6;
label_93:
      return num1;
    }

    private float RegionalFactor()
    {
      float num = 0.0f;
      string location = this._House.Location;
      // ISSUE: reference to a compiler-generated method
      switch (\u003CPrivateImplementationDetails\u003E.ComputeStringHash(location))
      {
        case 85627527:
          if (Operators.CompareString(location, "Orkney", false) == 0)
          {
            num = 0.93f;
            goto default;
          }
          else
            goto default;
        case 417745194:
          if (Operators.CompareString(location, "Thames valley", false) == 0)
            goto label_43;
          else
            goto default;
        case 419820972:
          if (Operators.CompareString(location, "Borders", false) == 0)
            break;
          goto default;
        case 423237023:
          if (Operators.CompareString(location, "South England", false) == 0)
            goto label_41;
          else
            goto default;
        case 463047147:
          if (Operators.CompareString(location, "Wales", false) == 0)
          {
            num = 1.01f;
            goto default;
          }
          else
            goto default;
        case 1121445140:
          if (Operators.CompareString(location, "South West England", false) == 0)
          {
            num = 1.09f;
            goto default;
          }
          else
            goto default;
        case 1486598274:
          if (Operators.CompareString(location, "Shetland", false) == 0)
          {
            num = 0.84f;
            goto default;
          }
          else
            goto default;
        case 2227903623:
          if (Operators.CompareString(location, "South West Scotland", false) == 0)
            goto label_33;
          else
            goto default;
        case 2231236260:
          if (Operators.CompareString(location, "Borders (England)", false) == 0)
            break;
          goto default;
        case 2536965870:
          if (Operators.CompareString(location, "East Anglia", false) == 0)
          {
            num = 1.05f;
            goto default;
          }
          else
            goto default;
        case 2574711555:
          if (Operators.CompareString(location, "Severn valley", false) == 0)
            goto label_38;
          else
            goto default;
        case 2627101428:
          if (Operators.CompareString(location, "Highland", false) == 0)
          {
            num = 0.87f;
            goto default;
          }
          else
            goto default;
        case 2686736911:
          if (Operators.CompareString(location, "Thames", false) == 0)
            goto label_43;
          else
            goto default;
        case 3009355918:
          if (Operators.CompareString(location, "North West England", false) == 0)
          {
            num = 0.94f;
            goto default;
          }
          else
            goto default;
        case 3088137120:
          if (Operators.CompareString(location, "North East England", false) == 0)
            goto label_33;
          else
            goto default;
        case 3158107624:
          if (Operators.CompareString(location, "East Scotland", false) == 0)
          {
            num = 0.9f;
            goto default;
          }
          else
            goto default;
        case 3255183281:
          if (Operators.CompareString(location, "Western Isles", false) == 0)
          {
            num = 0.92f;
            goto default;
          }
          else
            goto default;
        case 3577032256:
          if (Operators.CompareString(location, "Southern England", false) == 0)
            goto label_41;
          else
            goto default;
        case 3757789148:
          if (Operators.CompareString(location, "Northern Ireland", false) == 0)
          {
            num = 0.94f;
            goto default;
          }
          else
            goto default;
        case 3790857268:
          if (Operators.CompareString(location, "East Pennines", false) == 0)
          {
            num = 1f;
            goto default;
          }
          else
            goto default;
        case 4003211866:
          if (Operators.CompareString(location, "South East England", false) == 0)
          {
            num = 1.09f;
            goto default;
          }
          else
            goto default;
        case 4013004195:
          if (Operators.CompareString(location, "North East Scotland", false) == 0)
          {
            num = 0.89f;
            goto default;
          }
          else
            goto default;
        case 4072253181:
          if (Operators.CompareString(location, "Midlands", false) == 0)
          {
            num = 1f;
            goto default;
          }
          else
            goto default;
        case 4101740164:
          if (Operators.CompareString(location, "Severn", false) == 0)
            goto label_38;
          else
            goto default;
        case 4111412702:
          if (Operators.CompareString(location, "West Scotland", false) == 0)
          {
            num = 0.92f;
            goto default;
          }
          else
            goto default;
        case 4162830650:
          if (Operators.CompareString(location, "West Pennines", false) == 0)
          {
            num = 0.96f;
            goto default;
          }
          else
            goto default;
        default:
label_48:
          return num;
      }
      num = 0.92f;
      goto label_48;
label_33:
      num = 0.94f;
      goto label_48;
label_38:
      num = 1.07f;
      goto label_48;
label_41:
      num = 1.1f;
      goto label_48;
label_43:
      num = 1.04f;
      goto label_48;
    }

    private void Calc_Solar()
    {
      double solarArea = (double) this._House.Water.Solar.SolarArea;
      double num;
      if (this._House.Water.Solar.Gross)
      {
        string solarType = this._House.Water.Solar.SolarType;
        if (Operators.CompareString(solarType, "Evacuated tube", false) != 0)
        {
          if (Operators.CompareString(solarType, "Flat plate, glazed", false) != 0)
          {
            if (Operators.CompareString(solarType, "Unglazed", false) == 0)
              num = 1.0;
          }
          else
          {
            solarArea *= 0.9;
            num = 0.9;
          }
        }
        else
        {
          solarArea *= 0.72;
          num = 0.72;
        }
      }
      string solarType1 = this._House.Water.Solar.SolarType;
      if (Operators.CompareString(solarType1, "Evacuated tube", false) != 0)
      {
        if (Operators.CompareString(solarType1, "Flat plate, glazed", false) != 0)
        {
          if (Operators.CompareString(solarType1, "Unglazed", false) == 0)
            num = 20.0;
        }
        else
          num = 6.0;
      }
      else
        num = 3.0;
      this._Calc.Water_heating.Solar.H1 = solarArea;
      this._Calc.Water_heating.Solar.H2 = (double) this._House.Water.Solar.SolarZero;
      this._Calc.Water_heating.Solar.H3 = (double) this._House.Water.Solar.SolarHLoss;
      this._Calc.Water_heating.Solar.H3a = (double) this._House.Water.Solar.SolarHLoss2;
      this._Calc.Water_heating.Solar.H3b = !this._House.Water.Solar.Overide ? num : 0.892 * (this._Calc.Water_heating.Solar.H3 + 45.0 * this._Calc.Water_heating.Solar.H3a);
      this._Calc.Water_heating.Solar.H4 = this._Calc.Water_heating.Solar.H3b / this._Calc.Water_heating.Solar.H2;
      this._Calc.Water_heating.Solar.H5 = this.RadiationCalc(this._House.Water.Solar.SolarOrientation, this._House.Water.Solar.SolarTilt, true);
      if (this.IsHeatDemand & !this.IsRHICalc)
        this._Calc.Water_heating.Solar.H5 = 0.0;
      string solarOvershading = this._House.Water.Solar.SolarOvershading;
      if (Operators.CompareString(solarOvershading, "Heavy (>80%)", false) != 0)
      {
        if (Operators.CompareString(solarOvershading, "Significant (>60% - 80%)", false) != 0)
        {
          if (Operators.CompareString(solarOvershading, "Modest (20% - 60%)", false) != 0)
          {
            if (Operators.CompareString(solarOvershading, "None or Very Little (<20%)", false) == 0)
              this._Calc.Water_heating.Solar.H6 = 1.0;
          }
          else
            this._Calc.Water_heating.Solar.H6 = 0.8;
        }
        else
          this._Calc.Water_heating.Solar.H6 = 0.65;
      }
      else
        this._Calc.Water_heating.Solar.H6 = 0.5;
      this._Calc.Water_heating.Solar.H7 = this._Calc.Water_heating.Solar.H1 * this._Calc.Water_heating.Solar.H2 * this._Calc.Water_heating.Solar.H5 * this._Calc.Water_heating.Solar.H6;
      string showerType = this._House.Water.Solar.ShowerType;
      if (Operators.CompareString(showerType, "Non-electric shower(s) only", false) != 0)
      {
        if (Operators.CompareString(showerType, "Electric shower(s) only", false) != 0)
        {
          if (Operators.CompareString(showerType, "Both electric and non-electric showers", false) != 0)
          {
            if (Operators.CompareString(showerType, "No shower (bath only)", false) == 0)
              this._Calc.Water_heating.Solar.H7a = 1.09;
          }
          else
            this._Calc.Water_heating.Solar.H7a = 1.0;
        }
        else
          this._Calc.Water_heating.Solar.H7a = 0.64;
      }
      else
        this._Calc.Water_heating.Solar.H7a = 1.29;
      this._Calc.Water_heating.Solar.H8 = !this._House.Water.WWHRS.Include ? this._Calc.Water_heating.Solar.H7 / (this._Calc.Water_heating.Solar.H7a * this._Calc.Water_heating.Box45) : this._Calc.Water_heating.Solar.H7 / (this._Calc.Water_heating.Solar.H7a * this._Calc.Water_heating.Box45 + this._Calc.Water_heating.WWHRS.Sum_Sm);
      if (this._Calc.Water_heating.Solar.H8 > 0.0)
      {
        this._Calc.Water_heating.Solar.H9 = 1.0 - Math.Exp(-1.0 / this._Calc.Water_heating.Solar.H8);
        if ((double) this._House.Water.Cylinder.Volume > 0.0 & !this._House.Water.Cylinder.Thermostat)
        {
          if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0 & Operators.CompareString(this._House.Water.System, "From main heating system", false) == 0)
          {
            if ((uint) Operators.CompareString(this._House.MainHeating.SGroup, "Micro-cogeneration (micro-CHP)", false) > 0U & !this._House.MainHeating.SGroup.Contains("heat pumps") && Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "MainType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 1, false) && !this._House.Water.Thermal.Include)
              this._Calc.Water_heating.Solar.H9 *= 0.9;
          }
          else
          {
            switch (this._House.Water.SystemRef)
            {
              case 901:
              case 903:
                if (this._House.MainHeating.SAPTableCode < 200 && !this._House.Water.Thermal.Include)
                {
                  if (string.IsNullOrEmpty(this._House.Water.CombiType))
                    this._House.Water.CombiType = "";
                  string combiType = this._House.Water.CombiType;
                  if (Operators.CompareString(combiType, "Storage combi boiler, secondary store", false) != 0 && Operators.CompareString(combiType, "Storage combi boiler, primary store", false) != 0)
                    this._Calc.Water_heating.Solar.H9 *= 0.9;
                  break;
                }
                break;
              case 902:
              case 930:
                this._Calc.Water_heating.Solar.H9 *= 0.9;
                break;
              case 914:
                if (this._House.MainHeating2.SAPTableCode < 200 && !this._House.Water.Thermal.Include)
                {
                  if (string.IsNullOrEmpty(this._House.Water.CombiType))
                    this._House.Water.CombiType = "";
                  string combiType = this._House.Water.CombiType;
                  if (Operators.CompareString(combiType, "Storage combi boiler, secondary store", false) != 0 && Operators.CompareString(combiType, "Storage combi boiler, primary store", false) != 0)
                    this._Calc.Water_heating.Solar.H9 *= 0.9;
                  break;
                }
                break;
            }
          }
        }
      }
      this._Calc.Water_heating.Solar.H10 = this._Calc.Water_heating.Solar.H4 >= 20.0 ? 0.693 - 0.0108 * this._Calc.Water_heating.Solar.H4 : 0.97 - 0.0367 * this._Calc.Water_heating.Solar.H4 + 0.0006 * Math.Pow(this._Calc.Water_heating.Solar.H4, 2.0);
      if (this._Calc.Water_heating.Solar.H10 < 0.0)
        this._Calc.Water_heating.Solar.H10 = 0.0;
      this._Calc.Water_heating.Solar.H11 = (double) this._House.Water.Solar.SolarVolume;
      if (!this._House.Water.Solar.SolarSeperate)
      {
        if (this._House.Water.Thermal.Include)
        {
          this._Calc.Water_heating.Solar.H12 = (double) this._House.Water.Cylinder.Volume;
          this._Calc.Water_heating.Solar.H13 = this._Calc.Water_heating.Solar.H11 + 0.3 * (this._Calc.Water_heating.Solar.H12 - this._Calc.Water_heating.Solar.H11);
        }
        else
        {
          this._Calc.Water_heating.Solar.H12 = (double) this._House.Water.Cylinder.Volume;
          this._Calc.Water_heating.Solar.H13 = this._Calc.Water_heating.Solar.H11 + 0.3 * (this._Calc.Water_heating.Solar.H12 - this._Calc.Water_heating.Solar.H11);
        }
      }
      else if ((double) this._House.Water.Cylinder.Volume == 0.0 & !this._SEDBUKStorageCombi & this._House.Water.SystemRef < 950)
      {
        this._Calc.Water_heating.Solar.H12 = 75.0;
        this._Calc.Water_heating.Solar.H13 = this._Calc.Water_heating.Solar.H11 + 0.3 * (this._Calc.Water_heating.Solar.H12 - this._Calc.Water_heating.Solar.H11);
      }
      else
        this._Calc.Water_heating.Solar.H13 = this._Calc.Water_heating.Solar.H11;
      this._Calc.Water_heating.Solar.H14 = this._Calc.Water_heating.Box43;
      this._Calc.Water_heating.Solar.H15 = this._Calc.Water_heating.Solar.H13 / this._Calc.Water_heating.Solar.H14;
      this._Calc.Water_heating.Solar.H16 = 1.0 + 0.2 * Math.Log(this._Calc.Water_heating.Solar.H15);
      if (this._Calc.Water_heating.Solar.H16 > 1.0)
        this._Calc.Water_heating.Solar.H16 = 1.0;
      this._Calc.Water_heating.Solar.H17 = this._Calc.Water_heating.Solar.H7 * this._Calc.Water_heating.Solar.H9 * this._Calc.Water_heating.Solar.H10 * this._Calc.Water_heating.Solar.H16;
      this._Calc.Water_heating.Box63_m.M1 = -this._Calc.Water_heating.Solar.H17 * (double) this.MonthlyRadiationValues[0].fm * this._Calc.HeatLoss.Box41_m.M1 / 365.0;
      this._Calc.Water_heating.Box63_m.M2 = -this._Calc.Water_heating.Solar.H17 * (double) this.MonthlyRadiationValues[1].fm * this._Calc.HeatLoss.Box41_m.M2 / 365.0;
      this._Calc.Water_heating.Box63_m.M3 = -this._Calc.Water_heating.Solar.H17 * (double) this.MonthlyRadiationValues[2].fm * this._Calc.HeatLoss.Box41_m.M3 / 365.0;
      this._Calc.Water_heating.Box63_m.M4 = -this._Calc.Water_heating.Solar.H17 * (double) this.MonthlyRadiationValues[3].fm * this._Calc.HeatLoss.Box41_m.M4 / 365.0;
      this._Calc.Water_heating.Box63_m.M5 = -this._Calc.Water_heating.Solar.H17 * (double) this.MonthlyRadiationValues[4].fm * this._Calc.HeatLoss.Box41_m.M5 / 365.0;
      this._Calc.Water_heating.Box63_m.M6 = -this._Calc.Water_heating.Solar.H17 * (double) this.MonthlyRadiationValues[5].fm * this._Calc.HeatLoss.Box41_m.M6 / 365.0;
      this._Calc.Water_heating.Box63_m.M7 = -this._Calc.Water_heating.Solar.H17 * (double) this.MonthlyRadiationValues[6].fm * this._Calc.HeatLoss.Box41_m.M7 / 365.0;
      this._Calc.Water_heating.Box63_m.M8 = -this._Calc.Water_heating.Solar.H17 * (double) this.MonthlyRadiationValues[7].fm * this._Calc.HeatLoss.Box41_m.M8 / 365.0;
      this._Calc.Water_heating.Box63_m.M9 = -this._Calc.Water_heating.Solar.H17 * (double) this.MonthlyRadiationValues[8].fm * this._Calc.HeatLoss.Box41_m.M9 / 365.0;
      this._Calc.Water_heating.Box63_m.M10 = -this._Calc.Water_heating.Solar.H17 * (double) this.MonthlyRadiationValues[9].fm * this._Calc.HeatLoss.Box41_m.M10 / 365.0;
      this._Calc.Water_heating.Box63_m.M11 = -this._Calc.Water_heating.Solar.H17 * (double) this.MonthlyRadiationValues[10].fm * this._Calc.HeatLoss.Box41_m.M11 / 365.0;
      this._Calc.Water_heating.Box63_m.M12 = -this._Calc.Water_heating.Solar.H17 * (double) this.MonthlyRadiationValues[11].fm * this._Calc.HeatLoss.Box41_m.M12 / 365.0;
    }

    private void Calc_WWHRS()
    {
      bool flag = false;
      if (Operators.CompareString(this._House.MainHeating.HGroup, "Boiler systems with radiators or underfloor heating", false) == 0)
      {
        if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0)
        {
          PCDF.SEDBUK sedbuk = new PCDF.SEDBUK();
          try
          {
            sedbuk = SAP_Module.PCDFData.Boilers.Where<PCDF.SEDBUK>((Func<PCDF.SEDBUK, bool>) (b => b.ID.ToUpper().Equals(this._House.MainHeating.SEDBUK.ToUpper()))).SingleOrDefault<PCDF.SEDBUK>();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          if (sedbuk != null && !sedbuk.MainType.Equals("2"))
          {
            if (sedbuk.MainType.Equals("1"))
              flag = true;
            else if (!sedbuk.MainType.Equals("3"))
              ;
          }
        }
        else
        {
          switch (this._House.MainHeating.SAPTableCode)
          {
            case 103:
            case 104:
            case 107:
            case 108:
            case 112:
            case 113:
            case 118:
            case 120:
            case 128:
            case 129:
            case 130:
              break;
            default:
              flag = true;
              goto case 103;
          }
        }
      }
      if ((uint) Operators.CompareString(this._House.Water.WWHRS.Systems[0].SystemsRef, "", false) > 0U)
      {
        PCDF.WWHRS wwhrs1 = this.WWHRS(this._House.Water.WWHRS.Systems[0].SystemsRef);
        this._Calc.Water_heating.WWHRS.Seff = (double) this._House.Water.WWHRS.Systems[0].WithBath * Conversion.Val(wwhrs1.WasteWaterFraction) * Conversion.Val(wwhrs1.Efficiency) * Conversion.Val(wwhrs1.Utilisation_Factor) / 100.0;
        WWHRS2012 wwhrs2;
        double num = (wwhrs2 = this._Calc.Water_heating.WWHRS).Seff + (double) this._House.Water.WWHRS.Systems[0].WithNoBath * Conversion.Val(wwhrs1.Efficiency) * Conversion.Val(wwhrs1.Utilisation_Factor) / 100.0;
        wwhrs2.Seff = num;
        if (string.IsNullOrEmpty(wwhrs1.SystemType) & this._House.Water.Solar.Inlcude)
          return;
      }
      if ((uint) Operators.CompareString(this._House.Water.WWHRS.Systems[1].SystemsRef, "", false) > 0U)
      {
        PCDF.WWHRS wwhrs3 = this.WWHRS(this._House.Water.WWHRS.Systems[1].SystemsRef);
        WWHRS2012 wwhrs4;
        double num1 = (wwhrs4 = this._Calc.Water_heating.WWHRS).Seff + (double) this._House.Water.WWHRS.Systems[1].WithBath * Conversion.Val(wwhrs3.WasteWaterFraction) * Conversion.Val(wwhrs3.Efficiency) * Conversion.Val(wwhrs3.Utilisation_Factor) / 100.0;
        wwhrs4.Seff = num1;
        WWHRS2012 wwhrs5;
        double num2 = (wwhrs5 = this._Calc.Water_heating.WWHRS).Seff + (double) this._House.Water.WWHRS.Systems[1].WithNoBath * Conversion.Val(wwhrs3.Efficiency) * Conversion.Val(wwhrs3.Utilisation_Factor) / 100.0;
        wwhrs5.Seff = num2;
      }
      if (this._Calc.Water_heating.WWHRS.Seff == 0.0)
        return;
      try
      {
        if ((double) this._House.Water.WWHRS.TotalRooms == 0.0)
          throw new Exception("Missing Total Number of Rooms with Bath and/or Shower");
        this._Calc.Water_heating.WWHRS.Seff /= (double) this._House.Water.WWHRS.TotalRooms;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      Months months1 = new Months();
      months1.M1 = 11.1;
      months1.M2 = 10.8;
      months1.M3 = 11.8;
      months1.M4 = 14.7;
      months1.M5 = 16.1;
      months1.M6 = 18.2;
      months1.M7 = 21.3;
      months1.M8 = 19.2;
      months1.M9 = 18.8;
      months1.M10 = 16.3;
      months1.M11 = 13.3;
      months1.M12 = 11.8;
      Months months2 = new Months();
      months2.M1 = 1.1;
      months2.M2 = 1.06;
      months2.M3 = 1.02;
      months2.M4 = 0.98;
      months2.M5 = 0.94;
      months2.M6 = 0.9;
      months2.M7 = 0.9;
      months2.M8 = 0.94;
      months2.M9 = 0.98;
      months2.M10 = 1.02;
      months2.M11 = 1.06;
      months2.M12 = 1.1;
      Months months3 = new Months();
      months3.M1 = 41.2;
      months3.M2 = 41.4;
      months3.M3 = 40.1;
      months3.M4 = 37.6;
      months3.M5 = 36.4;
      months3.M6 = 33.9;
      months3.M7 = 30.4;
      months3.M8 = 33.4;
      months3.M9 = 33.5;
      months3.M10 = 36.3;
      months3.M11 = 39.4;
      months3.M12 = 39.9;
      float box42 = (float) this._Calc.Water_heating.Box42;
      Months months4 = new Months();
      Months months5 = new Months();
      if (this._House.LessThan125Litre)
      {
        months4.M1 = 7.125 * months3.M1 / (40.0 - months1.M1) + 23.8;
        months4.M2 = 7.125 * months3.M2 / (40.0 - months1.M2) + 23.8;
        months4.M3 = 7.125 * months3.M3 / (40.0 - months1.M3) + 23.8;
        months4.M4 = 7.125 * months3.M4 / (40.0 - months1.M4) + 23.8;
        months4.M5 = 7.125 * months3.M5 / (40.0 - months1.M5) + 23.8;
        months4.M6 = 7.125 * months3.M6 / (40.0 - months1.M6) + 23.8;
        months4.M7 = 7.125 * months3.M7 / (40.0 - months1.M7) + 23.8;
        months4.M8 = 7.125 * months3.M8 / (40.0 - months1.M8) + 23.8;
        months4.M9 = 7.125 * months3.M9 / (40.0 - months1.M9) + 23.8;
        months4.M10 = 7.125 * months3.M10 / (40.0 - months1.M10) + 23.8;
        months4.M11 = 7.125 * months3.M11 / (40.0 - months1.M11) + 23.8;
        months4.M12 = 7.125 * months3.M12 / (40.0 - months1.M12) + 23.8;
        months5.M1 = 10.26 * months3.M1 / (40.0 - months1.M1);
        months5.M2 = 10.26 * months3.M2 / (40.0 - months1.M2);
        months5.M3 = 10.26 * months3.M3 / (40.0 - months1.M3);
        months5.M4 = 10.26 * months3.M4 / (40.0 - months1.M4);
        months5.M5 = 10.26 * months3.M5 / (40.0 - months1.M5);
        months5.M6 = 10.26 * months3.M6 / (40.0 - months1.M6);
        months5.M7 = 10.26 * months3.M7 / (40.0 - months1.M7);
        months5.M8 = 10.26 * months3.M8 / (40.0 - months1.M8);
        months5.M9 = 10.26 * months3.M9 / (40.0 - months1.M9);
        months5.M10 = 10.26 * months3.M10 / (40.0 - months1.M10);
        months5.M11 = 10.26 * months3.M11 / (40.0 - months1.M11);
        months5.M12 = 10.26 * months3.M12 / (40.0 - months1.M12);
      }
      else
      {
        months4.M1 = 7.5 * months3.M1 / (40.0 - months1.M1) + 23.8;
        months4.M2 = 7.5 * months3.M2 / (40.0 - months1.M2) + 23.8;
        months4.M3 = 7.5 * months3.M3 / (40.0 - months1.M3) + 23.8;
        months4.M4 = 7.5 * months3.M4 / (40.0 - months1.M4) + 23.8;
        months4.M5 = 7.5 * months3.M5 / (40.0 - months1.M5) + 23.8;
        months4.M6 = 7.5 * months3.M6 / (40.0 - months1.M6) + 23.8;
        months4.M7 = 7.5 * months3.M7 / (40.0 - months1.M7) + 23.8;
        months4.M8 = 7.5 * months3.M8 / (40.0 - months1.M8) + 23.8;
        months4.M9 = 7.5 * months3.M9 / (40.0 - months1.M9) + 23.8;
        months4.M10 = 7.5 * months3.M10 / (40.0 - months1.M10) + 23.8;
        months4.M11 = 7.5 * months3.M11 / (40.0 - months1.M11) + 23.8;
        months4.M12 = 7.5 * months3.M12 / (40.0 - months1.M12) + 23.8;
        months5.M1 = 54.0 / 5.0 * months3.M1 / (40.0 - months1.M1);
        months5.M2 = 54.0 / 5.0 * months3.M2 / (40.0 - months1.M2);
        months5.M3 = 54.0 / 5.0 * months3.M3 / (40.0 - months1.M3);
        months5.M4 = 54.0 / 5.0 * months3.M4 / (40.0 - months1.M4);
        months5.M5 = 54.0 / 5.0 * months3.M5 / (40.0 - months1.M5);
        months5.M6 = 54.0 / 5.0 * months3.M6 / (40.0 - months1.M6);
        months5.M7 = 54.0 / 5.0 * months3.M7 / (40.0 - months1.M7);
        months5.M8 = 54.0 / 5.0 * months3.M8 / (40.0 - months1.M8);
        months5.M9 = 54.0 / 5.0 * months3.M9 / (40.0 - months1.M9);
        months5.M10 = 54.0 / 5.0 * months3.M10 / (40.0 - months1.M10);
        months5.M11 = 54.0 / 5.0 * months3.M11 / (40.0 - months1.M11);
        months5.M12 = 54.0 / 5.0 * months3.M12 / (40.0 - months1.M12);
      }
      this._Calc.Water_heating.WWHRS.Sm.M1 = -((double) box42 * months4.M1 + months5.M1) * this._Calc.Water_heating.WWHRS.Seff * (34.0 - months1.M1) * 4.18 * this._Calc.HeatLoss.Box41_m.M1 * months2.M1 / 3600.0;
      this._Calc.Water_heating.WWHRS.Sm.M2 = -((double) box42 * months4.M2 + months5.M2) * this._Calc.Water_heating.WWHRS.Seff * (34.0 - months1.M2) * 4.18 * this._Calc.HeatLoss.Box41_m.M2 * months2.M2 / 3600.0;
      this._Calc.Water_heating.WWHRS.Sm.M3 = -((double) box42 * months4.M3 + months5.M3) * this._Calc.Water_heating.WWHRS.Seff * (34.0 - months1.M3) * 4.18 * this._Calc.HeatLoss.Box41_m.M3 * months2.M3 / 3600.0;
      this._Calc.Water_heating.WWHRS.Sm.M4 = -((double) box42 * months4.M4 + months5.M4) * this._Calc.Water_heating.WWHRS.Seff * (34.0 - months1.M4) * 4.18 * this._Calc.HeatLoss.Box41_m.M4 * months2.M4 / 3600.0;
      this._Calc.Water_heating.WWHRS.Sm.M5 = -((double) box42 * months4.M5 + months5.M5) * this._Calc.Water_heating.WWHRS.Seff * (34.0 - months1.M5) * 4.18 * this._Calc.HeatLoss.Box41_m.M5 * months2.M5 / 3600.0;
      this._Calc.Water_heating.WWHRS.Sm.M6 = -((double) box42 * months4.M6 + months5.M6) * this._Calc.Water_heating.WWHRS.Seff * (34.0 - months1.M6) * 4.18 * this._Calc.HeatLoss.Box41_m.M6 * months2.M6 / 3600.0;
      this._Calc.Water_heating.WWHRS.Sm.M7 = -((double) box42 * months4.M7 + months5.M7) * this._Calc.Water_heating.WWHRS.Seff * (34.0 - months1.M7) * 4.18 * this._Calc.HeatLoss.Box41_m.M7 * months2.M7 / 3600.0;
      this._Calc.Water_heating.WWHRS.Sm.M8 = -((double) box42 * months4.M8 + months5.M8) * this._Calc.Water_heating.WWHRS.Seff * (34.0 - months1.M8) * 4.18 * this._Calc.HeatLoss.Box41_m.M8 * months2.M8 / 3600.0;
      this._Calc.Water_heating.WWHRS.Sm.M9 = -((double) box42 * months4.M9 + months5.M9) * this._Calc.Water_heating.WWHRS.Seff * (34.0 - months1.M9) * 4.18 * this._Calc.HeatLoss.Box41_m.M9 * months2.M9 / 3600.0;
      this._Calc.Water_heating.WWHRS.Sm.M10 = -((double) box42 * months4.M10 + months5.M10) * this._Calc.Water_heating.WWHRS.Seff * (34.0 - months1.M10) * 4.18 * this._Calc.HeatLoss.Box41_m.M10 * months2.M10 / 3600.0;
      this._Calc.Water_heating.WWHRS.Sm.M11 = -((double) box42 * months4.M11 + months5.M11) * this._Calc.Water_heating.WWHRS.Seff * (34.0 - months1.M11) * 4.18 * this._Calc.HeatLoss.Box41_m.M11 * months2.M11 / 3600.0;
      this._Calc.Water_heating.WWHRS.Sm.M12 = -((double) box42 * months4.M12 + months5.M12) * this._Calc.Water_heating.WWHRS.Seff * (34.0 - months1.M12) * 4.18 * this._Calc.HeatLoss.Box41_m.M12 * months2.M12 / 3600.0;
      PCDF.WWHRS wwhrs = this.WWHRS(this._House.Water.WWHRS.Systems[0].SystemsRef);
      if (wwhrs.InstantaneousStorage.Equals("2"))
      {
        if ((double) this._House.Water.WWHRS.Systems[0].DedicatedStorage < Conversion.Val(wwhrs.LowDedicatedVolume))
        {
          Months sm1;
          double num3 = (sm1 = this._Calc.Water_heating.WWHRS.Sm).M1 * ((double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.LowDedicatedVolume));
          sm1.M1 = num3;
          Months sm2;
          double num4 = (sm2 = this._Calc.Water_heating.WWHRS.Sm).M2 * ((double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.LowDedicatedVolume));
          sm2.M2 = num4;
          Months sm3;
          double num5 = (sm3 = this._Calc.Water_heating.WWHRS.Sm).M3 * ((double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.LowDedicatedVolume));
          sm3.M3 = num5;
          Months sm4;
          double num6 = (sm4 = this._Calc.Water_heating.WWHRS.Sm).M4 * ((double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.LowDedicatedVolume));
          sm4.M4 = num6;
          Months sm5;
          double num7 = (sm5 = this._Calc.Water_heating.WWHRS.Sm).M5 * ((double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.LowDedicatedVolume));
          sm5.M5 = num7;
          Months sm6;
          double num8 = (sm6 = this._Calc.Water_heating.WWHRS.Sm).M6 * ((double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.LowDedicatedVolume));
          sm6.M6 = num8;
          Months sm7;
          double num9 = (sm7 = this._Calc.Water_heating.WWHRS.Sm).M7 * ((double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.LowDedicatedVolume));
          sm7.M7 = num9;
          Months sm8;
          double num10 = (sm8 = this._Calc.Water_heating.WWHRS.Sm).M8 * ((double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.LowDedicatedVolume));
          sm8.M8 = num10;
          Months sm9;
          double num11 = (sm9 = this._Calc.Water_heating.WWHRS.Sm).M9 * ((double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.LowDedicatedVolume));
          sm9.M9 = num11;
          Months sm10;
          double num12 = (sm10 = this._Calc.Water_heating.WWHRS.Sm).M10 * ((double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.LowDedicatedVolume));
          sm10.M10 = num12;
          Months sm11;
          double num13 = (sm11 = this._Calc.Water_heating.WWHRS.Sm).M11 * ((double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.LowDedicatedVolume));
          sm11.M11 = num13;
          Months sm12;
          double num14 = (sm12 = this._Calc.Water_heating.WWHRS.Sm).M12 * ((double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.LowDedicatedVolume));
          sm12.M12 = num14;
        }
        else if ((double) this._House.Water.WWHRS.Systems[0].DedicatedStorage > 2.0 * Conversion.Val(wwhrs.HighDedicatedVolume))
        {
          this._Calc.Water_heating.WWHRS.Sm.M1 = 0.0;
          this._Calc.Water_heating.WWHRS.Sm.M2 = 0.0;
          this._Calc.Water_heating.WWHRS.Sm.M3 = 0.0;
          this._Calc.Water_heating.WWHRS.Sm.M4 = 0.0;
          this._Calc.Water_heating.WWHRS.Sm.M5 = 0.0;
          this._Calc.Water_heating.WWHRS.Sm.M6 = 0.0;
          this._Calc.Water_heating.WWHRS.Sm.M7 = 0.0;
          this._Calc.Water_heating.WWHRS.Sm.M8 = 0.0;
          this._Calc.Water_heating.WWHRS.Sm.M9 = 0.0;
          this._Calc.Water_heating.WWHRS.Sm.M10 = 0.0;
          this._Calc.Water_heating.WWHRS.Sm.M11 = 0.0;
          this._Calc.Water_heating.WWHRS.Sm.M12 = 0.0;
        }
        else if ((double) this._House.Water.WWHRS.Systems[0].DedicatedStorage > Conversion.Val(wwhrs.HighDedicatedVolume))
        {
          Months sm13;
          double num15 = (sm13 = this._Calc.Water_heating.WWHRS.Sm).M1 * (2.0 * (double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.HighDedicatedVolume));
          sm13.M1 = num15;
          Months sm14;
          double num16 = (sm14 = this._Calc.Water_heating.WWHRS.Sm).M2 * (2.0 * (double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.HighDedicatedVolume));
          sm14.M2 = num16;
          Months sm15;
          double num17 = (sm15 = this._Calc.Water_heating.WWHRS.Sm).M3 * (2.0 * (double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.HighDedicatedVolume));
          sm15.M3 = num17;
          Months sm16;
          double num18 = (sm16 = this._Calc.Water_heating.WWHRS.Sm).M4 * (2.0 * (double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.HighDedicatedVolume));
          sm16.M4 = num18;
          Months sm17;
          double num19 = (sm17 = this._Calc.Water_heating.WWHRS.Sm).M5 * (2.0 * (double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.HighDedicatedVolume));
          sm17.M5 = num19;
          Months sm18;
          double num20 = (sm18 = this._Calc.Water_heating.WWHRS.Sm).M6 * (2.0 * (double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.HighDedicatedVolume));
          sm18.M6 = num20;
          Months sm19;
          double num21 = (sm19 = this._Calc.Water_heating.WWHRS.Sm).M7 * (2.0 * (double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.HighDedicatedVolume));
          sm19.M7 = num21;
          Months sm20;
          double num22 = (sm20 = this._Calc.Water_heating.WWHRS.Sm).M8 * (2.0 * (double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.HighDedicatedVolume));
          sm20.M8 = num22;
          Months sm21;
          double num23 = (sm21 = this._Calc.Water_heating.WWHRS.Sm).M9 * (2.0 * (double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.HighDedicatedVolume));
          sm21.M9 = num23;
          Months sm22;
          double num24 = (sm22 = this._Calc.Water_heating.WWHRS.Sm).M10 * (2.0 * (double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.HighDedicatedVolume));
          sm22.M10 = num24;
          Months sm23;
          double num25 = (sm23 = this._Calc.Water_heating.WWHRS.Sm).M11 * (2.0 * (double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.HighDedicatedVolume));
          sm23.M11 = num25;
          Months sm24;
          double num26 = (sm24 = this._Calc.Water_heating.WWHRS.Sm).M12 * (2.0 * (double) this._House.Water.WWHRS.Systems[0].DedicatedStorage / Conversion.Val(wwhrs.HighDedicatedVolume));
          sm24.M12 = num26;
        }
      }
    }

    private void Box61_Seperate_Tests()
    {
      if (!(this.SEDBUKFound != null & this._House.Water.SystemRef == 901) || !(this.SEDBUKFound is PCDF.SEDBUK) || Operators.CompareString(this._House.MainHeating.SGroup, "Gas boilers and oil boilers", false) != 0)
        return;
      if (string.IsNullOrEmpty(((PCDF.SEDBUK) this.SEDBUKFound).SeperateDHWTests))
        ((PCDF.SEDBUK) this.SEDBUKFound).SeperateDHWTests = "";
      if (Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).SeperateDHWTests) == 2.0 | Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).SeperateDHWTests) == 3.0)
      {
        Months months = new Months();
        if (Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).SeperateDHWTests) == 2.0)
        {
          months.M1 = this._Calc.Water_heating.Box44_m.M1 < 36.0 ? 64.2 : (this._Calc.Water_heating.Box44_m.M1 > 100.2 ? 0.0 : 100.2 - this._Calc.Water_heating.Box44_m.M1);
          months.M2 = this._Calc.Water_heating.Box44_m.M2 < 36.0 ? 64.2 : (this._Calc.Water_heating.Box44_m.M2 > 100.2 ? 0.0 : 100.2 - this._Calc.Water_heating.Box44_m.M2);
          months.M3 = this._Calc.Water_heating.Box44_m.M3 < 36.0 ? 64.2 : (this._Calc.Water_heating.Box44_m.M3 > 100.2 ? 0.0 : 100.2 - this._Calc.Water_heating.Box44_m.M3);
          months.M4 = this._Calc.Water_heating.Box44_m.M4 < 36.0 ? 64.2 : (this._Calc.Water_heating.Box44_m.M4 > 100.2 ? 0.0 : 100.2 - this._Calc.Water_heating.Box44_m.M4);
          months.M5 = this._Calc.Water_heating.Box44_m.M5 < 36.0 ? 64.2 : (this._Calc.Water_heating.Box44_m.M5 > 100.2 ? 0.0 : 100.2 - this._Calc.Water_heating.Box44_m.M5);
          months.M6 = this._Calc.Water_heating.Box44_m.M6 < 36.0 ? 64.2 : (this._Calc.Water_heating.Box44_m.M6 > 100.2 ? 0.0 : 100.2 - this._Calc.Water_heating.Box44_m.M6);
          months.M7 = this._Calc.Water_heating.Box44_m.M7 < 36.0 ? 64.2 : (this._Calc.Water_heating.Box44_m.M7 > 100.2 ? 0.0 : 100.2 - this._Calc.Water_heating.Box44_m.M7);
          months.M8 = this._Calc.Water_heating.Box44_m.M8 < 36.0 ? 64.2 : (this._Calc.Water_heating.Box44_m.M8 > 100.2 ? 0.0 : 100.2 - this._Calc.Water_heating.Box44_m.M8);
          months.M9 = this._Calc.Water_heating.Box44_m.M9 < 36.0 ? 64.2 : (this._Calc.Water_heating.Box44_m.M9 > 100.2 ? 0.0 : 100.2 - this._Calc.Water_heating.Box44_m.M9);
          months.M10 = this._Calc.Water_heating.Box44_m.M10 < 36.0 ? 64.2 : (this._Calc.Water_heating.Box44_m.M10 > 100.2 ? 0.0 : 100.2 - this._Calc.Water_heating.Box44_m.M10);
          months.M11 = this._Calc.Water_heating.Box44_m.M11 < 36.0 ? 64.2 : (this._Calc.Water_heating.Box44_m.M11 > 100.2 ? 0.0 : 100.2 - this._Calc.Water_heating.Box44_m.M11);
          months.M12 = this._Calc.Water_heating.Box44_m.M12 < 36.0 ? 64.2 : (this._Calc.Water_heating.Box44_m.M12 > 100.2 ? 0.0 : 100.2 - this._Calc.Water_heating.Box44_m.M12);
        }
        if (Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).SeperateDHWTests) == 3.0)
        {
          months.M1 = this._Calc.Water_heating.Box44_m.M1 < 100.2 ? 0.0 : (this._Calc.Water_heating.Box44_m.M1 > 199.8 ? -99.6 : 100.2 - this._Calc.Water_heating.Box44_m.M1);
          months.M2 = this._Calc.Water_heating.Box44_m.M2 < 100.2 ? 0.0 : (this._Calc.Water_heating.Box44_m.M2 > 199.8 ? -99.6 : 100.2 - this._Calc.Water_heating.Box44_m.M2);
          months.M3 = this._Calc.Water_heating.Box44_m.M3 < 100.2 ? 0.0 : (this._Calc.Water_heating.Box44_m.M3 > 199.8 ? -99.6 : 100.2 - this._Calc.Water_heating.Box44_m.M3);
          months.M4 = this._Calc.Water_heating.Box44_m.M4 < 100.2 ? 0.0 : (this._Calc.Water_heating.Box44_m.M4 > 199.8 ? -99.6 : 100.2 - this._Calc.Water_heating.Box44_m.M4);
          months.M5 = this._Calc.Water_heating.Box44_m.M5 < 100.2 ? 0.0 : (this._Calc.Water_heating.Box44_m.M5 > 199.8 ? -99.6 : 100.2 - this._Calc.Water_heating.Box44_m.M5);
          months.M6 = this._Calc.Water_heating.Box44_m.M6 < 100.2 ? 0.0 : (this._Calc.Water_heating.Box44_m.M6 > 199.8 ? -99.6 : 100.2 - this._Calc.Water_heating.Box44_m.M6);
          months.M7 = this._Calc.Water_heating.Box44_m.M7 < 100.2 ? 0.0 : (this._Calc.Water_heating.Box44_m.M7 > 199.8 ? -99.6 : 100.2 - this._Calc.Water_heating.Box44_m.M7);
          months.M8 = this._Calc.Water_heating.Box44_m.M8 < 100.2 ? 0.0 : (this._Calc.Water_heating.Box44_m.M8 > 199.8 ? -99.6 : 100.2 - this._Calc.Water_heating.Box44_m.M8);
          months.M9 = this._Calc.Water_heating.Box44_m.M9 < 100.2 ? 0.0 : (this._Calc.Water_heating.Box44_m.M9 > 199.8 ? -99.6 : 100.2 - this._Calc.Water_heating.Box44_m.M9);
          months.M10 = this._Calc.Water_heating.Box44_m.M10 < 100.2 ? 0.0 : (this._Calc.Water_heating.Box44_m.M10 > 199.8 ? -99.6 : 100.2 - this._Calc.Water_heating.Box44_m.M10);
          months.M11 = this._Calc.Water_heating.Box44_m.M11 < 100.2 ? 0.0 : (this._Calc.Water_heating.Box44_m.M11 > 199.8 ? -99.6 : 100.2 - this._Calc.Water_heating.Box44_m.M11);
          months.M12 = this._Calc.Water_heating.Box44_m.M12 < 100.2 ? 0.0 : (this._Calc.Water_heating.Box44_m.M12 > 199.8 ? -99.6 : 100.2 - this._Calc.Water_heating.Box44_m.M12);
        }
        float num1 = (float) Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1);
        float num2 = (float) Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).StoLossF2);
        float num3 = (float) Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).StoLossF3);
        if (!this._House.Water.FGHRS.Include)
        {
          if (Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).StrType) == 0.0)
          {
            this._Calc.Water_heating.Box61_m.M1 = this._Calc.Water_heating.Box44_m.M1 >= 100.0 ? this._Calc.Water_heating.Box45_m.M1 * ((double) num1 + months.M1 * (double) num3) + (double) num2 * this._Calc.HeatLoss.Box41_m.M1 : this._Calc.Water_heating.Box45_m.M1 * ((double) num1 + months.M1 * (double) num3) * this._Calc.Water_heating.Box44_m.M1 / 100.0 + (double) num2 * this._Calc.HeatLoss.Box41_m.M1;
            this._Calc.Water_heating.Box61_m.M2 = this._Calc.Water_heating.Box44_m.M2 >= 100.0 ? this._Calc.Water_heating.Box45_m.M2 * ((double) num1 + months.M2 * (double) num3) + (double) num2 * this._Calc.HeatLoss.Box41_m.M2 : this._Calc.Water_heating.Box45_m.M2 * ((double) num1 + months.M2 * (double) num3) * this._Calc.Water_heating.Box44_m.M2 / 100.0 + (double) num2 * this._Calc.HeatLoss.Box41_m.M2;
            this._Calc.Water_heating.Box61_m.M3 = this._Calc.Water_heating.Box44_m.M3 >= 100.0 ? this._Calc.Water_heating.Box45_m.M3 * ((double) num1 + months.M3 * (double) num3) + (double) num2 * this._Calc.HeatLoss.Box41_m.M3 : this._Calc.Water_heating.Box45_m.M3 * ((double) num1 + months.M3 * (double) num3) * this._Calc.Water_heating.Box44_m.M3 / 100.0 + (double) num2 * this._Calc.HeatLoss.Box41_m.M3;
            this._Calc.Water_heating.Box61_m.M4 = this._Calc.Water_heating.Box44_m.M4 >= 100.0 ? this._Calc.Water_heating.Box45_m.M4 * ((double) num1 + months.M4 * (double) num3) + (double) num2 * this._Calc.HeatLoss.Box41_m.M4 : this._Calc.Water_heating.Box45_m.M4 * ((double) num1 + months.M4 * (double) num3) * this._Calc.Water_heating.Box44_m.M4 / 100.0 + (double) num2 * this._Calc.HeatLoss.Box41_m.M4;
            this._Calc.Water_heating.Box61_m.M5 = this._Calc.Water_heating.Box44_m.M5 >= 100.0 ? this._Calc.Water_heating.Box45_m.M5 * ((double) num1 + months.M5 * (double) num3) + (double) num2 * this._Calc.HeatLoss.Box41_m.M5 : this._Calc.Water_heating.Box45_m.M5 * ((double) num1 + months.M5 * (double) num3) * this._Calc.Water_heating.Box44_m.M5 / 100.0 + (double) num2 * this._Calc.HeatLoss.Box41_m.M5;
            this._Calc.Water_heating.Box61_m.M6 = this._Calc.Water_heating.Box44_m.M6 >= 100.0 ? this._Calc.Water_heating.Box45_m.M6 * ((double) num1 + months.M6 * (double) num3) + (double) num2 * this._Calc.HeatLoss.Box41_m.M6 : this._Calc.Water_heating.Box45_m.M6 * ((double) num1 + months.M6 * (double) num3) * this._Calc.Water_heating.Box44_m.M6 / 100.0 + (double) num2 * this._Calc.HeatLoss.Box41_m.M6;
            this._Calc.Water_heating.Box61_m.M7 = this._Calc.Water_heating.Box44_m.M7 >= 100.0 ? this._Calc.Water_heating.Box45_m.M7 * ((double) num1 + months.M7 * (double) num3) + (double) num2 * this._Calc.HeatLoss.Box41_m.M7 : this._Calc.Water_heating.Box45_m.M7 * ((double) num1 + months.M7 * (double) num3) * this._Calc.Water_heating.Box44_m.M7 / 100.0 + (double) num2 * this._Calc.HeatLoss.Box41_m.M7;
            this._Calc.Water_heating.Box61_m.M8 = this._Calc.Water_heating.Box44_m.M8 >= 100.0 ? this._Calc.Water_heating.Box45_m.M8 * ((double) num1 + months.M8 * (double) num3) + (double) num2 * this._Calc.HeatLoss.Box41_m.M8 : this._Calc.Water_heating.Box45_m.M8 * ((double) num1 + months.M8 * (double) num3) * this._Calc.Water_heating.Box44_m.M8 / 100.0 + (double) num2 * this._Calc.HeatLoss.Box41_m.M8;
            this._Calc.Water_heating.Box61_m.M9 = this._Calc.Water_heating.Box44_m.M9 >= 100.0 ? this._Calc.Water_heating.Box45_m.M9 * ((double) num1 + months.M9 * (double) num3) + (double) num2 * this._Calc.HeatLoss.Box41_m.M9 : this._Calc.Water_heating.Box45_m.M9 * ((double) num1 + months.M9 * (double) num3) * this._Calc.Water_heating.Box44_m.M9 / 100.0 + (double) num2 * this._Calc.HeatLoss.Box41_m.M9;
            this._Calc.Water_heating.Box61_m.M10 = this._Calc.Water_heating.Box44_m.M10 >= 100.0 ? this._Calc.Water_heating.Box45_m.M10 * ((double) num1 + months.M10 * (double) num3) + (double) num2 * this._Calc.HeatLoss.Box41_m.M10 : this._Calc.Water_heating.Box45_m.M10 * ((double) num1 + months.M10 * (double) num3) * this._Calc.Water_heating.Box44_m.M10 / 100.0 + (double) num2 * this._Calc.HeatLoss.Box41_m.M10;
            this._Calc.Water_heating.Box61_m.M11 = this._Calc.Water_heating.Box44_m.M11 >= 100.0 ? this._Calc.Water_heating.Box45_m.M11 * ((double) num1 + months.M11 * (double) num3) + (double) num2 * this._Calc.HeatLoss.Box41_m.M11 : this._Calc.Water_heating.Box45_m.M11 * ((double) num1 + months.M11 * (double) num3) * this._Calc.Water_heating.Box44_m.M11 / 100.0 + (double) num2 * this._Calc.HeatLoss.Box41_m.M11;
            this._Calc.Water_heating.Box61_m.M12 = this._Calc.Water_heating.Box44_m.M12 >= 100.0 ? this._Calc.Water_heating.Box45_m.M12 * ((double) num1 + months.M12 * (double) num3) + (double) num2 * this._Calc.HeatLoss.Box41_m.M12 : this._Calc.Water_heating.Box45_m.M12 * ((double) num1 + months.M12 * (double) num3) * this._Calc.Water_heating.Box44_m.M12 / 100.0 + (double) num2 * this._Calc.HeatLoss.Box41_m.M12;
          }
          else
          {
            this._Calc.Water_heating.Box61_m.M1 = this._Calc.Water_heating.Box44_m.M1 >= 100.0 ? this._Calc.Water_heating.Box45_m.M1 * ((double) num1 + months.M1 * (double) num3) : this._Calc.Water_heating.Box45_m.M1 * ((double) num1 + months.M1 * (double) num3) * this._Calc.Water_heating.Box44_m.M1 / 100.0;
            this._Calc.Water_heating.Box61_m.M2 = this._Calc.Water_heating.Box44_m.M2 >= 100.0 ? this._Calc.Water_heating.Box45_m.M2 * ((double) num1 + months.M2 * (double) num3) : this._Calc.Water_heating.Box45_m.M2 * ((double) num1 + months.M2 * (double) num3) * this._Calc.Water_heating.Box44_m.M2 / 100.0;
            this._Calc.Water_heating.Box61_m.M3 = this._Calc.Water_heating.Box44_m.M3 >= 100.0 ? this._Calc.Water_heating.Box45_m.M3 * ((double) num1 + months.M3 * (double) num3) : this._Calc.Water_heating.Box45_m.M3 * ((double) num1 + months.M3 * (double) num3) * this._Calc.Water_heating.Box44_m.M3 / 100.0;
            this._Calc.Water_heating.Box61_m.M4 = this._Calc.Water_heating.Box44_m.M4 >= 100.0 ? this._Calc.Water_heating.Box45_m.M4 * ((double) num1 + months.M4 * (double) num3) : this._Calc.Water_heating.Box45_m.M4 * ((double) num1 + months.M4 * (double) num3) * this._Calc.Water_heating.Box44_m.M4 / 100.0;
            this._Calc.Water_heating.Box61_m.M5 = this._Calc.Water_heating.Box44_m.M5 >= 100.0 ? this._Calc.Water_heating.Box45_m.M5 * ((double) num1 + months.M5 * (double) num3) : this._Calc.Water_heating.Box45_m.M5 * ((double) num1 + months.M5 * (double) num3) * this._Calc.Water_heating.Box44_m.M5 / 100.0;
            this._Calc.Water_heating.Box61_m.M6 = this._Calc.Water_heating.Box44_m.M6 >= 100.0 ? this._Calc.Water_heating.Box45_m.M6 * ((double) num1 + months.M6 * (double) num3) : this._Calc.Water_heating.Box45_m.M6 * ((double) num1 + months.M6 * (double) num3) * this._Calc.Water_heating.Box44_m.M6 / 100.0;
            this._Calc.Water_heating.Box61_m.M7 = this._Calc.Water_heating.Box44_m.M7 >= 100.0 ? this._Calc.Water_heating.Box45_m.M7 * ((double) num1 + months.M7 * (double) num3) : this._Calc.Water_heating.Box45_m.M7 * ((double) num1 + months.M7 * (double) num3) * this._Calc.Water_heating.Box44_m.M7 / 100.0;
            this._Calc.Water_heating.Box61_m.M8 = this._Calc.Water_heating.Box44_m.M8 >= 100.0 ? this._Calc.Water_heating.Box45_m.M8 * ((double) num1 + months.M8 * (double) num3) : this._Calc.Water_heating.Box45_m.M8 * ((double) num1 + months.M8 * (double) num3) * this._Calc.Water_heating.Box44_m.M8 / 100.0;
            this._Calc.Water_heating.Box61_m.M9 = this._Calc.Water_heating.Box44_m.M9 >= 100.0 ? this._Calc.Water_heating.Box45_m.M9 * ((double) num1 + months.M9 * (double) num3) : this._Calc.Water_heating.Box45_m.M9 * ((double) num1 + months.M9 * (double) num3) * this._Calc.Water_heating.Box44_m.M9 / 100.0;
            this._Calc.Water_heating.Box61_m.M10 = this._Calc.Water_heating.Box44_m.M10 >= 100.0 ? this._Calc.Water_heating.Box45_m.M10 * ((double) num1 + months.M10 * (double) num3) : this._Calc.Water_heating.Box45_m.M10 * ((double) num1 + months.M10 * (double) num3) * this._Calc.Water_heating.Box44_m.M10 / 100.0;
            this._Calc.Water_heating.Box61_m.M11 = this._Calc.Water_heating.Box44_m.M11 >= 100.0 ? this._Calc.Water_heating.Box45_m.M11 * ((double) num1 + months.M11 * (double) num3) : this._Calc.Water_heating.Box45_m.M11 * ((double) num1 + months.M11 * (double) num3) * this._Calc.Water_heating.Box44_m.M11 / 100.0;
            this._Calc.Water_heating.Box61_m.M12 = this._Calc.Water_heating.Box44_m.M12 >= 100.0 ? this._Calc.Water_heating.Box45_m.M12 * ((double) num1 + months.M12 * (double) num3) : this._Calc.Water_heating.Box45_m.M12 * ((double) num1 + months.M12 * (double) num3) * this._Calc.Water_heating.Box44_m.M12 / 100.0;
          }
        }
        else if (Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).StrType) == 0.0)
        {
          this._Calc.Water_heating.Box61_m.M1 = (double) num2 * this._Calc.HeatLoss.Box41_m.M1;
          this._Calc.Water_heating.Box61_m.M2 = (double) num2 * this._Calc.HeatLoss.Box41_m.M2;
          this._Calc.Water_heating.Box61_m.M3 = (double) num2 * this._Calc.HeatLoss.Box41_m.M3;
          this._Calc.Water_heating.Box61_m.M4 = (double) num2 * this._Calc.HeatLoss.Box41_m.M4;
          this._Calc.Water_heating.Box61_m.M5 = (double) num2 * this._Calc.HeatLoss.Box41_m.M5;
          this._Calc.Water_heating.Box61_m.M6 = (double) num2 * this._Calc.HeatLoss.Box41_m.M6;
          this._Calc.Water_heating.Box61_m.M7 = (double) num2 * this._Calc.HeatLoss.Box41_m.M7;
          this._Calc.Water_heating.Box61_m.M8 = (double) num2 * this._Calc.HeatLoss.Box41_m.M8;
          this._Calc.Water_heating.Box61_m.M9 = (double) num2 * this._Calc.HeatLoss.Box41_m.M9;
          this._Calc.Water_heating.Box61_m.M10 = (double) num2 * this._Calc.HeatLoss.Box41_m.M10;
          this._Calc.Water_heating.Box61_m.M11 = (double) num2 * this._Calc.HeatLoss.Box41_m.M11;
          this._Calc.Water_heating.Box61_m.M12 = (double) num2 * this._Calc.HeatLoss.Box41_m.M12;
        }
      }
      else if (((PCDF.SEDBUK) this.SEDBUKFound).SeperateDHWTests.Equals("1"))
      {
        if (((PCDF.SEDBUK) this.SEDBUKFound).SubType.Equals("1") | this._House.Water.FGHRS.Include)
        {
          if (((PCDF.SEDBUK) this.SEDBUKFound).StrType.Equals("0"))
          {
            this._Calc.Water_heating.Box61_m.M1 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M1;
            this._Calc.Water_heating.Box61_m.M2 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M2;
            this._Calc.Water_heating.Box61_m.M3 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M3;
            this._Calc.Water_heating.Box61_m.M4 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M4;
            this._Calc.Water_heating.Box61_m.M5 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M5;
            this._Calc.Water_heating.Box61_m.M6 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M6;
            this._Calc.Water_heating.Box61_m.M7 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M7;
            this._Calc.Water_heating.Box61_m.M8 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M8;
            this._Calc.Water_heating.Box61_m.M9 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M9;
            this._Calc.Water_heating.Box61_m.M10 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M10;
            this._Calc.Water_heating.Box61_m.M11 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M11;
            this._Calc.Water_heating.Box61_m.M12 = Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "StoLossF1", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) * this._Calc.HeatLoss.Box41_m.M12;
          }
          else
          {
            this._Calc.Water_heating.Box61_m.M1 = 0.0;
            this._Calc.Water_heating.Box61_m.M2 = 0.0;
            this._Calc.Water_heating.Box61_m.M3 = 0.0;
            this._Calc.Water_heating.Box61_m.M4 = 0.0;
            this._Calc.Water_heating.Box61_m.M5 = 0.0;
            this._Calc.Water_heating.Box61_m.M6 = 0.0;
            this._Calc.Water_heating.Box61_m.M7 = 0.0;
            this._Calc.Water_heating.Box61_m.M8 = 0.0;
            this._Calc.Water_heating.Box61_m.M9 = 0.0;
            this._Calc.Water_heating.Box61_m.M10 = 0.0;
            this._Calc.Water_heating.Box61_m.M11 = 0.0;
            this._Calc.Water_heating.Box61_m.M12 = 0.0;
          }
        }
        else
        {
          float num4 = (float) Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).RejEnergy_r1T1);
          if (((PCDF.SEDBUK) this.SEDBUKFound).StrType.Equals("0"))
          {
            float num5 = (float) Conversion.Val(((PCDF.SEDBUK) this.SEDBUKFound).StoLossF1);
            this._Calc.Water_heating.Box61_m.M1 = this._Calc.Water_heating.Box45_m.M1 * (double) num4 * (this._Calc.Water_heating.Box44_m.M1 < 100.0 ? this._Calc.Water_heating.Box44_m.M1 / 100.0 : 1.0) + (double) num5 * this._Calc.HeatLoss.Box41_m.M1;
            this._Calc.Water_heating.Box61_m.M2 = this._Calc.Water_heating.Box45_m.M2 * (double) num4 * (this._Calc.Water_heating.Box44_m.M2 < 100.0 ? this._Calc.Water_heating.Box44_m.M2 / 100.0 : 1.0) + (double) num5 * this._Calc.HeatLoss.Box41_m.M2;
            this._Calc.Water_heating.Box61_m.M3 = this._Calc.Water_heating.Box45_m.M3 * (double) num4 * (this._Calc.Water_heating.Box44_m.M3 < 100.0 ? this._Calc.Water_heating.Box44_m.M3 / 100.0 : 1.0) + (double) num5 * this._Calc.HeatLoss.Box41_m.M3;
            this._Calc.Water_heating.Box61_m.M4 = this._Calc.Water_heating.Box45_m.M4 * (double) num4 * (this._Calc.Water_heating.Box44_m.M4 < 100.0 ? this._Calc.Water_heating.Box44_m.M4 / 100.0 : 1.0) + (double) num5 * this._Calc.HeatLoss.Box41_m.M4;
            this._Calc.Water_heating.Box61_m.M5 = this._Calc.Water_heating.Box45_m.M5 * (double) num4 * (this._Calc.Water_heating.Box44_m.M5 < 100.0 ? this._Calc.Water_heating.Box44_m.M5 / 100.0 : 1.0) + (double) num5 * this._Calc.HeatLoss.Box41_m.M5;
            this._Calc.Water_heating.Box61_m.M6 = this._Calc.Water_heating.Box45_m.M6 * (double) num4 * (this._Calc.Water_heating.Box44_m.M6 < 100.0 ? this._Calc.Water_heating.Box44_m.M6 / 100.0 : 1.0) + (double) num5 * this._Calc.HeatLoss.Box41_m.M6;
            this._Calc.Water_heating.Box61_m.M7 = this._Calc.Water_heating.Box45_m.M7 * (double) num4 * (this._Calc.Water_heating.Box44_m.M7 < 100.0 ? this._Calc.Water_heating.Box44_m.M7 / 100.0 : 1.0) + (double) num5 * this._Calc.HeatLoss.Box41_m.M7;
            this._Calc.Water_heating.Box61_m.M8 = this._Calc.Water_heating.Box45_m.M8 * (double) num4 * (this._Calc.Water_heating.Box44_m.M8 < 100.0 ? this._Calc.Water_heating.Box44_m.M8 / 100.0 : 1.0) + (double) num5 * this._Calc.HeatLoss.Box41_m.M8;
            this._Calc.Water_heating.Box61_m.M9 = this._Calc.Water_heating.Box45_m.M9 * (double) num4 * (this._Calc.Water_heating.Box44_m.M9 < 100.0 ? this._Calc.Water_heating.Box44_m.M9 / 100.0 : 1.0) + (double) num5 * this._Calc.HeatLoss.Box41_m.M9;
            this._Calc.Water_heating.Box61_m.M10 = this._Calc.Water_heating.Box45_m.M10 * (double) num4 * (this._Calc.Water_heating.Box44_m.M10 < 100.0 ? this._Calc.Water_heating.Box44_m.M10 / 100.0 : 1.0) + (double) num5 * this._Calc.HeatLoss.Box41_m.M10;
            this._Calc.Water_heating.Box61_m.M11 = this._Calc.Water_heating.Box45_m.M11 * (double) num4 * (this._Calc.Water_heating.Box44_m.M11 < 100.0 ? this._Calc.Water_heating.Box44_m.M11 / 100.0 : 1.0) + (double) num5 * this._Calc.HeatLoss.Box41_m.M11;
            this._Calc.Water_heating.Box61_m.M12 = this._Calc.Water_heating.Box45_m.M12 * (double) num4 * (this._Calc.Water_heating.Box44_m.M12 < 100.0 ? this._Calc.Water_heating.Box44_m.M12 / 100.0 : 1.0) + (double) num5 * this._Calc.HeatLoss.Box41_m.M12;
          }
          else
          {
            this._Calc.Water_heating.Box61_m.M1 = this._Calc.Water_heating.Box45_m.M1 * (double) num4 * (this._Calc.Water_heating.Box44_m.M1 < 100.0 ? this._Calc.Water_heating.Box44_m.M1 / 100.0 : 1.0);
            this._Calc.Water_heating.Box61_m.M2 = this._Calc.Water_heating.Box45_m.M2 * (double) num4 * (this._Calc.Water_heating.Box44_m.M2 < 100.0 ? this._Calc.Water_heating.Box44_m.M2 / 100.0 : 1.0);
            this._Calc.Water_heating.Box61_m.M3 = this._Calc.Water_heating.Box45_m.M3 * (double) num4 * (this._Calc.Water_heating.Box44_m.M3 < 100.0 ? this._Calc.Water_heating.Box44_m.M3 / 100.0 : 1.0);
            this._Calc.Water_heating.Box61_m.M4 = this._Calc.Water_heating.Box45_m.M4 * (double) num4 * (this._Calc.Water_heating.Box44_m.M4 < 100.0 ? this._Calc.Water_heating.Box44_m.M4 / 100.0 : 1.0);
            this._Calc.Water_heating.Box61_m.M5 = this._Calc.Water_heating.Box45_m.M5 * (double) num4 * (this._Calc.Water_heating.Box44_m.M5 < 100.0 ? this._Calc.Water_heating.Box44_m.M5 / 100.0 : 1.0);
            this._Calc.Water_heating.Box61_m.M6 = this._Calc.Water_heating.Box45_m.M6 * (double) num4 * (this._Calc.Water_heating.Box44_m.M6 < 100.0 ? this._Calc.Water_heating.Box44_m.M6 / 100.0 : 1.0);
            this._Calc.Water_heating.Box61_m.M7 = this._Calc.Water_heating.Box45_m.M7 * (double) num4 * (this._Calc.Water_heating.Box44_m.M7 < 100.0 ? this._Calc.Water_heating.Box44_m.M7 / 100.0 : 1.0);
            this._Calc.Water_heating.Box61_m.M8 = this._Calc.Water_heating.Box45_m.M8 * (double) num4 * (this._Calc.Water_heating.Box44_m.M8 < 100.0 ? this._Calc.Water_heating.Box44_m.M8 / 100.0 : 1.0);
            this._Calc.Water_heating.Box61_m.M9 = this._Calc.Water_heating.Box45_m.M9 * (double) num4 * (this._Calc.Water_heating.Box44_m.M9 < 100.0 ? this._Calc.Water_heating.Box44_m.M9 / 100.0 : 1.0);
            this._Calc.Water_heating.Box61_m.M10 = this._Calc.Water_heating.Box45_m.M10 * (double) num4 * (this._Calc.Water_heating.Box44_m.M10 < 100.0 ? this._Calc.Water_heating.Box44_m.M10 / 100.0 : 1.0);
            this._Calc.Water_heating.Box61_m.M11 = this._Calc.Water_heating.Box45_m.M11 * (double) num4 * (this._Calc.Water_heating.Box44_m.M11 < 100.0 ? this._Calc.Water_heating.Box44_m.M11 / 100.0 : 1.0);
            this._Calc.Water_heating.Box61_m.M12 = this._Calc.Water_heating.Box45_m.M12 * (double) num4 * (this._Calc.Water_heating.Box44_m.M12 < 100.0 ? this._Calc.Water_heating.Box44_m.M12 / 100.0 : 1.0);
          }
        }
      }
    }

    public int WaterHeatingRef => this._House.Water.SystemRef;

    public string ElectricityTariff => this._House.MainHeating.ElectricityTariff;

    public SAP_Module.Dwelling Dwelling
    {
      set
      {
        this._House = this.CopyDwelling(value);
        if (!this.DontRedimIt)
          this._Calc = new Box2012();
        SAP_Module.CalcRound = false;
        try
        {
          this.Calc();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          Exception exception = ex;
          if (exception.Message.Contains("Micro CHP: Plant size ratio"))
          {
            MyProject.Forms.SAPForm.LblError.Visible = true;
            MyProject.Forms.SAPForm.LblError.Text = "Plant size ratio is too large.";
          }
          else if (exception.Message.Contains("Plant size ratio"))
          {
            MyProject.Forms.SAPForm.LblError.Visible = true;
            MyProject.Forms.SAPForm.LblError.Text = exception.Message;
          }
          else if (exception.Message.Contains("Dwelling heat requirement is too small for this system"))
          {
            MyProject.Forms.SAPForm.LblError.Visible = true;
            MyProject.Forms.SAPForm.LblError.Text = "Dwelling heat requirement is too small for this system.";
          }
          else if (exception.Message.Contains("Wet room input Error"))
          {
            MyProject.Forms.SAPForm.LblError.Visible = true;
            MyProject.Forms.SAPForm.LblError.Text = "Wet room input Error - Please select correct number of wet rooms.";
          }
          else if (exception.Message.Contains("Item not found on SEDBUK"))
          {
            MyProject.Forms.SAPForm.LblError.Visible = true;
            MyProject.Forms.SAPForm.LblError.Text = "Item not found on SEDBUK.";
          }
          else if (exception.Message.Contains("Secondary Heating not Specified"))
          {
            MyProject.Forms.SAPForm.LblError.Visible = true;
            MyProject.Forms.SAPForm.LblError.Text = "Secondary Heating not Specified.";
          }
          else if (exception.Message.Contains("Fuel Error -"))
          {
            MyProject.Forms.SAPForm.LblError.Visible = true;
            MyProject.Forms.SAPForm.LblError.Text = "Fuel Error.";
          }
          ProjectData.ClearProjectError();
        }
      }
    }

    [Category("Calculation")]
    [ReadOnly(true)]
    [Description("Main Calculation Result Boxes from SAP documentation")]
    public Box2012 Calculation => this._Calc;

    public SAP_Module.Dwelling CopyDwelling(SAP_Module.Dwelling Dwelling)
    {
      SAP_Module.Dwelling dwelling;
      try
      {
        DataContractSerializer contractSerializer = new DataContractSerializer(typeof (SAP_Module.Dwelling));
        MemoryStream memoryStream = new MemoryStream();
        contractSerializer.WriteObject((Stream) memoryStream, (object) Dwelling);
        memoryStream.Position = 0L;
        object obj = contractSerializer.ReadObject((Stream) memoryStream);
        dwelling = obj != null ? (SAP_Module.Dwelling) obj : new SAP_Module.Dwelling();
        goto label_4;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      dwelling = new SAP_Module.Dwelling();
label_4:
      return dwelling;
    }

    private void Calc()
    {
      this.SEDBUKFound = RuntimeHelpers.GetObjectValue(new object());
      this.SEDBUKFound2 = RuntimeHelpers.GetObjectValue(new object());
      this.SEDBUKFound_OA = RuntimeHelpers.GetObjectValue(new object());
      this.SEDBUKFound2_OA = RuntimeHelpers.GetObjectValue(new object());
      this.Dimensions();
      this.Ventilation();
      this.HeatLoss();
      this.Water_Heating();
      this.Internal_gains();
      this.Solar_Gains();
      this.Mean_Temp();
      this.Space_Heating();
      this.Space_Cooling_Requirements();
      if (this.IsFabricEfficiency)
        return;
      this.Energy_Route();
      this.Emissions_Route();
      this.CalcAverages();
      if (SAP_Module.DoCodereport)
        this.CalcAssessmentLZC();
      this.CalcComplete = true;
    }

    private List<Calc2012.N8> Fill_Table_N8()
    {
      List<Calc2012.N8> n8List = new List<Calc2012.N8>();
      Calc2012.N8 n8_1 = new Calc2012.N8();
      Calc2012.N8 n8_2 = n8_1;
      n8_2.PSR = 0.2f;
      n8_2._24 = 0.4f;
      n8_2._16 = 0.53f;
      n8_2._11 = 0.64f;
      n8_2.Variable = 0.41f;
      n8List.Add(n8_1);
      Calc2012.N8 n8_3 = new Calc2012.N8();
      Calc2012.N8 n8_4 = n8_3;
      n8_4.PSR = 0.25f;
      n8_4._24 = 0.28f;
      n8_4._16 = 0.43f;
      n8_4._11 = 0.57f;
      n8_4.Variable = 0.3f;
      n8List.Add(n8_3);
      Calc2012.N8 n8_5 = new Calc2012.N8();
      Calc2012.N8 n8_6 = n8_5;
      n8_6.PSR = 0.3f;
      n8_6._24 = 0.19f;
      n8_6._16 = 0.34f;
      n8_6._11 = 0.49f;
      n8_6.Variable = 0.2f;
      n8List.Add(n8_5);
      Calc2012.N8 n8_7 = new Calc2012.N8();
      Calc2012.N8 n8_8 = n8_7;
      n8_8.PSR = 0.35f;
      n8_8._24 = 0.12f;
      n8_8._16 = 0.27f;
      n8_8._11 = 0.42f;
      n8_8.Variable = 0.13f;
      n8List.Add(n8_7);
      Calc2012.N8 n8_9 = new Calc2012.N8();
      Calc2012.N8 n8_10 = n8_9;
      n8_10.PSR = 0.4f;
      n8_10._24 = 0.06f;
      n8_10._16 = 0.2f;
      n8_10._11 = 0.35f;
      n8_10.Variable = 0.07f;
      n8List.Add(n8_9);
      Calc2012.N8 n8_11 = new Calc2012.N8();
      Calc2012.N8 n8_12 = n8_11;
      n8_12.PSR = 0.45f;
      n8_12._24 = 0.03f;
      n8_12._16 = 0.14f;
      n8_12._11 = 0.29f;
      n8_12.Variable = 0.03f;
      n8List.Add(n8_11);
      Calc2012.N8 n8_13 = new Calc2012.N8();
      Calc2012.N8 n8_14 = n8_13;
      n8_14.PSR = 0.5f;
      n8_14._24 = 0.01f;
      n8_14._16 = 0.09f;
      n8_14._11 = 0.24f;
      n8_14.Variable = 0.01f;
      n8List.Add(n8_13);
      Calc2012.N8 n8_15 = new Calc2012.N8();
      Calc2012.N8 n8_16 = n8_15;
      n8_16.PSR = 0.55f;
      n8_16._24 = 0.0f;
      n8_16._16 = 0.06f;
      n8_16._11 = 0.19f;
      n8_16.Variable = 0.0f;
      n8List.Add(n8_15);
      Calc2012.N8 n8_17 = new Calc2012.N8();
      Calc2012.N8 n8_18 = n8_17;
      n8_18.PSR = 0.6f;
      n8_18._24 = 0.0f;
      n8_18._16 = 0.03f;
      n8_18._11 = 0.15f;
      n8_18.Variable = 0.0f;
      n8List.Add(n8_17);
      Calc2012.N8 n8_19 = new Calc2012.N8();
      Calc2012.N8 n8_20 = n8_19;
      n8_20.PSR = 0.65f;
      n8_20._24 = 0.0f;
      n8_20._16 = 0.02f;
      n8_20._11 = 0.11f;
      n8_20.Variable = 0.0f;
      n8List.Add(n8_19);
      Calc2012.N8 n8_21 = new Calc2012.N8();
      Calc2012.N8 n8_22 = n8_21;
      n8_22.PSR = 0.7f;
      n8_22._24 = 0.0f;
      n8_22._16 = 0.01f;
      n8_22._11 = 0.09f;
      n8_22.Variable = 0.0f;
      n8List.Add(n8_21);
      Calc2012.N8 n8_23 = new Calc2012.N8();
      Calc2012.N8 n8_24 = n8_23;
      n8_24.PSR = 0.75f;
      n8_24._24 = 0.0f;
      n8_24._16 = 0.0f;
      n8_24._11 = 0.05f;
      n8_24.Variable = 0.0f;
      n8List.Add(n8_23);
      Calc2012.N8 n8_25 = new Calc2012.N8();
      Calc2012.N8 n8_26 = n8_25;
      n8_26.PSR = 0.8f;
      n8_26._24 = 0.0f;
      n8_26._16 = 0.0f;
      n8_26._11 = 0.05f;
      n8_26.Variable = 0.0f;
      n8List.Add(n8_25);
      Calc2012.N8 n8_27 = new Calc2012.N8();
      Calc2012.N8 n8_28 = n8_27;
      n8_28.PSR = 0.85f;
      n8_28._24 = 0.0f;
      n8_28._16 = 0.0f;
      n8_28._11 = 0.03f;
      n8_28.Variable = 0.0f;
      n8List.Add(n8_27);
      Calc2012.N8 n8_29 = new Calc2012.N8();
      Calc2012.N8 n8_30 = n8_29;
      n8_30.PSR = 0.9f;
      n8_30._24 = 0.0f;
      n8_30._16 = 0.0f;
      n8_30._11 = 0.02f;
      n8_30.Variable = 0.0f;
      n8List.Add(n8_29);
      Calc2012.N8 n8_31 = new Calc2012.N8();
      Calc2012.N8 n8_32 = n8_31;
      n8_32.PSR = 0.95f;
      n8_32._24 = 0.0f;
      n8_32._16 = 0.0f;
      n8_32._11 = 0.01f;
      n8_32.Variable = 0.0f;
      n8List.Add(n8_31);
      Calc2012.N8 n8_33 = new Calc2012.N8();
      Calc2012.N8 n8_34 = n8_33;
      n8_34.PSR = 1f;
      n8_34._24 = 0.0f;
      n8_34._16 = 0.0f;
      n8_34._11 = 0.01f;
      n8_34.Variable = 0.0f;
      n8List.Add(n8_33);
      Calc2012.N8 n8_35 = new Calc2012.N8();
      Calc2012.N8 n8_36 = n8_35;
      n8_36.PSR = 1.05f;
      n8_36._24 = 0.0f;
      n8_36._16 = 0.0f;
      n8_36._11 = 0.0f;
      n8_36.Variable = 0.0f;
      n8List.Add(n8_35);
      return n8List;
    }

    private double GiveInterloationValue(
      double LowerPSR,
      double UpperPSR,
      double LowerValue,
      double UpperValue,
      double PSR)
    {
      return LowerValue <= UpperValue ? UpperValue - (UpperValue - LowerValue) * (UpperPSR - PSR) / (UpperPSR - LowerPSR) : LowerValue - (LowerValue - UpperValue) * (PSR - LowerPSR) / (UpperPSR - LowerPSR);
    }

    private double Get_High_Tariff(int SAPCode)
    {
      string electricityType = this.GetElectricityType(1);
      int num1 = SAPCode;
      double highTariff;
      int num2;
      switch (num1)
      {
        case 191:
          if (Operators.CompareString(electricityType, "7-hour tariff (off-peak)", false) != 0)
          {
            if (Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) != 0)
            {
              if (Operators.CompareString(electricityType, "standard tariff", false) == 0)
              {
                highTariff = 0.0;
                goto label_50;
              }
              else
                goto label_42;
            }
            else
            {
              highTariff = 0.5;
              goto label_50;
            }
          }
          else
          {
            highTariff = 0.9;
            goto label_50;
          }
        case 201:
          if (Operators.CompareString(electricityType, "7-hour tariff (off-peak)", false) != 0)
          {
            if (Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) == 0)
            {
              highTariff = 0.6;
              goto label_50;
            }
            else
              goto label_42;
          }
          else
          {
            highTariff = 0.7;
            goto label_50;
          }
        case 202:
          if (Operators.CompareString(electricityType, "7-hour tariff (off-peak)", false) != 0)
          {
            if (Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) == 0)
            {
              highTariff = 0.6;
              goto label_50;
            }
            else
              goto label_42;
          }
          else
          {
            highTariff = 0.8;
            goto label_50;
          }
        case 203:
          if (Operators.CompareString(electricityType, "7-hour tariff (off-peak)", false) != 0)
          {
            if (Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) == 0)
            {
              highTariff = 0.6;
              goto label_50;
            }
            else
              goto label_42;
          }
          else
          {
            highTariff = 0.7;
            goto label_50;
          }
        case 204:
          if (Operators.CompareString(electricityType, "7-hour tariff (off-peak)", false) != 0)
          {
            if (Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) == 0)
            {
              highTariff = 0.6;
              goto label_50;
            }
            else
              goto label_42;
          }
          else
          {
            highTariff = 0.9;
            goto label_50;
          }
        case 408:
        case 422:
          num2 = 1;
          break;
        case 423:
          if (Operators.CompareString(electricityType, "7-hour tariff (off-peak)", false) != 0)
          {
            if (Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) == 0)
            {
              highTariff = 0.6;
              goto label_50;
            }
            else
              goto label_42;
          }
          else
          {
            highTariff = 0.2;
            goto label_50;
          }
        default:
          num2 = num1 == 423 ? 1 : 0;
          break;
      }
      if (num2 != 0)
      {
        if (Operators.CompareString(electricityType, "7-hour tariff (off-peak)", false) == 0)
        {
          highTariff = 0.2;
          goto label_50;
        }
      }
      else
      {
        switch (num1)
        {
          case 424:
            highTariff = Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) == 0 ? 0.5 : 0.0;
            goto label_50;
          case 694:
            highTariff = Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) == 0 ? 0.5 : 0.0;
            goto label_50;
          case 701:
            highTariff = Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) == 0 ? 0.5 : 0.0;
            goto label_50;
          default:
            if (num1 >= 521 && num1 <= 524)
            {
              if (Operators.CompareString(electricityType, "7-hour tariff (off-peak)", false) != 0)
              {
                if (Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) == 0)
                {
                  highTariff = 0.6;
                  goto label_50;
                }
                else
                  break;
              }
              else
              {
                highTariff = 0.7;
                goto label_50;
              }
            }
            else
            {
              highTariff = (num1 < 691 || num1 > 693) && num1 != 699 ? 0.0 : (Operators.CompareString(electricityType, "7-hour tariff (off-peak)", false) == 0 ? 1.0 : (Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) == 0 ? 0.5 : 0.0));
              goto label_50;
            }
        }
      }
label_42:
      if (Operators.CompareString(electricityType, "standard tariff", false) == 0)
        highTariff = 0.0;
      else if (Operators.CompareString(electricityType, "7-hour tariff (off-peak)", false) != 0)
      {
        if (Operators.CompareString(electricityType, "10-hour tariff (off-peak)", false) != 0)
        {
          if (Operators.CompareString(electricityType, "standard tariff", false) == 0)
            highTariff = 0.0;
        }
        else
          highTariff = 0.8;
      }
      else
        highTariff = 0.8;
label_50:
      return highTariff;
    }

    public bool ArrayContains(string[] StringArray, string SearchFor)
    {
      bool flag = false;
      int num = checked (StringArray.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(StringArray[index], SearchFor, false) == 0)
          flag = true;
        checked { ++index; }
      }
      return flag;
    }

    public float CalcMissingEff(string ID)
    {
      float num;
      try
      {
        PCDF.SEDBUK_Solid sedbukSolid = this.SEDBUK_Solid(ID);
        num = (float) (100.0 * ((Conversion.Val(sedbukSolid.room_full) + Conversion.Val(sedbukSolid.water_full)) / Conversion.Val(sedbukSolid.input_full)));
        if (Conversion.Val(sedbukSolid.input_part) != 0.0)
          num += (float) (50.0 * ((Conversion.Val(sedbukSolid.water_part) + Conversion.Val(sedbukSolid.room_part)) / Conversion.Val(sedbukSolid.input_part)));
        else
          num *= 0.975f;
        num = (float) Math.Round((double) num, 1);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return num;
    }

    private double Get_Summer_Low()
    {
      int num1 = !(this._House.Water.Solar.Inlcude & !this._House.Water.Solar.SolarSeperate) ? 0 : checked ((int) Math.Round((double) this._House.Water.Solar.SolarVolume));
      int num2;
      switch (this._House.Water.SystemRef)
      {
        case 901:
          num2 = Operators.CompareString(Microsoft.VisualBasic.Strings.LCase(this._House.MainHeating.Fuel), "electricity", false) != 0 ? 0 : this._House.MainHeating.SAPTableCode;
          break;
        case 902:
        case 903:
        case 999:
          num2 = 0;
          break;
        case 914:
          num2 = Operators.CompareString(Microsoft.VisualBasic.Strings.LCase(this._House.MainHeating2.Fuel), "electricity", false) != 0 ? 0 : this._House.MainHeating2.SAPTableCode;
          break;
        default:
          num2 = 192;
          break;
      }
      double summerLow;
      if ((uint) Operators.CompareString(this._House.MainHeating.ElectricityTariff, "standard tariff", false) > 0U)
      {
        int num3 = num2;
        if (num3 == 192)
          summerLow = 0.0;
        else if (num3 >= 201 && num3 <= 204)
          summerLow = 0.17;
        else if (num3 >= 521 && num3 <= 524)
        {
          summerLow = 0.17;
        }
        else
        {
          string electricityTariff = this._House.MainHeating.ElectricityTariff;
          if (Operators.CompareString(electricityTariff, "10-hour tariff", false) != 0)
          {
            if (Operators.CompareString(electricityTariff, "7-hour tariff", false) != 0)
            {
              if (Operators.CompareString(electricityTariff, "24-hour tariff", false) == 0)
                summerLow = 0.0;
            }
            else
              summerLow = Operators.CompareString(this._House.Water.Cylinder.Immersion, "Dual", false) != 0 ? ((14530.0 - 762.0 * this._Calc.Water_heating.Box42) / ((double) this._House.Water.Cylinder.Volume - (double) num1) - 80.0 + 10.0 * this._Calc.Water_heating.Box42) / 100.0 : ((6.8 - 0.024 * ((double) this._House.Water.Cylinder.Volume - (double) num1)) * this._Calc.Water_heating.Box42 + 14.0 - 0.07 * ((double) this._House.Water.Cylinder.Volume - (double) num1)) / 100.0;
          }
          else
            summerLow = Operators.CompareString(this._House.Water.Cylinder.Immersion, "Dual", false) != 0 ? ((14530.0 - 762.0 * this._Calc.Water_heating.Box42) / (1.5 * ((double) this._House.Water.Cylinder.Volume - (double) num1)) - 80.0 + 10.0 * this._Calc.Water_heating.Box42) / 100.0 : ((6.8 - 0.036 * ((double) this._House.Water.Cylinder.Volume - (double) num1)) * this._Calc.Water_heating.Box42 + 14.0 - 0.105 * ((double) this._House.Water.Cylinder.Volume - (double) num1)) / 100.0;
        }
      }
      else
        summerLow = 0.0;
      return summerLow;
    }

    public double Get_StandingCharge()
    {
      double standingCharge = 0.0;
      if (this.OccupancyData.Electricity.FuelBillInfo != OccupancyClass.Fuel.FuelBillInformation.NotAvailable)
      {
        double num1 = this.OccupancyData.Electricity.VAT ? 1.0 : 1.05;
        if ((double) this.OccupancyData.Electricity.StandardCharge.Amount != 0.0)
        {
          double num2 = 1.0;
          double num3;
          if (this.OccupancyData.Electricity.StandardCharge.Period == OccupancyClass.Fuel.StandardChargeClass.PeriodCode.p_Day)
          {
            num3 = 365.0;
            num2 = 100.0;
          }
          else if (this.OccupancyData.Electricity.StandardCharge.Period == OccupancyClass.Fuel.StandardChargeClass.PeriodCode.Po_Month)
            num3 = 12.0;
          else if (this.OccupancyData.Electricity.StandardCharge.Period == OccupancyClass.Fuel.StandardChargeClass.PeriodCode.Po_Quarter)
            num3 = 4.0;
          else if (this.OccupancyData.Electricity.StandardCharge.Period == OccupancyClass.Fuel.StandardChargeClass.PeriodCode.Po_Year)
            num3 = 1.0;
          standingCharge += this.Round_Up((double) this.OccupancyData.Electricity.StandardCharge.Amount * num1 * num3 / num2);
        }
        else if ((double) this.OccupancyData.Electricity.UnitPrice.FollowOnUnitPrice != 0.0)
        {
          double num4;
          if (this.OccupancyData.Electricity.Period == OccupancyClass.Periods._11)
            num4 = 11.0;
          else if (this.OccupancyData.Electricity.Period == OccupancyClass.Periods._11_5)
            num4 = 11.5;
          else if (this.OccupancyData.Electricity.Period == OccupancyClass.Periods._12)
            num4 = 12.0;
          else if (this.OccupancyData.Electricity.Period == OccupancyClass.Periods._12_5)
            num4 = 12.5;
          else if (this.OccupancyData.Electricity.Period == OccupancyClass.Periods._13)
            num4 = 13.0;
          standingCharge += this.Round_Up(0.01 * (double) this.OccupancyData.Electricity.UnitPrice.Units * ((double) this.OccupancyData.Electricity.UnitPrice.UnitPrice - (double) this.OccupancyData.Electricity.UnitPrice.FollowOnUnitPrice) / num4 * 12.0 * num1);
        }
      }
      if (this.OccupancyData.Electricity_Low.FuelBillInfo != OccupancyClass.Fuel.FuelBillInformation.NotAvailable & (uint) this.OccupancyData.Electricity_Low.FuelBillInfo > 0U)
      {
        double num = this.OccupancyData.Electricity_Low.VAT ? 1.0 : 1.05;
        standingCharge += this.Round_Up((double) this.OccupancyData.Electricity_Low.StandardCharge.Amount * num);
      }
      if (this.OccupancyData.Electricity_High.FuelBillInfo != OccupancyClass.Fuel.FuelBillInformation.NotAvailable & (uint) this.OccupancyData.Electricity_High.FuelBillInfo > 0U)
      {
        double num = this.OccupancyData.Electricity_High.VAT ? 1.0 : 1.05;
        standingCharge += this.Round_Up((double) this.OccupancyData.Electricity_High.StandardCharge.Amount * num);
      }
      if (Operators.CompareString(this._House.MainHeating.ElectricityTariff, "24-hour tariff", false) == 0)
      {
        if (standingCharge == 0.0)
          standingCharge += 134.0;
      }
      else if (this.OccupancyData.Electricity.FuelBillInfo == OccupancyClass.Fuel.FuelBillInformation.NotAvailable | this.OccupancyData.Electricity_High.FuelBillInfo == OccupancyClass.Fuel.FuelBillInformation.NotAvailable && standingCharge == 0.0)
        standingCharge += 52.0;
      if (this.OccupancyData.Electricity_Low.FuelBillInfo == OccupancyClass.Fuel.FuelBillInformation.NotAvailable)
        standingCharge += this.Round_Up(this.FuelCost(this.GetElectricityType(1), 0, "SC"));
      if (Operators.CompareString(this._House.MainHeating.Fuel, "mains gas", false) == 0 | Operators.CompareString(this._House.MainHeating2.Fuel, "mains gas", false) == 0 | Operators.CompareString(this._House.Water.Fuel, "mains gas", false) == 0 | this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Always_Gas | this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Gas | this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Gas_Electric && (uint) this.OccupancyData.Gas.FuelBillInfo > 0U)
      {
        if (this.OccupancyData.Gas.FuelBillInfo == OccupancyClass.Fuel.FuelBillInformation.NotAvailable)
        {
          standingCharge += this.Round_Up(this.FuelCost("mains gas", 0, "SC"));
        }
        else
        {
          double num5 = this.OccupancyData.Gas.VAT ? 1.0 : 1.05;
          double num6 = 1.0;
          double num7;
          if (this.OccupancyData.Gas.StandardCharge.Period == OccupancyClass.Fuel.StandardChargeClass.PeriodCode.p_Day)
          {
            num7 = 365.0;
            num6 = 100.0;
          }
          else if (this.OccupancyData.Gas.StandardCharge.Period == OccupancyClass.Fuel.StandardChargeClass.PeriodCode.Po_Month)
            num7 = 12.0;
          else if (this.OccupancyData.Gas.StandardCharge.Period == OccupancyClass.Fuel.StandardChargeClass.PeriodCode.Po_Quarter)
            num7 = 4.0;
          else if (this.OccupancyData.Gas.StandardCharge.Period == OccupancyClass.Fuel.StandardChargeClass.PeriodCode.Po_Year)
            num7 = 1.0;
          if ((double) this.OccupancyData.Gas.StandardCharge.Amount != 0.0)
            standingCharge += this.Round_Up((double) this.OccupancyData.Gas.StandardCharge.Amount * num5 * num7 / num6);
          else if ((double) this.OccupancyData.Gas.UnitPrice.FollowOnUnitPrice != 0.0)
            standingCharge += this.Round_Up(0.01 * (double) this.OccupancyData.Gas.UnitPrice.Units * ((double) this.OccupancyData.Gas.UnitPrice.UnitPrice - (double) this.OccupancyData.Gas.UnitPrice.FollowOnUnitPrice) * num5 * num7 / num6);
        }
      }
      if ((uint) this.OccupancyData.CommunityHeating.FuelBillInfo > 0U)
      {
        if (this.OccupancyData.CommunityHeating.FuelBillInfo == OccupancyClass.Community.FuelBillInformation.NotAvailable)
        {
          standingCharge += this.Round_Up(this.FuelCost(this._House.MainHeating.Fuel, 0, "SC"));
        }
        else
        {
          double num = this.OccupancyData.CommunityHeating.VAT ? 1.0 : 1.05;
          standingCharge += this.Round_Up(this.OccupancyData.CommunityHeating.FixedCost * num);
        }
      }
      try
      {
        foreach (OccupancyClass.OtherFuel otherFuel in (Collection<OccupancyClass.OtherFuel>) this.OccupancyData.OtherFuels)
          standingCharge += this.OtherFuel_StandingCharge(otherFuel);
      }
      finally
      {
        IEnumerator<OccupancyClass.OtherFuel> enumerator;
        enumerator?.Dispose();
      }
      return standingCharge;
    }

    private double OtherFuel_StandingCharge(OccupancyClass.OtherFuel Current_Fuel)
    {
      string str = "";
      bool flag = false;
      switch (Current_Fuel.Fuel)
      {
        case OccupancyClass.OtherFuel.FuelType.Bottled_LPG:
          str = "bottled LPG";
          break;
        case OccupancyClass.OtherFuel.FuelType.Bulk_LPG:
          str = "bulk LPG";
          break;
        case OccupancyClass.OtherFuel.FuelType.LPG_Special_Condition_18:
          str = "LPG subject to Special Condition 18";
          break;
        case OccupancyClass.OtherFuel.FuelType.Heating_Oil:
          str = "heating oil";
          break;
        case OccupancyClass.OtherFuel.FuelType.Coal:
          str = "house coal";
          break;
        case OccupancyClass.OtherFuel.FuelType.Anthracite:
          str = "anthracite";
          break;
        case OccupancyClass.OtherFuel.FuelType.Smokeless_Fuel:
          str = "manufactured smokeless fuel";
          break;
        case OccupancyClass.OtherFuel.FuelType.Wood_Logs:
          str = "wood logs";
          break;
        case OccupancyClass.OtherFuel.FuelType.Wood_Chips:
          str = "wood chips";
          break;
        case OccupancyClass.OtherFuel.FuelType.Wood_Pellets:
          str = "wood pellets (in bags, for secondary heating)";
          break;
        case OccupancyClass.OtherFuel.FuelType.Bioethanol:
          str = "bioethanol from any biomass source";
          break;
        case OccupancyClass.OtherFuel.FuelType.Biodiesel_From_Biomass:
          str = "biodiesel from any biomass source";
          break;
        case OccupancyClass.OtherFuel.FuelType.Biodiesel_From_Cooking_Oil:
          str = "biodiesel from used cooking oil only";
          break;
        case OccupancyClass.OtherFuel.FuelType.Rapeseed_Oil:
          str = "rapeseed oil";
          break;
        case OccupancyClass.OtherFuel.FuelType.Mineral_Oil_Or_Liquid_Biofuel:
          str = "appliances able to use mineral oil or liquid biofuel";
          break;
        case OccupancyClass.OtherFuel.FuelType.B30K:
          str = "B30K";
          break;
      }
      if (Operators.CompareString(this._House.MainHeating.Fuel, str, false) == 0 | Operators.CompareString(this._House.MainHeating2.Fuel, str, false) == 0 | Operators.CompareString(this._House.Water.Fuel, str, false) == 0)
        flag = true;
      if (Operators.CompareString(str, "heating oil", false) == 0 && this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Always_Oil)
        flag = true;
      if (Operators.CompareString(str, "house coal", false) == 0 && this.OccupancyData.CookingFuel == OccupancyClass.CookingFuel.Always_Solid)
        flag = true;
      if (!flag)
        return 0.0;
      if ((uint) Current_Fuel.FuelBillInfo <= 0U)
        return this.Round_Up(this.FuelCost(str, 0, "SC"));
      double num = Current_Fuel.VAT ? 1.0 : 1.05;
      return this.Round_Up(Current_Fuel.FixedCost * num);
    }

    private double Round_Up(double value)
    {
      value += 1E-07;
      return Math.Round(value);
    }

    public string GetElectricityType(int OnOff)
    {
      string electricityType;
      if (OnOff == 1)
      {
        string electricityTariff = this._House.MainHeating.ElectricityTariff;
        electricityType = Operators.CompareString(electricityTariff, "standard tariff", false) == 0 ? "standard tariff" : (Operators.CompareString(electricityTariff, "7-hour tariff", false) == 0 ? "7-hour tariff (off-peak)" : (Operators.CompareString(electricityTariff, "10-hour tariff", false) == 0 ? "10-hour tariff (off-peak)" : (Operators.CompareString(electricityTariff, "18-hour tariff", false) == 0 ? "18-hour tariff (off-peak)" : (Operators.CompareString(electricityTariff, "24-hour tariff", false) == 0 ? "24-hour tariff" : "standard tariff"))));
      }
      else
      {
        string electricityTariff = this._House.MainHeating.ElectricityTariff;
        electricityType = Operators.CompareString(electricityTariff, "standard tariff", false) == 0 ? "standard tariff" : (Operators.CompareString(electricityTariff, "7-hour tariff", false) == 0 ? "7-hour tariff (on-peak)" : (Operators.CompareString(electricityTariff, "10-hour tariff", false) == 0 ? "10-hour tariff (on-peak)" : (Operators.CompareString(electricityTariff, "18-hour tariff", false) == 0 ? "18-hour tariff (on-peak)" : (Operators.CompareString(electricityTariff, "24-hour tariff", false) == 0 ? "24-hour tariff" : "standard tariff"))));
      }
      return electricityType;
    }

    private string GetElectricityType2(int OnOff)
    {
      string electricityType2 = "";
      if (OnOff == 1)
      {
        string electricityTariff = this._House.MainHeating.ElectricityTariff;
        if (Operators.CompareString(electricityTariff, "standard tariff", false) != 0)
        {
          if (Operators.CompareString(electricityTariff, "7-hour tariff", false) != 0)
          {
            if (Operators.CompareString(electricityTariff, "10-hour tariff", false) != 0)
            {
              if (Operators.CompareString(electricityTariff, "18-hour tariff", false) != 0)
              {
                if (Operators.CompareString(electricityTariff, "24-hour tariff", false) == 0)
                  electricityType2 = "24-hour tariff";
              }
              else
                electricityType2 = "18-hour tariff (off-peak)";
            }
            else
              electricityType2 = "10-hour tariff (off-peak)";
          }
          else
            electricityType2 = "7-hour tariff (off-peak)";
        }
        else
          electricityType2 = "standard tariff";
      }
      else
      {
        string electricityTariff = this._House.MainHeating.ElectricityTariff;
        if (Operators.CompareString(electricityTariff, "standard tariff", false) != 0)
        {
          if (Operators.CompareString(electricityTariff, "7-hour tariff", false) != 0)
          {
            if (Operators.CompareString(electricityTariff, "10-hour tariff", false) != 0)
            {
              if (Operators.CompareString(electricityTariff, "18-hour tariff", false) != 0)
              {
                if (Operators.CompareString(electricityTariff, "24-hour tariff", false) == 0)
                  electricityType2 = "24-hour tariff";
              }
              else
                electricityType2 = "18-hour tariff (on-peak)";
            }
            else
              electricityType2 = "10-hour tariff (on-peak)";
          }
          else
            electricityType2 = "7-hour tariff (on-peak)";
        }
        else
          electricityType2 = "standard tariff";
      }
      return electricityType2;
    }

    public double FuelCost(string Fuel, int Source, string What)
    {
      string str = Fuel;
      int num1;
      // ISSUE: reference to a compiler-generated method
      switch (\u003CPrivateImplementationDetails\u003E.ComputeStringHash(str))
      {
        case 157581269:
          if (Operators.CompareString(str, "heating oil", false) == 0)
          {
            num1 = 4;
            goto default;
          }
          else
            goto default;
        case 207532462:
          if (Operators.CompareString(str, "heat from boilers – main gas", false) == 0)
            goto label_87;
          else
            goto default;
        case 318565223:
          if (Operators.CompareString(str, "wood pellets (in bags for secondary heating)", false) == 0)
            goto label_83;
          else
            goto default;
        case 335024745:
          if (Operators.CompareString(str, "heat from boilers – biogas", false) == 0)
            goto label_95;
          else
            goto default;
        case 430512997:
          if (Operators.CompareString(str, "heat from boilers - LPG", false) == 0)
            goto label_88;
          else
            goto default;
        case 551528459:
          if (Operators.CompareString(str, "heat from boilers - coal", false) == 0)
            goto label_91;
          else
            goto default;
        case 562107331:
          if (Operators.CompareString(str, "heat from boilers - mains gas", false) == 0)
            goto label_87;
          else
            goto default;
        case 575487477:
          if (Operators.CompareString(str, "wood pellets (bulk supply in bags, for main heating)", false) == 0)
            goto label_84;
          else
            goto default;
        case 604697910:
          if (Operators.CompareString(str, "manufactured smokeless fuel", false) == 0)
          {
            num1 = 12;
            goto default;
          }
          else
            goto default;
        case 664172296:
          if (Operators.CompareString(str, "heat from CHP", false) == 0)
          {
            num1 = 48;
            goto default;
          }
          else
            goto default;
        case 721524493:
          if (Operators.CompareString(str, "dual fuel appliance (mineral and wood)", false) == 0)
          {
            num1 = 10;
            goto default;
          }
          else
            goto default;
        case 842919835:
          if (Operators.CompareString(str, "heat from boilers – LPG", false) == 0)
            goto label_88;
          else
            goto default;
        case 857289046:
          if (Operators.CompareString(str, "house coal", false) == 0)
          {
            num1 = 11;
            goto default;
          }
          else
            goto default;
        case 975024876:
          if (Operators.CompareString(str, "bulk LPG", false) == 0)
          {
            num1 = 2;
            goto default;
          }
          else
            goto default;
        case 1004618423:
          if (Operators.CompareString(str, "heat from eletric heat pump", false) == 0)
            goto label_92;
          else
            goto default;
        case 1086463322:
          if (Operators.CompareString(str, "LPG subject to Special Condition 18", false) == 0)
          {
            num1 = 9;
            goto default;
          }
          else
            goto default;
        case 1224015730:
          if (Operators.CompareString(str, "heat from boilers - biomass", false) == 0)
            goto label_94;
          else
            goto default;
        case 1231625083:
          if (Operators.CompareString(str, "heat from boilers - biogas", false) == 0)
            goto label_95;
          else
            goto default;
        case 1384014791:
          if (Operators.CompareString(str, "B30K", false) == 0)
          {
            num1 = 75;
            goto default;
          }
          else
            goto default;
        case 1424221758:
          if (Operators.CompareString(str, "geothermal heat source", false) == 0)
          {
            num1 = 46;
            goto default;
          }
          else
            goto default;
        case 1441345278:
          if (Operators.CompareString(str, "Electricity", false) == 0)
            break;
          goto default;
        case 1522447619:
          if (Operators.CompareString(str, "wood chips", false) == 0)
          {
            num1 = 21;
            goto default;
          }
          else
            goto default;
        case 1525714084:
          if (Operators.CompareString(str, "heat from boilers - main gas", false) == 0)
            goto label_87;
          else
            goto default;
        case 1538586610:
          if (Operators.CompareString(str, "heat from boilers – oil", false) == 0)
            goto label_89;
          else
            goto default;
        case 1597764060:
          if (Operators.CompareString(str, "mains gas", false) == 0)
          {
            num1 = 1;
            goto default;
          }
          else
            goto default;
        case 1623787443:
          if (Operators.CompareString(str, "10-hour tariff (on-peak)", false) == 0)
          {
            num1 = 34;
            goto default;
          }
          else
            goto default;
        case 1716796187:
          if (Operators.CompareString(str, "18-hour tariff (on-peak)", false) == 0)
          {
            num1 = 38;
            goto default;
          }
          else
            goto default;
        case 1770949684:
          if (Operators.CompareString(str, "appliances able to use mineral oil or liquid biofuel", false) == 0)
            goto label_76;
          else
            goto default;
        case 1860525480:
          if (Operators.CompareString(str, "heat from electric heat pump", false) == 0)
            goto label_92;
          else
            goto default;
        case 1880739446:
          if (Operators.CompareString(str, "24-hour tariff", false) == 0)
          {
            num1 = 35;
            goto default;
          }
          else
            goto default;
        case 1946790875:
          if (Operators.CompareString(str, "wood logs", false) == 0)
          {
            num1 = 20;
            goto default;
          }
          else
            goto default;
        case 1956632141:
          if (Operators.CompareString(str, "7-hour tariff (on-peak)", false) == 0)
          {
            num1 = 32;
            goto default;
          }
          else
            goto default;
        case 2027441019:
          if (Operators.CompareString(str, "electricity displaced from grid", false) == 0)
          {
            num1 = 37;
            goto default;
          }
          else
            goto default;
        case 2251322125:
          if (Operators.CompareString(str, "wood pellets (in bags, for secondary heating)", false) == 0)
            goto label_83;
          else
            goto default;
        case 2313921600:
          if (Operators.CompareString(str, "anthracite", false) == 0)
          {
            num1 = 15;
            goto default;
          }
          else
            goto default;
        case 2340757125:
          if (Operators.CompareString(str, "heat from boilers - waste combustion", false) == 0)
          {
            num1 = 42;
            goto default;
          }
          else
            goto default;
        case 2343415715:
          if (Operators.CompareString(str, "waste heat from power stations", false) == 0)
          {
            num1 = 45;
            goto default;
          }
          else
            goto default;
        case 2487325169:
          if (Operators.CompareString(str, "10-hour tariff (off-peak)", false) == 0)
          {
            num1 = 33;
            goto default;
          }
          else
            goto default;
        case 2685417441:
          if (Operators.CompareString(str, "bioethanol from any biomass source", false) == 0)
          {
            num1 = 76;
            goto default;
          }
          else
            goto default;
        case 2767619423:
          if (Operators.CompareString(str, "heat from boilers - B30D", false) == 0)
            goto label_90;
          else
            goto default;
        case 3109921206:
          if (Operators.CompareString(str, "appliances able to used mineral oil or liquid biofuel", false) == 0)
            goto label_76;
          else
            goto default;
        case 3198893402:
          if (Operators.CompareString(str, "rapeseed oil", false) == 0)
          {
            num1 = 73;
            goto default;
          }
          else
            goto default;
        case 3216529428:
          if (Operators.CompareString(str, "heat from boilers – biomass", false) == 0)
            goto label_94;
          else
            goto default;
        case 3349323758:
          if (Operators.CompareString(str, "biodiesel from any biomass source", false) == 0)
          {
            num1 = 71;
            goto default;
          }
          else
            goto default;
        case 3398809853:
          if (Operators.CompareString(str, "heat from boilers – B30D", false) == 0)
            goto label_90;
          else
            goto default;
        case 3476008579:
          if (Operators.CompareString(str, "wood pellets (bulk supply for main heating)", false) == 0)
            goto label_84;
          else
            goto default;
        case 3722837730:
          if (Operators.CompareString(str, "bottled LPG", false) == 0)
          {
            num1 = 3;
            goto default;
          }
          else
            goto default;
        case 3794681384:
          if (Operators.CompareString(str, "LNG", false) == 0)
          {
            num1 = 9;
            goto default;
          }
          else
            goto default;
        case 3822196772:
          if (Operators.CompareString(str, "heat from boilers - oil", false) == 0)
            goto label_89;
          else
            goto default;
        case 3824947145:
          if (Operators.CompareString(str, "heat from boilers – coal", false) == 0)
            goto label_91;
          else
            goto default;
        case 3836938347:
          if (Operators.CompareString(str, "7-hour tariff (off-peak)", false) == 0)
          {
            num1 = 31;
            goto default;
          }
          else
            goto default;
        case 3989997017:
          if (Operators.CompareString(str, "18-hour tariff (off-peak)", false) == 0)
          {
            num1 = 40;
            goto default;
          }
          else
            goto default;
        case 4020509270:
          if (Operators.CompareString(str, "standard tariff", false) == 0)
            break;
          goto default;
        case 4105867675:
          if (Operators.CompareString(str, "electricity sold to grid", false) == 0)
          {
            num1 = 36;
            goto default;
          }
          else
            goto default;
        case 4235694608:
          if (Operators.CompareString(str, "biodiesel from used cooking oil only", false) == 0)
          {
            num1 = 73;
            goto default;
          }
          else
            goto default;
        case 4241528165:
          if (Operators.CompareString(str, "heat from boilers – mains gas", false) == 0)
            goto label_87;
          else
            goto default;
        default:
label_99:
          object Instance = Source != 1 ? (object) this.Table12a(Conversions.ToString(num1)) : (object) this.Table12aSAP(Conversions.ToString(num1));
          if (Instance == null)
            throw new ArgumentException("Fuel Error - " + Fuel + ", please contact technical support");
          string Left = What;
          double num2;
          if (Operators.CompareString(Left, "Price", false) != 0)
          {
            if (Operators.CompareString(Left, "SC", false) != 0)
            {
              if (Operators.CompareString(Left, "Emissions", false) != 0)
              {
                if (Operators.CompareString(Left, "Energy", false) == 0)
                  num2 = Conversions.ToDouble(NewLateBinding.LateGet(Instance, (System.Type) null, "Energy", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
              }
              else
                num2 = Conversions.ToDouble(NewLateBinding.LateGet(Instance, (System.Type) null, "Emissions", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
            }
            else
            {
              if (num1 == 30 & !this.OccupancyCalc)
                return 0.0;
              num2 = Conversions.ToDouble(NewLateBinding.LateGet(Instance, (System.Type) null, "SCharge", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
            }
          }
          else
            num2 = Conversions.ToDouble(NewLateBinding.LateGet(Instance, (System.Type) null, "Price", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
          return num2;
      }
      num1 = 30;
      goto label_99;
label_76:
      num1 = 74;
      goto label_99;
label_83:
      num1 = 22;
      goto label_99;
label_84:
      num1 = 23;
      goto label_99;
label_87:
      num1 = 51;
      goto label_99;
label_88:
      num1 = 52;
      goto label_99;
label_89:
      num1 = 53;
      goto label_99;
label_90:
      num1 = 55;
      goto label_99;
label_91:
      num1 = 54;
      goto label_99;
label_92:
      num1 = 41;
      goto label_99;
label_94:
      num1 = 43;
      goto label_99;
label_95:
      num1 = 44;
      goto label_99;
    }

    private void Equation8(double Fraction, double nwinter, double nsummmer)
    {
      Energy_Requirements_9a2012 energyRequirements9a = this._Calc.Energy_Requirements_9a;
      energyRequirements9a.Box217_m.M1 = (this._Calc.Space_heating_requirement.Box98_m.M1 * Fraction + this._Calc.Water_heating.Box64_m.M1) / (this._Calc.Space_heating_requirement.Box98_m.M1 * Fraction / nwinter + this._Calc.Water_heating.Box64_m.M1 / nsummmer);
      energyRequirements9a.Box217_m.M2 = (this._Calc.Space_heating_requirement.Box98_m.M2 * Fraction + this._Calc.Water_heating.Box64_m.M2) / (this._Calc.Space_heating_requirement.Box98_m.M2 * Fraction / nwinter + this._Calc.Water_heating.Box64_m.M2 / nsummmer);
      energyRequirements9a.Box217_m.M3 = (this._Calc.Space_heating_requirement.Box98_m.M3 * Fraction + this._Calc.Water_heating.Box64_m.M3) / (this._Calc.Space_heating_requirement.Box98_m.M3 * Fraction / nwinter + this._Calc.Water_heating.Box64_m.M3 / nsummmer);
      energyRequirements9a.Box217_m.M4 = (this._Calc.Space_heating_requirement.Box98_m.M4 * Fraction + this._Calc.Water_heating.Box64_m.M4) / (this._Calc.Space_heating_requirement.Box98_m.M4 * Fraction / nwinter + this._Calc.Water_heating.Box64_m.M4 / nsummmer);
      energyRequirements9a.Box217_m.M5 = (this._Calc.Space_heating_requirement.Box98_m.M5 * Fraction + this._Calc.Water_heating.Box64_m.M5) / (this._Calc.Space_heating_requirement.Box98_m.M5 * Fraction / nwinter + this._Calc.Water_heating.Box64_m.M5 / nsummmer);
      if (this._Calc.Space_heating_requirement.Box98_m.M6 + this._Calc.Water_heating.Box64_m.M6 != 0.0)
        energyRequirements9a.Box217_m.M6 = (this._Calc.Space_heating_requirement.Box98_m.M6 * Fraction + this._Calc.Water_heating.Box64_m.M6) / (this._Calc.Space_heating_requirement.Box98_m.M6 * Fraction / nwinter + this._Calc.Water_heating.Box64_m.M6 / nsummmer);
      if (this._Calc.Space_heating_requirement.Box98_m.M7 + this._Calc.Water_heating.Box64_m.M7 != 0.0)
        energyRequirements9a.Box217_m.M7 = (this._Calc.Space_heating_requirement.Box98_m.M7 * Fraction + this._Calc.Water_heating.Box64_m.M7) / (this._Calc.Space_heating_requirement.Box98_m.M7 * Fraction / nwinter + this._Calc.Water_heating.Box64_m.M7 / nsummmer);
      if (this._Calc.Space_heating_requirement.Box98_m.M8 + this._Calc.Water_heating.Box64_m.M8 != 0.0)
        energyRequirements9a.Box217_m.M8 = (this._Calc.Space_heating_requirement.Box98_m.M8 * Fraction + this._Calc.Water_heating.Box64_m.M8) / (this._Calc.Space_heating_requirement.Box98_m.M8 * Fraction / nwinter + this._Calc.Water_heating.Box64_m.M8 / nsummmer);
      if (this._Calc.Space_heating_requirement.Box98_m.M9 + this._Calc.Water_heating.Box64_m.M9 != 0.0)
        energyRequirements9a.Box217_m.M9 = (this._Calc.Space_heating_requirement.Box98_m.M9 * Fraction + this._Calc.Water_heating.Box64_m.M9) / (this._Calc.Space_heating_requirement.Box98_m.M9 * Fraction / nwinter + this._Calc.Water_heating.Box64_m.M9 / nsummmer);
      energyRequirements9a.Box217_m.M10 = (this._Calc.Space_heating_requirement.Box98_m.M10 * Fraction + this._Calc.Water_heating.Box64_m.M10) / (this._Calc.Space_heating_requirement.Box98_m.M10 * Fraction / nwinter + this._Calc.Water_heating.Box64_m.M10 / nsummmer);
      energyRequirements9a.Box217_m.M11 = (this._Calc.Space_heating_requirement.Box98_m.M11 * Fraction + this._Calc.Water_heating.Box64_m.M11) / (this._Calc.Space_heating_requirement.Box98_m.M11 * Fraction / nwinter + this._Calc.Water_heating.Box64_m.M11 / nsummmer);
      energyRequirements9a.Box217_m.M12 = (this._Calc.Space_heating_requirement.Box98_m.M12 * Fraction + this._Calc.Water_heating.Box64_m.M12) / (this._Calc.Space_heating_requirement.Box98_m.M12 * Fraction / nwinter + this._Calc.Water_heating.Box64_m.M12 / nsummmer);
    }

    private void Equationhp(double Fraction, double nwinter, double nsummmer)
    {
      Energy_Requirements_9a2012 energyRequirements9a = this._Calc.Energy_Requirements_9a;
      energyRequirements9a.Box217_m.M1 = (nwinter - nsummmer) / 99.6 * (this._Calc.Water_heating.Box43 - 100.2) + nsummmer;
      energyRequirements9a.Box217_m.M2 = (nwinter - nsummmer) / 99.6 * (this._Calc.Water_heating.Box43 - 100.2) + nsummmer;
      energyRequirements9a.Box217_m.M3 = (nwinter - nsummmer) / 99.6 * (this._Calc.Water_heating.Box43 - 100.2) + nsummmer;
      energyRequirements9a.Box217_m.M4 = (nwinter - nsummmer) / 99.6 * (this._Calc.Water_heating.Box43 - 100.2) + nsummmer;
      energyRequirements9a.Box217_m.M5 = (nwinter - nsummmer) / 99.6 * (this._Calc.Water_heating.Box43 - 100.2) + nsummmer;
      energyRequirements9a.Box217_m.M6 = (nwinter - nsummmer) / 99.6 * (this._Calc.Water_heating.Box43 - 100.2) + nsummmer;
      energyRequirements9a.Box217_m.M7 = (nwinter - nsummmer) / 99.6 * (this._Calc.Water_heating.Box43 - 100.2) + nsummmer;
      energyRequirements9a.Box217_m.M8 = (nwinter - nsummmer) / 99.6 * (this._Calc.Water_heating.Box43 - 100.2) + nsummmer;
      energyRequirements9a.Box217_m.M9 = (nwinter - nsummmer) / 99.6 * (this._Calc.Water_heating.Box43 - 100.2) + nsummmer;
      energyRequirements9a.Box217_m.M10 = (nwinter - nsummmer) / 99.6 * (this._Calc.Water_heating.Box43 - 100.2) + nsummmer;
      energyRequirements9a.Box217_m.M11 = (nwinter - nsummmer) / 99.6 * (this._Calc.Water_heating.Box43 - 100.2) + nsummmer;
      energyRequirements9a.Box217_m.M12 = (nwinter - nsummmer) / 99.6 * (this._Calc.Water_heating.Box43 - 100.2) + nsummmer;
    }

    private double Convertto2009(double SEDBUK2005, bool Summer)
    {
      int digits = 1;
      bool flag = false;
      float num1;
      float num2;
      float num3;
      float num4;
      float num5;
      switch (this._House.MainHeating.SAPTableCode)
      {
        case 101:
        case 105:
        case 135:
        case 136:
        case 137:
        case 138:
          if (this._House.MainHeating.FuelBurningType == null)
            this._House.MainHeating.FuelBurningType = "";
          string fuelBurningType1 = this._House.MainHeating.FuelBurningType;
          if (Operators.CompareString(fuelBurningType1, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType1, "On/off", false) != 0 && Operators.CompareString(fuelBurningType1, "", false) != 0)
          {
            if (Operators.CompareString(fuelBurningType1, "Modulation", false) == 0)
            {
              num1 = 1f;
              num2 = -9.7f;
              num3 = -2f;
              num4 = 3.15f;
              num5 = -2f;
              break;
            }
            break;
          }
          num1 = 0.9f;
          num2 = -9.2f;
          num3 = -6.5f;
          num4 = 3.8f;
          num5 = -6.5f;
          break;
        case 102:
        case 106:
        case 133:
        case 134:
          flag = true;
          if (this._House.MainHeating.FuelBurningType == null)
            this._House.MainHeating.FuelBurningType = "";
          string fuelBurningType2 = this._House.MainHeating.FuelBurningType;
          if (Operators.CompareString(fuelBurningType2, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType2, "On/off", false) != 0 && Operators.CompareString(fuelBurningType2, "", false) != 0)
          {
            if (Operators.CompareString(fuelBurningType2, "Modulation", false) == 0)
            {
              num1 = 1f;
              num2 = -9.7f;
              num3 = -2f;
              num4 = -0.95f;
              num5 = -2f;
              break;
            }
            break;
          }
          num1 = 0.9f;
          num2 = -9.2f;
          num3 = -2.5f;
          num4 = 1.45f;
          num5 = -2.5f;
          break;
        case 103:
        case 107:
          string combiType1 = this._House.Water.CombiType;
          if (Operators.CompareString(combiType1, "Instantaneous Combi", false) != 0)
          {
            if (Operators.CompareString(combiType1, "Storage combi boiler, primary store", false) != 0)
            {
              if (Operators.CompareString(combiType1, "Storage combi boiler, secondary store", false) == 0)
              {
                if (this._House.MainHeating.FuelBurningType == null)
                  this._House.MainHeating.FuelBurningType = "";
                string fuelBurningType3 = this._House.MainHeating.FuelBurningType;
                if (Operators.CompareString(fuelBurningType3, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType3, "On/off", false) != 0 && Operators.CompareString(fuelBurningType3, "", false) != 0)
                {
                  if (Operators.CompareString(fuelBurningType3, "Modulation", false) == 0)
                  {
                    num1 = 0.8f;
                    num2 = -8.3f;
                    num3 = -1.7f;
                    num4 = 3f;
                    num5 = -1.7f;
                    break;
                  }
                  break;
                }
                num1 = 0.7f;
                num2 = -7.2f;
                num3 = -6.59f;
                num4 = -0.5f;
                num5 = -6.59f;
                break;
              }
              break;
            }
            if (this._House.MainHeating.FuelBurningType == null)
              this._House.MainHeating.FuelBurningType = "";
            string fuelBurningType4 = this._House.MainHeating.FuelBurningType;
            if (Operators.CompareString(fuelBurningType4, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType4, "On/off", false) != 0 && Operators.CompareString(fuelBurningType4, "", false) != 0)
            {
              if (Operators.CompareString(fuelBurningType4, "Modulation", false) == 0)
              {
                num1 = 0.8f;
                num2 = -8.3f;
              }
            }
            else
            {
              num1 = 0.7f;
              num2 = -7.2f;
            }
            num3 = -0.64f;
            num4 = -1.25f;
            num5 = -0.64f;
            break;
          }
          if (this._House.MainHeating.FuelBurningType == null)
            this._House.MainHeating.FuelBurningType = "";
          string fuelBurningType5 = this._House.MainHeating.FuelBurningType;
          if (Operators.CompareString(fuelBurningType5, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType5, "On/off", false) != 0 && Operators.CompareString(fuelBurningType5, "", false) != 0)
          {
            if (Operators.CompareString(fuelBurningType5, "Modulation", false) == 0)
            {
              num1 = 0.9f;
              num2 = -9.2f;
              num3 = -6.1f;
              num4 = 4.15f;
              num5 = -6.1f;
              break;
            }
            break;
          }
          num1 = 0.8f;
          num2 = -8.5f;
          num3 = -6.8f;
          num4 = -3.7f;
          num5 = -6.8f;
          break;
        case 104:
        case 108:
          flag = true;
          string combiType2 = this._House.Water.CombiType;
          if (Operators.CompareString(combiType2, "Instantaneous Combi", false) != 0)
          {
            if (Operators.CompareString(combiType2, "Storage combi boiler, primary store", false) != 0)
            {
              if (Operators.CompareString(combiType2, "Storage combi boiler, secondary store", false) == 0)
              {
                if (this._House.MainHeating.FuelBurningType == null)
                  this._House.MainHeating.FuelBurningType = "";
                string fuelBurningType6 = this._House.MainHeating.FuelBurningType;
                if (Operators.CompareString(fuelBurningType6, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType6, "On/off", false) != 0 && Operators.CompareString(fuelBurningType6, "", false) != 0)
                {
                  if (Operators.CompareString(fuelBurningType6, "Modulation", false) == 0)
                  {
                    num1 = 0.8f;
                    num2 = -8.3f;
                    num3 = -1.7f;
                    num4 = -1f;
                    num5 = -1.7f;
                    break;
                  }
                  break;
                }
                num1 = 0.7f;
                num2 = -7.2f;
                num3 = -6.59f;
                num4 = -0.5f;
                num5 = -6.59f;
                break;
              }
              break;
            }
            if (this._House.MainHeating.FuelBurningType == null)
              this._House.MainHeating.FuelBurningType = "";
            string fuelBurningType7 = this._House.MainHeating.FuelBurningType;
            if (Operators.CompareString(fuelBurningType7, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType7, "On/off", false) != 0 && Operators.CompareString(fuelBurningType7, "", false) != 0)
            {
              if (Operators.CompareString(fuelBurningType7, "Modulation", false) == 0)
              {
                num1 = 0.8f;
                num2 = -8.3f;
              }
            }
            else
            {
              num1 = 0.7f;
              num2 = -7.2f;
            }
            num3 = -0.28f;
            num4 = -3.15f;
            num5 = -0.28f;
            break;
          }
          if (this._House.MainHeating.FuelBurningType == null)
            this._House.MainHeating.FuelBurningType = "";
          string fuelBurningType8 = this._House.MainHeating.FuelBurningType;
          if (Operators.CompareString(fuelBurningType8, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType8, "On/off", false) != 0 && Operators.CompareString(fuelBurningType8, "", false) != 0)
          {
            if (Operators.CompareString(fuelBurningType8, "Modulation", false) == 0)
            {
              num1 = 0.9f;
              num2 = -9.2f;
              num3 = -2.1f;
              num4 = -0.7f;
              num5 = -2.1f;
              break;
            }
            break;
          }
          num1 = 0.8f;
          num2 = -8.5f;
          num3 = -2.8f;
          num4 = -5f;
          num5 = -2.8f;
          break;
        case 120:
        case 122:
          num1 = 0.22f;
          num2 = -1.64f;
          digits = 2;
          break;
        case 121:
        case 123:
          num1 = 0.22f;
          num2 = -1.64f;
          num3 = -0.28f;
          num4 = -3.15f;
          num5 = -0.28f;
          flag = true;
          break;
        case 124:
        case 125:
        case 126:
          num1 = 1.1f;
          num2 = -10.6f;
          num3 = 0.0f;
          num4 = -5.2f;
          num5 = -1.1f;
          break;
        case (int) sbyte.MaxValue:
          flag = true;
          num1 = 1.1f;
          num2 = -10.6f;
          num3 = 0.0f;
          num4 = 1.1f;
          num5 = -1.1f;
          break;
        case 128:
        case 129:
          string combiType3 = this._House.Water.CombiType;
          if (Operators.CompareString(combiType3, "Instantaneous Combi", false) == 0 || Operators.CompareString(combiType3, "", false) == 0)
          {
            num1 = 1f;
            num2 = -8.5f;
            num3 = -2.8f;
            num4 = 1.45f;
            num5 = -2.8f;
            break;
          }
          num1 = 0.9f;
          num2 = -7.2f;
          num3 = -2.8f;
          num4 = -2.8f;
          num5 = -2.8f;
          break;
        case 130:
          flag = true;
          string combiType4 = this._House.Water.CombiType;
          if (Operators.CompareString(combiType4, "Instantaneous Combi", false) == 0 || Operators.CompareString(combiType4, "", false) == 0)
          {
            num1 = 1f;
            num2 = -8.5f;
            num3 = -2.8f;
            num4 = -0.25f;
            num5 = -2.8f;
            break;
          }
          num1 = 0.9f;
          num2 = -7.2f;
          num3 = -2.8f;
          num4 = -0.95f;
          num5 = -2.8f;
          break;
      }
      string fuel1 = this._House.MainHeating.Fuel;
      float num6;
      // ISSUE: reference to a compiler-generated method
      switch (\u003CPrivateImplementationDetails\u003E.ComputeStringHash(fuel1))
      {
        case 157581269:
          if (Operators.CompareString(fuel1, "heating oil", false) == 0)
            goto label_77;
          else
            goto default;
        case 975024876:
          if (Operators.CompareString(fuel1, "bulk LPG", false) == 0)
            break;
          goto default;
        case 1086463322:
          if (Operators.CompareString(fuel1, "LPG subject to Special Condition 18", false) == 0)
            break;
          goto default;
        case 1597764060:
          if (Operators.CompareString(fuel1, "mains gas", false) == 0)
          {
            num6 = 0.901f;
            goto label_79;
          }
          else
            goto default;
        case 1770949684:
          if (Operators.CompareString(fuel1, "appliances able to use mineral oil or liquid biofuel", false) == 0)
            goto label_77;
          else
            goto default;
        case 3109921206:
          if (Operators.CompareString(fuel1, "appliances able to used mineral oil or liquid biofuel", false) == 0)
            goto label_77;
          else
            goto default;
        case 3722837730:
          if (Operators.CompareString(fuel1, "bottled LPG", false) == 0)
            break;
          goto default;
        default:
          num6 = 0.901f;
          goto label_79;
      }
      num6 = 0.921f;
      goto label_79;
label_77:
      num6 = 0.937f;
label_79:
      float num7 = ((float) SEDBUK2005 - num3) / num6 + num4;
      float num8 = ((float) SEDBUK2005 - num3) / num6 - num4;
      if ((double) num7 > 95.5)
        num7 -= (float) (0.673 * ((double) num7 - 95.5));
      if ((double) num8 > 96.6)
        num8 -= (float) (0.213 * ((double) num8 - 96.6));
      float num9;
      float num10;
      if (flag)
      {
        string fuel2 = this._House.MainHeating.Fuel;
        // ISSUE: reference to a compiler-generated method
        switch (\u003CPrivateImplementationDetails\u003E.ComputeStringHash(fuel2))
        {
          case 157581269:
            if (Operators.CompareString(fuel2, "heating oil", false) == 0)
              goto label_94;
            else
              goto default;
          case 975024876:
            if (Operators.CompareString(fuel2, "bulk LPG", false) == 0)
              break;
            goto default;
          case 1086463322:
            if (Operators.CompareString(fuel2, "LPG subject to Special Condition 18", false) == 0)
              break;
            goto default;
          case 1597764060:
            if (Operators.CompareString(fuel2, "mains gas", false) == 0)
            {
              num9 = 98f;
              num10 = 108f;
              goto label_108;
            }
            else
              goto default;
          case 1770949684:
            if (Operators.CompareString(fuel2, "appliances able to use mineral oil or liquid biofuel", false) == 0)
              goto label_94;
            else
              goto default;
          case 3109921206:
            if (Operators.CompareString(fuel2, "appliances able to used mineral oil or liquid biofuel", false) == 0)
              goto label_94;
            else
              goto default;
          case 3722837730:
            if (Operators.CompareString(fuel2, "bottled LPG", false) == 0)
              break;
            goto default;
          default:
            num9 = 98f;
            num10 = 108f;
            goto label_108;
        }
        num9 = 98f;
        num10 = 106f;
        goto label_108;
label_94:
        num9 = 98f;
        num10 = 104f;
      }
      else
      {
        string fuel3 = this._House.MainHeating.Fuel;
        // ISSUE: reference to a compiler-generated method
        switch (\u003CPrivateImplementationDetails\u003E.ComputeStringHash(fuel3))
        {
          case 157581269:
            if (Operators.CompareString(fuel3, "heating oil", false) == 0)
              goto label_105;
            else
              goto default;
          case 975024876:
            if (Operators.CompareString(fuel3, "bulk LPG", false) == 0)
              break;
            goto default;
          case 1086463322:
            if (Operators.CompareString(fuel3, "LPG subject to Special Condition 18", false) == 0)
              break;
            goto default;
          case 1597764060:
            if (Operators.CompareString(fuel3, "mains gas", false) == 0)
              break;
            goto default;
          case 1770949684:
            if (Operators.CompareString(fuel3, "appliances able to use mineral oil or liquid biofuel", false) == 0)
              goto label_105;
            else
              goto default;
          case 3109921206:
            if (Operators.CompareString(fuel3, "appliances able to used mineral oil or liquid biofuel", false) == 0)
              goto label_105;
            else
              goto default;
          case 3722837730:
            if (Operators.CompareString(fuel3, "bottled LPG", false) == 0)
              break;
            goto default;
          default:
            num9 = 92f;
            num10 = 91f;
            goto label_107;
        }
        num9 = 92f;
        num10 = 91f;
        goto label_107;
label_105:
        num9 = 92f;
        num10 = 93f;
label_107:;
      }
label_108:
      if ((double) num7 > (double) num9)
        num7 = num9;
      if ((double) num8 > (double) num10)
        num8 = num10;
      float num11 = (float) (0.5 * ((double) num7 + (double) num8)) * num6 + num5;
      return Math.Round(!Summer ? (double) num11 + (double) num1 : (double) num11 + (double) num2, digits);
    }

    private double Convertto2009_2(double SEDBUK2005, bool Summer)
    {
      int digits = 1;
      bool flag = false;
      int sapTableCode = this._House.MainHeating2.SAPTableCode;
      int num1;
      switch (sapTableCode)
      {
        case 101:
        case 105:
        case 135:
        case 136:
        case 137:
          num1 = 1;
          break;
        default:
          num1 = sapTableCode == 138 ? 1 : 0;
          break;
      }
      float num2;
      float num3;
      float num4;
      float num5;
      float num6;
      if (num1 != 0)
      {
        if (this._House.MainHeating2.FuelBurningType == null)
          this._House.MainHeating2.FuelBurningType = "";
        string fuelBurningType = this._House.MainHeating2.FuelBurningType;
        if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
        {
          if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
          {
            num2 = 1f;
            num3 = -9.7f;
            num4 = -2f;
            num5 = 3.15f;
            num6 = -2f;
          }
        }
        else
        {
          num2 = 0.9f;
          num3 = -9.2f;
          num4 = -6.5f;
          num5 = 3.8f;
          num6 = -6.5f;
        }
      }
      else if (sapTableCode == 102 || sapTableCode == 106 || sapTableCode == 134 || sapTableCode == 133)
      {
        flag = true;
        if (this._House.MainHeating2.FuelBurningType == null)
          this._House.MainHeating2.FuelBurningType = "";
        string fuelBurningType = this._House.MainHeating2.FuelBurningType;
        if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
        {
          if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
          {
            num2 = 1f;
            num3 = -9.7f;
            num4 = -2f;
            num5 = -0.95f;
            num6 = -2f;
          }
        }
        else
        {
          num2 = 0.9f;
          num3 = -9.2f;
          num4 = -2.5f;
          num5 = 1.45f;
          num6 = -2.5f;
        }
      }
      else if (sapTableCode == 103 || sapTableCode == 107)
      {
        string combiType = this._House.Water.CombiType;
        if (Operators.CompareString(combiType, "Instantaneous Combi", false) != 0)
        {
          if (Operators.CompareString(combiType, "Storage combi boiler, primary store", false) != 0)
          {
            if (Operators.CompareString(combiType, "Storage combi boiler, secondary store", false) == 0)
            {
              if (this._House.MainHeating2.FuelBurningType == null)
                this._House.MainHeating2.FuelBurningType = "";
              string fuelBurningType = this._House.MainHeating2.FuelBurningType;
              if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
              {
                if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
                {
                  num2 = 0.8f;
                  num3 = -8.3f;
                  num4 = -1.7f;
                  num5 = 3f;
                  num6 = -1.7f;
                }
              }
              else
              {
                num2 = 0.7f;
                num3 = -7.2f;
                num4 = -6.59f;
                num5 = -0.5f;
                num6 = -6.59f;
              }
            }
          }
          else
          {
            if (this._House.MainHeating2.FuelBurningType == null)
              this._House.MainHeating2.FuelBurningType = "";
            string fuelBurningType = this._House.MainHeating2.FuelBurningType;
            if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
            {
              if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
              {
                num2 = 0.8f;
                num3 = -8.3f;
              }
            }
            else
            {
              num2 = 0.7f;
              num3 = -7.2f;
            }
            num4 = -0.64f;
            num5 = -1.25f;
            num6 = -0.64f;
          }
        }
        else
        {
          if (this._House.MainHeating2.FuelBurningType == null)
            this._House.MainHeating2.FuelBurningType = "";
          string fuelBurningType = this._House.MainHeating2.FuelBurningType;
          if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
          {
            if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
            {
              num2 = 0.9f;
              num3 = -9.2f;
              num4 = -6.1f;
              num5 = 4.15f;
              num6 = -6.1f;
            }
          }
          else
          {
            num2 = 0.8f;
            num3 = -8.5f;
            num4 = -6.8f;
            num5 = -3.7f;
            num6 = -6.8f;
          }
        }
      }
      else if (sapTableCode == 104 || sapTableCode == 108)
      {
        flag = true;
        string combiType = this._House.Water.CombiType;
        if (Operators.CompareString(combiType, "Instantaneous Combi", false) != 0)
        {
          if (Operators.CompareString(combiType, "Storage combi boiler, primary store", false) != 0)
          {
            if (Operators.CompareString(combiType, "Storage combi boiler, secondary store", false) == 0)
            {
              if (this._House.MainHeating2.FuelBurningType == null)
                this._House.MainHeating2.FuelBurningType = "";
              string fuelBurningType = this._House.MainHeating2.FuelBurningType;
              if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
              {
                if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
                {
                  num2 = 0.8f;
                  num3 = -8.3f;
                  num4 = -1.7f;
                  num5 = -1f;
                  num6 = -1.7f;
                }
              }
              else
              {
                num2 = 0.7f;
                num3 = -7.2f;
                num4 = -6.59f;
                num5 = -0.5f;
                num6 = -6.59f;
              }
            }
          }
          else
          {
            if (this._House.MainHeating2.FuelBurningType == null)
              this._House.MainHeating2.FuelBurningType = "";
            string fuelBurningType = this._House.MainHeating2.FuelBurningType;
            if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
            {
              if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
              {
                num2 = 0.8f;
                num3 = -8.3f;
              }
            }
            else
            {
              num2 = 0.7f;
              num3 = -7.2f;
            }
            num4 = -0.28f;
            num5 = -3.15f;
            num6 = -0.28f;
          }
        }
        else
        {
          if (this._House.MainHeating2.FuelBurningType == null)
            this._House.MainHeating2.FuelBurningType = "";
          string fuelBurningType = this._House.MainHeating2.FuelBurningType;
          if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
          {
            if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
            {
              num2 = 0.9f;
              num3 = -9.2f;
              num4 = -2.1f;
              num5 = -0.7f;
              num6 = -2.1f;
            }
          }
          else
          {
            num2 = 0.8f;
            num3 = -8.5f;
            num4 = -2.8f;
            num5 = -5f;
            num6 = -2.8f;
          }
        }
      }
      else if (sapTableCode == 124 || sapTableCode == 125 || sapTableCode == 126)
      {
        num2 = 1.1f;
        num3 = -10.6f;
        num4 = 0.0f;
        num5 = -5.2f;
        num6 = -1.1f;
      }
      else
      {
        int num7;
        switch (sapTableCode)
        {
          case (int) sbyte.MaxValue:
            flag = true;
            num2 = 1.1f;
            num3 = -10.6f;
            num4 = 0.0f;
            num5 = 1.1f;
            num6 = -1.1f;
            goto label_79;
          case 128:
            num7 = 1;
            break;
          default:
            num7 = sapTableCode == 129 ? 1 : 0;
            break;
        }
        if (num7 != 0)
        {
          string combiType = this._House.Water.CombiType;
          if (Operators.CompareString(combiType, "Instantaneous Combi", false) == 0 || Operators.CompareString(combiType, "", false) == 0)
          {
            num2 = 1f;
            num3 = -8.5f;
            num4 = -2.8f;
            num5 = 1.45f;
            num6 = -2.8f;
          }
          else
          {
            num2 = 0.9f;
            num3 = -7.2f;
            num4 = -2.8f;
            num5 = -2.8f;
            num6 = -2.8f;
          }
        }
        else if (sapTableCode == 130)
        {
          flag = true;
          string combiType = this._House.Water.CombiType;
          if (Operators.CompareString(combiType, "Instantaneous Combi", false) == 0 || Operators.CompareString(combiType, "", false) == 0)
          {
            num2 = 1f;
            num3 = -8.5f;
            num4 = -2.8f;
            num5 = -0.25f;
            num6 = -2.8f;
          }
          else
          {
            num2 = 0.9f;
            num3 = -7.2f;
            num4 = -2.8f;
            num5 = -0.95f;
            num6 = -2.8f;
          }
        }
        else if (sapTableCode >= 120 && sapTableCode <= 123)
        {
          num2 = 0.22f;
          num3 = -1.64f;
          digits = 2;
        }
      }
label_79:
      string fuel1 = this._House.MainHeating2.Fuel;
      float num8;
      // ISSUE: reference to a compiler-generated method
      switch (\u003CPrivateImplementationDetails\u003E.ComputeStringHash(fuel1))
      {
        case 157581269:
          if (Operators.CompareString(fuel1, "heating oil", false) == 0)
            goto label_89;
          else
            goto default;
        case 975024876:
          if (Operators.CompareString(fuel1, "bulk LPG", false) == 0)
            break;
          goto default;
        case 1086463322:
          if (Operators.CompareString(fuel1, "LPG subject to Special Condition 18", false) == 0)
            break;
          goto default;
        case 1597764060:
          if (Operators.CompareString(fuel1, "mains gas", false) == 0)
          {
            num8 = 0.901f;
            goto label_91;
          }
          else
            goto default;
        case 1770949684:
          if (Operators.CompareString(fuel1, "appliances able to use mineral oil or liquid biofuel", false) == 0)
            goto label_89;
          else
            goto default;
        case 3109921206:
          if (Operators.CompareString(fuel1, "appliances able to used mineral oil or liquid biofuel", false) == 0)
            goto label_89;
          else
            goto default;
        case 3722837730:
          if (Operators.CompareString(fuel1, "bottled LPG", false) == 0)
            break;
          goto default;
        default:
          num8 = 0.901f;
          goto label_91;
      }
      num8 = 0.921f;
      goto label_91;
label_89:
      num8 = 0.937f;
label_91:
      float num9 = ((float) SEDBUK2005 - num4) / num8 + num5;
      float num10 = ((float) SEDBUK2005 - num4) / num8 - num5;
      if ((double) num9 > 95.5)
        num9 -= (float) (0.673 * ((double) num9 - 95.5));
      if ((double) num10 > 96.6)
        num10 -= (float) (0.213 * ((double) num10 - 96.6));
      float num11;
      float num12;
      if (flag)
      {
        string fuel2 = this._House.MainHeating2.Fuel;
        if (Operators.CompareString(fuel2, "mains gas", false) != 0)
        {
          if (Operators.CompareString(fuel2, "bulk LPG", false) != 0 && Operators.CompareString(fuel2, "bottled LPG", false) != 0)
          {
            if (Operators.CompareString(fuel2, "heating oil", false) == 0 || Operators.CompareString(fuel2, "appliances able to use mineral oil or liquid biofuel", false) == 0 || Operators.CompareString(fuel2, "appliances able to used mineral oil or liquid biofuel", false) == 0)
            {
              num11 = 98f;
              num12 = 104f;
            }
            else
            {
              num11 = 98f;
              num12 = 108f;
            }
          }
          else
          {
            num11 = 98f;
            num12 = 106f;
          }
        }
        else
        {
          num11 = 98f;
          num12 = 108f;
        }
      }
      else
      {
        string fuel3 = this._House.MainHeating2.Fuel;
        if (Operators.CompareString(fuel3, "mains gas", false) != 0 && Operators.CompareString(fuel3, "bulk LPG", false) != 0 && Operators.CompareString(fuel3, "bottled LPG", false) != 0)
        {
          if (Operators.CompareString(fuel3, "heating oil", false) == 0 || Operators.CompareString(fuel3, "appliances able to use mineral oil or liquid biofuel", false) == 0 || Operators.CompareString(fuel3, "appliances able to used mineral oil or liquid biofuel", false) == 0)
          {
            num11 = 92f;
            num12 = 93f;
          }
          else
          {
            num11 = 92f;
            num12 = 91f;
          }
        }
        else
        {
          num11 = 92f;
          num12 = 91f;
        }
      }
      if ((double) num9 > (double) num11)
        num9 = num11;
      if ((double) num10 > (double) num12)
        num10 = num12;
      float num13 = (float) (0.5 * ((double) num9 + (double) num10)) * num8 + num6;
      return Math.Round(!Summer ? (double) num13 + (double) num2 : (double) num13 + (double) num3, digits);
    }

    private double Change2009(double SEDBUK2009, bool Summer)
    {
      int digits = 1;
      bool flag = false;
      int sapTableCode = this._House.MainHeating.SAPTableCode;
      int num1;
      switch (sapTableCode)
      {
        case 101:
        case 105:
        case 135:
        case 136:
        case 137:
          num1 = 1;
          break;
        default:
          num1 = sapTableCode == 138 ? 1 : 0;
          break;
      }
      float num2;
      float num3;
      if (num1 != 0)
      {
        string fuelBurningType = this._House.MainHeating.FuelBurningType;
        if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
        {
          if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
          {
            num2 = 1f;
            num3 = -9.7f;
          }
        }
        else
        {
          num2 = 0.9f;
          num3 = -9.2f;
        }
      }
      else if (sapTableCode == 102 || sapTableCode == 106 || sapTableCode == 134 || sapTableCode == 133)
      {
        flag = true;
        string fuelBurningType = this._House.MainHeating.FuelBurningType;
        if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
        {
          if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
          {
            num2 = 1f;
            num3 = -9.7f;
          }
        }
        else
        {
          num2 = 0.9f;
          num3 = -9.2f;
        }
      }
      else if (sapTableCode == 103 || sapTableCode == 107)
      {
        string combiType = this._House.Water.CombiType;
        if (Operators.CompareString(combiType, "Instantaneous Combi", false) != 0)
        {
          if (Operators.CompareString(combiType, "Storage combi boiler, primary store", false) != 0)
          {
            if (Operators.CompareString(combiType, "Storage combi boiler, secondary store", false) == 0)
            {
              string fuelBurningType = this._House.MainHeating.FuelBurningType;
              if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
              {
                if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
                {
                  num2 = 0.8f;
                  num3 = -8.3f;
                }
              }
              else
              {
                num2 = 0.7f;
                num3 = -7.2f;
              }
            }
          }
          else
          {
            string fuelBurningType = this._House.MainHeating.FuelBurningType;
            if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
            {
              if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
              {
                num2 = 0.8f;
                num3 = -8.3f;
              }
            }
            else
            {
              num2 = 0.7f;
              num3 = -7.2f;
            }
          }
        }
        else
        {
          string fuelBurningType = this._House.MainHeating.FuelBurningType;
          if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
          {
            if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
            {
              num2 = 0.9f;
              num3 = -9.2f;
            }
          }
          else
          {
            num2 = 0.8f;
            num3 = -8.5f;
          }
        }
      }
      else if (sapTableCode == 104 || sapTableCode == 108)
      {
        flag = true;
        string combiType = this._House.Water.CombiType;
        if (Operators.CompareString(combiType, "Instantaneous Combi", false) != 0)
        {
          if (Operators.CompareString(combiType, "Storage combi boiler, primary store", false) != 0)
          {
            if (Operators.CompareString(combiType, "Storage combi boiler, secondary store", false) == 0)
            {
              string fuelBurningType = this._House.MainHeating.FuelBurningType;
              if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
              {
                if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
                {
                  num2 = 0.8f;
                  num3 = -8.3f;
                }
              }
              else
              {
                num2 = 0.7f;
                num3 = -7.2f;
              }
            }
          }
          else
          {
            string fuelBurningType = this._House.MainHeating.FuelBurningType;
            if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
            {
              if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
              {
                num2 = 0.8f;
                num3 = -8.3f;
              }
            }
            else
            {
              num2 = 0.7f;
              num3 = -7.2f;
            }
          }
        }
        else
        {
          string fuelBurningType = this._House.MainHeating.FuelBurningType;
          if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
          {
            if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
            {
              num2 = 0.9f;
              num3 = -9.2f;
            }
          }
          else
          {
            num2 = 0.8f;
            num3 = -8.5f;
          }
        }
      }
      else if (sapTableCode == 124 || sapTableCode == 125 || sapTableCode == 126)
      {
        num2 = 1.1f;
        num3 = -10.6f;
      }
      else
      {
        int num4;
        switch (sapTableCode)
        {
          case (int) sbyte.MaxValue:
            flag = true;
            num2 = 1.1f;
            num3 = -10.6f;
            goto label_61;
          case 128:
            num4 = 1;
            break;
          default:
            num4 = sapTableCode == 129 ? 1 : 0;
            break;
        }
        if (num4 != 0)
        {
          string combiType = this._House.Water.CombiType;
          if (Operators.CompareString(combiType, "Instantaneous Combi", false) == 0 || Operators.CompareString(combiType, "", false) == 0)
          {
            num2 = 1f;
            num3 = -8.5f;
          }
          else
          {
            num2 = 0.9f;
            num3 = -7.2f;
          }
        }
        else if (sapTableCode == 130)
        {
          flag = true;
          string combiType = this._House.Water.CombiType;
          if (Operators.CompareString(combiType, "Instantaneous Combi", false) == 0 || Operators.CompareString(combiType, "", false) == 0)
          {
            num2 = 1f;
            num3 = -8.5f;
          }
          else
          {
            num2 = 0.9f;
            num3 = -7.2f;
          }
        }
        else if (sapTableCode >= 120 && sapTableCode <= 123)
        {
          num2 = 0.22f;
          num3 = -1.64f;
          digits = 2;
        }
      }
label_61:
      return Math.Round(!Summer ? SEDBUK2009 + (double) num2 : SEDBUK2009 + (double) num3, digits);
    }

    private double Change2009_2(double SEDBUK2009, bool Summer)
    {
      int digits = 1;
      bool flag = false;
      int sapTableCode = this._House.MainHeating2.SAPTableCode;
      int num1;
      switch (sapTableCode)
      {
        case 101:
        case 105:
        case 135:
        case 136:
        case 137:
          num1 = 1;
          break;
        default:
          num1 = sapTableCode == 138 ? 1 : 0;
          break;
      }
      float num2;
      float num3;
      if (num1 != 0)
      {
        string fuelBurningType = this._House.MainHeating2.FuelBurningType;
        if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
        {
          if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
          {
            num2 = 1f;
            num3 = -9.7f;
          }
        }
        else
        {
          num2 = 0.9f;
          num3 = -9.2f;
        }
      }
      else if (sapTableCode == 102 || sapTableCode == 106 || sapTableCode == 134 || sapTableCode == 133)
      {
        flag = true;
        string fuelBurningType = this._House.MainHeating2.FuelBurningType;
        if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
        {
          if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
          {
            num2 = 1f;
            num3 = -9.7f;
          }
        }
        else
        {
          num2 = 0.9f;
          num3 = -9.2f;
        }
      }
      else if (sapTableCode == 103 || sapTableCode == 107)
      {
        string combiType = this._House.Water.CombiType;
        if (Operators.CompareString(combiType, "Instantaneous Combi", false) != 0)
        {
          if (Operators.CompareString(combiType, "Storage combi boiler, primary store", false) != 0)
          {
            if (Operators.CompareString(combiType, "Storage combi boiler, secondary store", false) == 0)
            {
              string fuelBurningType = this._House.MainHeating2.FuelBurningType;
              if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
              {
                if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
                {
                  num2 = 0.8f;
                  num3 = -8.3f;
                }
              }
              else
              {
                num2 = 0.7f;
                num3 = -7.2f;
              }
            }
          }
          else
          {
            string fuelBurningType = this._House.MainHeating2.FuelBurningType;
            if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
            {
              if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
              {
                num2 = 0.8f;
                num3 = -8.3f;
              }
            }
            else
            {
              num2 = 0.7f;
              num3 = -7.2f;
            }
          }
        }
        else
        {
          string fuelBurningType = this._House.MainHeating2.FuelBurningType;
          if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
          {
            if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
            {
              num2 = 0.9f;
              num3 = -9.2f;
            }
          }
          else
          {
            num2 = 0.8f;
            num3 = -8.5f;
          }
        }
      }
      else if (sapTableCode == 104 || sapTableCode == 108)
      {
        flag = true;
        string combiType = this._House.Water.CombiType;
        if (Operators.CompareString(combiType, "Instantaneous Combi", false) != 0)
        {
          if (Operators.CompareString(combiType, "Storage combi boiler, primary store", false) != 0)
          {
            if (Operators.CompareString(combiType, "Storage combi boiler, secondary store", false) == 0)
            {
              string fuelBurningType = this._House.MainHeating2.FuelBurningType;
              if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
              {
                if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
                {
                  num2 = 0.8f;
                  num3 = -8.3f;
                }
              }
              else
              {
                num2 = 0.7f;
                num3 = -7.2f;
              }
            }
          }
          else
          {
            string fuelBurningType = this._House.MainHeating2.FuelBurningType;
            if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
            {
              if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
              {
                num2 = 0.8f;
                num3 = -8.3f;
              }
            }
            else
            {
              num2 = 0.7f;
              num3 = -7.2f;
            }
          }
        }
        else
        {
          string fuelBurningType = this._House.MainHeating2.FuelBurningType;
          if (Operators.CompareString(fuelBurningType, "Unknown", false) != 0 && Operators.CompareString(fuelBurningType, "On/off", false) != 0 && Operators.CompareString(fuelBurningType, "", false) != 0)
          {
            if (Operators.CompareString(fuelBurningType, "Modulation", false) == 0)
            {
              num2 = 0.9f;
              num3 = -9.2f;
            }
          }
          else
          {
            num2 = 0.8f;
            num3 = -8.5f;
          }
        }
      }
      else if (sapTableCode == 124 || sapTableCode == 125 || sapTableCode == 126)
      {
        num2 = 1.1f;
        num3 = -10.6f;
      }
      else
      {
        int num4;
        switch (sapTableCode)
        {
          case (int) sbyte.MaxValue:
            flag = true;
            num2 = 1.1f;
            num3 = -10.6f;
            goto label_61;
          case 128:
            num4 = 1;
            break;
          default:
            num4 = sapTableCode == 129 ? 1 : 0;
            break;
        }
        if (num4 != 0)
        {
          string combiType = this._House.Water.CombiType;
          if (Operators.CompareString(combiType, "Instantaneous Combi", false) == 0 || Operators.CompareString(combiType, "", false) == 0)
          {
            num2 = 1f;
            num3 = -8.5f;
          }
          else
          {
            num2 = 0.9f;
            num3 = -7.2f;
          }
        }
        else if (sapTableCode == 130)
        {
          flag = true;
          string combiType = this._House.Water.CombiType;
          if (Operators.CompareString(combiType, "Instantaneous Combi", false) == 0 || Operators.CompareString(combiType, "", false) == 0)
          {
            num2 = 1f;
            num3 = -8.5f;
          }
          else
          {
            num2 = 0.9f;
            num3 = -7.2f;
          }
        }
        else if (sapTableCode >= 120 && sapTableCode <= 123)
        {
          num2 = 0.22f;
          num3 = -1.64f;
          digits = 2;
        }
      }
label_61:
      return Math.Round(!Summer ? SEDBUK2009 + (double) num2 : SEDBUK2009 + (double) num3, digits);
    }

    private void Efficiency_Adustments(int Type, int System)
    {
      float num1;
      float num2;
      switch (Type)
      {
        case 1:
          if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0)
          {
            if (Operators.CompareString(this._House.MainHeating.SGroup, "Gas boilers and oil boilers", false) == 0)
            {
              if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "Condensing", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 2.0)
              {
                if (this._House.MainHeating.Boiler.LoadWeather && (uint) Operators.CompareString(this._House.MainHeating.Fuel, "LNG", false) > 0U)
                {
                  PCDF.HeatingControl heatingControl = SAP_Module.PCDFData.HeatingControls.Where<PCDF.HeatingControl>((Func<PCDF.HeatingControl, bool>) (b => b.Index.Equals(this._House.MainHeating.ControlCodePCDFWeather))).SingleOrDefault<PCDF.HeatingControl>();
                  if (heatingControl != null && System == 1)
                    num1 = (float) -Conversion.Val(heatingControl.EfficiencyAdjustment);
                }
                if (!this._House.MainHeating.Emitter.Contains("radiators") && this._House.Water.SystemRef != 901 & System == 1)
                {
                  if (Operators.CompareString(this._House.MainHeating.Fuel, "mains gas", false) == 0)
                  {
                    if (!this._House.Water.FGHRS.Include)
                      num1 = -3f;
                  }
                  else if (!this._House.Water.FGHRS.Include)
                    num1 = -2f;
                }
                if (System == 1)
                {
                  if (Operators.CompareString(this._House.MainHeating.Fuel, "mains gas", false) == 0)
                  {
                    string flowTemp = this._House.MainHeating.Boiler.FlowTemp;
                    if (Operators.CompareString(flowTemp, "Design flow temperature<=45°C", false) != 0)
                    {
                      if (Operators.CompareString(flowTemp, "Design flow temperature<=35°C", false) == 0)
                        num1 = -3f;
                    }
                    else
                      num1 = -2.4f;
                  }
                  else
                  {
                    string flowTemp = this._House.MainHeating.Boiler.FlowTemp;
                    if (Operators.CompareString(flowTemp, "Design flow temperature<=45°C", false) != 0)
                    {
                      if (Operators.CompareString(flowTemp, "Design flow temperature<=35°C", false) == 0)
                        num1 = -2f;
                    }
                    else
                      num1 = -1.6f;
                  }
                }
              }
              if (this._House.MainHeating.ControlCode == 2101)
              {
                if (System == 1)
                  num2 = 5f;
                else if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "MainType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 1.0)
                  num2 = 5f;
              }
              if (Operators.CompareString(this._House.MainHeating.Boiler.BILock, "No", false) == 0)
              {
                if (System == 1)
                  num2 = 5f;
                else if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "MainType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 1.0)
                  num2 = 5f;
              }
              break;
            }
            break;
          }
          switch (this._House.MainHeating.SAPTableCode)
          {
            case 102:
            case 104:
            case 106:
            case 108:
            case 113:
            case 114:
            case 121:
            case 123:
            case (int) sbyte.MaxValue:
            case 130:
              if (this._House.MainHeating.Boiler.LoadWeather)
              {
                if (Operators.CompareString(this._House.MainHeating.Fuel, "mains gas", false) == 0)
                {
                  if (System == 1 && (uint) Operators.CompareString(this._House.MainHeating.Boiler.LoadWeatherType, "Load Compensator", false) > 0U)
                    num1 = -3f;
                }
                else if (System == 1 && (uint) Operators.CompareString(this._House.MainHeating.Boiler.LoadWeatherType, "Load Compensator", false) > 0U)
                  num1 = -1.5f;
              }
              if ((uint) Operators.CompareString(this._House.MainHeating.Emitter, "Systems with radiators", false) > 0U && this._House.Water.SystemRef != 901)
              {
                num1 = !(Operators.CompareString(this._House.MainHeating.Fuel, "mains gas", false) == 0 & System == 1) ? -2f : -3f;
                break;
              }
              break;
          }
          if (this._House.MainHeating.SAPTableCode < 150)
          {
            if (System == 1)
            {
              if (this._House.MainHeating.ControlCode == 2101)
                num2 = 5f;
              if (Operators.CompareString(this._House.MainHeating.Boiler.BILock, "No", false) == 0)
                num2 = 5f;
            }
            else if (Operators.CompareString(this._House.MainHeating.InforSource, "Boiler Database", false) == 0)
            {
              if (Operators.CompareString(this._House.MainHeating.SGroup, "Gas boilers and oil boilers", false) == 0 && Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound, (System.Type) null, "MainType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 1, false))
              {
                if (this._House.MainHeating.ControlCode == 2101)
                  num2 = 5f;
                if (Operators.CompareString(this._House.MainHeating.Boiler.BILock, "No", false) == 0)
                  num2 = 5f;
              }
            }
            else
            {
              int sapTableCode = this._House.MainHeating.SAPTableCode;
              if (sapTableCode == 101 || sapTableCode == 102 || sapTableCode == 105 || sapTableCode == 106 || sapTableCode == 109 || sapTableCode == 110 || sapTableCode == 111 || sapTableCode == 114 || sapTableCode == 115 || sapTableCode == 116 || sapTableCode == 117 || sapTableCode == 119 || sapTableCode == 124 || sapTableCode == 125 || sapTableCode == 126 || sapTableCode == (int) sbyte.MaxValue || sapTableCode == 131 || sapTableCode == 132 || sapTableCode >= 133 && sapTableCode <= 141)
              {
                if (this._House.MainHeating.ControlCode == 2101)
                  num2 = 5f;
                if (Operators.CompareString(this._House.MainHeating.Boiler.BILock, "No", false) == 0)
                  num2 = 5f;
              }
            }
          }
          break;
        case 2:
          switch (this._House.MainHeating.ControlCode)
          {
            case 2301:
            case 2302:
              num1 = -10f;
              break;
            case 2303:
            case 2304:
              num1 = -5f;
              break;
          }
          break;
      }
      if (System == 1)
        this._Calc.Energy_Requirements_9a.Box206 = this._Calc.Energy_Requirements_9a.Box206 - (double) num1 - (double) num2;
      else
        this._Calc.Energy_Requirements_9a.Box216 = this._Calc.Energy_Requirements_9a.Box216 - (double) num1 - (double) num2;
    }

    private void Efficiency_Adustments2(int Type, int System)
    {
      float num1;
      float num2;
      switch (Type)
      {
        case 1:
          if (Operators.CompareString(this._House.MainHeating2.InforSource, "Boiler Database", false) == 0)
          {
            if (Operators.CompareString(this._House.MainHeating2.SGroup, "Gas boilers and oil boilers", false) == 0)
            {
              if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "Condensing", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 2.0)
              {
                if (this._House.MainHeating2.Boiler.LoadWeather)
                {
                  if (Operators.CompareString(this._House.MainHeating2.Fuel, "mains gas", false) == 0)
                  {
                    if (System == 1 && (uint) Operators.CompareString(this._House.MainHeating2.Boiler.LoadWeatherType, "Load Compensator", false) > 0U)
                    {
                      if (!this._House.Water.FGHRS.Include)
                        num1 = -3f;
                      else if (this._House.Water.SystemRef == 901)
                        num1 = -3f;
                    }
                  }
                  else if (System == 1 && (uint) Operators.CompareString(this._House.MainHeating2.Boiler.LoadWeatherType, "Load Compensator", false) > 0U)
                  {
                    if (!this._House.Water.FGHRS.Include)
                      num1 = -1.5f;
                    else if (this._House.Water.SystemRef == 901)
                      num1 = -1.5f;
                  }
                }
                if (this._House.MainHeating2.Emitter == null)
                  this._House.MainHeating2.Emitter = "";
                if (!this._House.MainHeating2.Emitter.Contains("radiators") && this._House.Water.SystemRef != 914 & this._House.Water.SystemRef != 902 & System == 1)
                {
                  if (Operators.CompareString(this._House.MainHeating2.Fuel, "mains gas", false) == 0)
                  {
                    if (!this._House.Water.FGHRS.Include)
                      num1 = -3f;
                    else if (this._House.Water.SystemRef == 901)
                      num1 = -3f;
                  }
                  else if (!this._House.Water.FGHRS.Include)
                    num1 = -2f;
                  else if (this._House.Water.SystemRef == 901)
                    num1 = -2f;
                }
                if (System == 1)
                {
                  if (Operators.CompareString(this._House.MainHeating2.Fuel, "mains gas", false) == 0)
                  {
                    string flowTemp = this._House.MainHeating2.Boiler.FlowTemp;
                    if (Operators.CompareString(flowTemp, "Design flow temperature<=45°C", false) != 0)
                    {
                      if (Operators.CompareString(flowTemp, "Design flow temperature<=35°C", false) == 0)
                        num1 = -3f;
                    }
                    else
                      num1 = -2.4f;
                  }
                  else
                  {
                    string flowTemp = this._House.MainHeating2.Boiler.FlowTemp;
                    if (Operators.CompareString(flowTemp, "Design flow temperature<=45°C", false) != 0)
                    {
                      if (Operators.CompareString(flowTemp, "Design flow temperature<=35°C", false) == 0)
                        num1 = -2f;
                    }
                    else
                      num1 = -1.6f;
                  }
                }
              }
              if (Operators.CompareString(this._House.MainHeating2.Boiler.BILock, "No", false) == 0 & this._House.MainHeating2.ControlCode != 2109)
              {
                if (System == 1)
                  num2 = 5f;
                else if (Conversion.Val(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "MainType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))) == 1.0)
                  num2 = 5f;
              }
              break;
            }
            break;
          }
          switch (this._House.MainHeating2.SAPTableCode)
          {
            case 102:
            case 104:
            case 106:
            case 108:
            case 113:
            case 114:
            case 121:
            case 123:
            case (int) sbyte.MaxValue:
            case 130:
              if (this._House.MainHeating2.Boiler.LoadWeather)
              {
                if (Operators.CompareString(this._House.MainHeating2.Fuel, "mains gas", false) == 0)
                {
                  if (System == 1 && (uint) Operators.CompareString(this._House.MainHeating2.Boiler.LoadWeatherType, "Load Compensator", false) > 0U)
                    num1 = -3f;
                }
                else if (System == 1 && (uint) Operators.CompareString(this._House.MainHeating2.Boiler.LoadWeatherType, "Load Compensator", false) > 0U)
                  num1 = -1.5f;
              }
              if ((uint) Operators.CompareString(this._House.MainHeating2.Emitter, "Systems with radiators", false) > 0U && this._House.Water.SystemRef != 914)
              {
                num1 = !(Operators.CompareString(this._House.MainHeating2.Fuel, "mains gas", false) == 0 & System == 1) ? -2f : -3f;
                break;
              }
              break;
          }
          if (this._House.MainHeating2.SAPTableCode < 150)
          {
            if (System == 1)
            {
              if (this._House.MainHeating2.ControlCode == 2101)
                num2 = 5f;
              if (Operators.CompareString(this._House.MainHeating2.Boiler.BILock, "No", false) == 0)
                num2 = 5f;
            }
            else if (Operators.CompareString(this._House.MainHeating2.InforSource, "Boiler Database", false) == 0)
            {
              if (Operators.CompareString(this._House.MainHeating2.SGroup, "Gas boilers and oil boilers", false) == 0 && Operators.ConditionalCompareObjectEqual(NewLateBinding.LateGet(this.SEDBUKFound2, (System.Type) null, "MainType", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 1, false))
              {
                if (this._House.MainHeating2.ControlCode == 2101)
                  num2 = 5f;
                if (Operators.CompareString(this._House.MainHeating2.Boiler.BILock, "No", false) == 0)
                  num2 = 5f;
              }
            }
            else
            {
              int sapTableCode = this._House.MainHeating2.SAPTableCode;
              if (sapTableCode == 101 || sapTableCode == 102 || sapTableCode == 105 || sapTableCode == 106 || sapTableCode == 109 || sapTableCode == 110 || sapTableCode == 111 || sapTableCode == 114 || sapTableCode == 115 || sapTableCode == 116 || sapTableCode == 117 || sapTableCode == 119 || sapTableCode == 124 || sapTableCode == 125 || sapTableCode == 126 || sapTableCode == (int) sbyte.MaxValue || sapTableCode == 131 || sapTableCode == 132 || sapTableCode >= 133 && sapTableCode <= 141)
              {
                if (this._House.MainHeating2.ControlCode == 2101)
                  num2 = 5f;
                if (Operators.CompareString(this._House.MainHeating2.Boiler.BILock, "No", false) == 0)
                  num2 = 5f;
              }
            }
          }
          break;
        case 2:
          switch (this._House.MainHeating2.ControlCode)
          {
            case 2301:
            case 2302:
              num1 = -10f;
              break;
            case 2303:
            case 2304:
              num1 = -5f;
              break;
          }
          break;
        case 3:
          if (System == 1)
          {
            if (string.IsNullOrEmpty(this._House.MainHeating2.Emitter))
              this._House.MainHeating2.Emitter = "";
            if (this._House.MainHeating2.Emitter.Contains("radiators"))
            {
              string compensator = this._House.MainHeating2.Compensator;
              if (Operators.CompareString(compensator, "Enhanced Load Compensator", false) == 0 || Operators.CompareString(compensator, "Weather Compensator", false) == 0)
              {
                this._Calc.Energy_Requirements_9a.Box207 *= 0.75;
                return;
              }
              this._Calc.Energy_Requirements_9a.Box207 *= 0.7;
              return;
            }
            if (!this._House.MainHeating2.Emitter.Contains("coil"))
              return;
            this._Calc.Energy_Requirements_9a.Box207 *= 0.85;
            return;
          }
          if (Operators.CompareString(this._House.Water.Cylinder.HPImmersion, "Yes", false) == 0)
            this._Calc.Energy_Requirements_9a.Box216 = 100.0 / (50.0 / this._Calc.Energy_Requirements_9a.Box216 + 0.5);
          else
            this._Calc.Energy_Requirements_9a.Box216 *= 0.7;
          return;
      }
      if (System == 1)
        this._Calc.Energy_Requirements_9a.Box207 = this._Calc.Energy_Requirements_9a.Box207 - (double) num1 - (double) num2;
      else
        this._Calc.Energy_Requirements_9a.Box216 = this._Calc.Energy_Requirements_9a.Box216 - (double) num1 - (double) num2;
    }

    private void CalcAverages()
    {
      int num1 = checked (this._House.NoofFloors - 1);
      int index1 = 0;
      double num2;
      double num3;
      double uValue;
      while (index1 <= num1)
      {
        num2 += (double) this._House.Floors[index1].Area * (double) this._House.Floors[index1].U_Value;
        num3 += (double) this._House.Floors[index1].Area;
        if ((double) this._House.Floors[index1].U_Value > uValue)
          uValue = (double) this._House.Floors[index1].U_Value;
        checked { ++index1; }
      }
      this._Add_Variable.Averages.Floor_U = num2 / num3;
      this._Add_Variable.Highest.Floor_U = uValue;
      double num4 = 0.0;
      double num5 = 0.0;
      double num6 = 0.0;
      int num7 = checked (this._House.NoofWalls - 1);
      int index2 = 0;
      while (index2 <= num7)
      {
        if (!this._House.Walls[index2].Curtain)
        {
          float num8 = (float) Math.Round(1.0 / (1.0 / (double) this._House.Walls[index2].U_Value + (double) this._House.Walls[index2].Ru), 2);
          num5 += this._Add_Variable._3._WallAreas[index2] * (double) num8;
          num6 += this._Add_Variable._3._WallAreas[index2];
          if ((double) num8 > num4)
            num4 = (double) num8;
        }
        checked { ++index2; }
      }
      if (num6 != 0.0)
      {
        this._Add_Variable.Averages.Wall_U = num5 / num6;
        this._Add_Variable.Highest.Wall_U = num4;
      }
      double num9 = 0.0;
      double num10 = 0.0;
      double num11 = 0.0;
      int num12 = checked (this._House.NoofPWalls - 1);
      int index3 = 0;
      while (index3 <= num12)
      {
        num10 += (double) this._House.PWalls[index3].Area * (double) this._House.PWalls[index3].U_Value;
        num11 += (double) this._House.PWalls[index3].Area;
        if ((double) this._House.PWalls[index3].U_Value > num9)
          num9 = (double) this._House.PWalls[index3].U_Value;
        checked { ++index3; }
      }
      if (num11 != 0.0)
      {
        this._Add_Variable.Averages.Party_U = num10 / num11;
        this._Add_Variable.Highest.Party_U = num9;
      }
      double num13 = 0.0;
      double num14 = 0.0;
      double num15 = 0.0;
      int num16 = checked (this._House.NoofWalls - 1);
      int index4 = 0;
      while (index4 <= num16)
      {
        if (this._House.Walls[index4].Curtain)
        {
          num14 += this._Add_Variable._3._WallAreas[index4] * (double) this._House.Walls[index4].U_Value;
          num15 += this._Add_Variable._3._WallAreas[index4];
          if ((double) this._House.Walls[index4].U_Value > num13)
            num13 = (double) this._House.Walls[index4].U_Value;
        }
        checked { ++index4; }
      }
      if (num15 == 0.0)
        ;
      double num17 = 0.0;
      double num18 = 0.0;
      double num19 = 0.0;
      int num20 = checked (this._House.NoofRoofs - 1);
      int index5 = 0;
      while (index5 <= num20)
      {
        float num21 = (float) Math.Round(1.0 / (1.0 / (double) this._House.Roofs[index5].U_Value + (double) this._House.Roofs[index5].Ru), 2);
        num18 += this._Add_Variable._3._RoofAreas[index5] * (double) num21;
        num19 += this._Add_Variable._3._RoofAreas[index5];
        if ((double) num21 > num17)
          num17 = (double) num21;
        checked { ++index5; }
      }
      if (num19 != 0.0)
      {
        this._Add_Variable.Averages.Roof_U = num18 / num19;
        this._Add_Variable.Highest.Roof_U = num17;
      }
      else
      {
        this._Add_Variable.Averages.Roof_U = 0.0;
        this._Add_Variable.Highest.Roof_U = 0.0;
      }
      double num22 = 0.0;
      double num23 = 0.0;
      double num24 = 0.0;
      int[] numArray = new int[3];
      int num25 = checked (this._House.NoofWindows - 1);
      int index6 = 0;
      double num26;
      while (index6 <= num25)
      {
        num23 += (double) this._House.Windows[index6].Area * (double) this._House.Windows[index6].U * (double) this._House.Windows[index6].Count;
        num24 += (double) this._House.Windows[index6].Area * (double) this._House.Windows[index6].Count;
        if (!this._House.Windows[index6].GlazingType.Contains("Single"))
          num26 += (double) this._House.Windows[index6].Area * (double) this._House.Windows[index6].Count;
        if (this._House.Windows[index6].GlazingType.Contains("Secondary"))
        {
          // ISSUE: variable of a reference type
          int& local;
          // ISSUE: explicit reference operation
          int num27 = checked (^(local = ref numArray[0]) + 1 * this._House.Windows[index6].Count);
          local = num27;
        }
        if (this._House.Windows[index6].GlazingType.Contains("double"))
        {
          // ISSUE: variable of a reference type
          int& local;
          // ISSUE: explicit reference operation
          int num28 = checked (^(local = ref numArray[1]) + 1 * this._House.Windows[index6].Count);
          local = num28;
        }
        if (this._House.Windows[index6].GlazingType.Contains("triple"))
        {
          // ISSUE: variable of a reference type
          int& local;
          // ISSUE: explicit reference operation
          int num29 = checked (^(local = ref numArray[2]) + 1 * this._House.Windows[index6].Count);
          local = num29;
        }
        if ((double) this._House.Windows[index6].U > num22)
          num22 = (double) this._House.Windows[index6].U;
        checked { ++index6; }
      }
      int num30 = checked (this._House.NoofRoofLights - 1);
      int index7 = 0;
      while (index7 <= num30)
      {
        num23 += (double) this._House.RoofLights[index7].Area * (double) this._House.RoofLights[index7].U * (double) this._House.RoofLights[index7].Count;
        num24 += (double) this._House.RoofLights[index7].Area * (double) this._House.RoofLights[index7].Count;
        if (!this._House.RoofLights[index7].GlazingType.Contains("Single"))
          num26 += (double) this._House.RoofLights[index7].Area * (double) this._House.RoofLights[index7].Count;
        if (this._House.RoofLights[index7].GlazingType.Contains("Secondary"))
        {
          // ISSUE: variable of a reference type
          int& local;
          // ISSUE: explicit reference operation
          int num31 = checked (^(local = ref numArray[0]) + 1 * this._House.RoofLights[index7].Count);
          local = num31;
        }
        if (this._House.RoofLights[index7].GlazingType.Contains("double"))
        {
          // ISSUE: variable of a reference type
          int& local;
          // ISSUE: explicit reference operation
          int num32 = checked (^(local = ref numArray[1]) + 1 * this._House.RoofLights[index7].Count);
          local = num32;
        }
        if (this._House.RoofLights[index7].GlazingType.Contains("triple"))
        {
          // ISSUE: variable of a reference type
          int& local;
          // ISSUE: explicit reference operation
          int num33 = checked (^(local = ref numArray[2]) + 1 * this._House.RoofLights[index7].Count);
          local = num33;
        }
        if ((double) this._House.RoofLights[index7].U > num22)
          num22 = (double) this._House.RoofLights[index7].U;
        checked { ++index7; }
      }
      this._Add_Variable.Averages.Multiple_GlazedP = num26 / num24;
      int num34 = checked (this._House.NoofDoors - 1);
      int index8 = 0;
      while (index8 <= num34)
      {
        num23 += (double) this._House.Doors[index8].Area * (double) this._House.Doors[index8].U * (double) this._House.Doors[index8].Count;
        num24 += (double) this._House.Doors[index8].Area * (double) this._House.Doors[index8].Count;
        if ((double) this._House.Doors[index8].U > num22)
          num22 = (double) this._House.Doors[index8].U;
        checked { ++index8; }
      }
      int num35 = checked (this._House.NoofWalls - 1);
      int index9 = 0;
      while (index9 <= num35)
      {
        if (this._House.Walls[index9].Curtain)
        {
          num23 += this._Add_Variable._3._WallAreas[index9] * (double) this._House.Walls[index9].U_Value;
          num24 += this._Add_Variable._3._WallAreas[index9];
          if ((double) this._House.Walls[index9].U_Value > num22)
            num22 = (double) this._House.Walls[index9].U_Value;
        }
        checked { ++index9; }
      }
      this._Add_Variable.Averages.Window_U = num23 / num24;
      this._Add_Variable.Highest.Window_U = num22;
      int index10 = 0;
      int num36;
      do
      {
        if ((uint) numArray[index10] > 0U)
          checked { ++num36; }
        checked { ++index10; }
      }
      while (index10 <= 2);
      switch (num36)
      {
        case 0:
          this._Add_Variable.Averages.Description = "Single glazed";
          break;
        case 1:
          if (this._Add_Variable.Averages.Multiple_GlazedP == 1.0)
          {
            if (this._Add_Variable.Averages.Window_U >= 1.7)
            {
              if ((uint) numArray[0] > 0U)
                this._Add_Variable.Averages.Description = "Full secondary glazing";
              if ((uint) numArray[1] > 0U)
                this._Add_Variable.Averages.Description = "Fully double glazed";
              if ((uint) numArray[2] <= 0U)
                break;
              this._Add_Variable.Averages.Description = "Fully triple glazed";
              break;
            }
            this._Add_Variable.Averages.Description = "High performance glazing";
            break;
          }
          if ((uint) numArray[0] > 0U)
            this._Add_Variable.Averages.Description = "Partial secondary glazing";
          if ((uint) numArray[1] > 0U)
            this._Add_Variable.Averages.Description = "Partial double glazing";
          if ((uint) numArray[2] > 0U)
            this._Add_Variable.Averages.Description = "Partial triple glazing";
          break;
        default:
          double multipleGlazedP = this._Add_Variable.Averages.Multiple_GlazedP;
          if (multipleGlazedP >= 0.01 && multipleGlazedP <= 0.3)
          {
            this._Add_Variable.Averages.Description = "Some multiple glazing";
            break;
          }
          if (multipleGlazedP >= 0.3 && multipleGlazedP <= 0.79999)
          {
            this._Add_Variable.Averages.Description = "Partial multiple glazing";
            break;
          }
          if (multipleGlazedP >= 0.8 && multipleGlazedP <= 0.99999)
          {
            this._Add_Variable.Averages.Description = "Mostly multiple glazing";
            break;
          }
          if (multipleGlazedP != 1.0)
            break;
          if (this._Add_Variable.Averages.Window_U >= 1.7)
          {
            this._Add_Variable.Averages.Description = "Multiple glazing throughout";
            break;
          }
          this._Add_Variable.Averages.Description = "High performance glazing";
          break;
      }
    }

    public void CalcAssessmentLZC()
    {
      this.CalcAssessmentLZCPlease = false;
      AssessmentLZC_2012 assessmentLzC2012 = this._Calc.AssessmentLZC2012;
      assessmentLzC2012.ZC1 = SAP_Module.CalcualtionDER2012.Calculation.CO2_Emissions_12a.Box273 != 0.0 ? this._Calc.CO2_Emissions_12a.Box273 : this._Calc.CO2_Emissions_12b.Box384;
      double num1 = 207.8 * Math.Pow(this._Calc.Dimensions.Box4 * this._Calc.Water_heating.Box42, 0.4714);
      Months months = new Months();
      months.M1 = num1 * (1.0 + 0.157 * Math.Cos(-13.0 * Math.PI / 100.0)) * this._Calc.HeatLoss.Box41_m.M1 / 365.0;
      months.M2 = num1 * (1.0 + 0.157 * Math.Cos(11.0 * Math.PI / 300.0)) * this._Calc.HeatLoss.Box41_m.M2 / 365.0;
      months.M3 = num1 * (1.0 + 0.157 * Math.Cos(61.0 * Math.PI / 300.0)) * this._Calc.HeatLoss.Box41_m.M3 / 365.0;
      months.M4 = num1 * (1.0 + 0.157 * Math.Cos(37.0 * Math.PI / 100.0)) * this._Calc.HeatLoss.Box41_m.M4 / 365.0;
      months.M5 = num1 * (1.0 + 0.157 * Math.Cos(161.0 * Math.PI / 300.0)) * this._Calc.HeatLoss.Box41_m.M5 / 365.0;
      months.M6 = num1 * (1.0 + 0.157 * Math.Cos(211.0 * Math.PI / 300.0)) * this._Calc.HeatLoss.Box41_m.M6 / 365.0;
      months.M7 = num1 * (1.0 + 0.157 * Math.Cos(87.0 * Math.PI / 100.0)) * this._Calc.HeatLoss.Box41_m.M7 / 365.0;
      months.M8 = num1 * (1.0 + 0.157 * Math.Cos(311.0 * Math.PI / 300.0)) * this._Calc.HeatLoss.Box41_m.M8 / 365.0;
      months.M9 = num1 * (1.0 + 0.157 * Math.Cos(361.0 * Math.PI / 300.0)) * this._Calc.HeatLoss.Box41_m.M9 / 365.0;
      months.M10 = num1 * (1.0 + 0.157 * Math.Cos(137.0 * Math.PI / 100.0)) * this._Calc.HeatLoss.Box41_m.M10 / 365.0;
      months.M11 = num1 * (1.0 + 0.157 * Math.Cos(461.0 * Math.PI / 300.0)) * this._Calc.HeatLoss.Box41_m.M11 / 365.0;
      months.M12 = num1 * (1.0 + 0.157 * Math.Cos(511.0 * Math.PI / 300.0)) * this._Calc.HeatLoss.Box41_m.M12 / 365.0;
      double num2 = months.M1 + months.M2 + months.M3 + months.M4 + months.M5 + months.M6 + months.M7 + months.M8 + months.M9 + months.M10 + months.M11 + months.M12;
      assessmentLzC2012.ZC2 = num2 * 0.517 / this._Calc.Dimensions.Box4;
      assessmentLzC2012.ZC3 = (119.0 + 24.0 * this._Calc.Water_heating.Box42) / this._Calc.Dimensions.Box4;
      assessmentLzC2012.ZC4 = assessmentLzC2012.ZC1 + assessmentLzC2012.ZC2 + assessmentLzC2012.ZC3;
      assessmentLzC2012.ZC5 = this._Box373_LessZero / this._Calc.Dimensions.Box4;
      assessmentLzC2012.ZC6 = 0.0;
      assessmentLzC2012.ZC7 = -assessmentLzC2012.ZC6 * 0.529;
      assessmentLzC2012.ZC8 = assessmentLzC2012.ZC4 + assessmentLzC2012.ZC5 + assessmentLzC2012.ZC7;
      SAPInput.CodeAssessmentLZC2012 = this._Calc.AssessmentLZC2012;
    }

    private class N4
    {
      public float PSR { get; set; }

      public int N24_16 { get; set; }

      public int N24_9 { get; set; }

      public int N16_9 { get; set; }
    }

    public class RadiationValues
    {
      public float kWh;
      public float InclinedRad;
      public float fm;
    }

    public enum Horizontal_Flux
    {
      Dec = 21, // 0x00000015
      Jan = 26, // 0x0000001A
      Nov = 33, // 0x00000021
      Feb = 54, // 0x00000036
      Oct = 68, // 0x00000044
      Mar = 94, // 0x0000005E
      Sep = 116, // 0x00000074
      Apr = 150, // 0x00000096
      Aug = 164, // 0x000000A4
      May = 190, // 0x000000BE
      Jul = 194, // 0x000000C2
      Jun = 201, // 0x000000C9
    }

    private class N8
    {
      public float PSR { get; set; }

      public float _24 { get; set; }

      public float _16 { get; set; }

      public float _11 { get; set; }

      public float Variable { get; set; }
    }

    private class M1
    {
      public string Terrain { get; set; }

      public float Height { get; set; }

      public float CF { get; set; }
    }
  }
}
